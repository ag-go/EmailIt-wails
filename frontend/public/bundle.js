
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert$1(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space$3() {
        return text(' ');
    }
    function empty$1() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        select.selectedIndex = -1; // no option should be selected
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }
    class HtmlTag {
        constructor(is_svg = false) {
            this.is_svg = false;
            this.is_svg = is_svg;
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                if (this.is_svg)
                    this.e = svg_element(target.nodeName);
                else
                    this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert$1(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.49.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert$1(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/components/SimpleAutocomplete.svelte generated by Svelte v3.49.0 */

    const { Object: Object_1$2, console: console_1$3 } = globals;
    const file$o = "src/components/SimpleAutocomplete.svelte";

    const get_no_results_slot_changes$1 = dirty => ({
    	noResultsText: dirty[0] & /*noResultsText*/ 2048
    });

    const get_no_results_slot_context$1 = ctx => ({ noResultsText: /*noResultsText*/ ctx[11] });

    const get_create_slot_changes$1 = dirty => ({
    	createText: dirty[0] & /*createText*/ 8192
    });

    const get_create_slot_context$1 = ctx => ({ createText: /*createText*/ ctx[13] });

    const get_loading_slot_changes$1 = dirty => ({
    	loadingText: dirty[0] & /*loadingText*/ 4096
    });

    const get_loading_slot_context$1 = ctx => ({ loadingText: /*loadingText*/ ctx[12] });

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[107] = list[i];
    	child_ctx[109] = i;
    	return child_ctx;
    }

    const get_item_slot_changes$1 = dirty => ({
    	item: dirty[1] & /*filteredListItems*/ 1,
    	label: dirty[1] & /*filteredListItems*/ 1
    });

    const get_item_slot_context$1 = ctx => ({
    	item: /*listItem*/ ctx[107].item,
    	label: /*listItem*/ ctx[107].highlighted
    	? /*listItem*/ ctx[107].highlighted.label
    	: /*listItem*/ ctx[107].label
    });

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[110] = list[i];
    	return child_ctx;
    }

    const get_tag_slot_changes$1 = dirty => ({
    	label: dirty[0] & /*selectedItem*/ 2,
    	item: dirty[0] & /*selectedItem*/ 2
    });

    const get_tag_slot_context$1 = ctx => ({
    	label: /*safeLabelFunction*/ ctx[35](/*tagItem*/ ctx[110]),
    	item: /*tagItem*/ ctx[110],
    	unselectItem: /*unselectItem*/ ctx[42]
    });

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[109] = list[i];
    	return child_ctx;
    }

    // (869:39) 
    function create_if_block_11$1(ctx) {
    	let each_1_anchor;
    	let each_value_2 = /*selectedItem*/ ctx[1];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*valueFunction, selectedItem*/ 18 | dirty[1] & /*safeLabelFunction*/ 16) {
    				each_value_2 = /*selectedItem*/ ctx[1];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$1.name,
    		type: "if",
    		source: "(869:39) ",
    		ctx
    	});

    	return block;
    }

    // (867:4) {#if !multiple && value}
    function create_if_block_10$1(ctx) {
    	let option;
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(/*text*/ ctx[3]);
    			option.__value = /*value*/ ctx[2];
    			option.value = option.__value;
    			option.selected = true;
    			attr_dev(option, "class", "svelte-xmtx21");
    			add_location(option, file$o, 867, 6, 21268);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*text*/ 8) set_data_dev(t, /*text*/ ctx[3]);

    			if (dirty[0] & /*value, valueFunction, selectedItem*/ 22) {
    				prop_dev(option, "__value", /*value*/ ctx[2]);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(867:4) {#if !multiple && value}",
    		ctx
    	});

    	return block;
    }

    // (870:6) {#each selectedItem as i}
    function create_each_block_2$2(ctx) {
    	let option;
    	let t0_value = /*safeLabelFunction*/ ctx[35](/*i*/ ctx[109]) + "";
    	let t0;
    	let t1;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t0 = text(t0_value);
    			t1 = space$3();
    			option.__value = option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[109], true);
    			option.value = option.__value;
    			option.selected = true;
    			attr_dev(option, "class", "svelte-xmtx21");
    			add_location(option, file$o, 870, 8, 21389);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t0);
    			append_dev(option, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[35](/*i*/ ctx[109]) + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*valueFunction, selectedItem*/ 18 && option_value_value !== (option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[109], true))) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(870:6) {#each selectedItem as i}",
    		ctx
    	});

    	return block;
    }

    // (878:4) {#if multiple && selectedItem}
    function create_if_block_9$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*selectedItem*/ ctx[1];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem*/ 2 | dirty[1] & /*unselectItem, safeLabelFunction*/ 2064 | dirty[2] & /*$$scope*/ 2048) {
    				each_value_1 = /*selectedItem*/ ctx[1];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$2.name,
    		type: "if",
    		source: "(878:4) {#if multiple && selectedItem}",
    		ctx
    	});

    	return block;
    }

    // (885:9)            
    function fallback_block_4$1(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*safeLabelFunction*/ ctx[35](/*tagItem*/ ctx[110]) + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[76](/*tagItem*/ ctx[110]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space$3();
    			span1 = element("span");
    			t2 = space$3();
    			attr_dev(span0, "class", "tag svelte-xmtx21");
    			add_location(span0, file$o, 886, 12, 21822);
    			attr_dev(span1, "class", "tag is-delete svelte-xmtx21");
    			add_location(span1, file$o, 887, 12, 21888);
    			attr_dev(div, "class", "tags has-addons svelte-xmtx21");
    			add_location(div, file$o, 885, 10, 21780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(div, t1);
    			append_dev(div, span1);
    			insert_dev(target, t2, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span1, "click", prevent_default(click_handler), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[35](/*tagItem*/ ctx[110]) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_4$1.name,
    		type: "fallback",
    		source: "(885:9)            ",
    		ctx
    	});

    	return block;
    }

    // (879:6) {#each selectedItem as tagItem}
    function create_each_block_1$3(ctx) {
    	let current;
    	const tag_slot_template = /*#slots*/ ctx[74].tag;
    	const tag_slot = create_slot(tag_slot_template, ctx, /*$$scope*/ ctx[73], get_tag_slot_context$1);
    	const tag_slot_or_fallback = tag_slot || fallback_block_4$1(ctx);

    	const block = {
    		c: function create() {
    			if (tag_slot_or_fallback) tag_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (tag_slot_or_fallback) {
    				tag_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (tag_slot) {
    				if (tag_slot.p && (!current || dirty[0] & /*selectedItem*/ 2 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						tag_slot,
    						tag_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(tag_slot_template, /*$$scope*/ ctx[73], dirty, get_tag_slot_changes$1),
    						get_tag_slot_context$1
    					);
    				}
    			} else {
    				if (tag_slot_or_fallback && tag_slot_or_fallback.p && (!current || dirty[0] & /*selectedItem*/ 2)) {
    					tag_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tag_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tag_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (tag_slot_or_fallback) tag_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(879:6) {#each selectedItem as tagItem}",
    		ctx
    	});

    	return block;
    }

    // (916:4) {#if clearable}
    function create_if_block_8$2(ctx) {
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "✖";
    			attr_dev(span, "class", "autocomplete-clear-button svelte-xmtx21");
    			add_location(span, file$o, 916, 6, 22759);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*clear*/ ctx[46], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$2.name,
    		type: "if",
    		source: "(916:4) {#if clearable}",
    		ctx
    	});

    	return block;
    }

    // (973:28) 
    function create_if_block_7$2(ctx) {
    	let div;
    	let current;
    	const no_results_slot_template = /*#slots*/ ctx[74]["no-results"];
    	const no_results_slot = create_slot(no_results_slot_template, ctx, /*$$scope*/ ctx[73], get_no_results_slot_context$1);
    	const no_results_slot_or_fallback = no_results_slot || fallback_block_3$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (no_results_slot_or_fallback) no_results_slot_or_fallback.c();
    			attr_dev(div, "class", "autocomplete-list-item-no-results svelte-xmtx21");
    			add_location(div, file$o, 973, 6, 24817);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (no_results_slot_or_fallback) {
    				no_results_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (no_results_slot) {
    				if (no_results_slot.p && (!current || dirty[0] & /*noResultsText*/ 2048 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						no_results_slot,
    						no_results_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(no_results_slot_template, /*$$scope*/ ctx[73], dirty, get_no_results_slot_changes$1),
    						get_no_results_slot_context$1
    					);
    				}
    			} else {
    				if (no_results_slot_or_fallback && no_results_slot_or_fallback.p && (!current || dirty[0] & /*noResultsText*/ 2048)) {
    					no_results_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(no_results_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(no_results_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (no_results_slot_or_fallback) no_results_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(973:28) ",
    		ctx
    	});

    	return block;
    }

    // (969:21) 
    function create_if_block_6$3(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const create_slot_template = /*#slots*/ ctx[74].create;
    	const create_slot_1 = create_slot(create_slot_template, ctx, /*$$scope*/ ctx[73], get_create_slot_context$1);
    	const create_slot_or_fallback = create_slot_1 || fallback_block_2$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (create_slot_or_fallback) create_slot_or_fallback.c();
    			attr_dev(div, "class", "autocomplete-list-item-create svelte-xmtx21");
    			add_location(div, file$o, 969, 6, 24642);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (create_slot_or_fallback) {
    				create_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*selectItem*/ ctx[36], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (create_slot_1) {
    				if (create_slot_1.p && (!current || dirty[0] & /*createText*/ 8192 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						create_slot_1,
    						create_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(create_slot_template, /*$$scope*/ ctx[73], dirty, get_create_slot_changes$1),
    						get_create_slot_context$1
    					);
    				}
    			} else {
    				if (create_slot_or_fallback && create_slot_or_fallback.p && (!current || dirty[0] & /*createText*/ 8192)) {
    					create_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(create_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(create_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (create_slot_or_fallback) create_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(969:21) ",
    		ctx
    	});

    	return block;
    }

    // (965:37) 
    function create_if_block_5$4(ctx) {
    	let div;
    	let current;
    	const loading_slot_template = /*#slots*/ ctx[74].loading;
    	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[73], get_loading_slot_context$1);
    	const loading_slot_or_fallback = loading_slot || fallback_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (loading_slot_or_fallback) loading_slot_or_fallback.c();
    			attr_dev(div, "class", "autocomplete-list-item-loading svelte-xmtx21");
    			add_location(div, file$o, 965, 6, 24492);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (loading_slot_or_fallback) {
    				loading_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (loading_slot) {
    				if (loading_slot.p && (!current || dirty[0] & /*loadingText*/ 4096 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						loading_slot,
    						loading_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[73], dirty, get_loading_slot_changes$1),
    						get_loading_slot_context$1
    					);
    				}
    			} else {
    				if (loading_slot_or_fallback && loading_slot_or_fallback.p && (!current || dirty[0] & /*loadingText*/ 4096)) {
    					loading_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loading_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loading_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (loading_slot_or_fallback) loading_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(965:37) ",
    		ctx
    	});

    	return block;
    }

    // (928:4) {#if filteredListItems && filteredListItems.length > 0}
    function create_if_block$h(ctx) {
    	let t;
    	let if_block_anchor;
    	let current;
    	let each_value = /*filteredListItems*/ ctx[31];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[31].length > /*maxItemsToShowInList*/ ctx[5] && create_if_block_1$8(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$3();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*highlightIndex, maxItemsToShowInList*/ 1073741856 | dirty[1] & /*isConfirmed, filteredListItems, onListItemClick*/ 131137 | dirty[2] & /*$$scope*/ 2048) {
    				each_value = /*filteredListItems*/ ctx[31];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t.parentNode, t);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[31].length > /*maxItemsToShowInList*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$8(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(928:4) {#if filteredListItems && filteredListItems.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (975:48) {noResultsText}
    function fallback_block_3$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*noResultsText*/ ctx[11]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*noResultsText*/ 2048) set_data_dev(t, /*noResultsText*/ ctx[11]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_3$1.name,
    		type: "fallback",
    		source: "(975:48) {noResultsText}",
    		ctx
    	});

    	return block;
    }

    // (971:41) {createText}
    function fallback_block_2$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*createText*/ ctx[13]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*createText*/ 8192) set_data_dev(t, /*createText*/ ctx[13]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_2$1.name,
    		type: "fallback",
    		source: "(971:41) {createText}",
    		ctx
    	});

    	return block;
    }

    // (967:43) {loadingText}
    function fallback_block_1$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*loadingText*/ ctx[12]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*loadingText*/ 4096) set_data_dev(t, /*loadingText*/ ctx[12]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1$1.name,
    		type: "fallback",
    		source: "(967:43) {loadingText}",
    		ctx
    	});

    	return block;
    }

    // (930:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}
    function create_if_block_2$6(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*listItem*/ ctx[107] && create_if_block_3$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*listItem*/ ctx[107]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[1] & /*filteredListItems*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(930:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}",
    		ctx
    	});

    	return block;
    }

    // (931:10) {#if listItem}
    function create_if_block_3$5(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const item_slot_template = /*#slots*/ ctx[74].item;
    	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[73], get_item_slot_context$1);
    	const item_slot_or_fallback = item_slot || fallback_block$1(ctx);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[79](/*listItem*/ ctx[107]);
    	}

    	function pointerenter_handler() {
    		return /*pointerenter_handler*/ ctx[80](/*i*/ ctx[109]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (item_slot_or_fallback) item_slot_or_fallback.c();

    			attr_dev(div, "class", div_class_value = "autocomplete-list-item " + (/*i*/ ctx[109] === /*highlightIndex*/ ctx[30]
    			? 'selected'
    			: '') + " svelte-xmtx21");

    			toggle_class(div, "confirmed", /*isConfirmed*/ ctx[48](/*listItem*/ ctx[107].item));
    			add_location(div, file$o, 931, 12, 23354);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (item_slot_or_fallback) {
    				item_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", click_handler_1, false, false, false),
    					listen_dev(div, "pointerenter", pointerenter_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (item_slot) {
    				if (item_slot.p && (!current || dirty[1] & /*filteredListItems*/ 1 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						item_slot,
    						item_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(item_slot_template, /*$$scope*/ ctx[73], dirty, get_item_slot_changes$1),
    						get_item_slot_context$1
    					);
    				}
    			} else {
    				if (item_slot_or_fallback && item_slot_or_fallback.p && (!current || dirty[1] & /*filteredListItems*/ 1)) {
    					item_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}

    			if (!current || dirty[0] & /*highlightIndex*/ 1073741824 && div_class_value !== (div_class_value = "autocomplete-list-item " + (/*i*/ ctx[109] === /*highlightIndex*/ ctx[30]
    			? 'selected'
    			: '') + " svelte-xmtx21")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty[0] & /*highlightIndex*/ 1073741824 | dirty[1] & /*isConfirmed, filteredListItems*/ 131073) {
    				toggle_class(div, "confirmed", /*isConfirmed*/ ctx[48](/*listItem*/ ctx[107].item));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(931:10) {#if listItem}",
    		ctx
    	});

    	return block;
    }

    // (951:16) {:else}
    function create_else_block$8(ctx) {
    	let html_tag;
    	let raw_value = /*listItem*/ ctx[107].label + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag(false);
    			html_anchor = empty$1();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*filteredListItems*/ 1 && raw_value !== (raw_value = /*listItem*/ ctx[107].label + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(951:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (949:16) {#if listItem.highlighted}
    function create_if_block_4$4(ctx) {
    	let html_tag;
    	let raw_value = /*listItem*/ ctx[107].highlighted.label + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag(false);
    			html_anchor = empty$1();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*filteredListItems*/ 1 && raw_value !== (raw_value = /*listItem*/ ctx[107].highlighted.label + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(949:16) {#if listItem.highlighted}",
    		ctx
    	});

    	return block;
    }

    // (948:15)                  
    function fallback_block$1(ctx) {
    	let if_block_anchor;

    	function select_block_type_2(ctx, dirty) {
    		if (/*listItem*/ ctx[107].highlighted) return create_if_block_4$4;
    		return create_else_block$8;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(948:15)                  ",
    		ctx
    	});

    	return block;
    }

    // (929:6) {#each filteredListItems as listItem, i}
    function create_each_block$c(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*listItem*/ ctx[107] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[109] < /*maxItemsToShowInList*/ ctx[5]) && create_if_block_2$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*listItem*/ ctx[107] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[109] < /*maxItemsToShowInList*/ ctx[5])) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*maxItemsToShowInList*/ 32 | dirty[1] & /*filteredListItems*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(929:6) {#each filteredListItems as listItem, i}",
    		ctx
    	});

    	return block;
    }

    // (960:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
    function create_if_block_1$8(ctx) {
    	let div;
    	let t0;
    	let t1_value = /*filteredListItems*/ ctx[31].length - /*maxItemsToShowInList*/ ctx[5] + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("...");
    			t1 = text(t1_value);
    			t2 = text(" results not shown");
    			attr_dev(div, "class", "autocomplete-list-item-no-results svelte-xmtx21");
    			add_location(div, file$o, 960, 8, 24292);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*maxItemsToShowInList*/ 32 | dirty[1] & /*filteredListItems*/ 1 && t1_value !== (t1_value = /*filteredListItems*/ ctx[31].length - /*maxItemsToShowInList*/ ctx[5] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(960:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let div2;
    	let select;
    	let t0;
    	let div0;
    	let t1;
    	let input_1;
    	let input_1_class_value;
    	let input_1_id_value;
    	let input_1_autocomplete_value;
    	let input_1_readonly_value;
    	let t2;
    	let t3;
    	let div1;
    	let current_block_type_index;
    	let if_block3;
    	let div1_class_value;
    	let div2_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (!/*multiple*/ ctx[6] && /*value*/ ctx[2]) return create_if_block_10$1;
    		if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) return create_if_block_11$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type && current_block_type(ctx);
    	let if_block1 = /*multiple*/ ctx[6] && /*selectedItem*/ ctx[1] && create_if_block_9$2(ctx);
    	let if_block2 = /*clearable*/ ctx[32] && create_if_block_8$2(ctx);
    	const if_block_creators = [create_if_block$h, create_if_block_5$4, create_if_block_6$3, create_if_block_7$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*filteredListItems*/ ctx[31] && /*filteredListItems*/ ctx[31].length > 0) return 0;
    		if (/*loading*/ ctx[29] && /*loadingText*/ ctx[12]) return 1;
    		if (/*create*/ ctx[7]) return 2;
    		if (/*noResultsText*/ ctx[11]) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			select = element("select");
    			if (if_block0) if_block0.c();
    			t0 = space$3();
    			div0 = element("div");
    			if (if_block1) if_block1.c();
    			t1 = space$3();
    			input_1 = element("input");
    			t2 = space$3();
    			if (if_block2) if_block2.c();
    			t3 = space$3();
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			attr_dev(select, "name", /*selectName*/ ctx[19]);
    			attr_dev(select, "id", /*selectId*/ ctx[20]);
    			attr_dev(select, "class", "svelte-xmtx21");
    			if (/*value*/ ctx[2] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[75].call(select));
    			add_location(select, file$o, 865, 2, 21162);
    			attr_dev(input_1, "type", "text");

    			attr_dev(input_1, "class", input_1_class_value = "" + ((/*inputClassName*/ ctx[16]
    			? /*inputClassName*/ ctx[16]
    			: '') + " input autocomplete-input" + " svelte-xmtx21"));

    			attr_dev(input_1, "id", input_1_id_value = /*inputId*/ ctx[17] ? /*inputId*/ ctx[17] : "");
    			attr_dev(input_1, "autocomplete", input_1_autocomplete_value = /*html5autocomplete*/ ctx[22] ? "on" : "off");
    			attr_dev(input_1, "placeholder", /*placeholder*/ ctx[14]);
    			attr_dev(input_1, "name", /*name*/ ctx[18]);
    			input_1.disabled = /*disabled*/ ctx[25];
    			attr_dev(input_1, "title", /*title*/ ctx[21]);
    			input_1.readOnly = input_1_readonly_value = /*readonly*/ ctx[23] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1];
    			set_style(input_1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			set_style(input_1, "color", /*theme*/ ctx[26].textColor);
    			set_style(input_1, "border-color", /*theme*/ ctx[26].borderColor);
    			add_location(input_1, file$o, 895, 4, 22076);
    			attr_dev(div0, "class", "input-container svelte-xmtx21");
    			add_location(div0, file$o, 876, 2, 21527);

    			attr_dev(div1, "class", div1_class_value = "" + ((/*dropdownClassName*/ ctx[24]
    			? /*dropdownClassName*/ ctx[24]
    			: '') + " autocomplete-list " + (/*showList*/ ctx[33] ? '' : 'hidden') + " is-fullwidth" + " svelte-xmtx21"));

    			set_style(div1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			set_style(div1, "color", /*theme*/ ctx[26].textColor);
    			set_style(div1, "border-color", /*theme*/ ctx[26].borderColor);
    			add_location(div1, file$o, 919, 2, 22853);

    			attr_dev(div2, "class", div2_class_value = "" + ((/*className*/ ctx[15] ? /*className*/ ctx[15] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
    			? 'hide-arrow'
    			: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[34] + " svelte-xmtx21"));

    			toggle_class(div2, "show-clear", /*clearable*/ ctx[32]);
    			toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[29]);
    			add_location(div2, file$o, 858, 0, 20901);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, select);
    			if (if_block0) if_block0.m(select, null);
    			select_option(select, /*value*/ ctx[2]);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			append_dev(div0, input_1);
    			/*input_1_binding*/ ctx[77](input_1);
    			set_input_value(input_1, /*text*/ ctx[3]);
    			append_dev(div0, t2);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div2, t3);
    			append_dev(div2, div1);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			/*div1_binding*/ ctx[81](div1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*onDocumentClick*/ ctx[38], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[75]),
    					action_destroyer(/*multipleAction*/ ctx[47].call(null, select)),
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[78]),
    					listen_dev(input_1, "input", /*onInput*/ ctx[41], false, false, false),
    					listen_dev(input_1, "focus", /*onFocusInternal*/ ctx[44], false, false, false),
    					listen_dev(input_1, "blur", /*onBlurInternal*/ ctx[45], false, false, false),
    					listen_dev(input_1, "keydown", /*onKeyDown*/ ctx[39], false, false, false),
    					listen_dev(input_1, "click", /*onInputClick*/ ctx[43], false, false, false),
    					listen_dev(input_1, "keypress", /*onKeyPress*/ ctx[40], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if (if_block0) if_block0.d(1);
    				if_block0 = current_block_type && current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(select, null);
    				}
    			}

    			if (!current || dirty[0] & /*selectName*/ 524288) {
    				attr_dev(select, "name", /*selectName*/ ctx[19]);
    			}

    			if (!current || dirty[0] & /*selectId*/ 1048576) {
    				attr_dev(select, "id", /*selectId*/ ctx[20]);
    			}

    			if (dirty[0] & /*value, valueFunction, selectedItem*/ 22) {
    				select_option(select, /*value*/ ctx[2]);
    			}

    			if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*multiple, selectedItem*/ 66) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*inputClassName*/ 65536 && input_1_class_value !== (input_1_class_value = "" + ((/*inputClassName*/ ctx[16]
    			? /*inputClassName*/ ctx[16]
    			: '') + " input autocomplete-input" + " svelte-xmtx21"))) {
    				attr_dev(input_1, "class", input_1_class_value);
    			}

    			if (!current || dirty[0] & /*inputId*/ 131072 && input_1_id_value !== (input_1_id_value = /*inputId*/ ctx[17] ? /*inputId*/ ctx[17] : "")) {
    				attr_dev(input_1, "id", input_1_id_value);
    			}

    			if (!current || dirty[0] & /*html5autocomplete*/ 4194304 && input_1_autocomplete_value !== (input_1_autocomplete_value = /*html5autocomplete*/ ctx[22] ? "on" : "off")) {
    				attr_dev(input_1, "autocomplete", input_1_autocomplete_value);
    			}

    			if (!current || dirty[0] & /*placeholder*/ 16384) {
    				attr_dev(input_1, "placeholder", /*placeholder*/ ctx[14]);
    			}

    			if (!current || dirty[0] & /*name*/ 262144) {
    				attr_dev(input_1, "name", /*name*/ ctx[18]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 33554432) {
    				prop_dev(input_1, "disabled", /*disabled*/ ctx[25]);
    			}

    			if (!current || dirty[0] & /*title*/ 2097152) {
    				attr_dev(input_1, "title", /*title*/ ctx[21]);
    			}

    			if (!current || dirty[0] & /*readonly, lock, selectedItem*/ 8388866 && input_1_readonly_value !== (input_1_readonly_value = /*readonly*/ ctx[23] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1])) {
    				prop_dev(input_1, "readOnly", input_1_readonly_value);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(input_1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(input_1, "color", /*theme*/ ctx[26].textColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(input_1, "border-color", /*theme*/ ctx[26].borderColor);
    			}

    			if (dirty[0] & /*text*/ 8 && input_1.value !== /*text*/ ctx[3]) {
    				set_input_value(input_1, /*text*/ ctx[3]);
    			}

    			if (/*clearable*/ ctx[32]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_8$2(ctx);
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block3) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block3 = if_blocks[current_block_type_index];

    					if (!if_block3) {
    						if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block3.c();
    					} else {
    						if_block3.p(ctx, dirty);
    					}

    					transition_in(if_block3, 1);
    					if_block3.m(div1, null);
    				} else {
    					if_block3 = null;
    				}
    			}

    			if (!current || dirty[0] & /*dropdownClassName*/ 16777216 | dirty[1] & /*showList*/ 4 && div1_class_value !== (div1_class_value = "" + ((/*dropdownClassName*/ ctx[24]
    			? /*dropdownClassName*/ ctx[24]
    			: '') + " autocomplete-list " + (/*showList*/ ctx[33] ? '' : 'hidden') + " is-fullwidth" + " svelte-xmtx21"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(div1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(div1, "color", /*theme*/ ctx[26].textColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(div1, "border-color", /*theme*/ ctx[26].borderColor);
    			}

    			if (!current || dirty[0] & /*className, hideArrow, items, multiple*/ 33345 && div2_class_value !== (div2_class_value = "" + ((/*className*/ ctx[15] ? /*className*/ ctx[15] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
    			? 'hide-arrow'
    			: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[34] + " svelte-xmtx21"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (dirty[0] & /*className, hideArrow, items, multiple*/ 33345 | dirty[1] & /*clearable*/ 2) {
    				toggle_class(div2, "show-clear", /*clearable*/ ctx[32]);
    			}

    			if (dirty[0] & /*className, hideArrow, items, multiple, showLoadingIndicator, loading*/ 536905281) {
    				toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[29]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);

    			if (if_block0) {
    				if_block0.d();
    			}

    			if (if_block1) if_block1.d();
    			/*input_1_binding*/ ctx[77](null);
    			if (if_block2) if_block2.d();

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			/*div1_binding*/ ctx[81](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function safeStringFunction$1(theFunction, argument) {
    	if (typeof theFunction !== "function") {
    		console.error("Not a function: " + theFunction + ", argument: " + argument);
    	}

    	let originalResult;

    	try {
    		originalResult = theFunction(argument);
    	} catch(error) {
    		console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
    	}

    	let result = originalResult;

    	if (result === undefined || result === null) {
    		result = "";
    	}

    	if (typeof result !== "string") {
    		result = result.toString();
    	}

    	return result;
    }

    function numberOfMatches$1(listItem, searchWords) {
    	if (!listItem) {
    		return 0;
    	}

    	const itemKeywords = listItem.keywords;
    	let matches = 0;

    	searchWords.forEach(searchWord => {
    		if (itemKeywords.includes(searchWord)) {
    			matches++;
    		}
    	});

    	return matches;
    }

    function removeAccents$1(str) {
    	return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let showList;
    	let clearable;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimpleAutocomplete', slots, ['tag','item','loading','create','no-results']);
    	let { items = [] } = $$props;
    	let { searchFunction = false } = $$props;
    	let { labelFieldName = undefined } = $$props;
    	let { keywordsFieldName = labelFieldName } = $$props;
    	let { valueFieldName = undefined } = $$props;

    	let { labelFunction = function (item) {
    		if (item === undefined || item === null) {
    			return "";
    		}

    		return labelFieldName ? item[labelFieldName] : item;
    	} } = $$props;

    	let { keywordsFunction = function (item) {
    		if (item === undefined || item === null) {
    			return "";
    		}

    		return keywordsFieldName
    		? item[keywordsFieldName]
    		: labelFunction(item);
    	} } = $$props;

    	let { valueFunction = function (item, force_single = false) {
    		if (item === undefined || item === null) {
    			return item;
    		}

    		if (!multiple || force_single) {
    			return valueFieldName ? item[valueFieldName] : item;
    		} else {
    			return item.map(i => valueFieldName ? i[valueFieldName] : i);
    		}
    	} } = $$props;

    	let { keywordsCleanFunction = function (keywords) {
    		return keywords;
    	} } = $$props;

    	let { textCleanFunction = function (userEnteredText) {
    		return userEnteredText;
    	} } = $$props;

    	let { beforeChange = function (oldSelectedItem, newSelectedItem) {
    		return true;
    	} } = $$props;

    	let { onChange = function (newSelectedItem) {
    		
    	} } = $$props;

    	let { onFocus = function () {
    		
    	} } = $$props;

    	let { onBlur = function () {
    		
    	} } = $$props;

    	let { onCreate = function (text) {
    		if (debug) {
    			console.log("onCreate: " + text);
    		}
    	} } = $$props;

    	let { selectFirstIfEmpty = false } = $$props;
    	let { minCharactersToSearch = 1 } = $$props;
    	let { maxItemsToShowInList = 0 } = $$props;
    	let { multiple = false } = $$props;
    	let { create = false } = $$props;
    	let { ignoreAccents = true } = $$props;
    	let { matchAllKeywords = true } = $$props;
    	let { sortByMatchedKeywords = false } = $$props;
    	let { lock = false } = $$props;
    	let { delay = 0 } = $$props;
    	let { localFiltering = true } = $$props;
    	let { hideArrow = false } = $$props;
    	let { showClear = false } = $$props;
    	let { showLoadingIndicator = false } = $$props;
    	let { noResultsText = "No results found" } = $$props;
    	let { loadingText = "Loading results..." } = $$props;
    	let { createText = "Not found, add anyway?" } = $$props;
    	let { placeholder = undefined } = $$props;
    	let { className = undefined } = $$props;
    	let { inputClassName = undefined } = $$props;
    	let { inputId = undefined } = $$props;
    	let { name = undefined } = $$props;
    	let { selectName = undefined } = $$props;
    	let { selectId = undefined } = $$props;
    	let { title = undefined } = $$props;
    	let { html5autocomplete = undefined } = $$props;
    	let { readonly = undefined } = $$props;
    	let { dropdownClassName = undefined } = $$props;
    	let { disabled = false } = $$props;
    	let { debug = false } = $$props;
    	let { selectedItem = undefined } = $$props;
    	let { value = undefined } = $$props;
    	let { theme = undefined } = $$props;

    	// --- Internal State ----
    	const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

    	// HTML elements
    	let input;

    	let list;

    	// UI state
    	let opened = false;

    	let loading = false;
    	let highlightIndex = -1;
    	let { text } = $$props;
    	let filteredTextLength = 0;

    	// view model
    	let filteredListItems;

    	let listItems = [];

    	// requests/responses counters
    	let lastRequestId = 0;

    	let lastResponseId = 0;

    	// other state
    	let inputDelayTimeout;

    	// -- Reactivity --
    	function onSelectedItemChanged() {
    		$$invalidate(2, value = valueFunction(selectedItem));
    		$$invalidate(3, text = !multiple ? safeLabelFunction(selectedItem) : "");
    		onChange(selectedItem);
    	}

    	function safeLabelFunction(item) {
    		// console.log("labelFunction: " + labelFunction);
    		// console.log("safeLabelFunction, item: " + item);
    		return safeStringFunction$1(labelFunction, item);
    	}

    	function safeKeywordsFunction(item) {
    		// console.log("safeKeywordsFunction");
    		const keywords = safeStringFunction$1(keywordsFunction, item);

    		let result = safeStringFunction$1(keywordsCleanFunction, keywords);
    		result = result.toLowerCase().trim();

    		if (ignoreAccents) {
    			result = removeAccents$1(result);
    		}

    		if (debug) {
    			console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
    		}

    		return result;
    	}

    	function prepareListItems() {
    		let timerId;

    		if (debug) {
    			timerId = `Autocomplete prepare list ${inputId ? `(id: ${inputId})` : ""})`;
    			console.time(timerId);
    			console.log("Prepare items to search");
    			console.log("items: " + JSON.stringify(items));
    		}

    		if (!Array.isArray(items)) {
    			console.warn("Autocomplete items / search function did not return array but", items);
    			$$invalidate(0, items = []);
    		}

    		const length = items ? items.length : 0;
    		listItems = new Array(length);

    		if (length > 0) {
    			items.forEach((item, i) => {
    				const listItem = getListItem(item);

    				if (listItem == undefined) {
    					console.log("Undefined item for: ", item);
    				}

    				listItems[i] = listItem;
    			});
    		}

    		if (debug) {
    			console.log(listItems.length + " items to search");
    			console.timeEnd(timerId);
    		}
    	}

    	function getListItem(item) {
    		return {
    			// keywords representation of the item
    			keywords: safeKeywordsFunction(item),
    			// item label
    			label: safeLabelFunction(item),
    			// store reference to the origial item
    			item
    		};
    	}

    	function prepareUserEnteredText(userEnteredText) {
    		if (userEnteredText === undefined || userEnteredText === null) {
    			return "";
    		}

    		const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
    		$$invalidate(72, filteredTextLength = textFiltered.length);

    		if (minCharactersToSearch > 1) {
    			if (filteredTextLength < minCharactersToSearch) {
    				return "";
    			}
    		}

    		const cleanUserEnteredText = textCleanFunction(textFiltered);
    		const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();

    		if (debug) {
    			console.log("Change user entered text '" + userEnteredText + "' into '" + textFilteredLowerCase + "'");
    		}

    		return textFilteredLowerCase;
    	}

    	async function search() {
    		let timerId;

    		if (debug) {
    			timerId = `Autocomplete search ${inputId ? `(id: ${inputId})` : ""})`;
    			console.time(timerId);
    			console.log("Searching user entered text: '" + text + "'");
    		}

    		const textFiltered = prepareUserEnteredText(text);

    		if (textFiltered === "") {
    			if (searchFunction) {
    				// we will need to rerun the search
    				$$invalidate(0, items = []);

    				if (debug) {
    					console.log("User entered text is empty clear list of items");
    				}
    			} else {
    				$$invalidate(31, filteredListItems = listItems);

    				if (debug) {
    					console.log("User entered text is empty set the list of items to all items");
    				}
    			}

    			closeIfMinCharsToSearchReached();

    			if (debug) {
    				console.timeEnd(timerId);
    			}

    			return;
    		}

    		if (!searchFunction) {
    			processListItems(textFiltered);
    		} else // external search which provides items
    		{
    			lastRequestId = lastRequestId + 1;
    			const currentRequestId = lastRequestId;
    			$$invalidate(29, loading = true);

    			const AsyncGenerator = (async function* () {
    				
    			}).constructor;

    			// searchFunction is a generator
    			if (searchFunction instanceof AsyncGenerator) {
    				for await (const chunk of searchFunction(textFiltered)) {
    					// a chunk of an old response: throw it away
    					if (currentRequestId < lastResponseId) {
    						return false;
    					}

    					// a chunk for a new response: reset the item list
    					if (currentRequestId > lastResponseId) {
    						$$invalidate(0, items = []);
    					}

    					lastResponseId = currentRequestId;
    					$$invalidate(0, items = [...items, ...chunk]);
    					processListItems(textFiltered);
    				}
    			} else // searchFunction is a regular function
    			{
    				let result = await searchFunction(textFiltered);

    				// If a response to a newer request has been received
    				// while responses to this request were being loaded,
    				// then we can just throw away this outdated results.
    				if (currentRequestId < lastResponseId) {
    					return false;
    				}

    				lastResponseId = currentRequestId;
    				$$invalidate(0, items = result);
    				processListItems(textFiltered);
    			}

    			$$invalidate(29, loading = false);
    		}

    		if (debug) {
    			console.timeEnd(timerId);
    			console.log("Search found " + filteredListItems.length + " items");
    		}
    	}

    	function processListItems(textFiltered) {
    		prepareListItems();

    		// local search
    		let tempfilteredListItems;

    		if (localFiltering) {
    			var searchWords = textFiltered.split(" ");

    			if (ignoreAccents) {
    				searchWords = searchWords.map(word => removeAccents$1(word));
    			}

    			tempfilteredListItems = listItems.filter(listItem => {
    				var matches = numberOfMatches$1(listItem, searchWords);

    				if (matchAllKeywords) {
    					return matches >= searchWords.length;
    				} else {
    					return matches > 0;
    				}
    			});

    			if (sortByMatchedKeywords) {
    				tempfilteredListItems = tempfilteredListItems.sort((obj1, obj2) => {
    					return numberOfMatches$1(obj2, searchWords) - numberOfMatches$1(obj1, searchWords);
    				});
    			}
    		} else {
    			tempfilteredListItems = listItems;
    		}

    		const hlfilter = highlightFilter(textFiltered, ["label"]);
    		const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);
    		$$invalidate(31, filteredListItems = filteredListItemsHighlighted);
    		closeIfMinCharsToSearchReached();
    		return true;
    	}

    	// $: text, search();
    	function selectListItem(listItem) {
    		if (debug) {
    			console.log("selectListItem");
    		}

    		if ("undefined" === typeof listItem) {
    			// allow undefined items if create is enabled
    			if (create) {
    				onCreate(text);
    				return true;
    			}

    			if (debug) {
    				console.log(`listItem is undefined. Can not select.`);
    			}

    			return false;
    		}

    		const newSelectedItem = listItem.item;

    		if (beforeChange(selectedItem, newSelectedItem)) {
    			// simple selection
    			if (!multiple) {
    				$$invalidate(1, selectedItem = newSelectedItem);
    			} else // first selection of multiple ones
    			if (!selectedItem) {
    				$$invalidate(1, selectedItem = [newSelectedItem]);
    			} else // selecting something already selected => unselect it
    			if (selectedItem.includes(newSelectedItem)) {
    				$$invalidate(1, selectedItem = selectedItem.filter(i => i !== newSelectedItem));
    			} else // adds the element to the selection
    			{
    				$$invalidate(1, selectedItem = [...selectedItem, newSelectedItem]);
    			}
    		}

    		return true;
    	}

    	function selectItem() {
    		if (debug) {
    			console.log("selectItem");
    		}

    		const listItem = filteredListItems[highlightIndex];

    		if (selectListItem(listItem)) {
    			close();

    			if (multiple) {
    				input.focus();
    			}
    		}
    	}

    	function up() {
    		if (debug) {
    			console.log("up");
    		}

    		open();
    		if (highlightIndex > 0) $$invalidate(30, highlightIndex--, highlightIndex);
    		highlight();
    	}

    	function down() {
    		if (debug) {
    			console.log("down");
    		}

    		open();
    		if (highlightIndex < filteredListItems.length - 1) $$invalidate(30, highlightIndex++, highlightIndex);
    		highlight();
    	}

    	function highlight() {
    		if (debug) {
    			console.log("highlight");
    		}

    		const query = ".selected";

    		if (debug) {
    			console.log("Seaching DOM element: " + query + " in " + list);
    		}

    		const el = list && list.querySelector(query);

    		if (el) {
    			if (typeof el.scrollIntoViewIfNeeded === "function") {
    				if (debug) {
    					console.log("Scrolling selected item into view");
    				}

    				el.scrollIntoViewIfNeeded();
    			} else {
    				if (debug) {
    					console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
    				}
    			}
    		} else {
    			if (debug) {
    				console.warn("Selected item not found to scroll into view");
    			}
    		}
    	}

    	function onListItemClick(listItem) {
    		if (debug) {
    			console.log("onListItemClick");
    		}

    		if (selectListItem(listItem)) {
    			close();

    			if (multiple) {
    				input.focus();
    			}
    		}
    	}

    	function onDocumentClick(e) {
    		if (debug) {
    			console.log("onDocumentClick: " + JSON.stringify(e.target));
    		}

    		if (e.target.closest("." + uniqueId)) {
    			if (debug) {
    				console.log("onDocumentClick inside");
    			}

    			// resetListToAllItemsAndOpen();
    			highlight();
    		} else {
    			if (debug) {
    				console.log("onDocumentClick outside");
    			}

    			close();
    		}
    	}

    	function onKeyDown(e) {
    		if (debug) {
    			console.log("onKeyDown");
    		}

    		let key = e.key;
    		if (key === "Tab" && e.shiftKey) key = "ShiftTab";

    		const fnmap = {
    			Tab: opened ? down.bind(this) : null,
    			ShiftTab: opened ? up.bind(this) : null,
    			ArrowDown: down.bind(this),
    			Escape: onEsc.bind(this),
    			Backspace: multiple && selectedItem && selectedItem.length && !text
    			? onBackspace.bind(this)
    			: null
    		};

    		const fn = fnmap[key];

    		if (typeof fn === "function") {
    			e.preventDefault();
    			fn(e);
    		}
    	}

    	function onKeyPress(e) {
    		if (debug) {
    			console.log("onKeyPress");
    		}

    		if (e.key === "Enter" && opened) {
    			e.preventDefault();
    			onEnter();
    		}
    	}

    	function onEnter() {
    		selectItem();
    	}

    	function onInput(e) {
    		if (debug) {
    			console.log("onInput");
    		}

    		$$invalidate(3, text = e.target.value);

    		if (inputDelayTimeout) {
    			clearTimeout(inputDelayTimeout);
    		}

    		if (delay) {
    			inputDelayTimeout = setTimeout(processInput, delay);
    		} else {
    			processInput();
    		}
    	}

    	function unselectItem(tag) {
    		if (debug) {
    			console.log("unselectItem", tag);
    		}

    		$$invalidate(1, selectedItem = selectedItem.filter(i => i !== tag));
    		input.focus();
    	}

    	function processInput() {
    		if (search()) {
    			$$invalidate(30, highlightIndex = 0);
    			open();
    		}
    	}

    	function onInputClick() {
    		if (debug) {
    			console.log("onInputClick");
    		}

    		resetListToAllItemsAndOpen();
    	}

    	function onEsc(e) {
    		if (debug) {
    			console.log("onEsc");
    		}

    		//if (text) return clear();
    		e.stopPropagation();

    		if (opened) {
    			input.focus();
    			close();
    		}
    	}

    	function onBackspace(e) {
    		if (debug) {
    			console.log("onBackspace");
    		}

    		unselectItem(selectedItem[selectedItem.length - 1]);
    	}

    	function onFocusInternal() {
    		if (debug) {
    			console.log("onFocus");
    		}

    		onFocus();
    		resetListToAllItemsAndOpen();
    	}

    	function onBlurInternal() {
    		if (debug) {
    			console.log("onBlur");
    		}

    		onBlur();
    	}

    	function resetListToAllItemsAndOpen() {
    		if (debug) {
    			console.log("resetListToAllItemsAndOpen");
    		}

    		if (!text) {
    			$$invalidate(31, filteredListItems = listItems);
    		} else // When an async component is initialized, the item list
    		// must be loaded when the input is focused.
    		if (!listItems.length && selectedItem && searchFunction) {
    			search();
    		}

    		open();

    		// find selected item
    		if (selectedItem) {
    			if (debug) {
    				console.log("Searching currently selected item: " + JSON.stringify(selectedItem));
    			}

    			for (let i = 0; i < listItems.length; i++) {
    				const listItem = listItems[i];

    				if ("undefined" === typeof listItem) {
    					if (debug) {
    						console.log(`listItem ${i} is undefined. Skipping.`);
    					}

    					continue;
    				}

    				if (debug) {
    					console.log("Item " + i + ": " + JSON.stringify(listItem));
    				}

    				if (selectedItem == listItem.item) {
    					$$invalidate(30, highlightIndex = i);

    					if (debug) {
    						console.log("Found selected item: " + i + ": " + JSON.stringify(listItem));
    					}

    					highlight();
    					break;
    				}
    			}
    		}
    	}

    	function open() {
    		if (debug) {
    			console.log("open");
    		}

    		// check if the search text has more than the min chars required
    		if (isMinCharsToSearchReached()) {
    			return;
    		}

    		$$invalidate(71, opened = true);
    	}

    	function close() {
    		if (debug) {
    			console.log("close");
    		}

    		$$invalidate(71, opened = false);
    		$$invalidate(29, loading = false);

    		if (!text && selectFirstIfEmpty) {
    			highlightFilter = 0;
    			selectItem();
    		}
    	}

    	function isMinCharsToSearchReached() {
    		return minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch;
    	}

    	function closeIfMinCharsToSearchReached() {
    		if (isMinCharsToSearchReached()) {
    			close();
    		}
    	}

    	function clear() {
    		if (debug) {
    			console.log("clear");
    		}

    		$$invalidate(3, text = "");
    		$$invalidate(1, selectedItem = undefined);

    		setTimeout(() => {
    			input.focus();
    			close();
    		});
    	}

    	function highlightFilter(keywords, fields) {
    		keywords = keywords.split(/\s+/g);

    		return item => {
    			const newItem = Object.assign({ highlighted: {} }, item);

    			if (fields) {
    				fields.forEach(field => {
    					if (newItem[field] && !newItem.highlighted[field]) {
    						newItem.highlighted[field] = newItem[field];
    					}

    					if (newItem.highlighted[field]) {
    						keywords.forEach(keyword => {
    							const reg = new RegExp("(" + keyword + ")", "ig");
    							newItem.highlighted[field] = newItem.highlighted[field].replace(reg, "<b>$1</b>");
    						});
    					}
    				});
    			}

    			return newItem;
    		};
    	}

    	// workaround for
    	// ValidationError: 'multiple' attribute cannot be dynamic if select uses two-way binding
    	function multipleAction(node) {
    		node.multiple = multiple;
    	}

    	function isConfirmed(listItem) {
    		if (!selectedItem) {
    			return false;
    		}

    		if (multiple) {
    			return selectedItem.includes(listItem);
    		} else {
    			return listItem == selectedItem;
    		}
    	}

    	const writable_props = [
    		'items',
    		'searchFunction',
    		'labelFieldName',
    		'keywordsFieldName',
    		'valueFieldName',
    		'labelFunction',
    		'keywordsFunction',
    		'valueFunction',
    		'keywordsCleanFunction',
    		'textCleanFunction',
    		'beforeChange',
    		'onChange',
    		'onFocus',
    		'onBlur',
    		'onCreate',
    		'selectFirstIfEmpty',
    		'minCharactersToSearch',
    		'maxItemsToShowInList',
    		'multiple',
    		'create',
    		'ignoreAccents',
    		'matchAllKeywords',
    		'sortByMatchedKeywords',
    		'lock',
    		'delay',
    		'localFiltering',
    		'hideArrow',
    		'showClear',
    		'showLoadingIndicator',
    		'noResultsText',
    		'loadingText',
    		'createText',
    		'placeholder',
    		'className',
    		'inputClassName',
    		'inputId',
    		'name',
    		'selectName',
    		'selectId',
    		'title',
    		'html5autocomplete',
    		'readonly',
    		'dropdownClassName',
    		'disabled',
    		'debug',
    		'selectedItem',
    		'value',
    		'theme',
    		'text'
    	];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<SimpleAutocomplete> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		value = select_value(this);
    		$$invalidate(2, value);
    		$$invalidate(4, valueFunction);
    		$$invalidate(1, selectedItem);
    	}

    	const click_handler = tagItem => {
    		unselectItem(tagItem);
    	};

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(27, input);
    		});
    	}

    	function input_1_input_handler() {
    		text = this.value;
    		$$invalidate(3, text);
    	}

    	const click_handler_1 = listItem => onListItemClick(listItem);

    	const pointerenter_handler = i => {
    		$$invalidate(30, highlightIndex = i);
    	};

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			list = $$value;
    			$$invalidate(28, list);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('searchFunction' in $$props) $$invalidate(49, searchFunction = $$props.searchFunction);
    		if ('labelFieldName' in $$props) $$invalidate(50, labelFieldName = $$props.labelFieldName);
    		if ('keywordsFieldName' in $$props) $$invalidate(51, keywordsFieldName = $$props.keywordsFieldName);
    		if ('valueFieldName' in $$props) $$invalidate(52, valueFieldName = $$props.valueFieldName);
    		if ('labelFunction' in $$props) $$invalidate(53, labelFunction = $$props.labelFunction);
    		if ('keywordsFunction' in $$props) $$invalidate(54, keywordsFunction = $$props.keywordsFunction);
    		if ('valueFunction' in $$props) $$invalidate(4, valueFunction = $$props.valueFunction);
    		if ('keywordsCleanFunction' in $$props) $$invalidate(55, keywordsCleanFunction = $$props.keywordsCleanFunction);
    		if ('textCleanFunction' in $$props) $$invalidate(56, textCleanFunction = $$props.textCleanFunction);
    		if ('beforeChange' in $$props) $$invalidate(57, beforeChange = $$props.beforeChange);
    		if ('onChange' in $$props) $$invalidate(58, onChange = $$props.onChange);
    		if ('onFocus' in $$props) $$invalidate(59, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(60, onBlur = $$props.onBlur);
    		if ('onCreate' in $$props) $$invalidate(61, onCreate = $$props.onCreate);
    		if ('selectFirstIfEmpty' in $$props) $$invalidate(62, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
    		if ('minCharactersToSearch' in $$props) $$invalidate(63, minCharactersToSearch = $$props.minCharactersToSearch);
    		if ('maxItemsToShowInList' in $$props) $$invalidate(5, maxItemsToShowInList = $$props.maxItemsToShowInList);
    		if ('multiple' in $$props) $$invalidate(6, multiple = $$props.multiple);
    		if ('create' in $$props) $$invalidate(7, create = $$props.create);
    		if ('ignoreAccents' in $$props) $$invalidate(64, ignoreAccents = $$props.ignoreAccents);
    		if ('matchAllKeywords' in $$props) $$invalidate(65, matchAllKeywords = $$props.matchAllKeywords);
    		if ('sortByMatchedKeywords' in $$props) $$invalidate(66, sortByMatchedKeywords = $$props.sortByMatchedKeywords);
    		if ('lock' in $$props) $$invalidate(8, lock = $$props.lock);
    		if ('delay' in $$props) $$invalidate(67, delay = $$props.delay);
    		if ('localFiltering' in $$props) $$invalidate(68, localFiltering = $$props.localFiltering);
    		if ('hideArrow' in $$props) $$invalidate(9, hideArrow = $$props.hideArrow);
    		if ('showClear' in $$props) $$invalidate(69, showClear = $$props.showClear);
    		if ('showLoadingIndicator' in $$props) $$invalidate(10, showLoadingIndicator = $$props.showLoadingIndicator);
    		if ('noResultsText' in $$props) $$invalidate(11, noResultsText = $$props.noResultsText);
    		if ('loadingText' in $$props) $$invalidate(12, loadingText = $$props.loadingText);
    		if ('createText' in $$props) $$invalidate(13, createText = $$props.createText);
    		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$props.placeholder);
    		if ('className' in $$props) $$invalidate(15, className = $$props.className);
    		if ('inputClassName' in $$props) $$invalidate(16, inputClassName = $$props.inputClassName);
    		if ('inputId' in $$props) $$invalidate(17, inputId = $$props.inputId);
    		if ('name' in $$props) $$invalidate(18, name = $$props.name);
    		if ('selectName' in $$props) $$invalidate(19, selectName = $$props.selectName);
    		if ('selectId' in $$props) $$invalidate(20, selectId = $$props.selectId);
    		if ('title' in $$props) $$invalidate(21, title = $$props.title);
    		if ('html5autocomplete' in $$props) $$invalidate(22, html5autocomplete = $$props.html5autocomplete);
    		if ('readonly' in $$props) $$invalidate(23, readonly = $$props.readonly);
    		if ('dropdownClassName' in $$props) $$invalidate(24, dropdownClassName = $$props.dropdownClassName);
    		if ('disabled' in $$props) $$invalidate(25, disabled = $$props.disabled);
    		if ('debug' in $$props) $$invalidate(70, debug = $$props.debug);
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('theme' in $$props) $$invalidate(26, theme = $$props.theme);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('$$scope' in $$props) $$invalidate(73, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		items,
    		searchFunction,
    		labelFieldName,
    		keywordsFieldName,
    		valueFieldName,
    		labelFunction,
    		keywordsFunction,
    		valueFunction,
    		keywordsCleanFunction,
    		textCleanFunction,
    		beforeChange,
    		onChange,
    		onFocus,
    		onBlur,
    		onCreate,
    		selectFirstIfEmpty,
    		minCharactersToSearch,
    		maxItemsToShowInList,
    		multiple,
    		create,
    		ignoreAccents,
    		matchAllKeywords,
    		sortByMatchedKeywords,
    		lock,
    		delay,
    		localFiltering,
    		hideArrow,
    		showClear,
    		showLoadingIndicator,
    		noResultsText,
    		loadingText,
    		createText,
    		placeholder,
    		className,
    		inputClassName,
    		inputId,
    		name,
    		selectName,
    		selectId,
    		title,
    		html5autocomplete,
    		readonly,
    		dropdownClassName,
    		disabled,
    		debug,
    		selectedItem,
    		value,
    		theme,
    		uniqueId,
    		input,
    		list,
    		opened,
    		loading,
    		highlightIndex,
    		text,
    		filteredTextLength,
    		filteredListItems,
    		listItems,
    		lastRequestId,
    		lastResponseId,
    		inputDelayTimeout,
    		onSelectedItemChanged,
    		safeStringFunction: safeStringFunction$1,
    		safeLabelFunction,
    		safeKeywordsFunction,
    		prepareListItems,
    		getListItem,
    		prepareUserEnteredText,
    		numberOfMatches: numberOfMatches$1,
    		search,
    		processListItems,
    		selectListItem,
    		selectItem,
    		up,
    		down,
    		highlight,
    		onListItemClick,
    		onDocumentClick,
    		onKeyDown,
    		onKeyPress,
    		onEnter,
    		onInput,
    		unselectItem,
    		processInput,
    		onInputClick,
    		onEsc,
    		onBackspace,
    		onFocusInternal,
    		onBlurInternal,
    		resetListToAllItemsAndOpen,
    		open,
    		close,
    		isMinCharsToSearchReached,
    		closeIfMinCharsToSearchReached,
    		clear,
    		highlightFilter,
    		removeAccents: removeAccents$1,
    		multipleAction,
    		isConfirmed,
    		clearable,
    		showList
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('searchFunction' in $$props) $$invalidate(49, searchFunction = $$props.searchFunction);
    		if ('labelFieldName' in $$props) $$invalidate(50, labelFieldName = $$props.labelFieldName);
    		if ('keywordsFieldName' in $$props) $$invalidate(51, keywordsFieldName = $$props.keywordsFieldName);
    		if ('valueFieldName' in $$props) $$invalidate(52, valueFieldName = $$props.valueFieldName);
    		if ('labelFunction' in $$props) $$invalidate(53, labelFunction = $$props.labelFunction);
    		if ('keywordsFunction' in $$props) $$invalidate(54, keywordsFunction = $$props.keywordsFunction);
    		if ('valueFunction' in $$props) $$invalidate(4, valueFunction = $$props.valueFunction);
    		if ('keywordsCleanFunction' in $$props) $$invalidate(55, keywordsCleanFunction = $$props.keywordsCleanFunction);
    		if ('textCleanFunction' in $$props) $$invalidate(56, textCleanFunction = $$props.textCleanFunction);
    		if ('beforeChange' in $$props) $$invalidate(57, beforeChange = $$props.beforeChange);
    		if ('onChange' in $$props) $$invalidate(58, onChange = $$props.onChange);
    		if ('onFocus' in $$props) $$invalidate(59, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(60, onBlur = $$props.onBlur);
    		if ('onCreate' in $$props) $$invalidate(61, onCreate = $$props.onCreate);
    		if ('selectFirstIfEmpty' in $$props) $$invalidate(62, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
    		if ('minCharactersToSearch' in $$props) $$invalidate(63, minCharactersToSearch = $$props.minCharactersToSearch);
    		if ('maxItemsToShowInList' in $$props) $$invalidate(5, maxItemsToShowInList = $$props.maxItemsToShowInList);
    		if ('multiple' in $$props) $$invalidate(6, multiple = $$props.multiple);
    		if ('create' in $$props) $$invalidate(7, create = $$props.create);
    		if ('ignoreAccents' in $$props) $$invalidate(64, ignoreAccents = $$props.ignoreAccents);
    		if ('matchAllKeywords' in $$props) $$invalidate(65, matchAllKeywords = $$props.matchAllKeywords);
    		if ('sortByMatchedKeywords' in $$props) $$invalidate(66, sortByMatchedKeywords = $$props.sortByMatchedKeywords);
    		if ('lock' in $$props) $$invalidate(8, lock = $$props.lock);
    		if ('delay' in $$props) $$invalidate(67, delay = $$props.delay);
    		if ('localFiltering' in $$props) $$invalidate(68, localFiltering = $$props.localFiltering);
    		if ('hideArrow' in $$props) $$invalidate(9, hideArrow = $$props.hideArrow);
    		if ('showClear' in $$props) $$invalidate(69, showClear = $$props.showClear);
    		if ('showLoadingIndicator' in $$props) $$invalidate(10, showLoadingIndicator = $$props.showLoadingIndicator);
    		if ('noResultsText' in $$props) $$invalidate(11, noResultsText = $$props.noResultsText);
    		if ('loadingText' in $$props) $$invalidate(12, loadingText = $$props.loadingText);
    		if ('createText' in $$props) $$invalidate(13, createText = $$props.createText);
    		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$props.placeholder);
    		if ('className' in $$props) $$invalidate(15, className = $$props.className);
    		if ('inputClassName' in $$props) $$invalidate(16, inputClassName = $$props.inputClassName);
    		if ('inputId' in $$props) $$invalidate(17, inputId = $$props.inputId);
    		if ('name' in $$props) $$invalidate(18, name = $$props.name);
    		if ('selectName' in $$props) $$invalidate(19, selectName = $$props.selectName);
    		if ('selectId' in $$props) $$invalidate(20, selectId = $$props.selectId);
    		if ('title' in $$props) $$invalidate(21, title = $$props.title);
    		if ('html5autocomplete' in $$props) $$invalidate(22, html5autocomplete = $$props.html5autocomplete);
    		if ('readonly' in $$props) $$invalidate(23, readonly = $$props.readonly);
    		if ('dropdownClassName' in $$props) $$invalidate(24, dropdownClassName = $$props.dropdownClassName);
    		if ('disabled' in $$props) $$invalidate(25, disabled = $$props.disabled);
    		if ('debug' in $$props) $$invalidate(70, debug = $$props.debug);
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('theme' in $$props) $$invalidate(26, theme = $$props.theme);
    		if ('input' in $$props) $$invalidate(27, input = $$props.input);
    		if ('list' in $$props) $$invalidate(28, list = $$props.list);
    		if ('opened' in $$props) $$invalidate(71, opened = $$props.opened);
    		if ('loading' in $$props) $$invalidate(29, loading = $$props.loading);
    		if ('highlightIndex' in $$props) $$invalidate(30, highlightIndex = $$props.highlightIndex);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('filteredTextLength' in $$props) $$invalidate(72, filteredTextLength = $$props.filteredTextLength);
    		if ('filteredListItems' in $$props) $$invalidate(31, filteredListItems = $$props.filteredListItems);
    		if ('listItems' in $$props) listItems = $$props.listItems;
    		if ('lastRequestId' in $$props) lastRequestId = $$props.lastRequestId;
    		if ('lastResponseId' in $$props) lastResponseId = $$props.lastResponseId;
    		if ('inputDelayTimeout' in $$props) inputDelayTimeout = $$props.inputDelayTimeout;
    		if ('clearable' in $$props) $$invalidate(32, clearable = $$props.clearable);
    		if ('showList' in $$props) $$invalidate(33, showList = $$props.showList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*selectedItem*/ 2) {
    			(onSelectedItemChanged());
    		}

    		if ($$self.$$.dirty[0] & /*items*/ 1 | $$self.$$.dirty[2] & /*opened, filteredTextLength*/ 1536) {
    			$$invalidate(33, showList = opened && (items && items.length > 0 || filteredTextLength > 0));
    		}

    		if ($$self.$$.dirty[0] & /*lock, multiple, selectedItem*/ 322 | $$self.$$.dirty[2] & /*showClear*/ 128) {
    			$$invalidate(32, clearable = showClear || (lock || multiple) && selectedItem);
    		}

    		if ($$self.$$.dirty[0] & /*items*/ 1) {
    			(prepareListItems());
    		}
    	};

    	return [
    		items,
    		selectedItem,
    		value,
    		text,
    		valueFunction,
    		maxItemsToShowInList,
    		multiple,
    		create,
    		lock,
    		hideArrow,
    		showLoadingIndicator,
    		noResultsText,
    		loadingText,
    		createText,
    		placeholder,
    		className,
    		inputClassName,
    		inputId,
    		name,
    		selectName,
    		selectId,
    		title,
    		html5autocomplete,
    		readonly,
    		dropdownClassName,
    		disabled,
    		theme,
    		input,
    		list,
    		loading,
    		highlightIndex,
    		filteredListItems,
    		clearable,
    		showList,
    		uniqueId,
    		safeLabelFunction,
    		selectItem,
    		onListItemClick,
    		onDocumentClick,
    		onKeyDown,
    		onKeyPress,
    		onInput,
    		unselectItem,
    		onInputClick,
    		onFocusInternal,
    		onBlurInternal,
    		clear,
    		multipleAction,
    		isConfirmed,
    		searchFunction,
    		labelFieldName,
    		keywordsFieldName,
    		valueFieldName,
    		labelFunction,
    		keywordsFunction,
    		keywordsCleanFunction,
    		textCleanFunction,
    		beforeChange,
    		onChange,
    		onFocus,
    		onBlur,
    		onCreate,
    		selectFirstIfEmpty,
    		minCharactersToSearch,
    		ignoreAccents,
    		matchAllKeywords,
    		sortByMatchedKeywords,
    		delay,
    		localFiltering,
    		showClear,
    		debug,
    		opened,
    		filteredTextLength,
    		$$scope,
    		slots,
    		select_change_handler,
    		click_handler,
    		input_1_binding,
    		input_1_input_handler,
    		click_handler_1,
    		pointerenter_handler,
    		div1_binding
    	];
    }

    class SimpleAutocomplete extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$o,
    			create_fragment$o,
    			safe_not_equal,
    			{
    				items: 0,
    				searchFunction: 49,
    				labelFieldName: 50,
    				keywordsFieldName: 51,
    				valueFieldName: 52,
    				labelFunction: 53,
    				keywordsFunction: 54,
    				valueFunction: 4,
    				keywordsCleanFunction: 55,
    				textCleanFunction: 56,
    				beforeChange: 57,
    				onChange: 58,
    				onFocus: 59,
    				onBlur: 60,
    				onCreate: 61,
    				selectFirstIfEmpty: 62,
    				minCharactersToSearch: 63,
    				maxItemsToShowInList: 5,
    				multiple: 6,
    				create: 7,
    				ignoreAccents: 64,
    				matchAllKeywords: 65,
    				sortByMatchedKeywords: 66,
    				lock: 8,
    				delay: 67,
    				localFiltering: 68,
    				hideArrow: 9,
    				showClear: 69,
    				showLoadingIndicator: 10,
    				noResultsText: 11,
    				loadingText: 12,
    				createText: 13,
    				placeholder: 14,
    				className: 15,
    				inputClassName: 16,
    				inputId: 17,
    				name: 18,
    				selectName: 19,
    				selectId: 20,
    				title: 21,
    				html5autocomplete: 22,
    				readonly: 23,
    				dropdownClassName: 24,
    				disabled: 25,
    				debug: 70,
    				selectedItem: 1,
    				value: 2,
    				theme: 26,
    				text: 3
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimpleAutocomplete",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[3] === undefined && !('text' in props)) {
    			console_1$3.warn("<SimpleAutocomplete> was created without expected prop 'text'");
    		}
    	}

    	get items() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchFunction() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchFunction(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFieldName() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFieldName(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywordsFieldName() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywordsFieldName(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valueFieldName() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valueFieldName(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFunction() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFunction(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywordsFunction() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywordsFunction(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valueFunction() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valueFunction(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywordsCleanFunction() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywordsCleanFunction(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textCleanFunction() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textCleanFunction(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get beforeChange() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set beforeChange(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCreate() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCreate(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectFirstIfEmpty() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectFirstIfEmpty(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get minCharactersToSearch() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set minCharactersToSearch(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxItemsToShowInList() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxItemsToShowInList(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get create() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set create(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ignoreAccents() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ignoreAccents(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get matchAllKeywords() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set matchAllKeywords(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortByMatchedKeywords() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortByMatchedKeywords(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lock() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lock(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get delay() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set delay(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get localFiltering() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set localFiltering(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideArrow() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideArrow(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showClear() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showClear(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showLoadingIndicator() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showLoadingIndicator(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noResultsText() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noResultsText(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadingText() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadingText(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createText() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createText(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputClassName() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputClassName(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectName() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectName(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectId() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectId(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get html5autocomplete() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set html5autocomplete(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dropdownClassName() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dropdownClassName(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get debug() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set debug(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedItem() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedItem(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get theme() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<SimpleAutocomplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<SimpleAutocomplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
    The data structure for documents. @nonabstract
    */
    class Text {
        /**
        @internal
        */
        constructor() { }
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts, 2 /* To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
            this.decompose(to, this.length, parts, 1 /* From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        @internal
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line$1(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    class Line$1 {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
            if (extend[i] > code)
                return extend[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
    }
    function nextClusterBreak(str, pos, includeExtending) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos, includeExtending) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2, includeExtending);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    Given a Unicode codepoint, return the JavaScript string that
    respresents it (like
    [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
    */
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /**
    The amount of positions a character takes up a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        // Produce a copy of setA that applies to the document after setB
        // has been applied (assuming both start at the same document).
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        // Iterate over both sets in parallel. inserted tracks, for changes
        // in A that have to be processed piece-by-piece, whether their
        // content has been inserted already, and refers to the section
        // index.
        for (let inserted = -1;;) {
            if (a.ins == -1 && b.ins == -1) {
                // Move across ranges skipped by both sets.
                let len = Math.min(a.len, b.len);
                addSection(sections, len, -1);
                a.forward(len);
                b.forward(len);
            }
            else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
                // If there's a change in B that comes before the next change in
                // A (ordered by start pos, then len, then before flag), skip
                // that (and process any changes in A it covers).
                let len = b.len;
                addSection(sections, b.ins, -1);
                while (len) {
                    let piece = Math.min(a.len, len);
                    if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                        addSection(sections, 0, a.ins);
                        if (insert)
                            addInsert(insert, sections, a.text);
                        inserted = a.i;
                    }
                    a.forward(piece);
                    len -= piece;
                }
                b.next();
            }
            else if (a.ins >= 0) {
                // Process the part of a change in A up to the start of the next
                // non-deletion change in B (if overlapping).
                let len = 0, left = a.len;
                while (left) {
                    if (b.ins == -1) {
                        let piece = Math.min(left, b.len);
                        len += piece;
                        left -= piece;
                        b.forward(piece);
                    }
                    else if (b.ins == 0 && b.len < left) {
                        left -= b.len;
                        b.next();
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, inserted < a.i ? a.ins : 0);
                if (insert && inserted < a.i)
                    addInsert(insert, sections, a.text);
                inserted = a.i;
                a.forward(a.len - left);
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 3 /* BidiLevelMask */;
            return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 5 /* GoalColumnOffset */;
            return value == 33554431 /* NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn) {
            let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
            return head < anchor ? SelectionRange.create(head, anchor, 16 /* Inverted */ | goal | 8 /* AssocAfter */)
                : SelectionRange.create(anchor, head, goal | (head > anchor ? 4 /* AssocBefore */ : 0));
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, enables) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
            this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal = getter(state);
                    let oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    state.values[idx] = newVal;
                    return 1 /* Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* Changed */;
                },
                reconfigure: (state, oldState) => {
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray$1(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, prec);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* Computed */)
            return status;
        state.status[idx] = 4 /* Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    }
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray$1(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
            }
            tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$3 = [];
    function asArray$1(value) {
        return value == null ? none$3 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, 
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField && this.config.address[value.id] != null)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    if (Object.prototype.hasOwnProperty.call(json, prop)) {
                        let field = fields[prop], value = json[prop];
                        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                    }
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return !n || n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are present.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. `defaults` should hold
    default values for all optional fields in `Config`.

    The function will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range$1.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    class Range$1 {
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range$1(from, to, value);
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range$1.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration. `from` and
        `to` are coordinates in the _new_ space, after these changes.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* Far */;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let open = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open, cursor.pointRank);
                    open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, open);
                    open = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    break;
                pos = cursor.to;
                cursor.next();
            }
            return open;
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* Far */;
            this.lastTo = -1000000000 /* Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* Far */;
            this.endSide = 0;
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        if (this.cursor.from < from)
                            trackExtra = 1;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                let openStart = 0;
                while (openStart < trackOpen.length && trackOpen[openStart] < from)
                    openStart++;
                this.openStart = openStart + trackExtra;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    /**
    Count the column position at the given offset into the string,
    taking extending characters and tab size into account.
    */
    function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet = null;

    class StyleSet {
      constructor(root) {
        if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet) {
            root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
            return root[SET] = adoptedSet
          }
          this.sheet = new CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari$1 || ie$1) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    function getSelection(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function deepActiveElement() {
        let elt = document.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView;
        for (let cur = dom; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = -(bounding.top - rect.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = -(bounding.top + moveY - rect.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = -(bounding.left - rect.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + moveX + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = -(bounding.left + moveX - rect.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            moveY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            moveX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - moveX, top: rect.top - moveY,
                            right: rect.right - moveX, bottom: rect.bottom - moveY };
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
                x = y = "nearest";
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = 2 /* Node */;
        }
        get editorView() {
            if (!this.parent)
                throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(track) {
            if (this.dirty & 2 /* Node */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.dirty) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.constructor == child.constructor)
                                child.reuseDOM(next);
                        }
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.dirty & 1 /* Child */) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(track);
                        child.dirty = 0 /* Not */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.dirty |= 2 /* Node */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= 2 /* Node */;
                if (parent.dirty & 1 /* Child */)
                    return;
                parent.dirty |= 1 /* Child */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this)
                    child.destroy();
            }
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && toOff < after.length) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }

    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
        mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
        windows: /*@__PURE__*//Win/.test(nav.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.dirty |= 4 /* Attrs */ | 2 /* Node */;
            }
        }
        sync(track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.dirty & 4 /* Attrs */)
                this.setAttrs(this.dom);
            super.sync(track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return Rect0;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.eq(other.widget))
                        this.markDirty(true);
                    if (this.dom && !this.prevWidget)
                        this.prevWidget = this.widget;
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return Rect0;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : flattenRect(rect, pos == 0);
        }
        get isEditable() { return false; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    class CompositionView extends WidgetView {
        domAtPos(pos) {
            let { topView, text } = this.widget;
            if (!topView)
                return new DOMPos(text, Math.min(pos, text.nodeValue.length));
            return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), p => new DOMPos(text, Math.min(p, text.nodeValue.length)));
        }
        sync() { this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            let { topView, text } = this.widget;
            if (!topView)
                return Math.min(offset, this.length);
            return posFromDOMInCompositionTree(node, offset, topView, text);
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) {
            let { topView, text } = this.widget;
            if (!topView)
                return textCoords(text, pos, side);
            return scanCompositionTree(pos, side, topView, text, (v, pos, side) => v.coordsAt(pos, side), (pos, side) => textCoords(text, pos, side));
        }
        destroy() {
            var _a;
            super.destroy();
            (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        get isEditable() { return true; }
    }
    // Uses the old structure of a chunk of content view frozen for
    // composition to try and find a reasonable DOM location for the given
    // offset.
    function scanCompositionTree(pos, side, view, text, enterView, fromText) {
        if (view instanceof MarkView) {
            for (let child of view.children) {
                let hasComp = contains(child.dom, text);
                let len = hasComp ? text.nodeValue.length : child.length;
                if (pos < len || pos == len && child.getSide() <= 0)
                    return hasComp ? scanCompositionTree(pos, side, child, text, enterView, fromText) : enterView(child, pos, side);
                pos -= len;
            }
            return enterView(view, view.length, -1);
        }
        else if (view.dom == text) {
            return fromText(pos, side);
        }
        else {
            return enterView(view, pos, side);
        }
    }
    function posFromDOMInCompositionTree(node, offset, view, text) {
        if (view instanceof MarkView) {
            for (let child of view.children) {
                let pos = 0, hasComp = contains(child.dom, text);
                if (contains(child.dom, node))
                    return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, child, text) : child.localPosFromDOM(node, offset));
                pos += hasComp ? text.nodeValue.length : child.length;
            }
        }
        else if (view.dom == text) {
            return Math.min(offset, text.nodeValue.length);
        }
        return view.localPosFromDOM(node, offset);
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return DOMPos.before(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            let imgRect = this.dom.getBoundingClientRect();
            // Since the <img> height doesn't correspond to text height, try
            // to borrow the height from some sibling node.
            let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
            return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top
                ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;
        }
        get overrideDOMText() {
            return Text.empty;
        }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineSiblingRect(view, side) {
        let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;
        while (parent && index >= 0) {
            if (side < 0 ? index > 0 : index < parent.children.length) {
                let next = parent.children[index + side];
                if (next instanceof TextView) {
                    let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
                    if (nextRect)
                        return nextRect;
                }
                index += side;
            }
            else if (parent instanceof MarkView && parent.parent) {
                index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
                parent = parent.parent;
            }
            else {
                let last = parent.dom.lastChild;
                if (last && last.nodeName == "BR")
                    return last.getClientRects()[0];
                break;
            }
        }
        return undefined;
    }
    function inlineDOMAtPos(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (; i > 0; i--) {
            let before = children[i - 1].dom;
            if (before.parentNode == dom)
                return DOMPos.after(before);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
            let child = view.children[i], end = off + child.length, next;
            if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) &&
                (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
                let flatten = 0;
                if (end == off) {
                    if (child.getSide() <= 0)
                        continue;
                    flatten = side = -child.getSide();
                }
                let rect = child.coordsAt(Math.max(0, pos - off), side);
                return flatten && rect ? flattenRect(rect, side < 0) : rect;
            }
            off = end;
        }
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = null;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(changed = name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(changed = name, attrs[name]);
        return !!changed;
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        @internal
        */
        get customView() { return null; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = spec.side || 0, block = !!spec.block;
            side += block ? (side > 0 ? 300000000 /* BlockAfter */ : -400000000 /* BlockBefore */) : (side > 0 ? 100000000 /* InlineAfter */ : -100000000 /* InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -500000000 /* GapStart */;
                endSide = 400000000 /* GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -300000000 /* BlockIncStart */ : -1 /* InlineIncStart */) : 500000000 /* NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* BlockIncEnd */ : 1 /* InlineIncEnd */) : -600000000 /* NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* InlineIncStart */ : 500000000 /* NonIncStart */, end ? 1 /* InlineIncEnd */ : -600000000 /* NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-200000000 /* Line */, -200000000 /* Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.dirty |= 4 /* Attrs */ | 2 /* Node */;
            }
        }
        sync(track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.dirty & 4 /* Attrs */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0;
            for (let child of this.children) {
                if (!(child instanceof TextView))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
            }
            return { lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length };
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
        become(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.type);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(this.editorView));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.eq(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }

    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* No */;
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer([]);
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (!openEnd)
                this.flushBuffer([]);
            else
                this.pendingBuffer = 0 /* No */;
            if (!this.posCovered())
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer([]);
                        this.curLine = null;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
                this.flushBuffer(active.slice(0, openStart));
                this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let view = WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* IfCursor */ && !cursorBefore)
                        this.pendingBuffer = 0 /* No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* No */ : from < to ? 1 /* Yes */ : 2 /* IfCursor */;
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
    }

    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler$1 = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
        }
        map(changes) {
            return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
        }
    }
    const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        domEventHandlers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
                let ext = [viewPlugin.of(plugin)];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.create(view);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const scrollMargins = /*@__PURE__*/Facet.define();
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                view.inputState.notifiedFocused = focus;
                this.flags |= 1 /* Focus */;
            }
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* Viewport */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
                            ch == 0x200c ? 256 /* NI */ : 1 /* L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types = [];
    function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
        if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
            return trivialOrder(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType(line.charCodeAt(i));
            if (type == 512 /* NSM */)
                type = prev;
            else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
                type = 16 /* AN */;
            types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
            if (type & 7 /* Strong */)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types[i];
            if (type == 128 /* CS */) {
                if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))
                    type = types[i] = prev;
                else
                    types[i] = 256 /* NI */;
            }
            else if (type == 64 /* ET */) {
                let end = i + 1;
                while (end < len && types[end] == 64 /* ET */)
                    end++;
                let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
            else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
                types[i] = 1 /* L */;
            }
            prev = type;
            if (type & 7 /* Strong */)
                prevStrong = type;
        }
        // N0. Process bracket pairs in an isolating run sequence
        // sequentially in the logical order of the text positions of the
        // opening paired brackets using the logic given below. Within this
        // scope, bidirectional types EN and AN are treated as R.
        for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
            // Keeps [startIndex, type, strongSeen] triples for each open
            // bracket on BracketStack.
            if (br = Brackets[ch = line.charCodeAt(i)]) {
                if (br < 0) { // Closing bracket
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        if (BracketStack[sJ + 1] == -br) {
                            let flags = BracketStack[sJ + 2];
                            let type = (flags & 2 /* EmbedInside */) ? outerType :
                                !(flags & 4 /* OppositeInside */) ? 0 :
                                    (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;
                            if (type)
                                types[i] = types[BracketStack[sJ]] = type;
                            sI = sJ;
                            break;
                        }
                    }
                }
                else if (BracketStack.length == 189 /* MaxDepth */) {
                    break;
                }
                else {
                    BracketStack[sI++] = i;
                    BracketStack[sI++] = ch;
                    BracketStack[sI++] = context;
                }
            }
            else if ((type = types[i]) == 2 /* R */ || type == 1 /* L */) {
                let embed = type == outerType;
                context = embed ? 0 : 1 /* OppositeBefore */;
                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                    let cur = BracketStack[sJ + 2];
                    if (cur & 2 /* EmbedInside */)
                        break;
                    if (embed) {
                        BracketStack[sJ + 2] |= 2 /* EmbedInside */;
                    }
                    else {
                        if (cur & 4 /* OppositeInside */)
                            break;
                        BracketStack[sJ + 2] |= 4 /* OppositeInside */;
                    }
                }
            }
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types[i] == 256 /* NI */) {
                let end = i + 1;
                while (end < len && types[end] == 256 /* NI */)
                    end++;
                let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;
                let afterL = (end < len ? types[end] : outerType) == 1 /* L */;
                let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
                for (let j = i; j < end; j++)
                    types[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == 1 /* L */) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] != 1 /* L */;
                while (i < len && rtl == (types[i] != 1 /* L */))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types[--j] != 2 /* R */;
                        while (j > start && l == (types[j - 1] != 2 /* R */))
                            j--;
                        order.push(new BidiSpan(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types[i++] == 2 /* R */;
                while (i < len && rtl == (types[i] == 2 /* R */))
                    i++;
                order.push(new BidiSpan(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
    }

    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, maxLen) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }

    class DocView extends ContentView {
        constructor(view) {
            super();
            this.view = view;
            this.compositionDeco = Decoration.none;
            this.decorations = [];
            this.dynamicDecorationMap = [];
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
        }
        get root() { return this.view.root; }
        get editorView() { return this.view; }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (this.view.inputState.composing < 0)
                this.compositionDeco = Decoration.none;
            else if (update.transactions.length || this.dirty)
                this.compositionDeco = computeCompositionDeco(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (this.dirty == 0 /* Not */ && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(track);
                this.dirty = 0 /* Not */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead || !this.view.observer.selectionRange.focusNode)
                this.view.observer.readSelectionRange();
            if (!(fromPointer || this.mayControlSelection()) ||
                browser.ios && this.view.inputState.rapidCompositionStart)
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(main.anchor);
            let head = main.empty ? anchor : this.domAtPos(main.head);
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection(this.root);
                    if (!rawSel) ;
                    else if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        rawSel.extend(head.node, head.offset);
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            if (this.compositionDeco.size)
                return;
            let cursor = this.view.state.selection.main;
            let sel = getSelection(this.root);
            if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
            let active = this.root.activeElement;
            return active == this.dom ||
                hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos > start ||
                    (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                        (!i || side == 2 || this.children[i - 1].breakAfter ||
                            (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth;
            dummy.className = "cm-line";
            dummy.style.width = "99999px";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                dummy.remove();
            });
            return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                    deco.push(Decoration.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            let allDeco = this.view.state.facet(decorations).map((d, i) => {
                let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            for (let i = allDeco.length; i < allDeco.length + 3; i++)
                this.dynamicDecorationMap[i] = false;
            return this.decorations = [
                ...allDeco,
                this.compositionDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
        }
        scrollIntoView(target) {
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view)))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            let targetRect = {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            };
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function compositionSurroundingNode(view) {
        let sel = view.observer.selectionRange;
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return null;
        let cView = view.docView.nearest(textNode);
        if (!cView)
            return null;
        if (cView instanceof LineView) {
            let topNode = textNode;
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView.get(prev))
                prev = prev.previousSibling;
            let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
            return { from: pos, to: pos, node: topNode, text: textNode };
        }
        else {
            for (;;) {
                let { parent } = cView;
                if (!parent)
                    return null;
                if (parent instanceof LineView)
                    break;
                cView = parent;
            }
            let from = cView.posAtStart;
            return { from, to: from + cView.length, node: cView.dom, text: textNode };
        }
    }
    function computeCompositionDeco(view, changes) {
        let surrounding = compositionSurroundingNode(view);
        if (!surrounding)
            return Decoration.none;
        let { from, to, node, text: textNode } = surrounding;
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let { state } = view, text = node.nodeType == 3 ? node.nodeValue :
            new DOMReader([], state).readRange(node.firstChild, null).text;
        if (newTo - newFrom < text.length) {
            if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)
                newTo = newFrom + text.length;
            else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)
                newFrom = newTo - text.length;
            else
                return Decoration.none;
        }
        else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
            return Decoration.none;
        }
        let topView = ContentView.get(node);
        if (topView instanceof CompositionView)
            topView = topView.widget.topView;
        else if (topView)
            topView.parent = null;
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })
            .range(newFrom, newTo));
    }
    class CompositionWidget extends WidgetType {
        constructor(top, text, topView) {
            super();
            this.top = top;
            this.text = text;
            this.topView = topView;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView; }
    }
    function nearbyTextNode(node, offset, side) {
        for (;;) {
            if (node.nodeType == 3)
                return node;
            if (node.nodeType == 1 && offset > 0 && side <= 0) {
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                node = node.childNodes[offset];
                offset = 0;
            }
            else {
                return null;
            }
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
    }
    class DecorationComparator$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    }
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, { x, y }, precise, bias = -1) {
        var _a;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                        browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let line = Math.floor((y - block.top) / view.defaultLineHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousSafariCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    // Chrome will move positions between lines to the start of the next line
    function isSuspiciousChromeCaretResult(node, offset, x) {
        if (offset != 0)
            return false;
        for (let cur = node;;) {
            let parent = cur.parentNode;
            if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
                return false;
            if (parent.classList.contains("cm-line"))
                break;
            cur = parent;
        }
        let rect = node.nodeType == 1 ? node.getBoundingClientRect()
            : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
        return x - rect.left > 5;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
                return EditorSelection.cursor(pos, start.assoc, undefined, goal);
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let atoms = view.state.facet(atomicRanges).map(f => f(view));
        for (;;) {
            let moved = false;
            for (let set of atoms) {
                set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
                    if (pos.from > from && pos.from < to) {
                        pos = oldPos.from > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
                        moved = true;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }

    // This will also be where dragging info and such goes
    class InputState {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.chromeScrollHack = -1;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            this.compositionEndedAt = 0;
            this.rapidCompositionStart = false;
            this.mouseSelection = null;
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, (event) => {
                    if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                        return;
                    if (type == "keydown" && this.keydown(view, event))
                        return;
                    if (this.mustFlushObserver(event))
                        view.observer.forceFlush();
                    if (this.runCustomHandlers(type, view, event))
                        event.preventDefault();
                    else
                        handler(view, event);
                });
                this.registeredEvents.push(type);
            }
            if (browser.chrome && browser.chrome_version >= 102) {
                // On Chrome 102, viewport updates somehow stop wheel-based
                // scrolling. Turning off pointer events during the scroll seems
                // to avoid the issue.
                view.scrollDOM.addEventListener("wheel", () => {
                    if (this.chromeScrollHack < 0)
                        view.contentDOM.style.pointerEvents = "none";
                    else
                        window.clearTimeout(this.chromeScrollHack);
                    this.chromeScrollHack = setTimeout(() => {
                        this.chromeScrollHack = -1;
                        view.contentDOM.style.pointerEvents = "";
                    }, 100);
                }, { passive: true });
            }
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view, plugins) {
            var _a;
            let handlers;
            this.customHandlers = [];
            for (let plugin of plugins)
                if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                    this.customHandlers.push({ plugin: plugin.value, handlers });
                    for (let type in handlers)
                        if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                            this.registeredEvents.push(type);
                            view.contentDOM.addEventListener(type, (event) => {
                                if (!eventBelongsToEditor(view, event))
                                    return;
                                if (this.runCustomHandlers(type, view, event))
                                    event.preventDefault();
                            });
                        }
                }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type];
                if (handler) {
                    try {
                        if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                            return true;
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        keydown(view, event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
                return true;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && (pending = PendingKeys.find(key => key.keyCode == event.keyCode)) &&
                !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
                this.pendingIOSKey = pending;
                setTimeout(() => this.flushIOSKey(view), 250);
                return true;
            }
            return false;
        }
        flushIOSKey(view) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(view.contentDOM, key.key, key.keyCode);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && Date.now() - this.compositionEndedAt < 100) {
                this.compositionEndedAt = 0;
                return true;
            }
            return false;
        }
        mustFlushObserver(event) {
            return (event.type == "keydown" && event.keyCode != 229) ||
                event.type == "compositionend" && !browser.ios;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.style = style;
            this.mustSelect = mustSelect;
            this.lastEvent = startEvent;
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragMove = dragMovesSelection(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                startEvent.preventDefault();
                this.select(startEvent);
            }
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(this.lastEvent = event);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = null;
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (this.mustSelect || !selection.eq(this.view.state.selection) ||
                selection.main.assoc != this.view.state.selection.main.assoc)
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer",
                    scrollIntoView: true
                });
            this.mustSelect = false;
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (!sel || sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27)
            view.inputState.lastEscPress = Date.now();
        else if (modifierCodes.indexOf(event.keyCode) < 0)
            view.inputState.lastEscPress = 0;
    };
    let lastTouch = 0;
    handlers.touchstart = (view, e) => {
        lastTouch = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (lastTouch > Date.now() - 2000 && getClickType(event) == 1)
            return; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = view.root.activeElement != view.contentDOM;
            if (mustFocus)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
            update(update) {
                if (update.docChanged) {
                    if (start)
                        start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                    lastEvent = null;
                }
            },
            get(event, extend, multiple) {
                let cur;
                if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
                    cur = last;
                else {
                    cur = last = queryPos(view, event);
                    lastEvent = event;
                }
                if (!cur || !start)
                    return startSel;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple && startSel.ranges.length > 1 && startSel.ranges.some(r => r.eq(range)))
                    return removeRange(startSel, range);
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    function removeRange(sel, range) {
        for (let i = 0;; i++) {
            if (sel.ranges[i].eq(range))
                return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
        }
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = main;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    function dropText(view, event, text, direct) {
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        if (view.state.readOnly)
            return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            event.preventDefault();
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
        }
        else {
            dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return event.preventDefault();
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            doPaste(view, data.getData("text/plain"));
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
    };
    function updateForFocusChange(view) {
        setTimeout(() => {
            if (view.hasFocus != view.inputState.notifiedFocused)
                view.update([]);
        }, 10);
    }
    handlers.focus = updateForFocusChange;
    handlers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    function forceClearComposition(view, rapid) {
        if (view.docView.compositionDeco.size) {
            view.inputState.rapidCompositionStart = rapid;
            try {
                view.update([]);
            }
            finally {
                view.inputState.rapidCompositionStart = false;
            }
        }
    }
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
            if (view.docView.compositionDeco.size) {
                view.observer.flush();
                forceClearComposition(view, true);
            }
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        setTimeout(() => {
            if (view.inputState.composing < 0)
                forceClearComposition(view, false);
        }, 50);
    };
    handlers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
        var _a;
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
    };

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    class HeightOracle {
        constructor() {
            this.doc = Text.empty;
            this.lineWrapping = false;
            this.heightSamples = {};
            this.lineHeight = 14;
            this.charWidth = 7;
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        @internal
        */
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType$1 = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType$1 || (QueryType$1 = {}));
    const Epsilon = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oldDoc, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
        }
        forEachLine(from, to, doc, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, doc, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, BlockType.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        lines(doc, offset) {
            let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
            return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc, top, offset) {
            let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
            let { from, length } = doc.line(firstLine + line);
            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
        }
        lineAt(value, type, doc, top, offset) {
            if (type == QueryType$1.ByHeight)
                return this.blockAt(value, doc, top, offset);
            if (type == QueryType$1.ByPosNoHeight) {
                let { from, to } = doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
            }
            let { firstLine, lineHeight } = this.lines(doc, offset);
            let { from, length, number } = doc.lineAt(value);
            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let { firstLine, lineHeight } = this.lines(doc, offset);
            for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
                let line = doc.lineAt(pos);
                if (pos == from)
                    top += lineHeight * (line.number - firstLine);
                f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
                top += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                let wasChanged = oracle.heightChanged;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                    Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
                return result;
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Break */; }
        blockAt(height, doc, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, doc, top, offset)
                : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, doc, top, offset)
                : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
        }
        forEachLine(from, to, doc, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, doc, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType$1.ByPos, doc, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        let body = dom.ownerDocument.body;
        for (let parent = dom.parentNode; parent && parent != body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentDOMWidth = 0;
            this.contentDOMHeight = 0;
            this.editorHeight = 0;
            this.editorWidth = 0;
            this.heightOracle = new HeightOracle;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.RTL;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateViewportLines();
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, block => {
                this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* Height */;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let updateLines = !update.changes.empty || (update.flags & 2 /* Height */) ||
                viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            this.updateForViewport();
            if (updateLines)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges();
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc)
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
            this.contentDOMHeight = dom.clientHeight;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            // Vertical padding
            let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 8 /* Geometry */ | 2 /* Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 8 /* Geometry */;
            }
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView)
                return 0;
            let contentWidth = dom.clientWidth;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = contentWidth;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8 /* Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth } = view.docView.measureTextSize();
                    refresh = oracle.refresh(whiteSpace, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 8 /* Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                oracle.heightChanged = false;
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (oracle.heightChanged)
                    result |= 2 /* Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange)
                this.viewport = this.getViewport(bias, this.scrollTarget);
            this.updateForViewport();
            if ((result & 2 /* Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000 /* DoubleMargin */)
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
            let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType$1.ByHeight, doc, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType$1.ByPos, doc, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* Margin */ / 2, QueryType$1.ByHeight, doc, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.state.doc, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.state.doc, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current) {
            let gaps = [];
            // This won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR)
                return gaps;
            for (let line of this.viewportLines) {
                if (line.length < 4000 /* DoubleMargin */)
                    continue;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < 4000 /* DoubleMargin */)
                    continue;
                let viewFrom, viewTo;
                if (this.heightOracle.lineWrapping) {
                    let marginHeight = (2000 /* Margin */ / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    viewFrom = findPosition(structure, (this.visibleTop - line.top - marginHeight) / line.height);
                    viewTo = findPosition(structure, (this.visibleBottom - line.top + marginHeight) / line.height);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = 2000 /* Margin */ * this.heightOracle.charWidth;
                    viewFrom = findPosition(structure, (this.pixelViewport.left - marginWidth) / totalWidth);
                    viewTo = findPosition(structure, (this.pixelViewport.right + marginWidth) / totalWidth);
                }
                let outside = [];
                if (viewFrom > line.from)
                    outside.push({ from: line.from, to: viewFrom });
                if (viewTo < line.to)
                    outside.push({ from: viewTo, to: line.to });
                let sel = this.state.selection.main;
                // Make sure the gaps don't cover a selection end
                if (sel.from >= line.from && sel.from <= line.to)
                    cutRange(outside, sel.from - 10 /* SelectionMargin */, sel.from + 10 /* SelectionMargin */);
                if (!sel.empty && sel.to >= line.from && sel.to <= line.to)
                    cutRange(outside, sel.to - 10 /* SelectionMargin */, sel.to + 10 /* SelectionMargin */);
                for (let { from, to } of outside)
                    if (to - from > 1000 /* HalfMargin */) {
                        gaps.push(find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                            Math.abs(gap.from - from) < 1000 /* HalfMargin */ && Math.abs(gap.to - to) < 1000 /* HalfMargin */) ||
                            new LineGap(from, to, this.gapSize(line, from, to, structure)));
                    }
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges() {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = ranges.length != this.visibleRanges.length ||
                this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
            this.visibleRanges = ranges;
            return changed ? 4 /* Viewport */ : 0;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.state.doc, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.state.doc, 0, 0), this.scaler);
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function cutRange(ranges, from, to) {
        for (let i = 0; i < ranges.length; i++) {
            let r = ranges[i];
            if (r.from < to && r.to > from) {
                let pieces = [];
                if (r.from < from)
                    pieces.push({ from: r.from, to: from });
                if (r.to > to)
                    pieces.push({ from: to, to: r.to });
                ranges.splice(i, 1, ...pieces);
                i += pieces.length - 1;
            }
        }
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(doc, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType$1.ByPos, doc, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType$1.ByPos, doc, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
    }

    const theme$1 = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1$3 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&.cm-editor": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            flexShrink: 0,
            minHeight: "100%",
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap",
            whiteSpace: "break-spaces",
            wordBreak: "break-word",
            overflowWrap: "anywhere",
            flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
            zIndex: -1,
            contain: "size style"
        },
        ".cm-selectionBackground": {
            position: "absolute",
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            zIndex: 100,
            contain: "size style",
            pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            position: "absolute",
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
            display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
        "&dark .cm-activeLine": { backgroundColor: "#223039" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view, onChange, onScrollChanged) {
            this.view = view;
            this.onChange = onChange;
            this.onScrollChanged = onScrollChanged;
            this.active = false;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.scrollTargets = [];
            this.intersection = null;
            this.resize = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            window.addEventListener("resize", this.onResize = this.onResize.bind(this));
            if (typeof ResizeObserver == "function") {
                this.resize = new ResizeObserver(() => {
                    if (this.view.docView.lastUpdate < Date.now() - 75)
                        this.onResize();
                });
                this.resize.observe(view.scrollDOM);
            }
            window.addEventListener("beforeprint", this.onPrint = this.onPrint.bind(this));
            this.start();
            window.addEventListener("scroll", this.onScroll = this.onScroll.bind(this));
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint() {
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event))
                return;
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { root } = this.view;
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/dev/issues/414
            let range = browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM &&
                safariSelectionRangeHack(this.view) || getSelection(root);
            if (!range || this.selectionRange.eq(range))
                return false;
            this.selectionRange.setRange(range);
            return this.selectionChanged = true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            if (!this.delayedAndroidKey)
                requestAnimationFrame(() => {
                    let key = this.delayedAndroidKey;
                    this.delayedAndroidKey = null;
                    this.delayedFlush = -1;
                    if (!this.flush())
                        dispatchKey(this.view.contentDOM, key.key, key.keyCode);
                });
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = { key, keyCode };
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                window.clearTimeout(this.delayedFlush);
                this.delayedFlush = -1;
                this.flush();
            }
        }
        processRecords() {
            let records = this.queue;
            for (let mut of this.observer.takeRecords())
                records.push(mut);
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return;
            if (readSelection)
                this.readSelectionRange();
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return;
            this.selectionChanged = false;
            let startState = this.view.state;
            let handled = this.onChange(from, to, typeOver);
            // The view wasn't updated
            if (this.view.state == startState)
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.dirty |= 4 /* Attrs */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        destroy() {
            var _a, _b, _c;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("scroll", this.onScroll);
            window.removeEventListener("resize", this.onResize);
            window.removeEventListener("beforeprint", this.onPrint);
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view) {
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found)
            return null;
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }

    function applyDOMChange(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.main;
        if (start > -1) {
            let bounds = view.docView.domBoundsAround(start, end, 0);
            if (!bounds || view.state.readOnly)
                return false;
            let { from, to } = bounds;
            let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
            let reader = new DOMReader(selPoints, view.state);
            reader.readRange(bounds.startDOM, bounds.endDOM);
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
                browser.android && reader.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), reader.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. This drops one of those.
                if (browser.chrome && view.inputState.lastKeyCode == 13 &&
                    diff.toB == diff.from + 2 && reader.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text.of(reader.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
            newSel = selectionFromPoints(selPoints, from);
        }
        else if (view.hasFocus || !view.state.facet(editable)) {
            let domSel = view.observer.selectionRange;
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                !contains(view.contentDOM, domSel.focusNode)
                ? view.state.selection.main.head
                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                !contains(view.contentDOM, domSel.anchorNode)
                ? view.state.selection.main.anchor
                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            if (head != sel.head || anchor != sel.anchor)
                newSel = EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
            return false;
        // Heuristic to notice typing over a selected character
        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        // If the change is inside the selection and covers most of it,
        // assume it is a selection replace (with identical characters at
        // the start/end not included in the diff)
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        // Detect insert-period-on-double-space Mac behavior, and transform
        // it into a regular space insert.
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            change.insert.toString() == ".")
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        if (change) {
            let startState = view.state;
            if (browser.ios && view.inputState.flushIOSKey(view))
                return true;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events. (Some of these keys are also handled by beforeinput
            // events and the pendingAndroidKey mechanism, but that's not
            // reliable in all situations.)
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view.contentDOM, "Enter", 13)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Delete", 46))))
                return true;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text)))
                return true;
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
                (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
                view.inputState.composing < 0) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
            }
            else {
                let changes = startState.changes(change);
                let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
                    ? newSel.main : undefined;
                // Try to apply a composition change to all cursors
                if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                    change.to <= sel.to && change.to >= sel.to - 10) {
                    let replaced = view.state.sliceDoc(change.from, change.to);
                    let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
                    let offset = sel.to - change.to, size = sel.to - sel.from;
                    tr = startState.changeByRange(range => {
                        if (range.from == sel.from && range.to == sel.to)
                            return { changes, range: mainSel || range.map(changes) };
                        let to = range.to - offset, from = to - replaced.length;
                        if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                            // Unfortunately, there's no way to make multiple
                            // changes in the same node work without aborting
                            // composition, so cursors in the composition range are
                            // ignored.
                            compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
                            return { range };
                        let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                        return {
                            changes: rangeChanges,
                            range: !mainSel ? range.map(rangeChanges) :
                                EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                        };
                    });
                }
                else {
                    tr = {
                        changes,
                        selection: mainSel && startState.selection.replaceRange(mainSel)
                    };
                }
            }
            let userEvent = "input.type";
            if (view.composing) {
                userEvent += ".compose";
                if (view.inputState.compositionFirstChange) {
                    userEvent += ".start";
                    view.inputState.compositionFirstChange = false;
                }
            }
            view.dispatch(tr, { scrollIntoView: true, userEvent });
            return true;
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.style.cssText = "position: absolute; top: -10000px";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this.root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState.create(config));
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver(this, (from, to, typeOver) => {
                return applyDOMChange(this, from, to, typeOver);
            }, event => {
                this.inputState.runScrollHandlers(this, event);
                if (this.observer.intersecting)
                    this.measure();
            });
            this.inputState = new InputState(this);
            this.inputState.ensureHandlers(this, this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* Idle */;
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return this.inputState.composing >= 0; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            this.observer.clear();
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView$1))
                            scrollTarget = e.value;
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (update.startState.facet(theme$1) != update.state.facet(theme$1))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(update);
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this, this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
                this.inputState.ensureHandlers(this, this.plugins);
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.flush();
            let updated = null;
            try {
                for (let i = 0;; i++) {
                    this.updateState = 1 /* Measuring */;
                    let oldViewport = this.viewport;
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (this.viewState.scrollTarget) {
                        this.docView.scrollIntoView(this.viewState.scrollTarget);
                        this.viewState.scrollTarget = null;
                        scrolled = true;
                    }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&
                        !scrolled && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = 0 /* Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme$1);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                translate: "no",
                contenteditable: !this.state.facet(editable) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$3).reverse());
        }
        readMeasured() {
            if (this.updateState == 2 /* Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = requestAnimationFrame(() => this.measure());
            if (request) {
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.spec != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height.
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from);
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder(line.text, dir);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme$1.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.
    */
    EditorView.inputHandler = inputHandler$1;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.

    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.
    */
    EditorView.decorations = decorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView.atomicRanges = atomicRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView.darkTheme = darkTheme;
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }

    const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    }));
    /**
    Facet used for registering keymaps.

    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
    const Keymaps = /*@__PURE__*/new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    /**
    Run the key handlers registered for a given scope. The event
    object should be a `"keydown"` event. Returns true if any of the
    handlers handled it.
    */
    function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        commands: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
            binding.commands.push(command);
            if (preventDefault)
                binding.preventDefault = true;
        };
        for (let b of bindings) {
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
                add(scope, name, b.run, b.preventDefault);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault);
            }
        }
        return bound;
    }
    function runHandlers(map, event, view, scope) {
        let name = keyName(event);
        let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
        let prefix = "", fallthrough = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
                storedPrefix = null;
        }
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.commands)
                    if (cmd(view))
                        return true;
                if (binding.preventDefault)
                    fallthrough = true;
            }
            return false;
        };
        let scopeObj = map[scope], baseName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
                return true;
            if (isChar && (event.shiftKey || event.altKey || event.metaKey || charCode > 127) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                    return true;
                else if (event.shiftKey && shift[event.keyCode] != baseName &&
                    runFor(scopeObj[prefix + modifiers(shift[event.keyCode], event, false)]))
                    return true;
            }
            else if (isChar && event.shiftKey) {
                if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                    return true;
            }
        }
        return fallthrough;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const selectionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /**
    Returns an extension that hides the browser's native selection and
    cursor, replacing the selection with a background behind the text
    (with the `cm-selectionBackground` class), and the
    cursors with elements overlaid over the code (using
    `cm-cursor-primary` and `cm-cursor-secondary`).

    This allows the editor to display secondary selection ranges, and
    tends to produce a type of selection more in line with that users
    expect in a text editor (the native selection styling will often
    leave gaps between lines and won't fill the horizontal space after
    a line when the selection continues past it).

    It does have a performance cost, in that it requires an extra DOM
    layout cycle for many updates (the selection is drawn based on DOM
    layout information that's only available after laying out the
    content).
    */
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            drawSelectionPlugin,
            hideNativeSelection
        ];
    }
    class Piece {
        constructor(left, top, width, height, className) {
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
            this.className = className;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
        }
        adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
    }
    const drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.rangePieces = [];
            this.cursors = [];
            this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
            this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.selectionLayer.className = "cm-selectionLayer";
            this.selectionLayer.setAttribute("aria-hidden", "true");
            this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
            this.cursorLayer.className = "cm-cursorLayer";
            this.cursorLayer.setAttribute("aria-hidden", "true");
            view.requestMeasure(this.measureReq);
            this.setBlinkRate();
        }
        setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
        }
        update(update) {
            let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
            if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
                this.view.requestMeasure(this.measureReq);
            if (update.transactions.some(tr => tr.scrollIntoView))
                this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged)
                this.setBlinkRate();
        }
        readPos() {
            let { state } = this.view, conf = state.facet(selectionConfig);
            let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.main;
                if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                    let piece = measureCursor(this.view, r, prim);
                    if (piece)
                        cursors.push(piece);
                }
            }
            return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
            if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
                this.selectionLayer.textContent = "";
                for (let p of rangePieces)
                    this.selectionLayer.appendChild(p.draw());
                this.rangePieces = rangePieces;
            }
            if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
                let oldCursors = this.cursorLayer.children;
                if (oldCursors.length !== cursors.length) {
                    this.cursorLayer.textContent = "";
                    for (const c of cursors)
                        this.cursorLayer.appendChild(c.draw());
                }
                else {
                    cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
                }
                this.cursors = cursors;
            }
        }
        destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
        }
    });
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
    const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
    }
    function wrappedLine(view, pos, inside) {
        let range = EditorSelection.cursor(pos);
        return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
            to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
            type: BlockType.Text };
    }
    function blockAt(view, pos) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type))
            for (let l of line.type) {
                if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                    return l;
            }
        return line;
    }
    function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
        let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
        if (view.lineWrapping) {
            if (visualStart)
                visualStart = wrappedLine(view, from, visualStart);
            if (visualEnd)
                visualEnd = wrappedLine(view, to, visualEnd);
        }
        if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
            return pieces(drawForLine(range.from, range.to, visualStart));
        }
        else {
            let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
            let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
            let between = [];
            if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new Piece(left - base.left, top - base.top - 0.01 /* Epsilon */, right - left, bottom - top + 0.01 /* Epsilon */, "cm-selectionBackground");
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to, line) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                // Passing 2/-2 is a kludge to force the view to return
                // coordinates on the proper side of block widgets, since
                // normalizing the side there, though appropriate for most
                // coordsAtPos queries, would break selection drawing.
                let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
                let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0)
                addSpan(start, from == null, end, to == null, view.textDirection);
            return { top, bottom, horizontal };
        }
        function drawForWidget(block, top) {
            let y = contentRect.top + (top ? block.top : block.bottom);
            return { top: y, bottom: y, horizontal: [] };
        }
    }
    function measureCursor(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
            return null;
        let base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
    }

    const setDropCursorPos = /*@__PURE__*/StateEffect.define({
        map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
    });
    const dropCursorPos = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(pos, tr) {
            if (pos != null)
                pos = tr.changes.mapPos(pos);
            return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
        }
    });
    const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.cursor = null;
            this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
        }
        update(update) {
            var _a;
            let cursorPos = update.state.field(dropCursorPos);
            if (cursorPos == null) {
                if (this.cursor != null) {
                    (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                    this.cursor = null;
                }
            }
            else {
                if (!this.cursor) {
                    this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                    this.cursor.className = "cm-dropCursor";
                }
                if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                    this.view.requestMeasure(this.measureReq);
            }
        }
        readPos() {
            let pos = this.view.state.field(dropCursorPos);
            let rect = pos != null && this.view.coordsAtPos(pos);
            if (!rect)
                return null;
            let outer = this.view.scrollDOM.getBoundingClientRect();
            return {
                left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
                top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
                height: rect.bottom - rect.top
            };
        }
        drawCursor(pos) {
            if (this.cursor) {
                if (pos) {
                    this.cursor.style.left = pos.left + "px";
                    this.cursor.style.top = pos.top + "px";
                    this.cursor.style.height = pos.height + "px";
                }
                else {
                    this.cursor.style.left = "-100000px";
                }
            }
        }
        destroy() {
            if (this.cursor)
                this.cursor.remove();
        }
        setDropPos(pos) {
            if (this.view.state.field(dropCursorPos) != pos)
                this.view.dispatch({ effects: setDropCursorPos.of(pos) });
        }
    }, {
        eventHandlers: {
            dragover(event) {
                this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
            },
            dragleave(event) {
                if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                    this.setDropPos(null);
            },
            dragend() {
                this.setDropPos(null);
            },
            drop() {
                this.setDropPos(null);
            }
        }
    });
    /**
    Draws a cursor at the current drop position when something is
    dragged over the editor.
    */
    function dropCursor() {
        return [dropCursorPos, drawDropCursor];
    }

    function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
            if (!cursor.lineBreak)
                while (m = re.exec(cursor.value))
                    f(pos + m.index, pos + m.index + m[0].length, m);
        }
    }
    function matchRanges(view, maxLength) {
        let visible = view.visibleRanges;
        if (visible.length == 1 && visible[0].from == view.viewport.from &&
            visible[0].to == view.viewport.to)
            return visible;
        let result = [];
        for (let { from, to } of visible) {
            from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
            to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
            if (result.length && result[result.length - 1].to >= from)
                result[result.length - 1].to = to;
            else
                result.push({ from, to });
        }
        return result;
    }
    /**
    Helper class used to make it easier to maintain decorations on
    visible code that matches a given regular expression. To be used
    in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
    represent a matching configuration.
    */
    class MatchDecorator {
        /**
        Create a decorator.
        */
        constructor(config) {
            let { regexp, decoration, boundary, maxLength = 1000 } = config;
            if (!regexp.global)
                throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
            this.regexp = regexp;
            this.getDeco = typeof decoration == "function" ? decoration : () => decoration;
            this.boundary = boundary;
            this.maxLength = maxLength;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */
        createDeco(view) {
            let build = new RangeSetBuilder();
            for (let { from, to } of matchRanges(view, this.maxLength))
                iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));
            return build.finish();
        }
        /**
        Update a set of decorations for a view update. `deco` _must_ be
        the set of decorations produced by _this_ `MatchDecorator` for
        the view state before the update.
        */
        updateDeco(update, deco) {
            let changeFrom = 1e9, changeTo = -1;
            if (update.docChanged)
                update.changes.iterChanges((_f, _t, from, to) => {
                    if (to > update.view.viewport.from && from < update.view.viewport.to) {
                        changeFrom = Math.min(from, changeFrom);
                        changeTo = Math.max(to, changeTo);
                    }
                });
            if (update.viewportChanged || changeTo - changeFrom > 1000)
                return this.createDeco(update.view);
            if (changeTo > -1)
                return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
            for (let r of view.visibleRanges) {
                let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
                if (to > from) {
                    let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                    if (this.boundary) {
                        for (; from > fromLine.from; from--)
                            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                                start = from;
                                break;
                            }
                        for (; to < toLine.to; to++)
                            if (this.boundary.test(toLine.text[to - toLine.from])) {
                                end = to;
                                break;
                            }
                    }
                    let ranges = [], m;
                    if (fromLine == toLine) {
                        this.regexp.lastIndex = start - fromLine.from;
                        while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                            let pos = m.index + fromLine.from;
                            ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));
                        }
                    }
                    else {
                        iterMatches(view.state.doc, this.regexp, start, end, (from, to, m) => ranges.push(this.getDeco(m, view, from).range(from, to)));
                    }
                    deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
                }
            }
            return deco;
        }
    }

    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
    const Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8237: "left-to-right override",
        8238: "right-to-left override",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
        var _a;
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
    }
    const specialCharConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
            return config;
        }
    });
    /**
    Returns an extension that installs highlighting of special
    characters.
    */
    function highlightSpecialChars(
    /**
    Configuration options.
    */
    config = {}) {
        return [specialCharConfig.of(config), specialCharPlugin()];
    }
    let _plugin = null;
    function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.decorations = Decoration.none;
                this.decorationCache = Object.create(null);
                this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
                this.decorations = this.decorator.createDeco(view);
            }
            makeDecorator(conf) {
                return new MatchDecorator({
                    regexp: conf.specialChars,
                    decoration: (m, view, pos) => {
                        let { doc } = view.state;
                        let code = codePointAt(m[0], 0);
                        if (code == 9) {
                            let line = doc.lineAt(pos);
                            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                            return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
                        }
                        return this.decorationCache[code] ||
                            (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                    },
                    boundary: conf.replaceTabs ? undefined : /[^]/
                });
            }
            update(update) {
                let conf = update.state.facet(specialCharConfig);
                if (update.startState.facet(specialCharConfig) != conf) {
                    this.decorator = this.makeDecorator(conf);
                    this.decorations = this.decorator.createDeco(update.view);
                }
                else {
                    this.decorations = this.decorator.updateDeco(update, this.decorations);
                }
            }
        }, {
            decorations: v => v.decorations
        }));
    }
    const DefaultPlaceholder = "\u2022";
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeholder$1(code) {
        if (code >= 32)
            return DefaultPlaceholder;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    class SpecialCharWidget extends WidgetType {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM(view) {
            let ph = placeholder$1(this.code);
            let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget extends WidgetType {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }

    /**
    Mark lines that have a cursor on them with the `"cm-activeLine"`
    DOM class.
    */
    function highlightActiveLine() {
        return activeLineHighlighter;
    }
    const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
    const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                if (!r.empty)
                    return Decoration.none;
                let line = view.lineBlockAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });

    // Don't compute precise column positions for line offsets above this
    // (since it could get expensive). Assume offset==column for them.
    const MaxOff = 2000;
    function rectangleFor(state, a, b) {
        let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
        let ranges = [];
        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
            let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                if (line.length <= endOff)
                    ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
            }
        }
        else {
            let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
            for (let i = startLine; i <= endLine; i++) {
                let line = state.doc.line(i);
                let start = findColumn(line.text, startCol, state.tabSize, true);
                if (start > -1) {
                    let end = findColumn(line.text, endCol, state.tabSize);
                    ranges.push(EditorSelection.range(line.from + start, line.from + end));
                }
            }
        }
        return ranges;
    }
    function absoluteColumn(view, x) {
        let ref = view.coordsAtPos(view.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
    }
    function getPos(view, event) {
        let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let line = view.state.doc.lineAt(offset), off = offset - line.from;
        let col = off > MaxOff ? -1
            : off == line.length ? absoluteColumn(view, event.clientX)
                : countColumn(line.text, view.state.tabSize, offset - line.from);
        return { line: line.number, col, off };
    }
    function rectangleSelectionStyle(view, event) {
        let start = getPos(view, event), startSel = view.state.selection;
        if (!start)
            return null;
        return {
            update(update) {
                if (update.docChanged) {
                    let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                    let newLine = update.state.doc.lineAt(newStart);
                    start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, _extend, multiple) {
                let cur = getPos(view, event);
                if (!cur)
                    return startSel;
                let ranges = rectangleFor(view.state, start, cur);
                if (!ranges.length)
                    return startSel;
                if (multiple)
                    return EditorSelection.create(ranges.concat(startSel.ranges));
                else
                    return EditorSelection.create(ranges);
            }
        };
    }
    /**
    Create an extension that enables rectangular selections. By
    default, it will react to left mouse drag with the Alt key held
    down. When such a selection occurs, the text within the rectangle
    that was dragged over will be selected, as one selection
    [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
    */
    function rectangularSelection(options) {
        let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
        return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
    }
    const keys = {
        Alt: [18, e => e.altKey],
        Control: [17, e => e.ctrlKey],
        Shift: [16, e => e.shiftKey],
        Meta: [91, e => e.metaKey]
    };
    const showCrosshair = { style: "cursor: crosshair" };
    /**
    Returns an extension that turns the pointer cursor into a
    crosshair when a given modifier key, defaulting to Alt, is held
    down. Can serve as a visual hint that rectangular selection is
    going to happen when paired with
    [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
    */
    function crosshairCursor(options = {}) {
        let [code, getter] = keys[options.key || "Alt"];
        let plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.isDown = false;
            }
            set(isDown) {
                if (this.isDown != isDown) {
                    this.isDown = isDown;
                    this.view.update([]);
                }
            }
        }, {
            eventHandlers: {
                keydown(e) {
                    this.set(e.keyCode == code || getter(e));
                },
                keyup(e) {
                    if (e.keyCode == code || !getter(e))
                        this.set(false);
                }
            }
        });
        return [
            plugin,
            EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
        ];
    }

    const Outside = "-10000px";
    class TooltipViewManager {
        constructor(view, facet, createTooltipView) {
            this.facet = facet;
            this.createTooltipView = createTooltipView;
            this.input = view.state.facet(facet);
            this.tooltips = this.input.filter(t => t);
            this.tooltipViews = this.tooltips.map(createTooltipView);
        }
        update(update) {
            let input = update.state.facet(this.facet);
            let tooltips = input.filter(x => x);
            if (input === this.input) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
                return false;
            }
            let tooltipViews = [];
            for (let i = 0; i < tooltips.length; i++) {
                let tip = tooltips[i], known = -1;
                if (!tip)
                    continue;
                for (let i = 0; i < this.tooltips.length; i++) {
                    let other = this.tooltips[i];
                    if (other && other.create == tip.create)
                        known = i;
                }
                if (known < 0) {
                    tooltipViews[i] = this.createTooltipView(tip);
                }
                else {
                    let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                    if (tooltipView.update)
                        tooltipView.update(update);
                }
            }
            for (let t of this.tooltipViews)
                if (tooltipViews.indexOf(t) < 0)
                    t.dom.remove();
            this.input = input;
            this.tooltips = tooltips;
            this.tooltipViews = tooltipViews;
            return true;
        }
    }
    function windowSpace() {
        return { top: 0, left: 0, bottom: innerHeight, right: innerWidth };
    }
    const tooltipConfig = /*@__PURE__*/Facet.define({
        combine: values => {
            var _a, _b, _c;
            return ({
                position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
                parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
                tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
            });
        }
    });
    const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            var _a;
            this.view = view;
            this.inView = true;
            this.lastTransaction = 0;
            this.measureTimeout = -1;
            let config = view.state.facet(tooltipConfig);
            this.position = config.position;
            this.parent = config.parent;
            this.classes = view.themeClasses;
            this.createContainer();
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
            this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
                if (Date.now() > this.lastTransaction - 50 &&
                    entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                    this.measureSoon();
            }, { threshold: [1] }) : null;
            this.observeIntersection();
            (_a = view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
            this.maybeMeasure();
        }
        createContainer() {
            if (this.parent) {
                this.container = document.createElement("div");
                this.container.style.position = "relative";
                this.container.className = this.view.themeClasses;
                this.parent.appendChild(this.container);
            }
            else {
                this.container = this.view.dom;
            }
        }
        observeIntersection() {
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
                for (let tooltip of this.manager.tooltipViews)
                    this.intersectionObserver.observe(tooltip.dom);
            }
        }
        measureSoon() {
            if (this.measureTimeout < 0)
                this.measureTimeout = setTimeout(() => {
                    this.measureTimeout = -1;
                    this.maybeMeasure();
                }, 50);
        }
        update(update) {
            if (update.transactions.length)
                this.lastTransaction = Date.now();
            let updated = this.manager.update(update);
            if (updated)
                this.observeIntersection();
            let shouldMeasure = updated || update.geometryChanged;
            let newConfig = update.state.facet(tooltipConfig);
            if (newConfig.position != this.position) {
                this.position = newConfig.position;
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = this.position;
                shouldMeasure = true;
            }
            if (newConfig.parent != this.parent) {
                if (this.parent)
                    this.container.remove();
                this.parent = newConfig.parent;
                this.createContainer();
                for (let t of this.manager.tooltipViews)
                    this.container.appendChild(t.dom);
                shouldMeasure = true;
            }
            else if (this.parent && this.view.themeClasses != this.classes) {
                this.classes = this.container.className = this.view.themeClasses;
            }
            if (shouldMeasure)
                this.maybeMeasure();
        }
        createTooltip(tooltip) {
            let tooltipView = tooltip.create(this.view);
            tooltipView.dom.classList.add("cm-tooltip");
            if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
                let arrow = document.createElement("div");
                arrow.className = "cm-tooltip-arrow";
                tooltipView.dom.appendChild(arrow);
            }
            tooltipView.dom.style.position = this.position;
            tooltipView.dom.style.top = Outside;
            this.container.appendChild(tooltipView.dom);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            return tooltipView;
        }
        destroy() {
            var _a, _b;
            (_a = this.view.dom.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.removeEventListener("resize", this.measureSoon);
            for (let { dom } of this.manager.tooltipViews)
                dom.remove();
            (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
            clearTimeout(this.measureTimeout);
        }
        readMeasure() {
            let editor = this.view.dom.getBoundingClientRect();
            return {
                editor,
                parent: this.parent ? this.container.getBoundingClientRect() : editor,
                pos: this.manager.tooltips.map((t, i) => {
                    let tv = this.manager.tooltipViews[i];
                    return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
                }),
                size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
            };
        }
        writeMeasure(measured) {
            let { editor, space } = measured;
            let others = [];
            for (let i = 0; i < this.manager.tooltips.length; i++) {
                let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                    pos.top >= Math.min(editor.bottom, space.bottom) ||
                    pos.right < Math.max(editor.left, space.left) - .1 ||
                    pos.left > Math.min(editor.right, space.right) + .1) {
                    dom.style.top = Outside;
                    continue;
                }
                let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
                let arrowHeight = arrow ? 7 /* Size */ : 0;
                let width = size.right - size.left, height = size.bottom - size.top;
                let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
                let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
                    : ltr ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0) + offset.x, space.right - width)
                        : Math.max(space.left, pos.left - width + (arrow ? 14 /* Offset */ : 0) - offset.x);
                let above = !!tooltip.above;
                if (!tooltip.strictSide && (above
                    ? pos.top - (size.bottom - size.top) - offset.y < space.top
                    : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                    above == (space.bottom - pos.bottom > pos.top - space.top))
                    above = !above;
                let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
                let right = left + width;
                if (tView.overlap !== true)
                    for (let r of others)
                        if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                            top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
                if (this.position == "absolute") {
                    dom.style.top = (top - measured.parent.top) + "px";
                    dom.style.left = (left - measured.parent.left) + "px";
                }
                else {
                    dom.style.top = top + "px";
                    dom.style.left = left + "px";
                }
                if (arrow)
                    arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Offset */ - 7 /* Size */)}px`;
                if (tView.overlap !== true)
                    others.push({ left, top, right, bottom: top + height });
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned();
            }
        }
        maybeMeasure() {
            if (this.manager.tooltips.length) {
                if (this.view.inView)
                    this.view.requestMeasure(this.measureReq);
                if (this.inView != this.view.inView) {
                    this.inView = this.view.inView;
                    if (!this.inView)
                        for (let tv of this.manager.tooltipViews)
                            tv.dom.style.top = Outside;
                }
            }
        }
    }, {
        eventHandlers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip": {
            zIndex: 100
        },
        "&light .cm-tooltip": {
            border: "1px solid #bbb",
            backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
            borderTop: "1px solid #bbb",
        },
        "&dark .cm-tooltip": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tooltip-arrow": {
            height: `${7 /* Size */}px`,
            width: `${7 /* Size */ * 2}px`,
            position: "absolute",
            zIndex: -1,
            overflow: "hidden",
            "&:before, &:after": {
                content: "''",
                position: "absolute",
                width: 0,
                height: 0,
                borderLeft: `${7 /* Size */}px solid transparent`,
                borderRight: `${7 /* Size */}px solid transparent`,
            },
            ".cm-tooltip-above &": {
                bottom: `-${7 /* Size */}px`,
                "&:before": {
                    borderTop: `${7 /* Size */}px solid #bbb`,
                },
                "&:after": {
                    borderTop: `${7 /* Size */}px solid #f5f5f5`,
                    bottom: "1px"
                }
            },
            ".cm-tooltip-below &": {
                top: `-${7 /* Size */}px`,
                "&:before": {
                    borderBottom: `${7 /* Size */}px solid #bbb`,
                },
                "&:after": {
                    borderBottom: `${7 /* Size */}px solid #f5f5f5`,
                    top: "1px"
                }
            },
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
            "&:before": {
                borderTopColor: "#333338",
                borderBottomColor: "#333338"
            },
            "&:after": {
                borderTopColor: "transparent",
                borderBottomColor: "transparent"
            }
        }
    });
    const noOffset = { x: 0, y: 0 };
    /**
    Facet to which an extension can add a value to show a tooltip.
    */
    const showTooltip = /*@__PURE__*/Facet.define({
        enables: [tooltipPlugin, baseTheme$4]
    });
    const showHoverTooltip = /*@__PURE__*/Facet.define();
    class HoverTooltipHost {
        constructor(view) {
            this.view = view;
            this.mounted = false;
            this.dom = document.createElement("div");
            this.dom.classList.add("cm-tooltip-hover");
            this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
        }
        // Needs to be static so that host tooltip instances always match
        static create(view) {
            return new HoverTooltipHost(view);
        }
        createHostedView(tooltip) {
            let hostedView = tooltip.create(this.view);
            hostedView.dom.classList.add("cm-tooltip-section");
            this.dom.appendChild(hostedView.dom);
            if (this.mounted && hostedView.mount)
                hostedView.mount(this.view);
            return hostedView;
        }
        mount(view) {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.mount)
                    hostedView.mount(view);
            }
            this.mounted = true;
        }
        positioned() {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.positioned)
                    hostedView.positioned();
            }
        }
        update(update) {
            this.manager.update(update);
        }
    }
    const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
        let tooltips = state.facet(showHoverTooltip).filter(t => t);
        if (tooltips.length === 0)
            return null;
        return {
            pos: Math.min(...tooltips.map(t => t.pos)),
            end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
            create: HoverTooltipHost.create,
            above: tooltips[0].above,
            arrow: tooltips.some(t => t.arrow),
        };
    });
    class HoverPlugin {
        constructor(view, source, field, setHover, hoverTime) {
            this.view = view;
            this.source = source;
            this.field = field;
            this.setHover = setHover;
            this.hoverTime = hoverTime;
            this.hoverTimeout = -1;
            this.restartTimeout = -1;
            this.pending = null;
            this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
            this.checkHover = this.checkHover.bind(this);
            view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
            view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        update() {
            if (this.pending) {
                this.pending = null;
                clearTimeout(this.restartTimeout);
                this.restartTimeout = setTimeout(() => this.startHover(), 20);
            }
        }
        get active() {
            return this.view.state.field(this.field);
        }
        checkHover() {
            this.hoverTimeout = -1;
            if (this.active)
                return;
            let hovered = Date.now() - this.lastMove.time;
            if (hovered < this.hoverTime)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
            else
                this.startHover();
        }
        startHover() {
            clearTimeout(this.restartTimeout);
            let { lastMove } = this;
            let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
            if (pos == null)
                return;
            let posCoords = this.view.coordsAtPos(pos);
            if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
                lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||
                lastMove.x > posCoords.right + this.view.defaultCharacterWidth)
                return;
            let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
            let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
            let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));
            if (open === null || open === void 0 ? void 0 : open.then) {
                let pending = this.pending = { pos };
                open.then(result => {
                    if (this.pending == pending) {
                        this.pending = null;
                        if (result)
                            this.view.dispatch({ effects: this.setHover.of(result) });
                    }
                }, e => logException(this.view.state, e, "hover tooltip"));
            }
            else if (open) {
                this.view.dispatch({ effects: this.setHover.of(open) });
            }
        }
        mousemove(event) {
            var _a;
            this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
            if (this.hoverTimeout < 0)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
            let tooltip = this.active;
            if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
                let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
                if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                    : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */))) {
                    this.view.dispatch({ effects: this.setHover.of(null) });
                    this.pending = null;
                }
            }
        }
        mouseleave() {
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = -1;
            if (this.active)
                this.view.dispatch({ effects: this.setHover.of(null) });
        }
        destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
    }
    function isInTooltip(elt) {
        for (let cur = elt; cur; cur = cur.parentNode)
            if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
                return true;
        return false;
    }
    function isOverRange(view, from, to, x, y, margin) {
        let range = document.createRange();
        let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        let rects = range.getClientRects();
        range.detach();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
            if (dist <= margin)
                return true;
        }
        return false;
    }
    /**
    Set up a hover tooltip, which shows up when the pointer hovers
    over ranges of text. The callback is called when the mouse hovers
    over the document text. It should, if there is a tooltip
    associated with position `pos`, return the tooltip description
    (either directly or in a promise). The `side` argument indicates
    on which side of the position the pointer is—it will be -1 if the
    pointer is before the position, 1 if after the position.

    Note that all hover tooltips are hosted within a single tooltip
    container element. This allows multiple tooltips over the same
    range to be "merged" together without overlapping.
    */
    function hoverTooltip(source, options = {}) {
        let setHover = StateEffect.define();
        let hoverState = StateField.define({
            create() { return null; },
            update(value, tr) {
                if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||
                    options.hideOn && options.hideOn(tr, value)))
                    return null;
                if (value && tr.docChanged) {
                    let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
                    if (newPos == null)
                        return null;
                    let copy = Object.assign(Object.create(null), value);
                    copy.pos = newPos;
                    if (value.end != null)
                        copy.end = tr.changes.mapPos(value.end);
                    value = copy;
                }
                for (let effect of tr.effects) {
                    if (effect.is(setHover))
                        value = effect.value;
                    if (effect.is(closeHoverTooltipEffect))
                        value = null;
                }
                return value;
            },
            provide: f => showHoverTooltip.from(f)
        });
        return [
            hoverState,
            ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Time */)),
            showHoverTooltipHost
        ];
    }
    /**
    Get the active tooltip view for a given tooltip, if available.
    */
    function getTooltip(view, tooltip) {
        let plugin = view.plugin(tooltipPlugin);
        if (!plugin)
            return null;
        let found = plugin.manager.tooltips.indexOf(tooltip);
        return found < 0 ? null : plugin.manager.tooltipViews[found];
    }
    const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

    const panelConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let topContainer, bottomContainer;
            for (let c of configs) {
                topContainer = topContainer || c.topContainer;
                bottomContainer = bottomContainer || c.bottomContainer;
            }
            return { topContainer, bottomContainer };
        }
    });
    /**
    Get the active panel created by the given constructor, if any.
    This can be useful when you need access to your panels' DOM
    structure.
    */
    function getPanel(view, panel) {
        let plugin = view.plugin(panelPlugin);
        let index = plugin ? plugin.specs.indexOf(panel) : -1;
        return index > -1 ? plugin.panels[index] : null;
    }
    const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.input = view.state.facet(showPanel);
            this.specs = this.input.filter(s => s);
            this.panels = this.specs.map(spec => spec(view));
            let conf = view.state.facet(panelConfig);
            this.top = new PanelGroup(view, true, conf.topContainer);
            this.bottom = new PanelGroup(view, false, conf.bottomContainer);
            this.top.sync(this.panels.filter(p => p.top));
            this.bottom.sync(this.panels.filter(p => !p.top));
            for (let p of this.panels) {
                p.dom.classList.add("cm-panel");
                if (p.mount)
                    p.mount();
            }
        }
        update(update) {
            let conf = update.state.facet(panelConfig);
            if (this.top.container != conf.topContainer) {
                this.top.sync([]);
                this.top = new PanelGroup(update.view, true, conf.topContainer);
            }
            if (this.bottom.container != conf.bottomContainer) {
                this.bottom.sync([]);
                this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
            }
            this.top.syncClasses();
            this.bottom.syncClasses();
            let input = update.state.facet(showPanel);
            if (input != this.input) {
                let specs = input.filter(x => x);
                let panels = [], top = [], bottom = [], mount = [];
                for (let spec of specs) {
                    let known = this.specs.indexOf(spec), panel;
                    if (known < 0) {
                        panel = spec(update.view);
                        mount.push(panel);
                    }
                    else {
                        panel = this.panels[known];
                        if (panel.update)
                            panel.update(update);
                    }
                    panels.push(panel);
                    (panel.top ? top : bottom).push(panel);
                }
                this.specs = specs;
                this.panels = panels;
                this.top.sync(top);
                this.bottom.sync(bottom);
                for (let p of mount) {
                    p.dom.classList.add("cm-panel");
                    if (p.mount)
                        p.mount();
                }
            }
            else {
                for (let p of this.panels)
                    if (p.update)
                        p.update(update);
            }
        }
        destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
        })
    });
    class PanelGroup {
        constructor(view, top, container) {
            this.view = view;
            this.top = top;
            this.container = container;
            this.dom = undefined;
            this.classes = "";
            this.panels = [];
            this.syncClasses();
        }
        sync(panels) {
            for (let p of this.panels)
                if (p.destroy && panels.indexOf(p) < 0)
                    p.destroy();
            this.panels = panels;
            this.syncDOM();
        }
        syncDOM() {
            if (this.panels.length == 0) {
                if (this.dom) {
                    this.dom.remove();
                    this.dom = undefined;
                }
                return;
            }
            if (!this.dom) {
                this.dom = document.createElement("div");
                this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
                this.dom.style[this.top ? "top" : "bottom"] = "0";
                let parent = this.container || this.view.dom;
                parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }
            let curDOM = this.dom.firstChild;
            for (let panel of this.panels) {
                if (panel.dom.parentNode == this.dom) {
                    while (curDOM != panel.dom)
                        curDOM = rm(curDOM);
                    curDOM = curDOM.nextSibling;
                }
                else {
                    this.dom.insertBefore(panel.dom, curDOM);
                }
            }
            while (curDOM)
                curDOM = rm(curDOM);
        }
        scrollMargin() {
            return !this.dom || this.container ? 0
                : Math.max(0, this.top ?
                    this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                    Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses)
                return;
            for (let cls of this.classes.split(" "))
                if (cls)
                    this.container.classList.remove(cls);
            for (let cls of (this.classes = this.view.themeClasses).split(" "))
                if (cls)
                    this.container.classList.add(cls);
        }
    }
    function rm(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
    }
    /**
    Opening a panel is done by providing a constructor function for
    the panel through this facet. (The panel is closed again when its
    constructor is no longer provided.) Values of `null` are ignored.
    */
    const showPanel = /*@__PURE__*/Facet.define({
        enables: panelPlugin
    });

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    /**
    Facet used to add a class to all gutter elements for a given line.
    Markers given to this facet should _only_ define an
    [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
    [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
    in all gutters for the line).
    */
    const gutterLineClass = /*@__PURE__*/Facet.define();
    const defaults$1 = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = /*@__PURE__*/Facet.define();
    /**
    Define an editor gutter. The order in which the gutters appear is
    determined by their extension priority.
    */
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
    }
    const unfixGutters = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    /**
    The gutter-drawing plugin is automatically enabled when you add a
    gutter, but you can use this function to explicitly configure it.

    Unless `fixed` is explicitly set to `false`, the gutters are
    fixed, meaning they don't scroll along with the content
    horizontally (except on Internet Explorer, which doesn't support
    CSS [`position:
    sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    */
    function gutters(config) {
        let result = [
            gutterView,
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters.of(true));
        return result;
    }
    const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.prevViewport = view.viewport;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters";
            this.dom.setAttribute("aria-hidden", "true");
            this.dom.style.minHeight = this.view.contentHeight + "px";
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            this.syncGutters(false);
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (this.updateGutters(update)) {
                // Detach during sync when the viewport changed significantly
                // (such as during scrolling), since for large updates that is
                // faster.
                let vpA = this.prevViewport, vpB = update.view.viewport;
                let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
                this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
            }
            if (update.geometryChanged)
                this.dom.style.minHeight = this.view.contentHeight + "px";
            if (this.view.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
            this.prevViewport = update.view.viewport;
        }
        syncGutters(detach) {
            let after = this.dom.nextSibling;
            if (detach)
                this.dom.remove();
            let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
            let classSet = [];
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
            for (let line of this.view.viewportLineBlocks) {
                let text;
                if (Array.isArray(line.type)) {
                    for (let b of line.type)
                        if (b.type == BlockType.Text) {
                            text = b;
                            break;
                        }
                }
                else {
                    text = line.type == BlockType.Text ? line : undefined;
                }
                if (!text)
                    continue;
                if (classSet.length)
                    classSet = [];
                advanceCursor(lineClasses, classSet, line.from);
                for (let cx of contexts)
                    cx.line(this.view, text, classSet);
            }
            for (let cx of contexts)
                cx.finish();
            if (detach)
                this.view.scrollDOM.insertBefore(this.dom, after);
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged ||
                !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters) {
                    g.dom.remove();
                    if (gutters.indexOf(g) < 0)
                        g.destroy();
                }
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            for (let view of this.gutters)
                view.destroy();
            this.dom.remove();
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            if (!value || value.gutters.length == 0 || !value.fixed)
                return null;
            return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
            if (cursor.from == pos)
                collect.push(cursor.value);
            cursor.next();
        }
    }
    class UpdateContext {
        constructor(gutter, viewport, height) {
            this.gutter = gutter;
            this.height = height;
            this.localMarkers = [];
            this.i = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        line(view, line, extraMarkers) {
            if (this.localMarkers.length)
                this.localMarkers = [];
            advanceCursor(this.cursor, this.localMarkers, line.from);
            let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
            let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
            if (forLine)
                localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            let above = line.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, line.height, above, localMarkers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                gutter.elements[this.i].update(view, line.height, above, localMarkers);
            }
            this.height = line.bottom;
            this.i++;
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i) {
                let last = gutter.elements.pop();
                gutter.dom.removeChild(last.dom);
                last.destroy();
            }
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let line = view.lineBlockAtHeight(event.clientY - view.documentTop);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            let vp = update.view.viewport;
            return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
                (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
        }
        destroy() {
            for (let elt of this.elements)
                elt.destroy();
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.markers = [];
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutterElement";
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height)
                this.dom.style.height = (this.height = height) + "px";
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (!sameMarkers(this.markers, markers))
                this.setMarkers(view, markers);
        }
        setMarkers(view, markers) {
            let cls = "cm-gutterElement", domPos = this.dom.firstChild;
            for (let iNew = 0, iOld = 0;;) {
                let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
                if (marker) {
                    let c = marker.elementClass;
                    if (c)
                        cls += " " + c;
                    for (let i = iOld; i < this.markers.length; i++)
                        if (this.markers[i].compare(marker)) {
                            skipTo = i;
                            matched = true;
                            break;
                        }
                }
                else {
                    skipTo = this.markers.length;
                }
                while (iOld < skipTo) {
                    let next = this.markers[iOld++];
                    if (next.toDOM) {
                        next.destroy(domPos);
                        let after = domPos.nextSibling;
                        domPos.remove();
                        domPos = after;
                    }
                }
                if (!marker)
                    break;
                if (marker.toDOM) {
                    if (matched)
                        domPos = domPos.nextSibling;
                    else
                        this.dom.insertBefore(marker.toDOM(view), domPos);
                }
                if (matched)
                    iOld++;
            }
            this.dom.className = cls;
            this.markers = markers;
        }
        destroy() {
            this.setMarkers(null, []); // First argument not used unless creating markers
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /**
    Facet used to provide markers to the line number gutter.
    */
    const lineNumberMarkers = /*@__PURE__*/Facet.define();
    const lineNumberConfig = /*@__PURE__*/Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM() { return document.createTextNode(this.number); }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.some(m => m.toDOM))
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    }));
    /**
    Create a line number gutter extension.
    */
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            gutters(),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }
    const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
        constructor() {
            super(...arguments);
            this.elementClass = "cm-activeLineGutter";
        }
    };
    const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
        let marks = [], last = -1;
        for (let range of state.selection.ranges)
            if (range.empty) {
                let linePos = state.doc.lineAt(range.head).from;
                if (linePos > last) {
                    last = linePos;
                    marks.push(activeLineGutterMarker.range(linePos));
                }
            }
        return RangeSet.of(marks);
    });
    /**
    Returns an extension that adds a `cm-activeLineGutter` class to
    all gutter elements on the [active
    line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
    */
    function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
    }

    // FIXME profile adding a per-Tree TreeNode cache, validating it by
    // parent pointer
    /// The default maximum length of a `TreeBuffer` node.
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    /// can have metadata associated with it in props. Instances of this
    /// class represent prop names.
    class NodeProp {
        /// Create a new node prop type.
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// This is meant to be used with
        /// [`NodeSet.extend`](#common.NodeSet.extend) or
        /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
        /// prop values for each node type in the set. Takes a [match
        /// object](#common.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /// Prop that is used to describe matching delimiters. For opening
    /// delimiters, this holds an array of node names (written as a
    /// space-separated string when declaring this prop in a grammar)
    /// for the node types of closing delimiters that match it.
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    /// attached to closing delimiters, holding an array of node names
    /// of types of matching opening delimiters.
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// Used to assign node types to groups (for example, all node
    /// types that represent an expression could be tagged with an
    /// `"Expression"` group).
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /// The hash of the [context](#lr.ContextTracker.constructor)
    /// that the node was parsed in, if any. Used to limit reuse of
    /// contextual nodes.
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /// The distance beyond the end of the node that the tokenizer
    /// looked ahead for any of the tokens inside the node. (The LR
    /// parser only stores this when it is larger than 25, for
    /// efficiency reasons.)
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /// This per-node prop is used to replace a given node, or part of a
    /// node, with another tree. This is useful to include trees from
    /// different languages in mixed-language parsers.
    NodeProp.mounted = new NodeProp({ perNode: true });
    /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
    /// a tree node to indicate that parts of its content are
    /// represented by another tree.
    class MountedTree {
        constructor(
        /// The inner tree.
        tree, 
        /// If this is null, this tree replaces the entire node (it will
        /// be included in the regular iteration instead of its host
        /// node). If not, only the given ranges are considered to be
        /// covered by this tree. This is used for trees that are mixed in
        /// a way that isn't strictly hierarchical. Such mounted trees are
        /// only entered by [`resolveInner`](#common.Tree.resolveInner)
        /// and [`enter`](#common.SyntaxNode.enter).
        overlay, 
        /// The parser used to create this subtree.
        parser) {
            this.tree = tree;
            this.overlay = overlay;
            this.parser = parser;
        }
    }
    const noProps = Object.create(null);
    /// Each node in a syntax tree has a node type associated with it.
    class NodeType {
        /// @internal
        constructor(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node set should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its set. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /// Define a node type.
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
                (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        prop(prop) { return this.props[prop.id]; }
        /// True when this is the top node of a grammar.
        get isTop() { return (this.flags & 1 /* Top */) > 0; }
        /// True when this node is produced by a skip rule.
        get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
        /// Indicates whether this is an error node.
        get isError() { return (this.flags & 4 /* Error */) > 0; }
        /// When true, this node type doesn't correspond to a user-declared
        /// named node, for example because it is used to cache repetition.
        get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
        /// Returns true when this node's name or one of its
        /// [groups](#common.NodeProp^group) matches the given string.
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#common.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /// An empty dummy node type to use when no actual type is available.
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
    /// A node set holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a numeric array. Each parser
    /// [has](#lr.LRParser.nodeSet) a node set, and [tree
    /// buffers](#common.TreeBuffer) can only store collections of nodes
    /// from the same set. A set can have a maximum of 2**16 (65536) node
    /// types in it, so that the ids fit into 16-bit typed array slots.
    class NodeSet {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        constructor(
        /// The node types in this set, by id.
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /// Create a copy of this set with some node properties added. The
        /// arguments to this method can be created with
        /// [`NodeProp.add`](#common.NodeProp.add).
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        newProps[add[0].id] = add[1];
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
    /// Options that control iteration. Can be combined with the `|`
    /// operator to enable multiple ones.
    var IterMode;
    (function (IterMode) {
        /// When enabled, iteration will only visit [`Tree`](#common.Tree)
        /// objects, not nodes packed into
        /// [`TreeBuffer`](#common.TreeBuffer)s.
        IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        /// Enable this to make iteration include anonymous nodes (such as
        /// the nodes that wrap repeated grammar constructs into a balanced
        /// tree).
        IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        /// By default, regular [mounted](#common.NodeProp^mounted) nodes
        /// replace their base node in iteration. Enable this to ignore them
        /// instead.
        IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
        /// This option only applies in
        /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
        /// library to not enter mounted overlays if one covers the given
        /// position.
        IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the [`TreeCursor`](#common.TreeCursor) or
    /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    /// a view on some part of this data structure, and can be used to
    /// move around to adjacent nodes.
    class Tree {
        /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        constructor(
        /// The type of the top node.
        type, 
        /// This node's child nodes.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length, 
        /// Per-node [node props](#common.NodeProp) to associate with this node.
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /// @internal
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /// @internal
        toString() {
            let mounted = this.prop(NodeProp.mounted);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
        /// the tree. Mode can be used to [control](#common.IterMode) which
        /// nodes the cursor visits.
        cursor(mode = 0) {
            return new TreeCursor(this.topNode, mode);
        }
        /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
        /// at the given position and side (see
        /// [`moveTo`](#common.TreeCursor.moveTo).
        cursorAt(pos, side = 0, mode = 0) {
            let scope = CachedNode.get(this) || this.topNode;
            let cursor = new TreeCursor(scope);
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
            return cursor;
        }
        /// Get a [syntax node](#common.SyntaxNode) object for the top of the
        /// tree.
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /// Get the [syntax node](#common.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        resolve(pos, side = 0) {
            let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
        }
        /// Like [`resolve`](#common.Tree.resolve), but will enter
        /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        /// pointing into the innermost overlaid tree at the given position
        /// (with parent links going through all parent structure, including
        /// the host trees).
        resolveInner(pos, side = 0) {
            let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
        }
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, that node will
        /// not have its children iterated over (or `leave` called).
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
                let entered = false;
                if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
                    if (c.firstChild())
                        continue;
                    entered = true;
                }
                for (;;) {
                    if (entered && leave && !c.type.isAnonymous)
                        leave(c);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    entered = true;
                }
            }
        }
        /// Get the value of the given [node prop](#common.NodeProp) for this
        /// node. Works with both per-node and per-type props.
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
        /// format that can be passed to the [`Tree`](#common.Tree)
        /// constructor.
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /// Balance the direct children of this tree, producing a copy of
        /// which may have children grouped into subtrees with type
        /// [`NodeType.none`](#common.NodeType^none).
        balance(config = {}) {
            return this.children.length <= 8 /* BranchFactor */ ? this :
                balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        static build(data) { return buildTree(data); }
    }
    /// The empty tree
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it).
    class TreeBuffer {
        /// Create a tree buffer.
        constructor(
        /// The buffer's content.
        buffer, 
        /// The total length of the group of nodes in the buffer.
        length, 
        /// The node set used in this buffer.
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /// @internal
        get type() { return NodeType.none; }
        /// @internal
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /// @internal
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /// @internal
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /// @internal
        slice(startI, endI, from, to) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI);
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
            }
            return new TreeBuffer(copy, to - from, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Before */: return from < pos;
            case -1 /* AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Around */: return from < pos && to > pos;
            case 1 /* AtOrAfter */: return from <= pos && to > pos;
            case 2 /* After */: return to > pos;
            case 4 /* DontCare */: return true;
        }
    }
    function enterUnfinishedNodesBefore(node, pos) {
        let scan = node.childBefore(pos);
        while (scan) {
            let last = scan.lastChild;
            if (!last || last.to != scan.to)
                break;
            if (last.type.isError && last.from == last.to) {
                node = scan;
                scan = last.prevSibling;
            }
            else {
                scan = last;
            }
        }
        return node;
    }
    function resolveNode(node, pos, side, overlays) {
        var _a;
        // Move up to a node that actually holds the position, if possible
        while (node.from == node.to ||
            (side < 1 ? node.from >= pos : node.from > pos) ||
            (side > -1 ? node.to <= pos : node.to < pos)) {
            let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
            if (!parent)
                return node;
            node = parent;
        }
        let mode = overlays ? 0 : IterMode.IgnoreOverlays;
        // Must go up out of overlays when those do not overlap with pos
        if (overlays)
            for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
                if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                    node = parent;
            }
        for (;;) {
            let inner = node.enter(pos, side, mode);
            if (!inner)
                return node;
            node = inner;
        }
    }
    class TreeNode {
        constructor(_tree, from, 
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            this._tree = _tree;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this._tree.type; }
        get name() { return this._tree.type.name; }
        get to() { return this.from + this._tree.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & IterMode.ExcludeBuffers)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (!(mode & IterMode.IgnoreMounts) &&
                            next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent._tree.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }
        get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }
        childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }
        enter(pos, side, mode = 0) {
            let mounted;
            if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return this._tree; }
        toTree() { return this._tree; }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        /// @internal
        toString() { return this._tree.toString(); }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor(), result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    function matchNodeContext(node, context, i = context.length - 1) {
        for (let p = node.parent; i >= 0; p = p.parent) {
            if (!p)
                return false;
            if (!p.type.isAnonymous) {
                if (context[i] && context[i] != p.name)
                    return false;
                i--;
            }
        }
        return true;
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode {
        constructor(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }
        enter(pos, side, mode = 0) {
            if (mode & IterMode.ExcludeBuffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
                children.push(buffer.slice(startI, endI, from, to));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        /// @internal
        toString() { return this.context.buffer.childString(this.index); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    class TreeCursor {
        /// @internal
        constructor(node, 
        /// @internal
        mode = 0) {
            this.mode = mode;
            /// @internal
            this.buffer = null;
            this.stack = [];
            /// @internal
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        /// Shorthand for `.type.name`.
        get name() { return this.type.name; }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /// @internal
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /// @internal
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }
        /// Move the cursor to this node's last child.
        lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }
        /// Move the cursor to the first child that ends after `pos`.
        childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }
        /// Move to the last child that starts before `pos`.
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }
        /// Move the cursor to the child around `pos`. If side is -1 the
        /// child may end at that position, when 1 it may start there. This
        /// will also enter [overlaid](#common.MountedTree.overlay)
        /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        /// set to false.
        enter(pos, side, mode = this.mode) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, mode));
            return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /// Move to the node's parent node, if this isn't the top node.
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /// @internal
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;
        }
        /// Move to this node's next sibling, if any.
        nextSibling() { return this.sibling(1); }
        /// Move to this node's previous sibling, if any.
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                        let child = parent._tree.children[i];
                        if ((this.mode & IterMode.IncludeAnonymous) ||
                            child instanceof TreeBuffer ||
                            !child.type.isAnonymous ||
                            hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
        /// traversal, going from a node to its first child or, if the
        /// current node is empty or `enter` is false, its next sibling or
        /// the next sibling of the first parent node that has one.
        next(enter = true) { return this.move(1, enter); }
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by its last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        prev(enter = true) { return this.move(-1, enter); }
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
        /// position.
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /// Get the [tree](#common.Tree) that represents the current node, if
        /// any. Will return null when the node is in a [tree
        /// buffer](#common.TreeBuffer).
        get tree() {
            return this.buffer ? null : this._tree._tree;
        }
        /// Iterate over the current node and all its descendants, calling
        /// `enter` when entering a node and `leave`, if given, when leaving
        /// one. When `enter` returns `false`, any children of that node are
        /// skipped, and `leave` isn't called for it.
        iterate(enter, leave) {
            for (let depth = 0;;) {
                let mustLeave = false;
                if (this.type.isAnonymous || enter(this) !== false) {
                    if (this.firstChild()) {
                        depth++;
                        continue;
                    }
                    if (!this.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(this);
                    mustLeave = this.type.isAnonymous;
                    if (this.nextSibling())
                        break;
                    if (!depth)
                        return;
                    this.parent();
                    depth--;
                    mustLeave = true;
                }
            }
        }
        /// Test whether the current node matches a given context—a sequence
        /// of direct parent node names. Empty strings in the context array
        /// are treated as wildcards.
        matchContext(context) {
            if (!this.buffer)
                return matchNodeContext(this.node, context);
            let { buffer } = this.buffer, { types } = buffer.set;
            for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
                if (d < 0)
                    return matchNodeContext(this.node, context, i);
                let type = types[buffer.buffer[this.stack[d]]];
                if (!type.isAnonymous) {
                    if (context[i] && context[i] != type.name)
                        return false;
                    i--;
                }
            }
            return true;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function makeBalanced(type) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead = 0, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = 1;
            for (let child of node.children) {
                if (child.type != balanceType || !(child instanceof Tree)) {
                    size = 1;
                    break;
                }
                size += nodeSize(balanceType, child);
            }
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type the balanced tree's inner nodes.
    balanceType, 
    // The direct children and their positions
    children, positions, 
    // The index range in children/positions to use
    from, to, 
    // The start position of the nodes, relative to their parent.
    start, 
    // Length of the outer node
    length, 
    // Function to build the top node of the balanced tree
    mkTop, 
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(balanceType, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom]; // Only trees can have a size > 1
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }
    /// Provides a way to associate values with pieces of trees. As long
    /// as that part of the tree is reused, the associated values can be
    /// retrieved from an updated tree.
    class NodeWeakMap {
        constructor() {
            this.map = new WeakMap();
        }
        setBuffer(buffer, index, value) {
            let inner = this.map.get(buffer);
            if (!inner)
                this.map.set(buffer, inner = new Map);
            inner.set(index, value);
        }
        getBuffer(buffer, index) {
            let inner = this.map.get(buffer);
            return inner && inner.get(index);
        }
        /// Set the value for this syntax node.
        set(node, value) {
            if (node instanceof BufferNode)
                this.setBuffer(node.context.buffer, node.index, value);
            else if (node instanceof TreeNode)
                this.map.set(node.tree, value);
        }
        /// Retrieve value for this syntax node, if it exists in the map.
        get(node) {
            return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
                : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
        }
        /// Set the value for the node that a cursor currently points to.
        cursorSet(cursor, value) {
            if (cursor.buffer)
                this.setBuffer(cursor.buffer.buffer, cursor.index, value);
            else
                this.map.set(cursor.tree, value);
        }
        /// Retrieve the value for the node that a cursor currently points
        /// to.
        cursorGet(cursor) {
            return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
        }
    }

    /// Tree fragments are used during [incremental
    /// parsing](#common.Parser.startParse) to track parts of old trees
    /// that can be reused in a new parse. An array of fragments is used
    /// to track regions of an old tree whose nodes might be reused in new
    /// parses. Use the static
    /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
    /// update fragments for document changes.
    class TreeFragment {
        /// Construct a tree fragment. You'll usually want to use
        /// [`addTree`](#common.TreeFragment^addTree) and
        /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        /// calling this directly.
        constructor(
        /// The start of the unchanged range pointed to by this fragment.
        /// This refers to an offset in the _updated_ document (as opposed
        /// to the original tree).
        from, 
        /// The end of the unchanged range.
        to, 
        /// The tree that this fragment is based on.
        tree, 
        /// The offset between the fragment's tree and the document that
        /// this fragment can be used against. Add this when going from
        /// document to tree positions, subtract it to go from tree to
        /// document positions.
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
        }
        /// Whether the start of the fragment represents the start of a
        /// parse, or the end of a change. (In the second case, it may not
        /// be safe to reuse some nodes at the start, depending on the
        /// parsing algorithm.)
        get openStart() { return (this.open & 1 /* Start */) > 0; }
        /// Whether the end of the fragment represents the end of a
        /// full-document parse, or the start of a change.
        get openEnd() { return (this.open & 2 /* End */) > 0; }
        /// Create a set of fragments from a freshly parsed tree, or update
        /// an existing set of fragments by replacing the ones that overlap
        /// with a tree with content from the new tree. When `partial` is
        /// true, the parse is treated as incomplete, and the resulting
        /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        /// true.
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /// Apply a set of edits to an array of fragments, removing or
        /// splitting fragments as necessary to remove edited ranges, and
        /// adjusting offsets for fragments that moved.
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /// A superclass that parsers should extend.
    class Parser {
        /// Start a parse, returning a [partial parse](#common.PartialParse)
        /// object. [`fragments`](#common.TreeFragment) can be passed in to
        /// make the parse incremental.
        ///
        /// By default, the entire input is parsed. You can pass `ranges`,
        /// which should be a sorted array of non-empty, non-overlapping
        /// ranges, to parse only those ranges. The tree returned in that
        /// case will start at `ranges[0].from`.
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /// Run a full parse, returning the resulting tree.
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    }
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }

    /// Create a parse wrapper that, after the inner parse completes,
    /// scans its tree for mixed language regions with the `nest`
    /// function, runs the resulting [inner parses](#common.NestedParse),
    /// and then [mounts](#common.NodeProp^mounted) their results onto the
    /// tree.
    function parseMixed(nest) {
        return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
    }
    class InnerParse {
        constructor(parser, parse, overlay, target, ranges) {
            this.parser = parser;
            this.parse = parse;
            this.overlay = overlay;
            this.target = target;
            this.ranges = ranges;
        }
    }
    class ActiveOverlay {
        constructor(parser, predicate, mounts, index, start, target, prev) {
            this.parser = parser;
            this.predicate = predicate;
            this.mounts = mounts;
            this.index = index;
            this.start = start;
            this.target = target;
            this.prev = prev;
            this.depth = 0;
            this.ranges = [];
        }
    }
    const stoppedInner = new NodeProp({ perNode: true });
    class MixedParse {
        constructor(base, nest, input, fragments, ranges) {
            this.nest = nest;
            this.input = input;
            this.fragments = fragments;
            this.ranges = ranges;
            this.inner = [];
            this.innerDone = 0;
            this.baseTree = null;
            this.stoppedAt = null;
            this.baseParse = base;
        }
        advance() {
            if (this.baseParse) {
                let done = this.baseParse.advance();
                if (!done)
                    return null;
                this.baseParse = null;
                this.baseTree = done;
                this.startInner();
                if (this.stoppedAt != null)
                    for (let inner of this.inner)
                        inner.parse.stopAt(this.stoppedAt);
            }
            if (this.innerDone == this.inner.length) {
                let result = this.baseTree;
                if (this.stoppedAt != null)
                    result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
                return result;
            }
            let inner = this.inner[this.innerDone], done = inner.parse.advance();
            if (done) {
                this.innerDone++;
                // This is a somewhat dodgy but super helpful hack where we
                // patch up nodes created by the inner parse (and thus
                // presumably not aliased anywhere else) to hold the information
                // about the inner parse.
                let props = Object.assign(Object.create(null), inner.target.props);
                props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
                inner.target.props = props;
            }
            return null;
        }
        get parsedPos() {
            if (this.baseParse)
                return 0;
            let pos = this.input.length;
            for (let i = this.innerDone; i < this.inner.length; i++) {
                if (this.inner[i].ranges[0].from < pos)
                    pos = Math.min(pos, this.inner[i].parse.parsedPos);
            }
            return pos;
        }
        stopAt(pos) {
            this.stoppedAt = pos;
            if (this.baseParse)
                this.baseParse.stopAt(pos);
            else
                for (let i = this.innerDone; i < this.inner.length; i++)
                    this.inner[i].parse.stopAt(pos);
        }
        startInner() {
            let fragmentCursor = new FragmentCursor$2(this.fragments);
            let overlay = null;
            let covered = null;
            let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
            scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {
                let enter = true, range;
                if (fragmentCursor.hasNode(cursor)) {
                    if (overlay) {
                        let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                        if (match)
                            for (let r of match.mount.overlay) {
                                let from = r.from + match.pos, to = r.to + match.pos;
                                if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
                                    overlay.ranges.push({ from, to });
                            }
                    }
                    enter = false;
                }
                else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                    enter = isCovered != 2 /* Full */;
                }
                else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                    if (!cursor.tree)
                        materialize(cursor);
                    let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                    if (typeof nest.overlay == "function") {
                        overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                    }
                    else {
                        let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
                        if (ranges.length)
                            this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));
                        if (!nest.overlay)
                            enter = false;
                        else if (ranges.length)
                            covered = { ranges, depth: 0, prev: covered };
                    }
                }
                else if (overlay && (range = overlay.predicate(cursor))) {
                    if (range === true)
                        range = new Range(cursor.from, cursor.to);
                    if (range.from < range.to)
                        overlay.ranges.push(range);
                }
                if (enter && cursor.firstChild()) {
                    if (overlay)
                        overlay.depth++;
                    if (covered)
                        covered.depth++;
                }
                else {
                    for (;;) {
                        if (cursor.nextSibling())
                            break;
                        if (!cursor.parent())
                            break scan;
                        if (overlay && !--overlay.depth) {
                            let ranges = punchRanges(this.ranges, overlay.ranges);
                            if (ranges.length)
                                this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));
                            overlay = overlay.prev;
                        }
                        if (covered && !--covered.depth)
                            covered = covered.prev;
                    }
                }
            }
        }
    }
    function checkCover(covered, from, to) {
        for (let range of covered) {
            if (range.from >= to)
                break;
            if (range.to > from)
                return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;
        }
        return 0 /* None */;
    }
    // Take a piece of buffer and convert it into a stand-alone
    // TreeBuffer.
    function sliceBuf(buf, startI, endI, nodes, positions, off) {
        if (startI < endI) {
            let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];
            nodes.push(buf.slice(startI, endI, from, to));
            positions.push(from - off);
        }
    }
    // This function takes a node that's in a buffer, and converts it, and
    // its parent buffer nodes, into a Tree. This is again acting on the
    // assumption that the trees and buffers have been constructed by the
    // parse that was ran via the mix parser, and thus aren't shared with
    // any other code, making violations of the immutability safe.
    function materialize(cursor) {
        let { node } = cursor, depth = 0;
        // Scan up to the nearest tree
        do {
            cursor.parent();
            depth++;
        } while (!cursor.tree);
        // Find the index of the buffer in that tree
        let i = 0, base = cursor.tree, off = 0;
        for (;; i++) {
            off = base.positions[i] + cursor.from;
            if (off <= node.from && off + base.children[i].length >= node.to)
                break;
        }
        let buf = base.children[i], b = buf.buffer;
        // Split a level in the buffer, putting the nodes before and after
        // the child that contains `node` into new buffers.
        function split(startI, endI, type, innerOffset, length) {
            let i = startI;
            while (b[i + 2] + off <= node.from)
                i = b[i + 3];
            let children = [], positions = [];
            sliceBuf(buf, startI, i, children, positions, innerOffset);
            let from = b[i + 1], to = b[i + 2];
            let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;
            children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));
            positions.push(from - innerOffset);
            sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
            return new Tree(type, children, positions, length);
        }
        base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);
        // Move the cursor back to the target node
        for (let d = 0; d <= depth; d++)
            cursor.childAfter(node.from);
    }
    class StructureCursor {
        constructor(root, offset) {
            this.offset = offset;
            this.done = false;
            this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
        }
        // Move to the first node (in pre-order) that starts at or after `pos`.
        moveTo(pos) {
            let { cursor } = this, p = pos - this.offset;
            while (!this.done && cursor.from < p) {
                if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
                else if (!cursor.next(false))
                    this.done = true;
            }
        }
        hasNode(cursor) {
            this.moveTo(cursor.from);
            if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
                for (let tree = this.cursor.tree;;) {
                    if (tree == cursor.tree)
                        return true;
                    if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                        tree = tree.children[0];
                    else
                        break;
                }
            }
            return false;
        }
    }
    class FragmentCursor$2 {
        constructor(fragments) {
            var _a;
            this.fragments = fragments;
            this.curTo = 0;
            this.fragI = 0;
            if (fragments.length) {
                let first = this.curFrag = fragments[0];
                this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
                this.inner = new StructureCursor(first.tree, -first.offset);
            }
            else {
                this.curFrag = this.inner = null;
            }
        }
        hasNode(node) {
            while (this.curFrag && node.from >= this.curTo)
                this.nextFrag();
            return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
        }
        nextFrag() {
            var _a;
            this.fragI++;
            if (this.fragI == this.fragments.length) {
                this.curFrag = this.inner = null;
            }
            else {
                let frag = this.curFrag = this.fragments[this.fragI];
                this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
                this.inner = new StructureCursor(frag.tree, -frag.offset);
            }
        }
        findMounts(pos, parser) {
            var _a;
            let result = [];
            if (this.inner) {
                this.inner.cursor.moveTo(pos, 1);
                for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                    let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                    if (mount && mount.parser == parser) {
                        for (let i = this.fragI; i < this.fragments.length; i++) {
                            let frag = this.fragments[i];
                            if (frag.from >= pos.to)
                                break;
                            if (frag.tree == this.curFrag.tree)
                                result.push({
                                    frag,
                                    pos: pos.from - frag.offset,
                                    mount
                                });
                        }
                    }
                }
            }
            return result;
        }
    }
    function punchRanges(outer, ranges) {
        let copy = null, current = ranges;
        for (let i = 1, j = 0; i < outer.length; i++) {
            let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
            for (; j < current.length; j++) {
                let r = current[j];
                if (r.from >= gapTo)
                    break;
                if (r.to <= gapFrom)
                    continue;
                if (!copy)
                    current = copy = ranges.slice();
                if (r.from < gapFrom) {
                    copy[j] = new Range(r.from, gapFrom);
                    if (r.to > gapTo)
                        copy.splice(j + 1, 0, new Range(gapTo, r.to));
                }
                else if (r.to > gapTo) {
                    copy[j--] = new Range(gapTo, r.to);
                }
                else {
                    copy.splice(j--, 1);
                }
            }
        }
        return current;
    }
    function findCoverChanges(a, b, from, to) {
        let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
        let result = [];
        for (;;) {
            let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
            let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
            if (inA != inB) {
                let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
                if (start < end)
                    result.push(new Range(start, end));
            }
            pos = Math.min(nextA, nextB);
            if (pos == 1e9)
                break;
            if (nextA == pos) {
                if (!inA)
                    inA = true;
                else {
                    inA = false;
                    iA++;
                }
            }
            if (nextB == pos) {
                if (!inB)
                    inB = true;
                else {
                    inB = false;
                    iB++;
                }
            }
        }
        return result;
    }
    // Given a number of fragments for the outer tree, and a set of ranges
    // to parse, find fragments for inner trees mounted around those
    // ranges, if any.
    function enterFragments(mounts, ranges) {
        let result = [];
        for (let { pos, mount, frag } of mounts) {
            let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
            let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
            if (mount.overlay) {
                let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
                let changes = findCoverChanges(ranges, overlay, from, to);
                for (let i = 0, pos = from;; i++) {
                    let last = i == changes.length, end = last ? to : changes[i].from;
                    if (end > pos)
                        result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));
                    if (last)
                        break;
                    pos = changes[i].to;
                }
            }
            else {
                result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));
            }
        }
        return result;
    }

    let nextTagID = 0;
    /// Highlighting tags are markers that denote a highlighting category.
    /// They are [associated](#highlight.styleTags) with parts of a syntax
    /// tree by a language mode, and then mapped to an actual CSS style by
    /// a [highlighter](#highlight.Highlighter).
    ///
    /// Because syntax tree node types and highlight styles have to be
    /// able to talk the same language, CodeMirror uses a mostly _closed_
    /// [vocabulary](#highlight.tags) of syntax tags (as opposed to
    /// traditional open string-based systems, which make it hard for
    /// highlighting themes to cover all the tokens produced by the
    /// various languages).
    ///
    /// It _is_ possible to [define](#highlight.Tag^define) your own
    /// highlighting tags for system-internal use (where you control both
    /// the language package and the highlighter), but such tags will not
    /// be picked up by regular highlighters (though you can derive them
    /// from standard tags to allow highlighters to fall back to those).
    class Tag {
        /// @internal
        constructor(
        /// The set of this tag and all its parent tags, starting with
        /// this one itself and sorted in order of decreasing specificity.
        set, 
        /// The base unmodified tag that this one is based on, if it's
        /// modified @internal
        base, 
        /// The modifiers applied to this.base @internal
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /// @internal
            this.id = nextTagID++;
        }
        /// Define a new tag. If `parent` is given, the tag is treated as a
        /// sub-tag of that parent, and
        /// [highlighters](#highlight.tagHighlighter) that don't mention
        /// this tag will try to fall back to the parent tag (or grandparent
        /// tag, etc).
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /// Define a tag _modifier_, which is a function that, given a tag,
        /// will return a tag that is a subtag of the original. Applying the
        /// same modifier to a twice tag will return the same value (`m1(t1)
        /// == m1(t1)`) and applying multiple modifiers will, regardless or
        /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        ///
        /// When multiple modifiers are applied to a given base tag, each
        /// smaller set of modifiers is registered as a parent, so that for
        /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        /// `m1(m3(t1)`, and so on.
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = permute(mods);
            for (let parent of base.set)
                for (let config of configs)
                    set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function permute(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
            for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
                result.push(a);
        }
        return result;
    }
    /// This function is used to add a set of tags to a language syntax
    /// via [`NodeSet.extend`](#common.NodeSet.extend) or
    /// [`LRParser.configure`](#lr.LRParser.configure).
    ///
    /// The argument object maps node selectors to [highlighting
    /// tags](#highlight.Tag) or arrays of tags.
    ///
    /// Node selectors may hold one or more (space-separated) node paths.
    /// Such a path can be a [node name](#common.NodeType.name), or
    /// multiple node names (or `*` wildcards) separated by slash
    /// characters, as in `"Block/Declaration/VariableName"`. Such a path
    /// matches the final node but only if its direct parent nodes are the
    /// other nodes mentioned. A `*` in such a path matches any parent,
    /// but only a single level—wildcards that match multiple parents
    /// aren't supported, both for efficiency reasons and because Lezer
    /// trees make it rather hard to reason about what they would match.)
    ///
    /// A path can be ended with `/...` to indicate that the tag assigned
    /// to the node should also apply to all child nodes, even if they
    /// match their own style (by default, only the innermost style is
    /// used).
    ///
    /// When a path ends in `!`, as in `Attribute!`, no further matching
    /// happens for the node's child nodes, and the entire node gets the
    /// given style.
    ///
    /// In this notation, node names that contain `/`, `!`, `*`, or `...`
    /// must be quoted as JSON strings.
    ///
    /// For example:
    ///
    /// ```javascript
    /// parser.withProps(
    ///   styleTags({
    ///     // Style Number and BigNumber nodes
    ///     "Number BigNumber": tags.number,
    ///     // Style Escape nodes whose parent is String
    ///     "String/Escape": tags.escape,
    ///     // Style anything inside Attributes nodes
    ///     "Attributes!": tags.meta,
    ///     // Add a style to all content inside Italic nodes
    ///     "Italic/...": tags.emphasis,
    ///     // Style InvalidString nodes as both `string` and `invalid`
    ///     "InvalidString": [tags.string, tags.invalid],
    ///     // Style the node named "/" as punctuation
    ///     '"/"': tags.punctuation
    ///   })
    /// )
    /// ```
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    /// Define a [highlighter](#highlight.Highlighter) from an array of
    /// tag/class pairs. Classes associated with more specific tags will
    /// take precedence.
    function tagHighlighter(tags, options) {
        let map = Object.create(null);
        for (let style of tags) {
            if (!Array.isArray(style.tag))
                map[style.tag.id] = style.class;
            else
                for (let tag of style.tag)
                    map[tag.id] = style.class;
        }
        let { scope, all = null } = options || {};
        return {
            style: (tags) => {
                let cls = all;
                for (let tag of tags) {
                    for (let sub of tag.set) {
                        let tagClass = map[sub.id];
                        if (tagClass) {
                            cls = cls ? cls + " " + tagClass : tagClass;
                            break;
                        }
                    }
                }
                return cls;
            },
            scope: scope
        };
    }
    function highlightTags(highlighters, tags) {
        let result = null;
        for (let highlighter of highlighters) {
            let value = highlighter.style(tags);
            if (value)
                result = result ? result + " " + value : value;
        }
        return result;
    }
    /// Highlight the given [tree](#common.Tree) with the given
    /// [highlighter](#highlight.Highlighter).
    function highlightTree(tree, highlighter, 
    /// Assign styling to a region of the text. Will be called, in order
    /// of position, for any ranges where more than zero classes apply.
    /// `classes` is a space separated string of CSS classes.
    putStyle, 
    /// The start of the range to highlight.
    from = 0, 
    /// The end of the range.
    to = tree.length) {
        let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
        builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
        builder.flush(to);
    }
    class HighlightBuilder {
        constructor(at, highlighters, span) {
            this.at = at;
            this.highlighters = highlighters;
            this.span = span;
            this.class = "";
        }
        startSpan(at, cls) {
            if (cls != this.class) {
                this.flush(at);
                if (at > this.at)
                    this.at = at;
                this.class = cls;
            }
        }
        flush(to) {
            if (to > this.at && this.class)
                this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, highlighters) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            if (type.isTop)
                highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
            let cls = inheritedClass;
            let rule = type.prop(ruleNodeProp), opaque = false;
            while (rule) {
                if (!rule.context || cursor.matchContext(rule.context)) {
                    let tagCls = highlightTags(highlighters, rule.tags);
                    if (tagCls) {
                        if (cls)
                            cls += " ";
                        cls += tagCls;
                        if (rule.mode == 1 /* Inherit */)
                            inheritedClass += (inheritedClass ? " " : "") + tagCls;
                        else if (rule.mode == 0 /* Opaque */)
                            opaque = true;
                    }
                    break;
                }
                rule = rule.next;
            }
            this.startSpan(cursor.from, cls);
            if (opaque)
                return;
            let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
            if (mounted && mounted.overlay) {
                let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
                let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
                let hasChild = cursor.firstChild();
                for (let i = 0, pos = start;; i++) {
                    let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                    let nextPos = next ? next.from + start : end;
                    let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                    if (rangeFrom < rangeTo && hasChild) {
                        while (cursor.from < rangeTo) {
                            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                            this.startSpan(Math.min(to, cursor.to), cls);
                            if (cursor.to >= nextPos || !cursor.nextSibling())
                                break;
                        }
                    }
                    if (!next || nextPos > to)
                        break;
                    pos = next.to + start;
                    if (pos > from) {
                        this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
                        this.startSpan(pos, cls);
                    }
                }
                if (hasChild)
                    cursor.parent();
            }
            else if (cursor.firstChild()) {
                do {
                    if (cursor.to <= from)
                        continue;
                    if (cursor.from >= to)
                        break;
                    this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                    this.startSpan(Math.min(to, cursor.to), cls);
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
    }
    const t = Tag.define;
    const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /// The default set of highlighting [tags](#highlight.Tag).
    ///
    /// This collection is heavily biased towards programming languages,
    /// and necessarily incomplete. A full ontology of syntactic
    /// constructs would fill a stack of books, and be impractical to
    /// write themes for. So try to make do with this set. If all else
    /// fails, [open an
    /// issue](https://github.com/codemirror/codemirror.next) to propose a
    /// new tag, or [define](#highlight.Tag^define) a local custom tag for
    /// your use case.
    ///
    /// Note that it is not obligatory to always attach the most specific
    /// tag possible to an element—if your grammar can't easily
    /// distinguish a certain type of element (such as a local variable),
    /// it is okay to style it as its more general variant (a variable).
    /// 
    /// For tags that extend some parent tag, the documentation links to
    /// the parent.
    const tags$1 = {
        /// A comment.
        comment,
        /// A line [comment](#highlight.tags.comment).
        lineComment: t(comment),
        /// A block [comment](#highlight.tags.comment).
        blockComment: t(comment),
        /// A documentation [comment](#highlight.tags.comment).
        docComment: t(comment),
        /// Any kind of identifier.
        name,
        /// The [name](#highlight.tags.name) of a variable.
        variableName: t(name),
        /// A type [name](#highlight.tags.name).
        typeName: typeName,
        /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        tagName: t(typeName),
        /// A property or field [name](#highlight.tags.name).
        propertyName: propertyName,
        /// An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        attributeName: t(propertyName),
        /// The [name](#highlight.tags.name) of a class.
        className: t(name),
        /// A label [name](#highlight.tags.name).
        labelName: t(name),
        /// A namespace [name](#highlight.tags.name).
        namespace: t(name),
        /// The [name](#highlight.tags.name) of a macro.
        macroName: t(name),
        /// A literal value.
        literal,
        /// A string [literal](#highlight.tags.literal).
        string,
        /// A documentation [string](#highlight.tags.string).
        docString: t(string),
        /// A character literal (subtag of [string](#highlight.tags.string)).
        character: t(string),
        /// An attribute value (subtag of [string](#highlight.tags.string)).
        attributeValue: t(string),
        /// A number [literal](#highlight.tags.literal).
        number,
        /// An integer [number](#highlight.tags.number) literal.
        integer: t(number),
        /// A floating-point [number](#highlight.tags.number) literal.
        float: t(number),
        /// A boolean [literal](#highlight.tags.literal).
        bool: t(literal),
        /// Regular expression [literal](#highlight.tags.literal).
        regexp: t(literal),
        /// An escape [literal](#highlight.tags.literal), for example a
        /// backslash escape in a string.
        escape: t(literal),
        /// A color [literal](#highlight.tags.literal).
        color: t(literal),
        /// A URL [literal](#highlight.tags.literal).
        url: t(literal),
        /// A language keyword.
        keyword,
        /// The [keyword](#highlight.tags.keyword) for the self or this
        /// object.
        self: t(keyword),
        /// The [keyword](#highlight.tags.keyword) for null.
        null: t(keyword),
        /// A [keyword](#highlight.tags.keyword) denoting some atomic value.
        atom: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that represents a unit.
        unit: t(keyword),
        /// A modifier [keyword](#highlight.tags.keyword).
        modifier: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that acts as an operator.
        operatorKeyword: t(keyword),
        /// A control-flow related [keyword](#highlight.tags.keyword).
        controlKeyword: t(keyword),
        /// A [keyword](#highlight.tags.keyword) that defines something.
        definitionKeyword: t(keyword),
        /// A [keyword](#highlight.tags.keyword) related to defining or
        /// interfacing with modules.
        moduleKeyword: t(keyword),
        /// An operator.
        operator,
        /// An [operator](#highlight.tags.operator) that defines something.
        derefOperator: t(operator),
        /// Arithmetic-related [operator](#highlight.tags.operator).
        arithmeticOperator: t(operator),
        /// Logical [operator](#highlight.tags.operator).
        logicOperator: t(operator),
        /// Bit [operator](#highlight.tags.operator).
        bitwiseOperator: t(operator),
        /// Comparison [operator](#highlight.tags.operator).
        compareOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that updates its operand.
        updateOperator: t(operator),
        /// [Operator](#highlight.tags.operator) that defines something.
        definitionOperator: t(operator),
        /// Type-related [operator](#highlight.tags.operator).
        typeOperator: t(operator),
        /// Control-flow [operator](#highlight.tags.operator).
        controlOperator: t(operator),
        /// Program or markup punctuation.
        punctuation,
        /// [Punctuation](#highlight.tags.punctuation) that separates
        /// things.
        separator: t(punctuation),
        /// Bracket-style [punctuation](#highlight.tags.punctuation).
        bracket,
        /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        /// tokens).
        angleBracket: t(bracket),
        /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        /// tokens).
        squareBracket: t(bracket),
        /// Parentheses (usually `(` and `)` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket).
        paren: t(bracket),
        /// Braces (usually `{` and `}` tokens). Subtag of
        /// [bracket](#highlight.tags.bracket).
        brace: t(bracket),
        /// Content, for example plain text in XML or markup documents.
        content,
        /// [Content](#highlight.tags.content) that represents a heading.
        heading,
        /// A level 1 [heading](#highlight.tags.heading).
        heading1: t(heading),
        /// A level 2 [heading](#highlight.tags.heading).
        heading2: t(heading),
        /// A level 3 [heading](#highlight.tags.heading).
        heading3: t(heading),
        /// A level 4 [heading](#highlight.tags.heading).
        heading4: t(heading),
        /// A level 5 [heading](#highlight.tags.heading).
        heading5: t(heading),
        /// A level 6 [heading](#highlight.tags.heading).
        heading6: t(heading),
        /// A prose separator (such as a horizontal rule).
        contentSeparator: t(content),
        /// [Content](#highlight.tags.content) that represents a list.
        list: t(content),
        /// [Content](#highlight.tags.content) that represents a quote.
        quote: t(content),
        /// [Content](#highlight.tags.content) that is emphasized.
        emphasis: t(content),
        /// [Content](#highlight.tags.content) that is styled strong.
        strong: t(content),
        /// [Content](#highlight.tags.content) that is part of a link.
        link: t(content),
        /// [Content](#highlight.tags.content) that is styled as code or
        /// monospace.
        monospace: t(content),
        /// [Content](#highlight.tags.content) that has a strike-through
        /// style.
        strikethrough: t(content),
        /// Inserted text in a change-tracking format.
        inserted: t(),
        /// Deleted text.
        deleted: t(),
        /// Changed text.
        changed: t(),
        /// An invalid or unsyntactic element.
        invalid: t(),
        /// Metadata or meta-instruction.
        meta,
        /// [Metadata](#highlight.tags.meta) that applies to the entire
        /// document.
        documentMeta: t(meta),
        /// [Metadata](#highlight.tags.meta) that annotates or adds
        /// attributes to a given syntactic element.
        annotation: t(meta),
        /// Processing instruction or preprocessor directive. Subtag of
        /// [meta](#highlight.tags.meta).
        processingInstruction: t(meta),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that a
        /// given element is being defined. Expected to be used with the
        /// various [name](#highlight.tags.name) tags.
        definition: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates that
        /// something is constant. Mostly expected to be used with
        /// [variable names](#highlight.tags.variableName).
        constant: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) used to indicate that
        /// a [variable](#highlight.tags.variableName) or [property
        /// name](#highlight.tags.propertyName) is being called or defined
        /// as a function.
        function: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that can be applied to
        /// [names](#highlight.tags.name) to indicate that they belong to
        /// the language's standard environment.
        standard: Tag.defineModifier(),
        /// [Modifier](#highlight.Tag^defineModifier) that indicates a given
        /// [names](#highlight.tags.name) is local to some scope.
        local: Tag.defineModifier(),
        /// A generic variant [modifier](#highlight.Tag^defineModifier) that
        /// can be used to tag language-specific alternative variants of
        /// some common tag. It is recommended for themes to define special
        /// forms of at least the [string](#highlight.tags.string) and
        /// [variable name](#highlight.tags.variableName) tags, since those
        /// come up a lot.
        special: Tag.defineModifier()
    };
    /// This is a highlighter that adds stable, predictable classes to
    /// tokens, for styling with external CSS.
    ///
    /// The following tags are mapped to their name prefixed with `"tok-"`
    /// (for example `"tok-comment"`):
    ///
    /// * [`link`](#highlight.tags.link)
    /// * [`heading`](#highlight.tags.heading)
    /// * [`emphasis`](#highlight.tags.emphasis)
    /// * [`strong`](#highlight.tags.strong)
    /// * [`keyword`](#highlight.tags.keyword)
    /// * [`atom`](#highlight.tags.atom)
    /// * [`bool`](#highlight.tags.bool)
    /// * [`url`](#highlight.tags.url)
    /// * [`labelName`](#highlight.tags.labelName)
    /// * [`inserted`](#highlight.tags.inserted)
    /// * [`deleted`](#highlight.tags.deleted)
    /// * [`literal`](#highlight.tags.literal)
    /// * [`string`](#highlight.tags.string)
    /// * [`number`](#highlight.tags.number)
    /// * [`variableName`](#highlight.tags.variableName)
    /// * [`typeName`](#highlight.tags.typeName)
    /// * [`namespace`](#highlight.tags.namespace)
    /// * [`className`](#highlight.tags.className)
    /// * [`macroName`](#highlight.tags.macroName)
    /// * [`propertyName`](#highlight.tags.propertyName)
    /// * [`operator`](#highlight.tags.operator)
    /// * [`comment`](#highlight.tags.comment)
    /// * [`meta`](#highlight.tags.meta)
    /// * [`punctuation`](#highlight.tags.punctuation)
    /// * [`invalid`](#highlight.tags.invalid)
    ///
    /// In addition, these mappings are provided:
    ///
    /// * [`regexp`](#highlight.tags.regexp),
    ///   [`escape`](#highlight.tags.escape), and
    ///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
    ///   are mapped to `"tok-string2"`
    /// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"tok-variableName2"`
    /// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"tok-variableName tok-local"`
    /// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
    ///   to `"tok-variableName tok-definition"`
    /// * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
    ///   to `"tok-propertyName tok-definition"`
    tagHighlighter([
        { tag: tags$1.link, class: "tok-link" },
        { tag: tags$1.heading, class: "tok-heading" },
        { tag: tags$1.emphasis, class: "tok-emphasis" },
        { tag: tags$1.strong, class: "tok-strong" },
        { tag: tags$1.keyword, class: "tok-keyword" },
        { tag: tags$1.atom, class: "tok-atom" },
        { tag: tags$1.bool, class: "tok-bool" },
        { tag: tags$1.url, class: "tok-url" },
        { tag: tags$1.labelName, class: "tok-labelName" },
        { tag: tags$1.inserted, class: "tok-inserted" },
        { tag: tags$1.deleted, class: "tok-deleted" },
        { tag: tags$1.literal, class: "tok-literal" },
        { tag: tags$1.string, class: "tok-string" },
        { tag: tags$1.number, class: "tok-number" },
        { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
        { tag: tags$1.variableName, class: "tok-variableName" },
        { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
        { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
        { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
        { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags$1.typeName, class: "tok-typeName" },
        { tag: tags$1.namespace, class: "tok-namespace" },
        { tag: tags$1.className, class: "tok-className" },
        { tag: tags$1.macroName, class: "tok-macroName" },
        { tag: tags$1.propertyName, class: "tok-propertyName" },
        { tag: tags$1.operator, class: "tok-operator" },
        { tag: tags$1.comment, class: "tok-comment" },
        { tag: tags$1.meta, class: "tok-meta" },
        { tag: tags$1.invalid, class: "tok-invalid" },
        { tag: tags$1.punctuation, class: "tok-punctuation" }
    ]);

    var _a;
    /**
    Node prop stored in a parser's top syntax node to provide the
    facet that stores language-specific data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Helper function to define a facet (to be added to the top syntax
    node(s) for a language via
    [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
    used to associate language data with the language. You
    probably only need this when subclassing
    [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
    */
    function defineLanguageFacet(baseData) {
        return Facet.define({
            combine: baseData ? values => values.concat(baseData) : undefined
        });
    }
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. The class
    can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
    subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
    via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
    for stream parsers.
    */
    class Language {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
        used for this language.
        */
        data, parser, extraExtensions = []) {
            this.data = data;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return languageDataFacetAt(state, pos, side) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function languageDataFacetAt(state, pos, side) {
        let topLang = state.facet(language);
        if (!topLang)
            return null;
        let facet = topLang.data;
        if (topLang.allowsNesting) {
            for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
                facet = node.type.prop(languageDataProp) || facet;
        }
        return facet;
    }
    /**
    A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
    [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
    parsers.
    */
    class LRLanguage extends Language {
        constructor(data, parser) {
            super(data, parser);
            this.parser = parser;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
            let data = defineLanguageFacet(spec.languageData);
            return new LRLanguage(data, spec.parser.configure({
                props: [languageDataProp.add(type => type.isTop ? data : undefined)]
            }));
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser.
        */
        configure(options) {
            return new LRLanguage(this.data, this.parser.configure(options));
        }
        get allowsNesting() { return this.parser.hasWrappers(); }
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of the active
    [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
    language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    // Lezer-style Input object for a Text document.
    class DocInput {
        constructor(doc, length = doc.length) {
            this.doc = doc;
            this.length = length;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, 
        /**
        @internal
        */
        treeLen, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser, state, viewport) {
            return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (typeof until == "number") {
                    let endTime = Date.now() + until;
                    until = () => Date.now() > endTime;
                }
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (until())
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.treeLen = pos;
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        isDone(upto) {
            upto = Math.min(upto, this.state.doc.length);
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged && this.tree == this.context.tree)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(20 /* Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);
            let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
            if (!parseState.work(20 /* Apply */, vpTo))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500 /* MaxPause */);
        return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
            let idle = -1, timeout = setTimeout(() => {
                idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });
            }, 100 /* MinPause */);
            return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
    const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
        ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = null;
            this.workScheduled = 0;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work);
        }
        work(deadline) {
            this.working = null;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* ChunkTime */;
                this.chunkBudget = 3000 /* ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))
                return;
            let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);
            let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
            let done = field.context.work(() => {
                return isInputPending && isInputPending() || Date.now() > endTime;
            }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (this.chunkBudget > 0 && !(done && !viewportFirst))
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                this.workScheduled++;
                cx.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch(err => logException(this.view.state, err))
                    .then(() => this.workScheduled--);
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working)
                this.working();
        }
        isWorking() {
            return !!(this.working || this.workScheduled > 0);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state. Used
    by `Language` object's `extension` property (so you don't need to
    manually wrap your languages in this). Can be used to access the
    current language on a state.
    */
    const language = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: [Language.state, parseWorker]
    });
    /**
    This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
    optional set of supporting extensions. Language packages are
    encouraged to export a function that optionally takes a
    configuration object and returns a `LanguageSupport` instance, as
    the main way for client code to use the package.
    */
    class LanguageSupport {
        /**
        Create a language support object.
        */
        constructor(
        /**
        The language object.
        */
        language, 
        /**
        An optional set of supporting extensions. When nesting a
        language in another language, the outer language is encouraged
        to include the supporting extensions for its inner languages
        in its own set of support extensions.
        */
        support = []) {
            this.language = language;
            this.support = support;
            this.extension = [language, support];
        }
    }
    /**
    Language descriptions are used to store metadata about languages
    and to dynamically load them. Their main role is finding the
    appropriate language for a filename or dynamically loading nested
    parsers.
    */
    class LanguageDescription {
        constructor(
        /**
        The name of this language.
        */
        name, 
        /**
        Alternative names for the mode (lowercased, includes `this.name`).
        */
        alias, 
        /**
        File extensions associated with this language.
        */
        extensions, 
        /**
        Optional filename pattern that should be associated with this
        language.
        */
        filename, loadFunc, 
        /**
        If the language has been loaded, this will hold its value.
        */
        support = undefined) {
            this.name = name;
            this.alias = alias;
            this.extensions = extensions;
            this.filename = filename;
            this.loadFunc = loadFunc;
            this.support = support;
            this.loading = null;
        }
        /**
        Start loading the the language. Will return a promise that
        resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
        object when the language successfully loads.
        */
        load() {
            return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));
        }
        /**
        Create a language description.
        */
        static of(spec) {
            let { load, support } = spec;
            if (!load) {
                if (!support)
                    throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
                load = () => Promise.resolve(support);
            }
            return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
        }
        /**
        Look for a language in the given array of descriptions that
        matches the filename. Will first match
        [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
        and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
        and return the first language that matches.
        */
        static matchFilename(descs, filename) {
            for (let d of descs)
                if (d.filename && d.filename.test(filename))
                    return d;
            let ext = /\.([^.]+)$/.exec(filename);
            if (ext)
                for (let d of descs)
                    if (d.extensions.indexOf(ext[1]) > -1)
                        return d;
            return null;
        }
        /**
        Look for a language whose name or alias matches the the given
        name (case-insensitively). If `fuzzy` is true, and no direct
        matchs is found, this'll also search for a language whose name
        or alias occurs in the string (for names shorter than three
        characters, only when surrounded by non-word characters).
        */
        static matchLanguageName(descs, name, fuzzy = true) {
            name = name.toLowerCase();
            for (let d of descs)
                if (d.alias.some(a => a == name))
                    return d;
            if (fuzzy)
                for (let d of descs)
                    for (let a of d.alias) {
                        let found = name.indexOf(a);
                        if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length])))
                            return d;
                    }
            return null;
        }
    }

    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth at the start of a given line, or
    `null` to indicate no appropriate indentation could be determined.
    */
    const indentService = /*@__PURE__*/Facet.define();
    /**
    Facet for overriding the unit by which indentation happens.
    Should be a string consisting either entirely of spaces or
    entirely of tabs. When not set, this defaults to 2 spaces.
    */
    const indentUnit = /*@__PURE__*/Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            if (!/^(?: +|\t+)$/.test(values[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return values[0];
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize;
        if (state.facet(indentUnit).charCodeAt(0) == 9)
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
        for (let i = 0; i < cols; i++)
            result += " ";
        return result;
    }
    /**
    Get the indentation at the given position. Will first consult any
    [indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
    and if none of those return an indentation, this will check the
    syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
    and use that if found. Returns a number when an indentation could
    be determined, and null otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result != null)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state, 
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */
        lineAt(pos, bias = 1) {
            let line = this.state.doc.lineAt(pos);
            let { simulateBreak, simulateDoubleBreak } = this.options;
            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
                if (simulateDoubleBreak && simulateBreak == pos)
                    return { text: "", from: pos };
                else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                    return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
                else
                    return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
            }
            return line;
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos, bias = 1) {
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
                return "";
            let { text, from } = this.lineAt(pos, bias);
            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
        }
        /**
        Find the column for the given position.
        */
        column(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let result = this.countColumn(text, pos - from);
            let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
        }
        /**
        Find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos = line.length) {
            return countColumn(line, this.state.tabSize, pos);
        }
        /**
        Find the indentation column of the line at the given point.
        */
        lineIndent(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let override = this.options.overrideIndentation;
            if (override) {
                let overriden = override(from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(text, text.search(/\S|$/));
        }
        /**
        Returns the [simulated line
        break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        for this context, if any.
        */
        get simulatedBreak() {
            return this.options.simulateBreak || null;
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number or null, where null indicates that no
    definitive indentation can be determined.
    */
    const indentNodeProp = /*@__PURE__*/new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
    }
    function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent : null;
    }
    function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
            let strategy = indentStrategy(node);
            if (strategy)
                return strategy(TreeIndentContext.create(base, pos, node));
        }
        return null;
    }
    function topIndent() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions registered on syntax nodes.
    */
    class TreeIndentContext extends IndentContext {
        constructor(base, 
        /**
        The position at which indentation is being computed.
        */
        pos, 
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        node) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.node = node;
        }
        /**
        @internal
        */
        static create(base, pos, node) {
            return new TreeIndentContext(base, pos, node);
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            let line = this.state.doc.lineAt(this.node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = this.node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, this.node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line.from);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            let parent = this.node.parent;
            return parent ? indentFrom(parent, this.pos, this.base) : 0;
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped)
                return next.from < lineEnd ? openToken : null;
            pos = next.to;
        }
    }
    /**
    An indentation strategy for delimited (usually bracketed) nodes.
    Will, by default, indent one unit more than the parent's base
    indent unless the line starts with a closing token. When `align`
    is true and there are non-skipped nodes on the node's opening
    line, the content of the node will be aligned with the end of the
    opening node, like this:

        foo(bar,
            baz)
    */
    function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    /**
    An indentation strategy that aligns a node's content to its base
    indentation.
    */
    const flatIndent = (context) => context.baseIndent;
    /**
    Creates an indentation strategy that, by default, indents
    continued lines one unit more than the node's base indentation.
    You can provide `except` to prevent indentation of lines that
    match a pattern (for example `/^else\b/` in `if`/`else`
    constructs), and you can change the amount of units used with the
    `units` option.
    */
    function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
            let matchExcept = except && except.test(context.textAfter);
            return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
    }
    const DontIndentBeyond = 200;
    /**
    Enables reindentation on input. When a language defines an
    `indentOnInput` field in its [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
    expression, the line at the cursor will be reindented whenever new
    text is typed and the input from the start of the line up to the
    cursor matches that regexp.

    To avoid unneccesary reindents, it is recommended to start the
    regexp with `^` (usually followed by `\s*`), and end it with `$`.
    For example, `/^\s*\}$/` will reindent when a closing brace is
    added at the start of a line.
    */
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = getIndentation(state, line.from);
                if (indent == null)
                    continue;
                let cur = /^\s*/.exec(line.text)[0];
                let norm = indentString(state, indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes, sequential: true }] : tr;
        });
    }

    /**
    A facet that registers a code folding service. When called with
    the extent of a line, such a function should return a foldable
    range that starts on that line (but continues beyond it), if one
    can be found.
    */
    const foldService = /*@__PURE__*/Facet.define();
    /**
    This node prop is used to associate folding information with
    syntax node types. Given a syntax node, it should check whether
    that tree is foldable and return the range that can be collapsed
    when it is.
    */
    const foldNodeProp = /*@__PURE__*/new NodeProp();
    /**
    [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
    the first and the last child of a syntax node. Useful for nodes
    that start and end with delimiters.
    */
    function foldInside(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
    }
    function syntaxFolding(state, start, end) {
        let tree = syntaxTree(state);
        if (tree.length < end)
            return null;
        let inner = tree.resolveInner(end);
        let found = null;
        for (let cur = inner; cur; cur = cur.parent) {
            if (cur.to <= end || cur.from > end)
                continue;
            if (found && cur.from < start)
                break;
            let prop = cur.type.prop(foldNodeProp);
            if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
                let value = prop(cur, state);
                if (value && value.from <= end && value.from >= start && value.to > end)
                    found = value;
            }
        }
        return found;
    }
    function isUnfinished(node) {
        let ch = node.lastChild;
        return ch && ch.to == node.to && ch.type.isError;
    }
    /**
    Check whether the given line is foldable. First asks any fold
    services registered through
    [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
    a result, tries to query the [fold node
    prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
    of the line.
    */
    function foldable(state, lineStart, lineEnd) {
        for (let service of state.facet(foldService)) {
            let result = service(state, lineStart, lineEnd);
            if (result)
                return result;
        }
        return syntaxFolding(state, lineStart, lineEnd);
    }
    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    /**
    State effect that can be attached to a transaction to fold the
    given range. (You probably only need this in exceptional
    circumstances—usually you'll just want to let
    [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
    gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
    */
    const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    /**
    State effect that unfolds the given range (if it was folded).
    */
    const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    function selectedLines(view) {
        let lines = [];
        for (let { head } of view.state.selection.ranges) {
            if (lines.some(l => l.from <= head && l.to >= head))
                continue;
            lines.push(view.lineBlockAt(head));
        }
        return lines;
    }
    /**
    The state field that stores the folded ranges (as a [decoration
    set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
    [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
    [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
    state.
    */
    const foldState = /*@__PURE__*/StateField.define({
        create() {
            return Decoration.none;
        },
        update(folded, tr) {
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
                    folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
                else if (e.is(unfoldEffect))
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection) {
                let onSelection = false, { head } = tr.selection.main;
                folded.between(head, head, (a, b) => { if (a < head && b > head)
                    onSelection = true; });
                if (onSelection)
                    folded = folded.update({
                        filterFrom: head,
                        filterTo: head,
                        filter: (a, b) => b <= head || a >= head
                    });
            }
            return folded;
        },
        provide: f => EditorView.decorations.from(f),
        toJSON(folded, state) {
            let ranges = [];
            folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
            return ranges;
        },
        fromJSON(value) {
            if (!Array.isArray(value) || value.length % 2)
                throw new RangeError("Invalid JSON for fold state");
            let ranges = [];
            for (let i = 0; i < value.length;) {
                let from = value[i++], to = value[i++];
                if (typeof from != "number" || typeof to != "number")
                    throw new RangeError("Invalid JSON for fold state");
                ranges.push(foldWidget.range(from, to));
            }
            return Decoration.set(ranges, true);
        }
    });
    function findFold(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = { from, to };
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    function maybeEnable(state, other) {
        return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
    }
    /**
    Fold the lines that are selected, if possible.
    */
    const foldCode = view => {
        for (let line of selectedLines(view)) {
            let range = foldable(view.state, line.from, line.to);
            if (range) {
                view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
                return true;
            }
        }
        return false;
    };
    /**
    Unfold folded ranges on selected lines.
    */
    const unfoldCode = view => {
        if (!view.state.field(foldState, false))
            return false;
        let effects = [];
        for (let line of selectedLines(view)) {
            let folded = findFold(view.state, line.from, line.to);
            if (folded)
                effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
        }
        if (effects.length)
            view.dispatch({ effects });
        return effects.length > 0;
    };
    function announceFold(view, range, fold = true) {
        let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
        return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
    }
    /**
    Fold all top-level foldable ranges. Note that, in most cases,
    folding information will depend on the [syntax
    tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
    reliably when the document hasn't been fully parsed (either
    because the editor state was only just initialized, or because the
    document is so big that the parser decided not to parse it
    entirely).
    */
    const foldAll = view => {
        let { state } = view, effects = [];
        for (let pos = 0; pos < state.doc.length;) {
            let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
            if (range)
                effects.push(foldEffect.of(range));
            pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
        }
        if (effects.length)
            view.dispatch({ effects: maybeEnable(view.state, effects) });
        return !!effects.length;
    };
    /**
    Unfold all folded code.
    */
    const unfoldAll = view => {
        let field = view.state.field(foldState, false);
        if (!field || !field.size)
            return false;
        let effects = [];
        field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
        view.dispatch({ effects });
        return true;
    };
    /**
    Default fold-related key bindings.

     - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
     - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
     - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
     - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
    */
    const foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    const defaultConfig = {
        placeholderDOM: null,
        placeholderText: "…"
    };
    const foldConfig = /*@__PURE__*/Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /**
    Create an extension that configures code folding.
    */
    function codeFolding(config) {
        let result = [foldState, baseTheme$1$2];
        if (config)
            result.push(foldConfig.of(config));
        return result;
    }
    const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM(view) {
                let { state } = view, conf = state.facet(foldConfig);
                let onclick = (event) => {
                    let line = view.lineBlockAt(view.posAtDOM(event.target));
                    let folded = findFold(view.state, line.from, line.to);
                    if (folded)
                        view.dispatch({ effects: unfoldEffect.of(folded) });
                    event.preventDefault();
                };
                if (conf.placeholderDOM)
                    return conf.placeholderDOM(view, onclick);
                let element = document.createElement("span");
                element.textContent = conf.placeholderText;
                element.setAttribute("aria-label", state.phrase("folded code"));
                element.title = state.phrase("unfold");
                element.className = "cm-foldPlaceholder";
                element.onclick = onclick;
                return element;
            }
        } });
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›",
        markerDOM: null,
        domEventHandlers: {},
        foldingChanged: () => false
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            if (this.config.markerDOM)
                return this.config.markerDOM(this.open);
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /**
    Create an extension that registers a fold gutter, which shows a
    fold status indicator before foldable lines (which can be clicked
    to fold or unfold the line).
    */
    function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = ViewPlugin.fromClass(class {
            constructor(view) {
                this.from = view.viewport.from;
                this.markers = this.buildMarkers(view);
            }
            update(update) {
                if (update.docChanged || update.viewportChanged ||
                    update.startState.facet(language) != update.state.facet(language) ||
                    update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                    syntaxTree(update.startState) != syntaxTree(update.state) ||
                    fullConfig.foldingChanged(update))
                    this.markers = this.buildMarkers(update.view);
            }
            buildMarkers(view) {
                let builder = new RangeSetBuilder();
                for (let line of view.viewportLineBlocks) {
                    let mark = findFold(view.state, line.from, line.to) ? canUnfold
                        : foldable(view.state, line.from, line.to) ? canFold : null;
                    if (mark)
                        builder.add(line.from, line.from, mark);
                }
                return builder.finish();
            }
        });
        let { domEventHandlers } = fullConfig;
        return [
            markers,
            gutter({
                class: "cm-foldGutter",
                markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
                        if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                            return true;
                        let folded = findFold(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = foldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    } })
            }),
            codeFolding()
        ];
    }
    const baseTheme$1$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        ".cm-foldGutter span": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    /**
    A highlight style associates CSS styles with higlighting
    [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
    */
    class HighlightStyle {
        constructor(spec, options) {
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
            const scopeOpt = options.scope;
            this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
                : scopeOpt ? (type) => type == scopeOpt : undefined;
            this.style = tagHighlighter(spec.map(style => ({
                tag: style.tag,
                class: style.class || def(Object.assign({}, style, { tag: null }))
            })), {
                all,
            }).style;
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.themeType = options.themeType;
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The specs must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighter
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).
        
        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
    }
    const highlighterFacet = /*@__PURE__*/Facet.define();
    const fallbackHighlighter = /*@__PURE__*/Facet.define({
        combine(values) { return values.length ? [values[0]] : null; }
    });
    function getHighlighters(state) {
        let main = state.facet(highlighterFacet);
        return main.length ? main : state.facet(fallbackHighlighter);
    }
    /**
    Wrap a highlighter in an editor extension that uses it to apply
    syntax highlighting to the editor content.

    When multiple (non-fallback) styles are provided, the styling
    applied is the union of the classes they emit.
    */
    function syntaxHighlighting(highlighter, options) {
        let ext = [treeHighlighter], themeType;
        if (highlighter instanceof HighlightStyle) {
            if (highlighter.module)
                ext.push(EditorView.styleModule.of(highlighter.module));
            themeType = highlighter.themeType;
        }
        if (options === null || options === void 0 ? void 0 : options.fallback)
            ext.push(fallbackHighlighter.of(highlighter));
        else if (themeType)
            ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
                return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
            }));
        else
            ext.push(highlighterFacet.of(highlighter));
        return ext;
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlighters(view.state));
        }
        update(update) {
            let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
            let styleChange = highlighters != getHighlighters(update.startState);
            if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
                this.decorations = this.decorations.map(update.changes);
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, highlighters);
            }
        }
        buildDeco(view, highlighters) {
            if (!highlighters || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTree(this.tree, highlighters, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                }, from, to);
            }
            return builder.finish();
        }
    }
    const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    /**
    A default highlight style (works well with light themes).
    */
    const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
        { tag: tags$1.meta,
            color: "#7a757a" },
        { tag: tags$1.link,
            textDecoration: "underline" },
        { tag: tags$1.heading,
            textDecoration: "underline",
            fontWeight: "bold" },
        { tag: tags$1.emphasis,
            fontStyle: "italic" },
        { tag: tags$1.strong,
            fontWeight: "bold" },
        { tag: tags$1.strikethrough,
            textDecoration: "line-through" },
        { tag: tags$1.keyword,
            color: "#708" },
        { tag: [tags$1.atom, tags$1.bool, tags$1.url, tags$1.contentSeparator, tags$1.labelName],
            color: "#219" },
        { tag: [tags$1.literal, tags$1.inserted],
            color: "#164" },
        { tag: [tags$1.string, tags$1.deleted],
            color: "#a11" },
        { tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)],
            color: "#e40" },
        { tag: /*@__PURE__*/tags$1.definition(tags$1.variableName),
            color: "#00f" },
        { tag: /*@__PURE__*/tags$1.local(tags$1.variableName),
            color: "#30a" },
        { tag: [tags$1.typeName, tags$1.namespace],
            color: "#085" },
        { tag: tags$1.className,
            color: "#167" },
        { tag: [/*@__PURE__*/tags$1.special(tags$1.variableName), tags$1.macroName],
            color: "#256" },
        { tag: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
            color: "#00c" },
        { tag: tags$1.comment,
            color: "#940" },
        { tag: tags$1.invalid,
            color: "#f00" }
    ]);

    const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
        "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
        "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist,
                renderMatch: defaultRenderMatch
            });
        }
    });
    const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
    function defaultRenderMatch(match) {
        let decorations = [];
        let mark = match.matched ? matchingMark : nonmatchingMark;
        decorations.push(mark.range(match.start.from, match.start.to));
        if (match.end)
            decorations.push(mark.range(match.end.from, match.end.to));
        return decorations;
    }
    const bracketMatchingState = /*@__PURE__*/StateField.define({
        create() { return Decoration.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (match)
                    decorations = decorations.concat(config.renderMatch(match, tr.state));
            }
            return Decoration.set(decorations, true);
        },
        provide: f => EditorView.decorations.from(f)
    });
    const bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme$3
    ];
    /**
    Create an extension that enables bracket matching. Whenever the
    cursor is next to a bracket, that bracket and the one it matches
    are highlighted. Or, when no matching bracket is found, another
    highlighting style is used to indicate this.
    */
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
    }
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    /**
    Find the matching bracket for the token at `pos`, scanning
    direction `dir`. Only the `brackets` and `maxScanDistance`
    properties are used from `config`, if given. Returns null if no
    bracket was found at `pos`, or a match result otherwise.
    */
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
        for (let cur = node; cur; cur = cur.parent) {
            let matches = matchingNodes(cur.type, dir, brackets);
            if (matches && cur.from < cur.to)
                return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
        }
        return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                        return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        depth--;
                        if (depth == 0)
                            return {
                                start: firstToken,
                                end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },
                                matched: false
                            };
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }
    const noTokens = /*@__PURE__*/Object.create(null);
    const typeArray = [NodeType.none];
    const warned = [];
    const defaultTable = /*@__PURE__*/Object.create(null);
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "tagName"],
        ["attribute", "attributeName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
        let tag = null;
        for (let part of tagStr.split(".")) {
            let value = (extra[part] || tags$1[part]);
            if (!value) {
                warnForPart(part, `Unknown highlighting tag ${part}`);
            }
            else if (typeof value == "function") {
                if (!tag)
                    warnForPart(part, `Modifier ${part} used at start of tag`);
                else
                    tag = value(tag);
            }
            else {
                if (tag)
                    warnForPart(part, `Tag ${part} used as modifier`);
                else
                    tag = value;
            }
        }
        if (!tag)
            return 0;
        let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tag })]
        });
        typeArray.push(type);
        return type.id;
    }

    /**
    Comment or uncomment the current selection. Will use line comments
    if available, otherwise falling back to block comments.
    */
    const toggleComment = target => {
        let config = getConfig(target.state);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
    };
    function command(f, option) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let tr = f(option, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /**
    Comment or uncomment the current selection using line comments.
    The line comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* Toggle */);
    /**
    Comment or uncomment the current selection using block comments.
    The block comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* Toggle */);
    /**
    Comment or uncomment the lines around the current selection using
    block comments.
    */
    const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* Toggle */);
    function getConfig(state, pos = state.selection.main.head) {
        let data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /**
    Determines if the given range is block-commented in the given
    state.
    */
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    function selectedLineRanges(state) {
        let ranges = [];
        for (let r of state.selection.ranges) {
            let fromLine = state.doc.lineAt(r.from);
            let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
            let last = ranges.length - 1;
            if (last >= 0 && ranges[last].to > fromLine.from)
                ranges[last].to = toLine.to;
            else
                ranges.push({ from: fromLine.from, to: toLine.to });
        }
        return ranges;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, state, ranges = state.selection.ranges) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* Uncomment */ && !comments.every(c => c)) {
            return { changes: state.changes(ranges.map((range, i) => {
                    if (comments[i])
                        return [];
                    return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
                })) };
        }
        else if (option != 1 /* Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, state, ranges = state.selection.ranges) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let token = getConfig(state, pos).line;
                    if (!token)
                        continue;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let empty = indent == line.length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, empty, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
            let changes = [];
            for (let { line, token, indent, empty, single } of lines)
                if (single || !empty)
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        return null;
    }

    const fromHistory = /*@__PURE__*/Annotation.define();
    /**
    Transaction annotation that will prevent that transaction from
    being combined with other transactions in the undo history. Given
    `"before"`, it'll prevent merging with previous transactions. With
    `"after"`, subsequent transactions won't be combined with this
    one. With `"full"`, the transaction is isolated on both sides.
    */
    const isolateHistory = /*@__PURE__*/Annotation.define();
    /**
    This facet provides a way to register functions that, given a
    transaction, provide a set of effects that the history should
    store when inverting the transaction. This can be used to
    integrate some kinds of effects in the history, so that they can
    be undone (and redone again).
    */
    const invertedEffects = /*@__PURE__*/Facet.define();
    const historyConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500
            }, { minDepth: Math.max, newGroupDelay: Math.min });
        }
    });
    function changeEnd(changes) {
        let end = 0;
        changes.iterChangedRanges((_, to) => end = to);
        return end;
    }
    const historyField_ = /*@__PURE__*/StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;
                let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;
                let other = from == 0 /* Done */ ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        },
        toJSON(value) {
            return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
        },
        fromJSON(json) {
            return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
    });
    /**
    Create a history extension with the given configuration.
    */
    function history(config = {}) {
        return [
            historyField_,
            historyConfig.of(config),
            EditorView.domEventHandlers({
                beforeinput(e, view) {
                    let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                    if (!command)
                        return false;
                    e.preventDefault();
                    return command(view);
                }
            })
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            if (!selection && state.readOnly)
                return false;
            let historyState = state.field(historyField_, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /**
    Undo a single group of history events. Returns false if no group
    was available.
    */
    const undo = /*@__PURE__*/cmd(0 /* Done */, false);
    /**
    Redo a group of history events. Returns false if no group was
    available.
    */
    const redo = /*@__PURE__*/cmd(1 /* Undone */, false);
    /**
    Undo a change or selection change.
    */
    const undoSelection = /*@__PURE__*/cmd(0 /* Done */, true);
    /**
    Redo a change or selection change.
    */
    const redoSelection = /*@__PURE__*/cmd(1 /* Undone */, true);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, 
        // The effects associated with this event
        effects, 
        // Accumulated mapping (from addToHistory==false) that should be
        // applied to events below this one.
        mapped, 
        // The selection before this event
        startSelection, 
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
            var _a, _b, _c;
            return {
                changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
                mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
                startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
                selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
            };
        }
        static fromJSON(json) {
            return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr, selection) {
            let effects = none$2;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$2);
        }
        static selection(selections) {
            return new HistEvent(undefined, none$2, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none$2 = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none$2;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none$2;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$2, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    const joinableUserEvent = /^(input\.type|delete)($|\.)/;
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, newGroupDelay, maxLen) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
                (!userEvent || joinableUserEvent.test(userEvent)) &&
                ((!lastEvent.selectionsAfter.length &&
                    time - this.prevTime < newGroupDelay &&
                    isAdjacent(lastEvent.changes, event.changes)) ||
                    // For compose (but not compose.start) events, always join with previous event
                    userEvent == "input.type.compose")) {
                done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$2));
            }
            else {
                done = updateBranch(done, done.length, maxLen, event);
            }
            return new HistoryState(done, none$2, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$2;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, selection) {
            let branch = side == 0 /* Done */ ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1];
            if (selection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch) }),
                    userEvent: side == 0 /* Done */ ? "select.undo" : "select.redo",
                    scrollIntoView: true
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none$2 : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest }),
                    filter: false,
                    userEvent: side == 0 /* Done */ ? "undo" : "redo",
                    scrollIntoView: true
                });
            }
        }
    }
    HistoryState.empty = /*@__PURE__*/new HistoryState(none$2, none$2);
    /**
    Default key bindings for the undo history.

    - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
    - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
    - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
    - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
    */
    const historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    function ltrAtCursor(view) {
        return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
    }
    /**
    Move the selection one character to the left (which is backward in
    left-to-right text, forward in right-to-left text).
    */
    const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
    /**
    Move the selection one character to the right.
    */
    const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection to the left across one group of word or
    non-word (but also non-space) characters.
    */
    const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection one group to the right.
    */
    const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolveInner(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /**
    Move the cursor over the next syntactic element to the left.
    */
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the cursor over the next syntactic element to the right.
    */
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function cursorByLine(view, forward) {
        return moveSel(view, range => {
            if (!range.empty)
                return rangeEnd(range, forward);
            let moved = view.moveVertically(range, forward);
            return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
    }
    /**
    Move the selection one line up.
    */
    const cursorLineUp = view => cursorByLine(view, false);
    /**
    Move the selection one line down.
    */
    const cursorLineDown = view => cursorByLine(view, true);
    function pageHeight(view) {
        return Math.max(view.defaultLineHeight, Math.min(view.dom.clientHeight, innerHeight) - 5);
    }
    function cursorByPage(view, forward) {
        let { state } = view, selection = updateSel(state.selection, range => {
            return range.empty ? view.moveVertically(range, forward, pageHeight(view)) : rangeEnd(range, forward);
        });
        if (selection.eq(state.selection))
            return false;
        let startPos = view.coordsAtPos(state.selection.main.head);
        let scrollRect = view.scrollDOM.getBoundingClientRect();
        let effect;
        if (startPos && startPos.top > scrollRect.top && startPos.bottom < scrollRect.bottom &&
            startPos.top - scrollRect.top <= view.scrollDOM.scrollHeight - view.scrollDOM.scrollTop - view.scrollDOM.clientHeight)
            effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollRect.top });
        view.dispatch(setSel(state, selection), { effects: effect });
        return true;
    }
    /**
    Move the selection one page up.
    */
    const cursorPageUp = view => cursorByPage(view, false);
    /**
    Move the selection one page down.
    */
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /**
    Move the selection to the next line wrap point, or to the end of
    the line if there isn't one left on this line.
    */
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection to previous line wrap point, or failing that to
    the start of the line. If the line is indented, and the cursor
    isn't already at the end of the indentation, this will move to the
    end of the indentation instead of the start of the line.
    */
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection to the start of the line.
    */
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
    /**
    Move the selection to the end of the line.
    */
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /**
    Move the selection to the bracket matching the one it is currently
    on, if any.
    */
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
    function extendSel(view, how) {
        let selection = updateSel(view.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view.state.selection))
            return false;
        view.dispatch(setSel(view.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /**
    Move the selection head one character to the left, while leaving
    the anchor in place.
    */
    const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
    /**
    Move the selection head one character to the right.
    */
    const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /**
    Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
    the left.
    */
    const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection head one group to the right.
    */
    const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
    /**
    Move the selection head over the next syntactic element to the left.
    */
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the selection head over the next syntactic element to the right.
    */
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /**
    Move the selection head one line up.
    */
    const selectLineUp = view => selectByLine(view, false);
    /**
    Move the selection head one line down.
    */
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, pageHeight(view)));
    }
    /**
    Move the selection head one page up.
    */
    const selectPageUp = view => selectByPage(view, false);
    /**
    Move the selection head one page down.
    */
    const selectPageDown = view => selectByPage(view, true);
    /**
    Move the selection head to the next line boundary.
    */
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection head to the previous line boundary.
    */
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection head to the start of the line.
    */
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
    /**
    Move the selection head to the end of the line.
    */
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
    /**
    Move the selection to the start of the document.
    */
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /**
    Move the selection to the end of the document.
    */
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /**
    Move the selection head to the start of the document.
    */
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /**
    Move the selection head to the end of the document.
    */
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /**
    Select the entire document.
    */
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
        return true;
    };
    /**
    Expand the selection to cover entire lines.
    */
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
        return true;
    };
    /**
    Select the next syntactic construct that is larger than the
    selection. Note that this will only work insofar as the language
    [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
    syntax tree.
    */
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            var _a;
            let context = syntaxTree(state).resolveInner(range.head, 1);
            while (!((context.from < range.from && context.to >= range.to) ||
                (context.to > range.to && context.from <= range.from) ||
                !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
                context = context.parent;
            return EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
    };
    /**
    Simplify the current selection. When multiple ranges are selected,
    reduce it to its main range. Otherwise, if the selection is
    non-empty, convert it to a cursor selection.
    */
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy({ state, dispatch }, by) {
        if (state.readOnly)
            return false;
        let event = "delete.selection";
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(from);
                if (towards < from)
                    event = "delete.backward";
                else if (towards > from)
                    event = "delete.forward";
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, {
            scrollIntoView: true,
            userEvent: event,
            effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
        }));
        return true;
    }
    function skipAtomic(target, pos, forward) {
        if (target instanceof EditorView)
            for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
                ranges.between(pos, pos, (from, to) => {
                    if (from < pos && to > pos)
                        pos = forward ? to : from;
                });
        return pos;
    }
    const deleteByChar = (target, forward) => deleteBy(target, pos => {
        let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
        if (!forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            targetPos = pos;
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
                targetPos += forward ? 1 : -1;
        }
        return skipAtomic(target, targetPos, forward);
    });
    /**
    Delete the selection, or, for cursor selections, the character
    before the cursor.
    */
    const deleteCharBackward = view => deleteByChar(view, false);
    /**
    Delete the selection or the character after the cursor.
    */
    const deleteCharForward = view => deleteByChar(view, true);
    const deleteByGroup = (target, forward) => deleteBy(target, start => {
        let pos = start, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == start && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != start)
                cat = nextCat;
            pos = next;
        }
        return skipAtomic(target, pos, forward);
    });
    /**
    Delete the selection or backward until the end of the next
    [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
    whitespace when they consist of a single space.
    */
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /**
    Delete the selection or forward until the end of the next group.
    */
    const deleteGroupForward = target => deleteByGroup(target, true);
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line. If the cursor is directly at the end of the
    line, delete the line break after it.
    */
    const deleteToLineEnd = view => deleteBy(view, pos => {
        let lineEnd = view.lineBlockAt(pos).to;
        return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the start of the line. If the cursor is directly at the start of the
    line, delete the line break before it.
    */
    const deleteToLineStart = view => deleteBy(view, pos => {
        let lineStart = view.lineBlockAt(pos).from;
        return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
    });
    /**
    Replace each selection range with a line break, leaving the cursor
    on the line before the break.
    */
    const splitLine = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    /**
    Flip the characters before and after the cursor(s).
    */
    const transposeChars = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from)
                endLine = state.doc.lineAt(range.to - 1);
            if (upto >= startLine.number) {
                let prev = blocks[blocks.length - 1];
                prev.to = endLine.to;
                prev.ranges.push(range);
            }
            else {
                blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
            }
            upto = endLine.number + 1;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            let size = nextLine.length + 1;
            if (forward) {
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
            else {
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
            }
        }
        if (!changes.length)
            return false;
        dispatch(state.update({
            changes,
            scrollIntoView: true,
            selection: EditorSelection.create(ranges, state.selection.mainIndex),
            userEvent: "move.line"
        }));
        return true;
    }
    /**
    Move the selected lines up one line.
    */
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /**
    Move the selected lines down one line.
    */
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
    }
    /**
    Create a copy of the selected lines. Keep the selection in the top copy.
    */
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /**
    Create a copy of the selected lines. Keep the selection in the bottom copy.
    */
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /**
    Delete selected lines.
    */
    const deleteLine = view => {
        if (view.state.readOnly)
            return false;
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
            return { from: before.to, to: after.from };
        return null;
    }
    /**
    Replace the selection with a newline and indent the newly created
    line(s). If the current line consists only of whitespace, this
    will also delete that whitespace. When the cursor is between
    matching brackets, an additional newline will be inserted after
    the cursor.
    */
    const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
    /**
    Create a blank, indented line below the current line.
    */
    const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
    function newlineAndIndent(atEof) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let changes = state.changeByRange(range => {
                let { from, to } = range, line = state.doc.lineAt(from);
                let explode = !atEof && from == to && isBetweenBrackets(state, from);
                if (atEof)
                    from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
                let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
                let indent = getIndentation(cx, from);
                if (indent == null)
                    indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
                while (to < line.to && /\s/.test(line.text[to - line.from]))
                    to++;
                if (explode)
                    ({ from, to } = explode);
                else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                    from = line.from;
                let insert = ["", indentString(state, indent)];
                if (explode)
                    insert.push(indentString(state, cx.lineIndent(line.from, -1)));
                return { changes: { from, to, insert: Text.of(insert) },
                    range: EditorSelection.cursor(from + 1 + insert[1].length) };
            });
            dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
            return true;
        };
    }
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /**
    Auto-indent the selected lines. This uses the [indentation service
    facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
    information.
    */
    const indentSelection = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            if (!/\S/.test(line.text))
                indent = 0;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes, { userEvent: "indent" }));
        return true;
    };
    /**
    Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
    lines.
    */
    const indentMore = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
    };
    /**
    Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
    selected lines.
    */
    const indentLess = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
    };
    /**
    Array of key bindings containing the Emacs-style bindings that are
    available on macOS by default.

     - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
     - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
     - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
     - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
     - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
    */
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Ctrl-v", run: cursorPageDown },
    ];
    /**
    An array of key bindings closely sticking to platform-standard or
    widely used bindings. (This includes the bindings from
    [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
    property changed to `mac`.)

     - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
     - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
     - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
     - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
     - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
     - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
     - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
     - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
     - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
    */
    const standardKeymap = /*@__PURE__*/[
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteToLineStart },
        { mac: "Mod-Delete", run: deleteToLineEnd }
    ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /**
    The default keymap. Includes all bindings from
    [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

    - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
    - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
    - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
    - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
    - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
    - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
    - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
    - Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
    - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
    - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
    - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
    - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
    - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
    - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
    - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
    - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
    - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
    */
    const defaultKeymap = /*@__PURE__*/[
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-Enter", run: insertBlankLine },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket },
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment }
    ].concat(standardKeymap);

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add(elt, arguments[i]);
      return elt
    }

    function add(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ; else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    const basicNormalize = typeof String.prototype.normalize == "function"
        ? x => x.normalize("NFKD") : x => x;
    /**
    A search cursor provides an iterator over text matches in a
    document.
    */
    class SearchCursor {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.
        
        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.
        
        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        constructor(text, query, from = 0, to = text.length, normalize) {
            /**
            The current match (only holds a meaningful value after
            [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
            `done` is false).
            */
            this.value = { from: 0, to: 0 };
            /**
            Whether the end of the iterated region has been reached.
            */
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return codePointAt(this.buffer, this.bufferPos);
        }
        /**
        Look for the next match. Updates the iterator's
        [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
        [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
        at least once before using the cursor.
        */
        next() {
            while (this.matches.length)
                this.matches.pop();
            return this.nextOverlapping();
        }
        /**
        The `next` method will ignore matches that partially overlap a
        previous match. This method behaves like `next`, but includes
        such matches.
        */
        nextOverlapping() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos += codePointSize(next);
                let norm = this.normalize(str);
                for (let i = 0, pos = start;; i++) {
                    let code = norm.charCodeAt(i);
                    let match = this.match(code, pos);
                    if (match) {
                        this.value = match;
                        return this;
                    }
                    if (i == norm.length - 1)
                        break;
                    if (pos == start && i < str.length && str.charCodeAt(i) == code)
                        pos++;
                }
            }
        }
        match(code, pos) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: pos + 1 };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: pos + 1 };
                else
                    this.matches.push(1, pos);
            }
            return match;
        }
    }
    if (typeof Symbol != "undefined")
        SearchCursor.prototype[Symbol.iterator] = function () { return this; };

    const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
    const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
    /**
    This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
    but searches for a regular expression pattern instead of a plain
    string.
    */
    class RegExpCursor {
        /**
        Create a cursor that will search the given range in the given
        document. `query` should be the raw pattern (as you'd pass it to
        `new RegExp`).
        */
        constructor(text, query, options, from = 0, to = text.length) {
            this.to = to;
            this.curLine = "";
            /**
            Set to `true` when the cursor has reached the end of the search
            range.
            */
            this.done = false;
            /**
            Will contain an object with the extent of the match and the
            match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
            sucessfully finds a match.
            */
            this.value = empty;
            if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
                return new MultilineRegExpCursor(text, query, options, from, to);
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.iter = text.iter();
            let startLine = text.lineAt(from);
            this.curLineStart = startLine.from;
            this.matchPos = from;
            this.getLine(this.curLineStart);
        }
        getLine(skip) {
            this.iter.next(skip);
            if (this.iter.lineBreak) {
                this.curLine = "";
            }
            else {
                this.curLine = this.iter.value;
                if (this.curLineStart + this.curLine.length > this.to)
                    this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
                this.iter.next();
            }
        }
        nextLine() {
            this.curLineStart = this.curLineStart + this.curLine.length + 1;
            if (this.curLineStart > this.to)
                this.curLine = "";
            else
                this.getLine(0);
        }
        /**
        Move to the next match, if there is one.
        */
        next() {
            for (let off = this.matchPos - this.curLineStart;;) {
                this.re.lastIndex = off;
                let match = this.matchPos <= this.to && this.re.exec(this.curLine);
                if (match) {
                    let from = this.curLineStart + match.index, to = from + match[0].length;
                    this.matchPos = to + (from == to ? 1 : 0);
                    if (from == this.curLine.length)
                        this.nextLine();
                    if (from < to || from > this.value.to) {
                        this.value = { from, to, match };
                        return this;
                    }
                    off = this.matchPos - this.curLineStart;
                }
                else if (this.curLineStart + this.curLine.length < this.to) {
                    this.nextLine();
                    off = 0;
                }
                else {
                    this.done = true;
                    return this;
                }
            }
        }
    }
    const flattened = /*@__PURE__*/new WeakMap();
    // Reusable (partially) flattened document strings
    class FlattenedDoc {
        constructor(from, text) {
            this.from = from;
            this.text = text;
        }
        get to() { return this.from + this.text.length; }
        static get(doc, from, to) {
            let cached = flattened.get(doc);
            if (!cached || cached.from >= to || cached.to <= from) {
                let flat = new FlattenedDoc(from, doc.sliceString(from, to));
                flattened.set(doc, flat);
                return flat;
            }
            if (cached.from == from && cached.to == to)
                return cached;
            let { text, from: cachedFrom } = cached;
            if (cachedFrom > from) {
                text = doc.sliceString(from, cachedFrom) + text;
                cachedFrom = from;
            }
            if (cached.to < to)
                text += doc.sliceString(cached.to, to);
            flattened.set(doc, new FlattenedDoc(cachedFrom, text));
            return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
        }
    }
    class MultilineRegExpCursor {
        constructor(text, query, options, from, to) {
            this.text = text;
            this.to = to;
            this.done = false;
            this.value = empty;
            this.matchPos = from;
            this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
            this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
        }
        chunkEnd(pos) {
            return pos >= this.to ? this.to : this.text.lineAt(pos).to;
        }
        next() {
            for (;;) {
                let off = this.re.lastIndex = this.matchPos - this.flat.from;
                let match = this.re.exec(this.flat.text);
                // Skip empty matches directly after the last match
                if (match && !match[0] && match.index == off) {
                    this.re.lastIndex = off + 1;
                    match = this.re.exec(this.flat.text);
                }
                // If a match goes almost to the end of a noncomplete chunk, try
                // again, since it'll likely be able to match more
                if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)
                    match = null;
                if (match) {
                    let from = this.flat.from + match.index, to = from + match[0].length;
                    this.value = { from, to, match };
                    this.matchPos = to + (from == to ? 1 : 0);
                    return this;
                }
                else {
                    if (this.flat.to == this.to) {
                        this.done = true;
                        return this;
                    }
                    // Grow the flattened doc
                    this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
                }
            }
        }
    }
    if (typeof Symbol != "undefined") {
        RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
            function () { return this; };
    }
    function validRegExp(source) {
        try {
            new RegExp(source, baseFlags);
            return true;
        }
        catch (_a) {
            return false;
        }
    }

    function createLineDialog(view) {
        let input = crelt("input", { class: "cm-textfield", name: "line" });
        let dom = crelt("form", {
            class: "cm-gotoLine",
            onkeydown: (event) => {
                if (event.keyCode == 27) { // Escape
                    event.preventDefault();
                    view.dispatch({ effects: dialogEffect.of(false) });
                    view.focus();
                }
                else if (event.keyCode == 13) { // Enter
                    event.preventDefault();
                    go();
                }
            },
            onsubmit: (event) => {
                event.preventDefault();
                go();
            }
        }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
        function go() {
            let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
            if (!match)
                return;
            let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
            let [, sign, ln, cl, percent] = match;
            let col = cl ? +cl.slice(1) : 0;
            let line = ln ? +ln : startLine.number;
            if (ln && percent) {
                let pc = line / 100;
                if (sign)
                    pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
                line = Math.round(state.doc.lines * pc);
            }
            else if (ln && sign) {
                line = line * (sign == "-" ? -1 : 1) + startLine.number;
            }
            let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
            view.dispatch({
                effects: dialogEffect.of(false),
                selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
                scrollIntoView: true
            });
            view.focus();
        }
        return { dom };
    }
    const dialogEffect = /*@__PURE__*/StateEffect.define();
    const dialogField = /*@__PURE__*/StateField.define({
        create() { return true; },
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(dialogEffect))
                    value = e.value;
            return value;
        },
        provide: f => showPanel.from(f, val => val ? createLineDialog : null)
    });
    /**
    Command that shows a dialog asking the user for a line number, and
    when a valid position is provided, moves the cursor to that line.

    Supports line numbers, relative line offsets prefixed with `+` or
    `-`, document percentages suffixed with `%`, and an optional
    column position by adding `:` and a second number after the line
    number.

    The dialog can be styled with the `panel.gotoLine` theme
    selector.
    */
    const gotoLine = view => {
        let panel = getPanel(view, createLineDialog);
        if (!panel) {
            let effects = [dialogEffect.of(true)];
            if (view.state.field(dialogField, false) == null)
                effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1$1]));
            view.dispatch({ effects });
            panel = getPanel(view, createLineDialog);
        }
        if (panel)
            panel.dom.querySelector("input").focus();
        return true;
    };
    const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-panel.cm-gotoLine": {
            padding: "2px 6px 4px",
            "& label": { fontSize: "80%" }
        }
    });

    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100,
        wholeWords: false
    };
    const highlightConfig = /*@__PURE__*/Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /**
    This extension highlights text that matches the selection. It uses
    the `"cm-selectionMatch"` class for the highlighting. When
    `highlightWordAroundCursor` is enabled, the word at the cursor
    itself will be highlighted with `"cm-selectionMatch-main"`.
    */
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme$1, matchHighlighter];
        if (options)
            ext.push(highlightConfig.of(options));
        return ext;
    }
    const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
    const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
    // Whether the characters directly outside the given positions are non-word characters
    function insideWordBoundaries(check, state, from, to) {
        return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
            (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
    }
    // Whether the characters directly at the given positions are word characters
    function insideWord(check, state, from, to) {
        return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
            && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
    }
    const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration.none;
            let range = sel.main, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration.none;
                let word = state.wordAt(range.head);
                if (!word)
                    return Decoration.none;
                check = state.charCategorizer(range.head);
                query = state.sliceDoc(word.from, word.to);
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration.none;
                if (conf.wholeWords) {
                    query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                    check = state.charCategorizer(range.head);
                    if (!(insideWordBoundaries(check, state, range.from, range.to)
                        && insideWord(check, state, range.from, range.to)))
                        return Decoration.none;
                }
                else {
                    query = state.sliceDoc(range.from, range.to).trim();
                    if (!query)
                        return Decoration.none;
                }
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor(state.doc, query, part.from, part.to);
                while (!cursor.next().done) {
                    let { from, to } = cursor.value;
                    if (!check || insideWordBoundaries(check, state, from, to)) {
                        if (range.empty && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration.none;
                    }
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
    });
    // Select the words around the cursors.
    const selectWord = ({ state, dispatch }) => {
        let { selection } = state;
        let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
        if (newSel.eq(selection))
            return false;
        dispatch(state.update({ selection: newSel }));
        return true;
    };
    // Find next occurrence of query relative to last cursor. Wrap around
    // the document if there are no more matches.
    function findNextOccurrence(state, query) {
        let { main, ranges } = state.selection;
        let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
        for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
            cursor.next();
            if (cursor.done) {
                if (cycled)
                    return null;
                cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
                cycled = true;
            }
            else {
                if (cycled && ranges.some(r => r.from == cursor.value.from))
                    continue;
                if (fullWord) {
                    let word = state.wordAt(cursor.value.from);
                    if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                        continue;
                }
                return cursor.value;
            }
        }
    }
    /**
    Select next occurrence of the current selection. Expand selection
    to the surrounding word when the selection is empty.
    */
    const selectNextOccurrence = ({ state, dispatch }) => {
        let { ranges } = state.selection;
        if (ranges.some(sel => sel.from === sel.to))
            return selectWord({ state, dispatch });
        let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
        if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
            return false;
        let range = findNextOccurrence(state, searchedText);
        if (!range)
            return false;
        dispatch(state.update({
            selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
            effects: EditorView.scrollIntoView(range.to)
        }));
        return true;
    };

    const searchConfigFacet = /*@__PURE__*/Facet.define({
        combine(configs) {
            var _a;
            return {
                top: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.top, undefined) || false,
                caseSensitive: configs.reduce((val, conf) => val !== null && val !== void 0 ? val : conf.caseSensitive, undefined) || false,
                createPanel: ((_a = configs.find(c => c.createPanel)) === null || _a === void 0 ? void 0 : _a.createPanel) || (view => new SearchPanel(view))
            };
        }
    });
    /**
    A search query. Part of the editor's search state.
    */
    class SearchQuery {
        /**
        Create a query object.
        */
        constructor(config) {
            this.search = config.search;
            this.caseSensitive = !!config.caseSensitive;
            this.regexp = !!config.regexp;
            this.replace = config.replace || "";
            this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
            this.unquoted = config.literal ? this.search : this.search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
        }
        /**
        Compare this query to another query.
        */
        eq(other) {
            return this.search == other.search && this.replace == other.replace &&
                this.caseSensitive == other.caseSensitive && this.regexp == other.regexp;
        }
        /**
        @internal
        */
        create() {
            return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
        }
        /**
        Get a search cursor for this query, searching through the given
        range in the given document.
        */
        getCursor(doc, from = 0, to = doc.length) {
            return this.regexp ? regexpCursor(this, doc, from, to) : stringCursor(this, doc, from, to);
        }
    }
    class QueryType {
        constructor(spec) {
            this.spec = spec;
        }
    }
    function stringCursor(spec, doc, from, to) {
        return new SearchCursor(doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase());
    }
    class StringQuery extends QueryType {
        constructor(spec) {
            super(spec);
        }
        nextMatch(doc, curFrom, curTo) {
            let cursor = stringCursor(this.spec, doc, curTo, doc.length).nextOverlapping();
            if (cursor.done)
                cursor = stringCursor(this.spec, doc, 0, curFrom).nextOverlapping();
            return cursor.done ? null : cursor.value;
        }
        // Searching in reverse is, rather than implementing inverted search
        // cursor, done by scanning chunk after chunk forward.
        prevMatchInRange(doc, from, to) {
            for (let pos = to;;) {
                let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.spec.unquoted.length);
                let cursor = stringCursor(this.spec, doc, start, pos), range = null;
                while (!cursor.nextOverlapping().done)
                    range = cursor.value;
                if (range)
                    return range;
                if (start == from)
                    return null;
                pos -= 10000 /* ChunkSize */;
            }
        }
        prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) ||
                this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(_result) { return this.spec.replace; }
        matchAll(doc, limit) {
            let cursor = stringCursor(this.spec, doc, 0, doc.length), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(doc, from, to, add) {
            let cursor = stringCursor(this.spec, doc, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    function regexpCursor(spec, doc, from, to) {
        return new RegExpCursor(doc, spec.search, spec.caseSensitive ? undefined : { ignoreCase: true }, from, to);
    }
    class RegExpQuery extends QueryType {
        nextMatch(doc, curFrom, curTo) {
            let cursor = regexpCursor(this.spec, doc, curTo, doc.length).next();
            if (cursor.done)
                cursor = regexpCursor(this.spec, doc, 0, curFrom).next();
            return cursor.done ? null : cursor.value;
        }
        prevMatchInRange(doc, from, to) {
            for (let size = 1;; size++) {
                let start = Math.max(from, to - size * 10000 /* ChunkSize */);
                let cursor = regexpCursor(this.spec, doc, start, to), range = null;
                while (!cursor.next().done)
                    range = cursor.value;
                if (range && (start == from || range.from > start + 10))
                    return range;
                if (start == from)
                    return null;
            }
        }
        prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) ||
                this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(result) {
            return this.spec.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
                : i == "&" ? result.match[0]
                    : i != "0" && +i < result.match.length ? result.match[i]
                        : m);
        }
        matchAll(doc, limit) {
            let cursor = regexpCursor(this.spec, doc, 0, doc.length), ranges = [];
            while (!cursor.next().done) {
                if (ranges.length >= limit)
                    return null;
                ranges.push(cursor.value);
            }
            return ranges;
        }
        highlight(doc, from, to, add) {
            let cursor = regexpCursor(this.spec, doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));
            while (!cursor.next().done)
                add(cursor.value.from, cursor.value.to);
        }
    }
    /**
    A state effect that updates the current search query. Note that
    this only has an effect if the search state has been initialized
    (by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
    by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
    once).
    */
    const setSearchQuery = /*@__PURE__*/StateEffect.define();
    const togglePanel$1 = /*@__PURE__*/StateEffect.define();
    const searchState = /*@__PURE__*/StateField.define({
        create(state) {
            return new SearchState(defaultQuery(state).create(), null);
        },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setSearchQuery))
                    value = new SearchState(effect.value.create(), value.panel);
                else if (effect.is(togglePanel$1))
                    value = new SearchState(value.query, effect.value ? createSearchPanel : null);
            }
            return value;
        },
        provide: f => showPanel.from(f, val => val.panel)
    });
    class SearchState {
        constructor(query, panel) {
            this.query = query;
            this.panel = panel;
        }
    }
    const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
    const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.decorations = this.highlight(view.state.field(searchState));
        }
        update(update) {
            let state = update.state.field(searchState);
            if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
                this.decorations = this.highlight(state);
        }
        highlight({ query, panel }) {
            if (!panel || !query.spec.valid)
                return Decoration.none;
            let { view } = this;
            let builder = new RangeSetBuilder();
            for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
                let { from, to } = ranges[i];
                while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)
                    to = ranges[++i].to;
                query.highlight(view.state.doc, from, to, (from, to) => {
                    let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                    builder.add(from, to, selected ? selectedMatchMark : matchMark);
                });
            }
            return builder.finish();
        }
    }, {
        decorations: v => v.decorations
    });
    function searchCommand(f) {
        return view => {
            let state = view.state.field(searchState, false);
            return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
        };
    }
    /**
    Open the search panel if it isn't already open, and move the
    selection to the first match after the current main selection.
    Will wrap around to the start of the document when it reaches the
    end.
    */
    const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
        let { from, to } = view.state.selection.main;
        let next = query.nextMatch(view.state.doc, from, to);
        if (!next || next.from == from && next.to == to)
            return false;
        view.dispatch({
            selection: { anchor: next.from, head: next.to },
            scrollIntoView: true,
            effects: announceMatch(view, next),
            userEvent: "select.search"
        });
        return true;
    });
    /**
    Move the selection to the previous instance of the search query,
    before the current main selection. Will wrap past the start
    of the document to start searching at the end again.
    */
    const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        let range = query.prevMatch(state.doc, from, to);
        if (!range)
            return false;
        view.dispatch({
            selection: { anchor: range.from, head: range.to },
            scrollIntoView: true,
            effects: announceMatch(view, range),
            userEvent: "select.search"
        });
        return true;
    });
    /**
    Select all instances of the search query.
    */
    const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
        let ranges = query.matchAll(view.state.doc, 1000);
        if (!ranges || !ranges.length)
            return false;
        view.dispatch({
            selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
            userEvent: "select.search.matches"
        });
        return true;
    });
    /**
    Select all instances of the currently selected text.
    */
    const selectSelectionMatches = ({ state, dispatch }) => {
        let sel = state.selection;
        if (sel.ranges.length > 1 || sel.main.empty)
            return false;
        let { from, to } = sel.main;
        let ranges = [], main = 0;
        for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
            if (ranges.length > 1000)
                return false;
            if (cur.value.from == from)
                main = ranges.length;
            ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
        }
        dispatch(state.update({
            selection: EditorSelection.create(ranges, main),
            userEvent: "select.search.matches"
        }));
        return true;
    };
    /**
    Replace the current match of the search query.
    */
    const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
        let { state } = view, { from, to } = state.selection.main;
        if (state.readOnly)
            return false;
        let next = query.nextMatch(state.doc, from, from);
        if (!next)
            return false;
        let changes = [], selection, replacement;
        let announce = [];
        if (next.from == from && next.to == to) {
            replacement = state.toText(query.getReplacement(next));
            changes.push({ from: next.from, to: next.to, insert: replacement });
            next = query.nextMatch(state.doc, next.from, next.to);
            announce.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
        }
        if (next) {
            let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
            selection = { anchor: next.from - off, head: next.to - off };
            announce.push(announceMatch(view, next));
        }
        view.dispatch({
            changes, selection,
            scrollIntoView: !!selection,
            effects: announce,
            userEvent: "input.replace"
        });
        return true;
    });
    /**
    Replace all instances of the search query with the given
    replacement.
    */
    const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
        if (view.state.readOnly)
            return false;
        let changes = query.matchAll(view.state.doc, 1e9).map(match => {
            let { from, to } = match;
            return { from, to, insert: query.getReplacement(match) };
        });
        if (!changes.length)
            return false;
        let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
        view.dispatch({
            changes,
            effects: EditorView.announce.of(announceText),
            userEvent: "input.replace.all"
        });
        return true;
    });
    function createSearchPanel(view) {
        return view.state.facet(searchConfigFacet).createPanel(view);
    }
    function defaultQuery(state, fallback) {
        var _a;
        let sel = state.selection.main;
        let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
        let caseSensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _a !== void 0 ? _a : state.facet(searchConfigFacet).caseSensitive;
        return fallback && !selText ? fallback : new SearchQuery({ search: selText.replace(/\n/g, "\\n"), caseSensitive });
    }
    /**
    Make sure the search panel is open and focused.
    */
    const openSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (state && state.panel) {
            let panel = getPanel(view, createSearchPanel);
            if (!panel)
                return false;
            let searchInput = panel.dom.querySelector("[main-field]");
            if (searchInput && searchInput != view.root.activeElement) {
                let query = defaultQuery(view.state, state.query.spec);
                if (query.valid)
                    view.dispatch({ effects: setSearchQuery.of(query) });
                searchInput.focus();
                searchInput.select();
            }
        }
        else {
            view.dispatch({ effects: [
                    togglePanel$1.of(true),
                    state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
                ] });
        }
        return true;
    };
    /**
    Close the search panel.
    */
    const closeSearchPanel = view => {
        let state = view.state.field(searchState, false);
        if (!state || !state.panel)
            return false;
        let panel = getPanel(view, createSearchPanel);
        if (panel && panel.dom.contains(view.root.activeElement))
            view.focus();
        view.dispatch({ effects: togglePanel$1.of(false) });
        return true;
    };
    /**
    Default search-related key bindings.

     - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
     - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
     - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
     - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
     - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
    */
    const searchKeymap = [
        { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
        { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
        { key: "Mod-Shift-l", run: selectSelectionMatches },
        { key: "Alt-g", run: gotoLine },
        { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
    ];
    class SearchPanel {
        constructor(view) {
            this.view = view;
            let query = this.query = view.state.field(searchState).query.spec;
            this.commit = this.commit.bind(this);
            this.searchField = crelt("input", {
                value: query.search,
                placeholder: phrase(view, "Find"),
                "aria-label": phrase(view, "Find"),
                class: "cm-textfield",
                name: "search",
                "main-field": "true",
                onchange: this.commit,
                onkeyup: this.commit
            });
            this.replaceField = crelt("input", {
                value: query.replace,
                placeholder: phrase(view, "Replace"),
                "aria-label": phrase(view, "Replace"),
                class: "cm-textfield",
                name: "replace",
                onchange: this.commit,
                onkeyup: this.commit
            });
            this.caseField = crelt("input", {
                type: "checkbox",
                name: "case",
                checked: query.caseSensitive,
                onchange: this.commit
            });
            this.reField = crelt("input", {
                type: "checkbox",
                name: "re",
                checked: query.regexp,
                onchange: this.commit
            });
            function button(name, onclick, content) {
                return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
            }
            this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
                this.searchField,
                button("next", () => findNext(view), [phrase(view, "next")]),
                button("prev", () => findPrevious(view), [phrase(view, "previous")]),
                button("select", () => selectMatches(view), [phrase(view, "all")]),
                crelt("label", null, [this.caseField, phrase(view, "match case")]),
                crelt("label", null, [this.reField, phrase(view, "regexp")]),
                ...view.state.readOnly ? [] : [
                    crelt("br"),
                    this.replaceField,
                    button("replace", () => replaceNext(view), [phrase(view, "replace")]),
                    button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")]),
                    crelt("button", {
                        name: "close",
                        onclick: () => closeSearchPanel(view),
                        "aria-label": phrase(view, "close"),
                        type: "button"
                    }, ["×"])
                ]
            ]);
        }
        commit() {
            let query = new SearchQuery({
                search: this.searchField.value,
                caseSensitive: this.caseField.checked,
                regexp: this.reField.checked,
                replace: this.replaceField.value
            });
            if (!query.eq(this.query)) {
                this.query = query;
                this.view.dispatch({ effects: setSearchQuery.of(query) });
            }
        }
        keydown(e) {
            if (runScopeHandlers(this.view, e, "search-panel")) {
                e.preventDefault();
            }
            else if (e.keyCode == 13 && e.target == this.searchField) {
                e.preventDefault();
                (e.shiftKey ? findPrevious : findNext)(this.view);
            }
            else if (e.keyCode == 13 && e.target == this.replaceField) {
                e.preventDefault();
                replaceNext(this.view);
            }
        }
        update(update) {
            for (let tr of update.transactions)
                for (let effect of tr.effects) {
                    if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                        this.setQuery(effect.value);
                }
        }
        setQuery(query) {
            this.query = query;
            this.searchField.value = query.search;
            this.replaceField.value = query.replace;
            this.caseField.checked = query.caseSensitive;
            this.reField.checked = query.regexp;
        }
        mount() {
            this.searchField.select();
        }
        get pos() { return 80; }
        get top() { return this.view.state.facet(searchConfigFacet).top; }
    }
    function phrase(view, phrase) { return view.state.phrase(phrase); }
    const AnnounceMargin = 30;
    const Break = /[\s\.,:;?!]/;
    function announceMatch(view, { from, to }) {
        let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
        let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
        let text = view.state.sliceDoc(start, end);
        if (start != line.from) {
            for (let i = 0; i < AnnounceMargin; i++)
                if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                    text = text.slice(i);
                    break;
                }
        }
        if (end != lineEnd) {
            for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
                if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                    text = text.slice(0, i);
                    break;
                }
        }
        return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
    }
    const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-panel.cm-search": {
            padding: "2px 6px 4px",
            position: "relative",
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "4px",
                backgroundColor: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            },
            "& input, & button, & label": {
                margin: ".2em .6em .2em 0"
            },
            "& input[type=checkbox]": {
                marginRight: ".2em"
            },
            "& label": {
                fontSize: "80%",
                whiteSpace: "pre"
            }
        },
        "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
        "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
        "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
        "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
    });
    const searchExtensions = [
        searchState,
        /*@__PURE__*/Prec.lowest(searchHighlighter),
        baseTheme$2
    ];

    /**
    An instance of this is passed to completion source functions.
    */
    class CompletionContext {
        /**
        Create a new completion context. (Mostly useful for testing
        completion sources—in the editor, the extension will create
        these for you.)
        */
        constructor(
        /**
        The editor state that the completion happens in.
        */
        state, 
        /**
        The position at which the completion is happening.
        */
        pos, 
        /**
        Indicates whether completion was activated explicitly, or
        implicitly by typing. The usual way to respond to this is to
        only return completions when either there is part of a
        completable entity before the cursor, or `explicit` is true.
        */
        explicit) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            /**
            @internal
            */
            this.abortListeners = [];
        }
        /**
        Get the extent, content, and (if there is a token) type of the
        token before `this.pos`.
        */
        tokenBefore(types) {
            let token = syntaxTree(this.state).resolveInner(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /**
        Get the match of the given expression directly before the
        cursor.
        */
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.text.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /**
        Yields true when the query has been aborted. Can be useful in
        asynchronous queries to avoid doing work that will be ignored.
        */
        get aborted() { return this.abortListeners == null; }
        /**
        Allows you to register abort handlers, which will be called when
        the query is
        [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
        */
        addEventListener(type, listener) {
            if (type == "abort" && this.abortListeners)
                this.abortListeners.push(listener);
        }
    }
    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /**
    Given a a fixed array of options, return an autocompleter that
    completes them.
    */
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
        };
    }
    /**
    Wrap the given completion source so that it will not fire when the
    cursor is in a syntax node with one of the given names.
    */
    function ifNotIn(nodes, source) {
        return (context) => {
            for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)
                if (nodes.indexOf(pos.name) > -1)
                    return null;
            return source(context);
        };
    }
    class Option {
        constructor(completion, source, match) {
            this.completion = completion;
            this.source = source;
            this.match = match;
        }
    }
    function cur(state) { return state.selection.main.head; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    /**
    Helper function that returns a transaction spec which inserts a
    completion's text in the main selection range, and any other
    selection range that has the same text in front of it.
    */
    function insertCompletionText(state, text, from, to) {
        return Object.assign(Object.assign({}, state.changeByRange(range => {
            if (range == state.selection.main)
                return {
                    changes: { from: from, to: to, insert: text },
                    range: EditorSelection.cursor(from + text.length)
                };
            let len = to - from;
            if (!range.empty ||
                len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to))
                return { range };
            return {
                changes: { from: range.from - len, to: range.from, insert: text },
                range: EditorSelection.cursor(range.from - len + text.length)
            };
        })), { userEvent: "input.complete" });
    }
    function applyCompletion(view, option) {
        const apply = option.completion.apply || option.completion.label;
        let result = option.source;
        if (typeof apply == "string")
            view.dispatch(insertCompletionText(view.state, apply, result.from, result.to));
        else
            apply(view, option.completion, result.from, result.to);
    }
    const SourceCache = /*@__PURE__*/new WeakMap();
    function asSource(source) {
        if (!Array.isArray(source))
            return source;
        let known = SourceCache.get(source);
        if (!known)
            SourceCache.set(source, known = completeFromList(source));
        return known;
    }

    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return null for no match, and otherwise an array that starts
        // with the match score, followed by any number of `from, to` pairs
        // indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return [0];
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0);
                return first == chars[0] ? [0, 0, codePointSize(first)]
                    : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return [0, 0, this.pattern.length];
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            // This tracks the extent of the precise (non-folded, not
            // necessarily adjacent) match
            let preciseTo = 0;
            // Tracks whether there is a match that hits only characters that
            // appear to be starting words. `byWordFolded` is set to true when
            // a case folded character is encountered in such a match
            let byWordTo = 0, byWordFolded = false;
            // If we've found a partial adjacent match, these track its state
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            let hasLower = /[a-z]/.test(word), wordAdjacent = true;
            // Go over the option's text, scanning for the various kinds of matches
            for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i + 1;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);
                if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {
                    if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                        byWord[byWordTo++] = i;
                    else if (byWord.length)
                        wordAdjacent = false;
                }
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return [-200 /* CaseFold */ - word.length, 0, adjacentEnd];
            if (direct > -1)
                return [-700 /* NotStart */ - word.length, direct, direct + this.pattern.length];
            if (adjacentTo == len)
                return [-200 /* CaseFold */ + -700 /* NotStart */ - word.length, adjacentStart, adjacentEnd];
            if (byWordTo == len)
                return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +
                    (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);
            return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
        }
        result(score, positions, word) {
            let result = [score - word.length], i = 1;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i > 1 && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return result;
        }
    }

    const completionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                override: null,
                closeOnBlur: true,
                maxRenderedOptions: 100,
                defaultKeymap: true,
                optionClass: () => "",
                aboveCursor: false,
                icons: true,
                addToOptions: []
            }, {
                defaultKeymap: (a, b) => a && b,
                closeOnBlur: (a, b) => a && b,
                icons: (a, b) => a && b,
                optionClass: (a, b) => c => joinClass(a(c), b(c)),
                addToOptions: (a, b) => a.concat(b)
            });
        }
    });
    function joinClass(a, b) {
        return a ? b ? a + " " + b : a : b;
    }

    function optionContent(config) {
        let content = config.addToOptions.slice();
        if (config.icons)
            content.push({
                render(completion) {
                    let icon = document.createElement("div");
                    icon.classList.add("cm-completionIcon");
                    if (completion.type)
                        icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                    icon.setAttribute("aria-hidden", "true");
                    return icon;
                },
                position: 20
            });
        content.push({
            render(completion, _s, match) {
                let labelElt = document.createElement("span");
                labelElt.className = "cm-completionLabel";
                let { label } = completion, off = 0;
                for (let j = 1; j < match.length;) {
                    let from = match[j++], to = match[j++];
                    if (from > off)
                        labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                    let span = labelElt.appendChild(document.createElement("span"));
                    span.appendChild(document.createTextNode(label.slice(from, to)));
                    span.className = "cm-completionMatchedText";
                    off = to;
                }
                if (off < label.length)
                    labelElt.appendChild(document.createTextNode(label.slice(off)));
                return labelElt;
            },
            position: 50
        }, {
            render(completion) {
                if (!completion.detail)
                    return null;
                let detailElt = document.createElement("span");
                detailElt.className = "cm-completionDetail";
                detailElt.textContent = completion.detail;
                return detailElt;
            },
            position: 80
        });
        return content.sort((a, b) => a.position - b.position).map(a => a.render);
    }
    function rangeAroundSelected(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip {
        constructor(view, stateField) {
            this.view = view;
            this.stateField = stateField;
            this.info = null;
            this.placeInfo = {
                read: () => this.measureInfo(),
                write: (pos) => this.positionInfo(pos),
                key: this
            };
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig);
            this.optionContent = optionContent(config);
            this.optionClass = config.optionClass;
            this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.className = "cm-tooltip-autocomplete";
            this.dom.addEventListener("mousedown", (e) => {
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        applyCompletion(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfo);
            });
        }
        mount() { this.updateSel(); }
        update(update) {
            if (update.state.field(this.stateField) != update.startState.field(this.stateField))
                this.updateSel();
        }
        positioned() {
            if (this.info)
                this.view.requestMeasure(this.placeInfo);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
                this.list.remove();
                this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
                this.list.addEventListener("scroll", () => {
                    if (this.info)
                        this.view.requestMeasure(this.placeInfo);
                });
            }
            if (this.updateSelectedOption(open.selected)) {
                if (this.info) {
                    this.info.remove();
                    this.info = null;
                }
                let { completion } = open.options[open.selected];
                let { info } = completion;
                if (!info)
                    return;
                let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
                if (!infoResult)
                    return;
                if ('then' in infoResult) {
                    infoResult.then(node => {
                        if (node && this.view.state.field(this.stateField, false) == cState)
                            this.addInfoPane(node);
                    }).catch(e => logException(this.view.state, e, "completion info"));
                }
                else {
                    this.addInfoPane(infoResult);
                }
            }
        }
        addInfoPane(content) {
            let dom = this.info = document.createElement("div");
            dom.className = "cm-tooltip cm-completionInfo";
            dom.appendChild(content);
            this.dom.appendChild(dom);
            this.view.requestMeasure(this.placeInfo);
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel || !this.info)
                return null;
            let listRect = this.dom.getBoundingClientRect();
            let infoRect = this.info.getBoundingClientRect();
            let selRect = sel.getBoundingClientRect();
            if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10)
                return null;
            let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;
            let left = this.view.textDirection == Direction.RTL;
            let spaceLeft = listRect.left, spaceRight = innerWidth - listRect.right;
            if (left && spaceLeft < Math.min(infoRect.width, spaceRight))
                left = false;
            else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))
                left = true;
            return { top, left };
        }
        positionInfo(pos) {
            if (this.info) {
                this.info.style.top = (pos ? pos.top : -1e6) + "px";
                if (pos) {
                    this.info.classList.toggle("cm-completionInfo-left", pos.left);
                    this.info.classList.toggle("cm-completionInfo-right", !pos.left);
                }
            }
        }
        createListBox(options, id, range) {
            const ul = document.createElement("ul");
            ul.id = id;
            ul.setAttribute("role", "listbox");
            ul.setAttribute("aria-expanded", "true");
            ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
            for (let i = range.from; i < range.to; i++) {
                let { completion, match } = options[i];
                const li = ul.appendChild(document.createElement("li"));
                li.id = id + "-" + i;
                li.setAttribute("role", "option");
                let cls = this.optionClass(completion);
                if (cls)
                    li.className = cls;
                for (let source of this.optionContent) {
                    let node = source(completion, this.view.state, match);
                    if (node)
                        li.appendChild(node);
                }
            }
            if (range.from)
                ul.classList.add("cm-completionListIncompleteTop");
            if (range.to < options.length)
                ul.classList.add("cm-completionListIncompleteBottom");
            return ul;
        }
    }
    // We allocate a new function instance every time the completion
    // changes to force redrawing/repositioning of the tooltip
    function completionTooltip(stateField) {
        return (view) => new CompletionTooltip(view, stateField);
    }
    function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        if (self.top < parent.top)
            container.scrollTop -= parent.top - self.top;
        else if (self.bottom > parent.bottom)
            container.scrollTop += self.bottom - parent.bottom;
    }

    // Used to pick a preferred option when two options with the same
    // label occur in the result.
    function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
            (option.type ? 1 : 0);
    }
    function sortOptions(active, state) {
        let options = [], i = 0;
        for (let a of active)
            if (a.hasResult()) {
                if (a.result.filter === false) {
                    let getMatch = a.result.getMatch;
                    for (let option of a.result.options) {
                        let match = [1e9 - i++];
                        if (getMatch)
                            for (let n of getMatch(option))
                                match.push(n);
                        options.push(new Option(option, a, match));
                    }
                }
                else {
                    let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                    for (let option of a.result.options)
                        if (match = matcher.match(option.label)) {
                            if (option.boost != null)
                                match[0] += option.boost;
                            options.push(new Option(option, a, match));
                        }
                }
            }
        let result = [], prev = null;
        for (let opt of options.sort(cmpOption)) {
            if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||
                (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||
                prev.apply != opt.completion.apply)
                result.push(opt);
            else if (score(opt.completion) > score(prev))
                result[result.length - 1] = opt;
            prev = opt.completion;
        }
        return result;
    }
    class CompletionDialog {
        constructor(options, attrs, tooltip, timestamp, selected) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
        }
        static build(active, state, id, prev, conf) {
            let options = sortOptions(active, state);
            if (!options.length)
                return null;
            let selected = 0;
            if (prev && prev.selected) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length; i++)
                    if (options[i].completion == selectedValue) {
                        selected = i;
                        break;
                    }
            }
            return new CompletionDialog(options, makeAttrs(id, selected), {
                pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                create: completionTooltip(completionState),
                above: conf.aboveCursor,
            }, prev ? prev.timestamp : Date.now(), selected);
        }
        map(changes) {
            return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);
        }
    }
    class CompletionState {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig);
            let sources = conf.override ||
                state.languageDataAt("autocomplete", cur(state)).map(asSource);
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) ||
                    new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf)
                : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
            if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))
                active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : null; }
        get attrs() { return this.open ? this.open.attrs : baseAttrs; }
    }
    function sameResults(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult)
                iA++;
            while (iB < b.length && !b[iB].hasResult)
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    const baseAttrs = {
        "aria-autocomplete": "list"
    };
    function makeAttrs(id, selected) {
        return {
            "aria-autocomplete": "list",
            "aria-haspopup": "listbox",
            "aria-activedescendant": id + "-" + selected,
            "aria-controls": id
        };
    }
    const none$1 = [];
    function cmpOption(a, b) {
        let dScore = b.match[0] - a.match[0];
        if (dScore)
            return dScore;
        return a.completion.label.localeCompare(b.completion.label);
    }
    function getUserEvent(tr) {
        return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
    }
    class ActiveSource {
        constructor(source, state, explicitPos = -1) {
            this.source = source;
            this.state = state;
            this.explicitPos = explicitPos;
        }
        hasResult() { return false; }
        update(tr, conf) {
            let event = getUserEvent(tr), value = this;
            if (event)
                value = value.handleUserEvent(tr, event, conf);
            else if (tr.docChanged)
                value = value.handleChange(tr);
            else if (tr.selection && value.state != 0 /* Inactive */)
                value = new ActiveSource(value.source, 0 /* Inactive */);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect))
                    value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);
                else if (effect.is(closeCompletionEffect))
                    value = new ActiveSource(value.source, 0 /* Inactive */);
                else if (effect.is(setActiveEffect))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        handleUserEvent(tr, type, conf) {
            return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
        }
        map(changes) {
            return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
        }
    }
    class ActiveResult extends ActiveSource {
        constructor(source, explicitPos, result, from, to) {
            super(source, 2 /* Result */, explicitPos);
            this.result = result;
            this.from = from;
            this.to = to;
        }
        hasResult() { return true; }
        handleUserEvent(tr, type, conf) {
            var _a;
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur(tr.state);
            if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||
                pos > to ||
                type == "delete" && cur(tr.startState) == this.from)
                return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);
            let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;
            if (checkValid(this.result.validFor, tr.state, from, to))
                return new ActiveResult(this.source, explicitPos, this.result, from, to);
            if (this.result.update &&
                (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
                return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
            return new ActiveSource(this.source, 1 /* Pending */, explicitPos);
        }
        handleChange(tr) {
            return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
        }
        map(mapping) {
            return mapping.empty ? this :
                new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
        }
    }
    function checkValid(validFor, state, from, to) {
        if (!validFor)
            return false;
        let text = state.sliceDoc(from, to);
        return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
    }
    const startCompletionEffect = /*@__PURE__*/StateEffect.define();
    const closeCompletionEffect = /*@__PURE__*/StateEffect.define();
    const setActiveEffect = /*@__PURE__*/StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.map(mapping)); }
    });
    const setSelectedEffect = /*@__PURE__*/StateEffect.define();
    const completionState = /*@__PURE__*/StateField.define({
        create() { return CompletionState.start(); },
        update(value, tr) { return value.update(tr); },
        provide: f => [
            showTooltip.from(f, val => val.tooltip),
            EditorView.contentAttributes.from(f, state => state.attrs)
        ]
    });

    const CompletionInteractMargin = 75;
    /**
    Returns a command that moves the completion selection forward or
    backward by the given amount.
    */
    function moveCompletionSelection(forward, by = "option") {
        return (view) => {
            let cState = view.state.field(completionState, false);
            if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
                return false;
            let step = 1, tooltip;
            if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
                step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                    tooltip.dom.querySelector("li").offsetHeight) - 1);
            let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
            if (selected < 0)
                selected = by == "page" ? 0 : length - 1;
            else if (selected >= length)
                selected = by == "page" ? length - 1 : 0;
            view.dispatch({ effects: setSelectedEffect.of(selected) });
            return true;
        };
    }
    /**
    Accept the current completion.
    */
    const acceptCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
            return false;
        applyCompletion(view, cState.open.options[cState.open.selected]);
        return true;
    };
    /**
    Explicitly start autocompletion.
    */
    const startCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState)
            return false;
        view.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
    };
    /**
    Close the currently active completion.
    */
    const closeCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))
            return false;
        view.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
    };
    class RunningQuery {
        constructor(active, context) {
            this.active = active;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
    const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.composing = 0 /* None */;
            for (let active of view.state.field(completionState).active)
                if (active.state == 1 /* Pending */)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState);
            if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                return (tr.selection || tr.docChanged) && !getUserEvent(tr);
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))
                ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
            if (this.composing != 0 /* None */)
                for (let tr of update.transactions) {
                    if (getUserEvent(tr) == "input")
                        this.composing = 2 /* Changed */;
                    else if (this.composing == 2 /* Changed */ && tr.selection)
                        this.composing = 3 /* ChangedAndMoved */;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            let { state } = this.view, cState = state.field(completionState);
            for (let active of cState.active) {
                if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))
                    this.startQuery(active);
            }
        }
        startQuery(active) {
            let { state } = this.view, pos = cur(state);
            let context = new CompletionContext(state, pos, active.explicitPos == pos);
            let pending = new RunningQuery(active, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect.of(null) });
                logException(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
                if (current && current.state == 1 /* Pending */) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource(query.active.source, 0 /* Inactive */);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (active.state != 1 /* Pending */)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length)
                this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
    }, {
        eventHandlers: {
            blur() {
                let state = this.view.state.field(completionState, false);
                if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur)
                    this.view.dispatch({ effects: closeCompletionEffect.of(null) });
            },
            compositionstart() {
                this.composing = 1 /* Started */;
            },
            compositionend() {
                if (this.composing == 3 /* ChangedAndMoved */) {
                    // Safari fires compositionend events synchronously, possibly
                    // from inside an update, so dispatch asynchronously to avoid reentrancy
                    setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
                }
                this.composing = 0 /* None */;
            }
        }
    });

    const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "hidden auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                minWidth: "250px",
                maxHeight: "10em",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li": {
                    overflowX: "hidden",
                    textOverflow: "ellipsis",
                    cursor: "pointer",
                    padding: "1px 3px",
                    lineHeight: 1.2
                },
            }
        },
        "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#17c",
            color: "white",
        },
        "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#347",
            color: "white",
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: "300px",
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
            textDecoration: "underline"
        },
        ".cm-completionDetail": {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        ".cm-completionIcon": {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
            "&:after": { content: "'ƒ'" }
        },
        ".cm-completionIcon-class": {
            "&:after": { content: "'○'" }
        },
        ".cm-completionIcon-interface": {
            "&:after": { content: "'◌'" }
        },
        ".cm-completionIcon-variable": {
            "&:after": { content: "'𝑥'" }
        },
        ".cm-completionIcon-constant": {
            "&:after": { content: "'𝐶'" }
        },
        ".cm-completionIcon-type": {
            "&:after": { content: "'𝑡'" }
        },
        ".cm-completionIcon-enum": {
            "&:after": { content: "'∪'" }
        },
        ".cm-completionIcon-property": {
            "&:after": { content: "'□'" }
        },
        ".cm-completionIcon-keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
            "&:after": { content: "'▢'" }
        },
        ".cm-completionIcon-text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    class FieldPos {
        constructor(field, line, from, to) {
            this.field = field;
            this.line = line;
            this.from = from;
            this.to = to;
        }
    }
    class FieldRange {
        constructor(field, from, to) {
            this.field = field;
            this.from = from;
            this.to = to;
        }
        map(changes) {
            let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
            let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
            return from == null || to == null ? null : new FieldRange(this.field, from, to);
        }
    }
    class Snippet {
        constructor(lines, fieldPositions) {
            this.lines = lines;
            this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
            let text = [], lineStart = [pos];
            let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
            for (let line of this.lines) {
                if (text.length) {
                    let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                    for (let i = 0; i < tabs; i++)
                        indent += state.facet(indentUnit);
                    lineStart.push(pos + indent.length - tabs);
                    line = indent + line.slice(tabs);
                }
                text.push(line);
                pos += line.length + 1;
            }
            let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
            return { text, ranges };
        }
        static parse(template) {
            let fields = [];
            let lines = [], positions = [], m;
            for (let line of template.split(/\r\n?|\n/)) {
                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                    let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || "", found = -1;
                    for (let i = 0; i < fields.length; i++) {
                        if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                            found = i;
                    }
                    if (found < 0) {
                        let i = 0;
                        while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                            i++;
                        fields.splice(i, 0, { seq, name });
                        found = i;
                        for (let pos of positions)
                            if (pos.field >= found)
                                pos.field++;
                    }
                    positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                    line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
                }
                for (let esc; esc = /([$#])\\{/.exec(line);) {
                    line = line.slice(0, esc.index) + esc[1] + "{" + line.slice(esc.index + esc[0].length);
                    for (let pos of positions)
                        if (pos.line == lines.length && pos.from > esc.index) {
                            pos.from--;
                            pos.to--;
                        }
                }
                lines.push(line);
            }
            return new Snippet(lines, positions);
        }
    }
    let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM() {
                let span = document.createElement("span");
                span.className = "cm-snippetFieldPosition";
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
    class ActiveSnippet {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
            let ranges = [];
            for (let r of this.ranges) {
                let mapped = r.map(changes);
                if (!mapped)
                    return null;
                ranges.push(mapped);
            }
            return new ActiveSnippet(ranges, this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive = /*@__PURE__*/StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField = /*@__PURE__*/StateEffect.define();
    const snippetState = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive))
                    return effect.value;
                if (effect.is(moveToField) && value)
                    return new ActiveSnippet(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
    });
    function fieldSelection(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    /**
    Convert a snippet template to a function that can
    [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
    using syntax like this:

        "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

    Each `${}` placeholder (you may also use `#{}`) indicates a field
    that the user can fill in. Its name, if any, will be the default
    content for the field.

    When the snippet is activated by calling the returned function,
    the code is inserted at the given position. Newlines in the
    template are indented by the indentation of the start line, plus
    one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
    the newline.

    On activation, (all instances of) the first field are selected.
    The user can move between fields with Tab and Shift-Tab as long as
    the fields are active. Moving to the last field or moving the
    cursor out of the current field deactivates the fields.

    The order of fields defaults to textual order, but you can add
    numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
    a custom order.

    To include a literal `${` or `#{` in your template, put a
    backslash after the dollar or hash and before the brace (`$\\{`).
    This will be removed and the sequence will not be interpreted as a
    placeholder.
    */
    function snippet(template) {
        let snippet = Snippet.parse(template);
        return (editor, _completion, from, to) => {
            let { text, ranges } = snippet.instantiate(editor.state, from);
            let spec = {
                changes: { from, to, insert: Text.of(text) },
                scrollIntoView: true
            };
            if (ranges.length)
                spec.selection = fieldSelection(ranges, 0);
            if (ranges.length > 1) {
                let active = new ActiveSnippet(ranges, 0);
                let effects = spec.effects = [setActive.of(active)];
                if (editor.state.field(snippetState, false) === undefined)
                    effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$1]));
            }
            editor.dispatch(editor.state.update(spec));
        };
    }
    function moveField(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection(active.ranges, next),
                effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
            }));
            return true;
        };
    }
    /**
    A command that clears the active snippet, if any.
    */
    const clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
    };
    /**
    Move to the next snippet field, if available.
    */
    const nextSnippetField = /*@__PURE__*/moveField(1);
    /**
    Move to the previous snippet field, if available.
    */
    const prevSnippetField = /*@__PURE__*/moveField(-1);
    const defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
    ];
    /**
    A facet that can be used to configure the key bindings used by
    snippets. The default binds Tab to
    [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
    [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
    to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
    */
    const snippetKeymap = /*@__PURE__*/Facet.define({
        combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
    });
    const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
    /**
    Create a completion from a snippet. Returns an object with the
    properties from `completion`, plus an `apply` function that
    applies the snippet.
    */
    function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
    }
    const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
        mousedown(event, view) {
            let active = view.state.field(snippetState, false), pos;
            if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
                return false;
            let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
            if (!match || match.field == active.active)
                return false;
            view.dispatch({
                selection: fieldSelection(active.ranges, match.field),
                effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
            });
            return true;
        }
    });

    const defaults = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}:;>"
    };
    const closeBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const skipBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) { return mapping.mapPos(value); }
    });
    const closedBracket = /*@__PURE__*/new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = /*@__PURE__*/StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            if (tr.selection) {
                let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
                let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
                if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                    value = RangeSet.empty;
            }
            value = value.map(tr.changes);
            for (let effect of tr.effects) {
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
                else if (effect.is(skipBracketEffect))
                    value = value.update({ filter: from => from != effect.value });
            }
            return value;
        }
    });
    /**
    Extension to enable bracket-closing behavior. When a closeable
    bracket is typed, its closing bracket is immediately inserted
    after the cursor. When closing a bracket directly in front of a
    closing bracket inserted by the extension, the cursor moves over
    that bracket.
    */
    function closeBrackets() {
        return [inputHandler, bracketState];
    }
    const definedClosing = "()[]{}<>";
    function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults;
    }
    const android$1 = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
    const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
        if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly)
            return false;
        let sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = insertBracket(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    });
    /**
    Command that implements deleting a pair of matching brackets when
    the cursor is between them.
    */
    const deleteBracketPair = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty) {
                let before = prevChar(state.doc, range.head);
                for (let token of tokens) {
                    if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
                        return { changes: { from: range.head - token.length, to: range.head + token.length },
                            range: EditorSelection.cursor(range.head - token.length),
                            userEvent: "delete.backward" };
                }
            }
            return { range: dont = range };
        });
        if (!dont)
            dispatch(state.update(changes, { scrollIntoView: true }));
        return !dont;
    };
    /**
    Close-brackets related key bindings. Binds Backspace to
    [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
    */
    const closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
    ];
    /**
    Implements the extension's behavior on text insertion. If the
    given string counts as a bracket in the language around the
    selection, and replacing the selection with it requires custom
    behavior (inserting a closing version or skipping past a
    previously-closed bracket), this function returns a transaction
    representing that custom behavior. (You only need this if you want
    to programmatically insert brackets—the
    [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
    take care of running this for user input.)
    */
    function insertBracket(state, bracket) {
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        for (let tok of tokens) {
            let closed = closing(codePointAt(tok, 0));
            if (bracket == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
                    : handleOpen(state, tok, closed, conf.before || defaults.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, moved = state.selection.ranges.map(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return EditorSelection.cursor(range.head + close.length);
            return dont = range;
        });
        return dont ? null : state.update({
            selection: EditorSelection.create(moved, state.selection.mainIndex),
            scrollIntoView: true,
            effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos);
            if (next == token) {
                if (nodeStart$1(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                        effects: skipBracketEffect.of(pos) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                nodeStart$1(state, pos - 2 * token.length)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                let prev = state.sliceDoc(pos - 1, pos);
                if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word && !probablyInString(state, pos, token))
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function nodeStart$1(state, pos) {
        let tree = syntaxTree(state).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
    }
    function probablyInString(state, pos, quoteToken) {
        let node = syntaxTree(state).resolveInner(pos, -1);
        for (let i = 0; i < 5; i++) {
            if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken) {
                let first = node.firstChild;
                while (first && first.from == node.from && first.to - first.from > quoteToken.length) {
                    if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                        return false;
                    first = first.firstChild;
                }
                return true;
            }
            let parent = node.to == pos && node.parent;
            if (!parent)
                break;
            node = parent;
        }
        return false;
    }

    /**
    Returns an extension that enables autocompletion.
    */
    function autocompletion(config = {}) {
        return [
            completionState,
            completionConfig.of(config),
            completionPlugin,
            completionKeymapExt,
            baseTheme$1
        ];
    }
    /**
    Basic keybindings for autocompletion.

     - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
     - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
     - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
     - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
    */
    const completionKeymap = [
        { key: "Ctrl-Space", run: startCompletion },
        { key: "Escape", run: closeCompletion },
        { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
        { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
        { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
        { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
        { key: "Enter", run: acceptCompletion }
    ];
    const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

    class SelectedDiagnostic {
        constructor(from, to, diagnostic) {
            this.from = from;
            this.to = to;
            this.diagnostic = diagnostic;
        }
    }
    class LintState {
        constructor(diagnostics, panel, selected) {
            this.diagnostics = diagnostics;
            this.panel = panel;
            this.selected = selected;
        }
        static init(diagnostics, panel, state) {
            // Filter the list of diagnostics for which to create markers
            let markedDiagnostics = diagnostics;
            let diagnosticFilter = state.facet(lintConfig).markerFilter;
            if (diagnosticFilter)
                markedDiagnostics = diagnosticFilter(markedDiagnostics);
            let ranges = Decoration.set(markedDiagnostics.map((d) => {
                // For zero-length ranges or ranges covering only a line break, create a widget
                return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)
                    ? Decoration.widget({
                        widget: new DiagnosticWidget(d),
                        diagnostic: d
                    }).range(d.from)
                    : Decoration.mark({
                        attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
                        diagnostic: d
                    }).range(d.from, d.to);
            }), true);
            return new LintState(ranges, panel, findDiagnostic(ranges));
        }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, 1e9, (from, to, { spec }) => {
            if (diagnostic && spec.diagnostic != diagnostic)
                return;
            found = new SelectedDiagnostic(from, to, spec.diagnostic);
            return false;
        });
        return found;
    }
    function hideTooltip(tr, tooltip) {
        return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));
    }
    function maybeEnableLint(state, effects) {
        return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of([
            lintState,
            EditorView.decorations.compute([lintState], state => {
                let { selected, panel } = state.field(lintState);
                return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
                    activeMark.range(selected.from, selected.to)
                ]);
            }),
            hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
            baseTheme
        ]));
    }
    /**
    Returns a transaction spec which updates the current set of
    diagnostics, and enables the lint extension if if wasn't already
    active.
    */
    function setDiagnostics(state, diagnostics) {
        return {
            effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
        };
    }
    /**
    The state effect that updates the set of active diagnostics. Can
    be useful when writing an extension that needs to track these.
    */
    const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
    const togglePanel = /*@__PURE__*/StateEffect.define();
    const movePanelSelection = /*@__PURE__*/StateEffect.define();
    const lintState = /*@__PURE__*/StateField.define({
        create() {
            return new LintState(Decoration.none, null, null);
        },
        update(value, tr) {
            if (tr.docChanged) {
                let mapped = value.diagnostics.map(tr.changes), selected = null;
                if (value.selected) {
                    let selPos = tr.changes.mapPos(value.selected.from, 1);
                    selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
                }
                value = new LintState(mapped, value.panel, selected);
            }
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    value = LintState.init(effect.value, value.panel, tr.state);
                }
                else if (effect.is(togglePanel)) {
                    value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
                }
                else if (effect.is(movePanelSelection)) {
                    value = new LintState(value.diagnostics, value.panel, effect.value);
                }
            }
            return value;
        },
        provide: f => [showPanel.from(f, val => val.panel),
            EditorView.decorations.from(f, s => s.diagnostics)]
    });
    const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
    function lintTooltip(view, pos, side) {
        let { diagnostics } = view.state.field(lintState);
        let found = [], stackStart = 2e8, stackEnd = 0;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
            if (pos >= from && pos <= to &&
                (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
                found.push(spec.diagnostic);
                stackStart = Math.min(from, stackStart);
                stackEnd = Math.max(to, stackEnd);
            }
        });
        let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
        if (diagnosticFilter)
            found = diagnosticFilter(found);
        if (!found.length)
            return null;
        return {
            pos: stackStart,
            end: stackEnd,
            above: view.state.doc.lineAt(stackStart).to < stackEnd,
            create() {
                return { dom: diagnosticsTooltip(view, found) };
            }
        };
    }
    function diagnosticsTooltip(view, diagnostics) {
        return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
    }
    /**
    Command to open and focus the lint panel.
    */
    const openLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });
        let panel = getPanel(view, LintPanel.open);
        if (panel)
            panel.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
    };
    /**
    Command to close the lint panel, when open.
    */
    const closeLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            return false;
        view.dispatch({ effects: togglePanel.of(false) });
        return true;
    };
    /**
    Move the selection to the next diagnostic.
    */
    const nextDiagnostic = (view) => {
        let field = view.state.field(lintState, false);
        if (!field)
            return false;
        let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
        if (!next.value) {
            next = field.diagnostics.iter(0);
            if (!next.value || next.from == sel.from && next.to == sel.to)
                return false;
        }
        view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        return true;
    };
    /**
    A set of default key bindings for the lint functionality.

    - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
    - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
    */
    const lintKeymap = [
        { key: "Mod-Shift-m", run: openLintPanel },
        { key: "F8", run: nextDiagnostic }
    ];
    const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.timeout = -1;
            this.set = true;
            let { delay } = view.state.facet(lintConfig);
            this.lintTime = Date.now() + delay;
            this.run = this.run.bind(this);
            this.timeout = setTimeout(this.run, delay);
        }
        run() {
            let now = Date.now();
            if (now < this.lintTime - 10) {
                setTimeout(this.run, this.lintTime - now);
            }
            else {
                this.set = false;
                let { state } = this.view, { sources } = state.facet(lintConfig);
                Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
                    let all = annotations.reduce((a, b) => a.concat(b));
                    if (this.view.state.doc == state.doc)
                        this.view.dispatch(setDiagnostics(this.view.state, all));
                }, error => { logException(this.view.state, error); });
            }
        }
        update(update) {
            let config = update.state.facet(lintConfig);
            if (update.docChanged || config != update.startState.facet(lintConfig)) {
                this.lintTime = Date.now() + config.delay;
                if (!this.set) {
                    this.set = true;
                    this.timeout = setTimeout(this.run, config.delay);
                }
            }
        }
        force() {
            if (this.set) {
                this.lintTime = Date.now();
                this.run();
            }
        }
        destroy() {
            clearTimeout(this.timeout);
        }
    });
    const lintConfig = /*@__PURE__*/Facet.define({
        combine(input) {
            return Object.assign({ sources: input.map(i => i.source) }, combineConfig(input.map(i => i.config), {
                delay: 750,
                markerFilter: null,
                tooltipFilter: null
            }));
        },
        enables: lintPlugin
    });
    function assignKeys(actions) {
        let assigned = [];
        if (actions)
            actions: for (let { name } of actions) {
                for (let i = 0; i < name.length; i++) {
                    let ch = name[i];
                    if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                        assigned.push(ch);
                        continue actions;
                    }
                }
                assigned.push("");
            }
        return assigned;
    }
    function renderDiagnostic(view, diagnostic, inPanel) {
        var _a;
        let keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
            let click = (e) => {
                e.preventDefault();
                let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
                if (found)
                    action.apply(view, found.from, found.to);
            };
            let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
            let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
                crelt("u", name.slice(keyIndex, keyIndex + 1)),
                name.slice(keyIndex + 1)];
            return crelt("button", {
                type: "button",
                class: "cm-diagnosticAction",
                onclick: click,
                onmousedown: click,
                "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
            }, nameElt);
        }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
    }
    class DiagnosticWidget extends WidgetType {
        constructor(diagnostic) {
            super();
            this.diagnostic = diagnostic;
        }
        eq(other) { return other.diagnostic == this.diagnostic; }
        toDOM() {
            return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
        }
    }
    class PanelItem {
        constructor(view, diagnostic) {
            this.diagnostic = diagnostic;
            this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
            this.dom = renderDiagnostic(view, diagnostic, true);
            this.dom.id = this.id;
            this.dom.setAttribute("role", "option");
        }
    }
    class LintPanel {
        constructor(view) {
            this.view = view;
            this.items = [];
            let onkeydown = (event) => {
                if (event.keyCode == 27) { // Escape
                    closeLintPanel(this.view);
                    this.view.focus();
                }
                else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                    this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                }
                else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                    this.moveSelection((this.selectedIndex + 1) % this.items.length);
                }
                else if (event.keyCode == 36) { // Home
                    this.moveSelection(0);
                }
                else if (event.keyCode == 35) { // End
                    this.moveSelection(this.items.length - 1);
                }
                else if (event.keyCode == 13) { // Enter
                    this.view.focus();
                }
                else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                    let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                    for (let i = 0; i < keys.length; i++)
                        if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                            if (found)
                                diagnostic.actions[i].apply(view, found.from, found.to);
                        }
                }
                else {
                    return;
                }
                event.preventDefault();
            };
            let onclick = (event) => {
                for (let i = 0; i < this.items.length; i++) {
                    if (this.items[i].dom.contains(event.target))
                        this.moveSelection(i);
                }
            };
            this.list = crelt("ul", {
                tabIndex: 0,
                role: "listbox",
                "aria-label": this.view.state.phrase("Diagnostics"),
                onkeydown,
                onclick
            });
            this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
                type: "button",
                name: "close",
                "aria-label": this.view.state.phrase("close"),
                onclick: () => closeLintPanel(this.view)
            }, "×"));
            this.update();
        }
        get selectedIndex() {
            let selected = this.view.state.field(lintState).selected;
            if (!selected)
                return -1;
            for (let i = 0; i < this.items.length; i++)
                if (this.items[i].diagnostic == selected.diagnostic)
                    return i;
            return -1;
        }
        update() {
            let { diagnostics, selected } = this.view.state.field(lintState);
            let i = 0, needsSync = false, newSelectedItem = null;
            diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
                let found = -1, item;
                for (let j = i; j < this.items.length; j++)
                    if (this.items[j].diagnostic == spec.diagnostic) {
                        found = j;
                        break;
                    }
                if (found < 0) {
                    item = new PanelItem(this.view, spec.diagnostic);
                    this.items.splice(i, 0, item);
                    needsSync = true;
                }
                else {
                    item = this.items[found];
                    if (found > i) {
                        this.items.splice(i, found - i);
                        needsSync = true;
                    }
                }
                if (selected && item.diagnostic == selected.diagnostic) {
                    if (!item.dom.hasAttribute("aria-selected")) {
                        item.dom.setAttribute("aria-selected", "true");
                        newSelectedItem = item;
                    }
                }
                else if (item.dom.hasAttribute("aria-selected")) {
                    item.dom.removeAttribute("aria-selected");
                }
                i++;
            });
            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
                needsSync = true;
                this.items.pop();
            }
            if (this.items.length == 0) {
                this.items.push(new PanelItem(this.view, {
                    from: -1, to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
                needsSync = true;
            }
            if (newSelectedItem) {
                this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
                this.view.requestMeasure({
                    key: this,
                    read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                    write: ({ sel, panel }) => {
                        if (sel.top < panel.top)
                            this.list.scrollTop -= panel.top - sel.top;
                        else if (sel.bottom > panel.bottom)
                            this.list.scrollTop += sel.bottom - panel.bottom;
                    }
                });
            }
            else if (this.selectedIndex < 0) {
                this.list.removeAttribute("aria-activedescendant");
            }
            if (needsSync)
                this.sync();
        }
        sync() {
            let domPos = this.list.firstChild;
            function rm() {
                let prev = domPos;
                domPos = prev.nextSibling;
                prev.remove();
            }
            for (let item of this.items) {
                if (item.dom.parentNode == this.list) {
                    while (domPos != item.dom)
                        rm();
                    domPos = item.dom.nextSibling;
                }
                else {
                    this.list.insertBefore(item.dom, domPos);
                }
            }
            while (domPos)
                rm();
        }
        moveSelection(selectedIndex) {
            if (this.selectedIndex < 0)
                return;
            let field = this.view.state.field(lintState);
            let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection)
                return;
            this.view.dispatch({
                selection: { anchor: selection.from, head: selection.to },
                scrollIntoView: true,
                effects: movePanelSelection.of(selection)
            });
        }
        static open(view) { return new LintPanel(view); }
    }
    function svg(content, attrs = `viewBox="0 0 40 40"`) {
        return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
    }
    function underline(color) {
        return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
    }
    const baseTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-diagnostic": {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block",
            whiteSpace: "pre-wrap"
        },
        ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
        ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
        ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
        ".cm-diagnosticAction": {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px"
        },
        ".cm-diagnosticSource": {
            fontSize: "70%",
            opacity: .7
        },
        ".cm-lintRange": {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x",
            paddingBottom: "0.7px",
        },
        ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
        ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
        ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
        ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
        ".cm-tooltip-lint": {
            padding: 0,
            margin: 0
        },
        ".cm-lintPoint": {
            position: "relative",
            "&:after": {
                content: '""',
                position: "absolute",
                bottom: 0,
                left: "-2px",
                borderLeft: "3px solid transparent",
                borderRight: "3px solid transparent",
                borderBottom: "4px solid #d11"
            }
        },
        ".cm-lintPoint-warning": {
            "&:after": { borderBottomColor: "orange" }
        },
        ".cm-lintPoint-info": {
            "&:after": { borderBottomColor: "#999" }
        },
        ".cm-panel.cm-panel-lint": {
            position: "relative",
            "& ul": {
                maxHeight: "100px",
                overflowY: "auto",
                "& [aria-selected]": {
                    backgroundColor: "#ddd",
                    "& u": { textDecoration: "underline" }
                },
                "&:focus [aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                },
                "& u": { textDecoration: "none" },
                padding: 0,
                margin: 0
            },
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "2px",
                background: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            }
        }
    });

    class CompositeBlock {
        constructor(type, 
        // Used for indentation in list items, markup character in lists
        value, from, hash, end, children, positions) {
            this.type = type;
            this.value = value;
            this.from = from;
            this.hash = hash;
            this.end = end;
            this.children = children;
            this.positions = positions;
            this.hashProp = [[NodeProp.contextHash, hash]];
        }
        static create(type, value, from, parentHash, end) {
            let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
            return new CompositeBlock(type, value, from, hash, end, [], []);
        }
        addChild(child, pos) {
            if (child.prop(NodeProp.contextHash) != this.hash)
                child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
            this.children.push(child);
            this.positions.push(pos);
        }
        toTree(nodeSet, end = this.end) {
            let last = this.children.length - 1;
            if (last >= 0)
                end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
            let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
                makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
            });
            return tree;
        }
    }
    var Type;
    (function (Type) {
        Type[Type["Document"] = 1] = "Document";
        Type[Type["CodeBlock"] = 2] = "CodeBlock";
        Type[Type["FencedCode"] = 3] = "FencedCode";
        Type[Type["Blockquote"] = 4] = "Blockquote";
        Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
        Type[Type["BulletList"] = 6] = "BulletList";
        Type[Type["OrderedList"] = 7] = "OrderedList";
        Type[Type["ListItem"] = 8] = "ListItem";
        Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
        Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
        Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
        Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
        Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
        Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
        Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
        Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
        Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
        Type[Type["LinkReference"] = 18] = "LinkReference";
        Type[Type["Paragraph"] = 19] = "Paragraph";
        Type[Type["CommentBlock"] = 20] = "CommentBlock";
        Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
        // Inline
        Type[Type["Escape"] = 22] = "Escape";
        Type[Type["Entity"] = 23] = "Entity";
        Type[Type["HardBreak"] = 24] = "HardBreak";
        Type[Type["Emphasis"] = 25] = "Emphasis";
        Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
        Type[Type["Link"] = 27] = "Link";
        Type[Type["Image"] = 28] = "Image";
        Type[Type["InlineCode"] = 29] = "InlineCode";
        Type[Type["HTMLTag"] = 30] = "HTMLTag";
        Type[Type["Comment"] = 31] = "Comment";
        Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
        Type[Type["URL"] = 33] = "URL";
        // Smaller tokens
        Type[Type["HeaderMark"] = 34] = "HeaderMark";
        Type[Type["QuoteMark"] = 35] = "QuoteMark";
        Type[Type["ListMark"] = 36] = "ListMark";
        Type[Type["LinkMark"] = 37] = "LinkMark";
        Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
        Type[Type["CodeMark"] = 39] = "CodeMark";
        Type[Type["CodeText"] = 40] = "CodeText";
        Type[Type["CodeInfo"] = 41] = "CodeInfo";
        Type[Type["LinkTitle"] = 42] = "LinkTitle";
        Type[Type["LinkLabel"] = 43] = "LinkLabel";
    })(Type || (Type = {}));
    /// Data structure used to accumulate a block's content during [leaf
    /// block parsing](#BlockParser.leaf).
    class LeafBlock {
        /// @internal
        constructor(
        /// The start position of the block.
        start, 
        /// The block's text content.
        content) {
            this.start = start;
            this.content = content;
            /// @internal
            this.marks = [];
            /// The block parsers active for this block.
            this.parsers = [];
        }
    }
    /// Data structure used during block-level per-line parsing.
    class Line {
        constructor() {
            /// The line's full text.
            this.text = "";
            /// The base indent provided by the composite contexts (that have
            /// been handled so far).
            this.baseIndent = 0;
            /// The string position corresponding to the base indent.
            this.basePos = 0;
            /// The number of contexts handled @internal
            this.depth = 0;
            /// Any markers (i.e. block quote markers) parsed for the contexts. @internal
            this.markers = [];
            /// The position of the next non-whitespace character beyond any
            /// list, blockquote, or other composite block markers.
            this.pos = 0;
            /// The column of the next non-whitespace character.
            this.indent = 0;
            /// The character code of the character after `pos`.
            this.next = -1;
        }
        /// @internal
        forward() {
            if (this.basePos > this.pos)
                this.forwardInner();
        }
        /// @internal
        forwardInner() {
            let newPos = this.skipSpace(this.basePos);
            this.indent = this.countIndent(newPos, this.pos, this.indent);
            this.pos = newPos;
            this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
        }
        /// Skip whitespace after the given position, return the position of
        /// the next non-space character or the end of the line if there's
        /// only space after `from`.
        skipSpace(from) { return skipSpace(this.text, from); }
        /// @internal
        reset(text) {
            this.text = text;
            this.baseIndent = this.basePos = this.pos = this.indent = 0;
            this.forwardInner();
            this.depth = 1;
            while (this.markers.length)
                this.markers.pop();
        }
        /// Move the line's base position forward to the given position.
        /// This should only be called by composite [block
        /// parsers](#BlockParser.parse) or [markup skipping
        /// functions](#NodeSpec.composite).
        moveBase(to) {
            this.basePos = to;
            this.baseIndent = this.countIndent(to, this.pos, this.indent);
        }
        /// Move the line's base position forward to the given _column_.
        moveBaseColumn(indent) {
            this.baseIndent = indent;
            this.basePos = this.findColumn(indent);
        }
        /// Store a composite-block-level marker. Should be called from
        /// [markup skipping functions](#NodeSpec.composite) when they
        /// consume any non-whitespace characters.
        addMarker(elt) {
            this.markers.push(elt);
        }
        /// Find the column position at `to`, optionally starting at a given
        /// position and column.
        countIndent(to, from = 0, indent = 0) {
            for (let i = from; i < to; i++)
                indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
            return indent;
        }
        /// Find the position corresponding to the given column.
        findColumn(goal) {
            let i = 0;
            for (let indent = 0; i < this.text.length && indent < goal; i++)
                indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
            return i;
        }
        /// @internal
        scrub() {
            if (!this.baseIndent)
                return this.text;
            let result = "";
            for (let i = 0; i < this.basePos; i++)
                result += " ";
            return result + this.text.slice(this.basePos);
        }
    }
    function skipForList(bl, cx, line) {
        if (line.pos == line.text.length ||
            (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
            return true;
        if (line.indent >= line.baseIndent + 4)
            return false;
        let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
        return size > 0 &&
            (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&
            line.text.charCodeAt(line.pos + size - 1) == bl.value;
    }
    const DefaultSkipMarkup = {
        [Type.Blockquote](bl, cx, line) {
            if (line.next != 62 /* '>' */)
                return false;
            line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
            line.moveBase(line.pos + (space$2(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
            bl.end = cx.lineStart + line.text.length;
            return true;
        },
        [Type.ListItem](bl, _cx, line) {
            if (line.indent < line.baseIndent + bl.value && line.next > -1)
                return false;
            line.moveBaseColumn(line.baseIndent + bl.value);
            return true;
        },
        [Type.OrderedList]: skipForList,
        [Type.BulletList]: skipForList,
        [Type.Document]() { return true; }
    };
    function space$2(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
    function skipSpace(line, i = 0) {
        while (i < line.length && space$2(line.charCodeAt(i)))
            i++;
        return i;
    }
    function skipSpaceBack(line, i, to) {
        while (i > to && space$2(line.charCodeAt(i - 1)))
            i--;
        return i;
    }
    function isFencedCode(line) {
        if (line.next != 96 && line.next != 126 /* '`~' */)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
            pos++;
        if (pos < line.pos + 3)
            return -1;
        if (line.next == 96)
            for (let i = pos; i < line.text.length; i++)
                if (line.text.charCodeAt(i) == 96)
                    return -1;
        return pos;
    }
    function isBlockquote(line) {
        return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
    }
    function isHorizontalRule(line, cx, breaking) {
        if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
            return -1;
        let count = 1;
        for (let pos = line.pos + 1; pos < line.text.length; pos++) {
            let ch = line.text.charCodeAt(pos);
            if (ch == line.next)
                count++;
            else if (!space$2(ch))
                return -1;
        }
        // Setext headers take precedence
        if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
            return -1;
        return count < 3 ? -1 : 1;
    }
    function inList(cx, type) {
        for (let i = cx.stack.length - 1; i >= 0; i--)
            if (cx.stack[i].type == type)
                return true;
        return false;
    }
    function isBulletList(line, cx, breaking) {
        return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
            (line.pos == line.text.length - 1 || space$2(line.text.charCodeAt(line.pos + 1))) &&
            (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
    }
    function isOrderedList(line, cx, breaking) {
        let pos = line.pos, next = line.next;
        for (;;) {
            if (next >= 48 && next <= 57 /* '0-9' */)
                pos++;
            else
                break;
            if (pos == line.text.length)
                return -1;
            next = line.text.charCodeAt(pos);
        }
        if (pos == line.pos || pos > line.pos + 9 ||
            (next != 46 && next != 41 /* '.)' */) ||
            (pos < line.text.length - 1 && !space$2(line.text.charCodeAt(pos + 1))) ||
            breaking && !inList(cx, Type.OrderedList) &&
                (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
            return -1;
        return pos + 1 - line.pos;
    }
    function isAtxHeading(line) {
        if (line.next != 35 /* '#' */)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
            pos++;
        if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
            return -1;
        let size = pos - line.pos;
        return size > 6 ? -1 : size;
    }
    function isSetextUnderline(line) {
        if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
            pos++;
        let end = pos;
        while (pos < line.text.length && space$2(line.text.charCodeAt(pos)))
            pos++;
        return pos == line.text.length ? end : -1;
    }
    const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
    const HTMLBlockStyle = [
        [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
        [/^\s*<!--/, CommentEnd],
        [/^\s*<\?/, ProcessingEnd],
        [/^\s*<![A-Z]/, />/],
        [/^\s*<!\[CDATA\[/, /\]\]>/],
        [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
        [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
    ];
    function isHTMLBlock(line, _cx, breaking) {
        if (line.next != 60 /* '<' */)
            return -1;
        let rest = line.text.slice(line.pos);
        for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
            if (HTMLBlockStyle[i][0].test(rest))
                return i;
        return -1;
    }
    function getListIndent(line, pos) {
        let indentAfter = line.countIndent(pos, line.pos, line.indent);
        let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
        return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
    }
    function addCodeText(marks, from, to) {
        let last = marks.length - 1;
        if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
            marks[last].to = to;
        else
            marks.push(elt(Type.CodeText, from, to));
    }
    // Rules for parsing blocks. A return value of false means the rule
    // doesn't apply here, true means it does. When true is returned and
    // `p.line` has been updated, the rule is assumed to have consumed a
    // leaf block. Otherwise, it is assumed to have opened a context.
    const DefaultBlockParsers = {
        LinkReference: undefined,
        IndentedCode(cx, line) {
            let base = line.baseIndent + 4;
            if (line.indent < base)
                return false;
            let start = line.findColumn(base);
            let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
            let marks = [], pendingMarks = [];
            addCodeText(marks, from, to);
            while (cx.nextLine() && line.depth >= cx.stack.length) {
                if (line.pos == line.text.length) { // Empty
                    addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        pendingMarks.push(m);
                }
                else if (line.indent < base) {
                    break;
                }
                else {
                    if (pendingMarks.length) {
                        for (let m of pendingMarks) {
                            if (m.type == Type.CodeText)
                                addCodeText(marks, m.from, m.to);
                            else
                                marks.push(m);
                        }
                        pendingMarks = [];
                    }
                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        marks.push(m);
                    to = cx.lineStart + line.text.length;
                    let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                    if (codeStart < to)
                        addCodeText(marks, codeStart, to);
                }
            }
            if (pendingMarks.length) {
                pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);
                if (pendingMarks.length)
                    line.markers = pendingMarks.concat(line.markers);
            }
            cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
            return true;
        },
        FencedCode(cx, line) {
            let fenceEnd = isFencedCode(line);
            if (fenceEnd < 0)
                return false;
            let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
            let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
            let marks = [elt(Type.CodeMark, from, from + len)];
            if (infoFrom < infoTo)
                marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
            for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
                let i = line.pos;
                if (line.indent - line.baseIndent < 4)
                    while (i < line.text.length && line.text.charCodeAt(i) == ch)
                        i++;
                if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                    for (let m of line.markers)
                        marks.push(m);
                    marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                    cx.nextLine();
                    break;
                }
                else {
                    if (!first)
                        addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        marks.push(m);
                    let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                    if (textStart < textEnd)
                        addCodeText(marks, textStart, textEnd);
                }
            }
            cx.addNode(cx.buffer.writeElements(marks, -from)
                .finish(Type.FencedCode, cx.prevLineEnd() - from), from);
            return true;
        },
        Blockquote(cx, line) {
            let size = isBlockquote(line);
            if (size < 0)
                return false;
            cx.startContext(Type.Blockquote, line.pos);
            cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
            line.moveBase(line.pos + size);
            return null;
        },
        HorizontalRule(cx, line) {
            if (isHorizontalRule(line, cx, false) < 0)
                return false;
            let from = cx.lineStart + line.pos;
            cx.nextLine();
            cx.addNode(Type.HorizontalRule, from);
            return true;
        },
        BulletList(cx, line) {
            let size = isBulletList(line, cx, false);
            if (size < 0)
                return false;
            if (cx.block.type != Type.BulletList)
                cx.startContext(Type.BulletList, line.basePos, line.next);
            let newBase = getListIndent(line, line.pos + 1);
            cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
            cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
            line.moveBaseColumn(newBase);
            return null;
        },
        OrderedList(cx, line) {
            let size = isOrderedList(line, cx, false);
            if (size < 0)
                return false;
            if (cx.block.type != Type.OrderedList)
                cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
            let newBase = getListIndent(line, line.pos + size);
            cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
            cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
            line.moveBaseColumn(newBase);
            return null;
        },
        ATXHeading(cx, line) {
            let size = isAtxHeading(line);
            if (size < 0)
                return false;
            let off = line.pos, from = cx.lineStart + off;
            let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
            while (after > off && line.text.charCodeAt(after - 1) == line.next)
                after--;
            if (after == endOfSpace || after == off || !space$2(line.text.charCodeAt(after - 1)))
                after = line.text.length;
            let buf = cx.buffer
                .write(Type.HeaderMark, 0, size)
                .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
            if (after < line.text.length)
                buf.write(Type.HeaderMark, after - off, endOfSpace - off);
            let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
            cx.nextLine();
            cx.addNode(node, from);
            return true;
        },
        HTMLBlock(cx, line) {
            let type = isHTMLBlock(line, cx, false);
            if (type < 0)
                return false;
            let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
            let marks = [], trailing = end != EmptyLine;
            while (!end.test(line.text) && cx.nextLine()) {
                if (line.depth < cx.stack.length) {
                    trailing = false;
                    break;
                }
                for (let m of line.markers)
                    marks.push(m);
            }
            if (trailing)
                cx.nextLine();
            let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
            let to = cx.prevLineEnd();
            cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
            return true;
        },
        SetextHeading: undefined // Specifies relative precedence for block-continue function
    };
    // This implements a state machine that incrementally parses link references. At each
    // next line, it looks ahead to see if the line continues the reference or not. If it
    // doesn't and a valid link is available ending before that line, it finishes that.
    // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
    // creates a link reference if there's a valid reference up to the current point.
    class LinkReferenceParser {
        constructor(leaf) {
            this.stage = 0 /* Start */;
            this.elts = [];
            this.pos = 0;
            this.start = leaf.start;
            this.advance(leaf.content);
        }
        nextLine(cx, line, leaf) {
            if (this.stage == -1 /* Failed */)
                return false;
            let content = leaf.content + "\n" + line.scrub();
            let finish = this.advance(content);
            if (finish > -1 && finish < content.length)
                return this.complete(cx, leaf, finish);
            return false;
        }
        finish(cx, leaf) {
            if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
                return this.complete(cx, leaf, leaf.content.length);
            return false;
        }
        complete(cx, leaf, len) {
            cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
            return true;
        }
        nextStage(elt) {
            if (elt) {
                this.pos = elt.to - this.start;
                this.elts.push(elt);
                this.stage++;
                return true;
            }
            if (elt === false)
                this.stage = -1 /* Failed */;
            return false;
        }
        advance(content) {
            for (;;) {
                if (this.stage == -1 /* Failed */) {
                    return -1;
                }
                else if (this.stage == 0 /* Start */) {
                    if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                        return -1;
                    if (content.charCodeAt(this.pos) != 58 /* ':' */)
                        return this.stage = -1 /* Failed */;
                    this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                    this.pos++;
                }
                else if (this.stage == 1 /* Label */) {
                    if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                        return -1;
                }
                else if (this.stage == 2 /* Link */) {
                    let skip = skipSpace(content, this.pos), end = 0;
                    if (skip > this.pos) {
                        let title = parseLinkTitle(content, skip, this.start);
                        if (title) {
                            let titleEnd = lineEnd(content, title.to - this.start);
                            if (titleEnd > 0) {
                                this.nextStage(title);
                                end = titleEnd;
                            }
                        }
                    }
                    if (!end)
                        end = lineEnd(content, this.pos);
                    return end > 0 && end < content.length ? end : -1;
                }
                else { // RefStage.Title
                    return lineEnd(content, this.pos);
                }
            }
        }
    }
    function lineEnd(text, pos) {
        for (; pos < text.length; pos++) {
            let next = text.charCodeAt(pos);
            if (next == 10)
                break;
            if (!space$2(next))
                return -1;
        }
        return pos;
    }
    class SetextHeadingParser {
        nextLine(cx, line, leaf) {
            let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
            let next = line.next;
            if (underline < 0)
                return false;
            let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
            cx.nextLine();
            cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
                ...cx.parser.parseInline(leaf.content, leaf.start),
                underlineMark
            ]));
            return true;
        }
        finish() {
            return false;
        }
    }
    const DefaultLeafBlocks = {
        LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
        SetextHeading() { return new SetextHeadingParser; }
    };
    const DefaultEndLeaf = [
        (_, line) => isAtxHeading(line) >= 0,
        (_, line) => isFencedCode(line) >= 0,
        (_, line) => isBlockquote(line) >= 0,
        (p, line) => isBulletList(line, p, true) >= 0,
        (p, line) => isOrderedList(line, p, true) >= 0,
        (p, line) => isHorizontalRule(line, p, true) >= 0,
        (p, line) => isHTMLBlock(line, p, true) >= 0
    ];
    const scanLineResult = { text: "", end: 0 };
    /// Block-level parsing functions get access to this context object.
    class BlockContext {
        /// @internal
        constructor(
        /// The parser configuration used.
        parser, 
        /// @internal
        input, fragments, 
        /// @internal
        ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.line = new Line();
            this.atEnd = false;
            /// @internal
            this.dontInject = new Set;
            this.stoppedAt = null;
            /// The range index that absoluteLineStart points into @internal
            this.rangeI = 0;
            this.to = ranges[ranges.length - 1].to;
            this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
            this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
            this.stack = [this.block];
            this.fragments = fragments.length ? new FragmentCursor$1(fragments, input) : null;
            this.readLine();
        }
        get parsedPos() {
            return this.absoluteLineStart;
        }
        advance() {
            if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
                return this.finish();
            let { line } = this;
            for (;;) {
                while (line.depth < this.stack.length)
                    this.finishContext();
                for (let mark of line.markers)
                    this.addNode(mark.type, mark.from, mark.to);
                if (line.pos < line.text.length)
                    break;
                // Empty line
                if (!this.nextLine())
                    return this.finish();
            }
            if (this.fragments && this.reuseFragment(line.basePos))
                return null;
            start: for (;;) {
                for (let type of this.parser.blockParsers)
                    if (type) {
                        let result = type(this, line);
                        if (result != false) {
                            if (result == true)
                                return null;
                            line.forward();
                            continue start;
                        }
                    }
                break;
            }
            let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
            for (let parse of this.parser.leafBlockParsers)
                if (parse) {
                    let parser = parse(this, leaf);
                    if (parser)
                        leaf.parsers.push(parser);
                }
            lines: while (this.nextLine()) {
                if (line.pos == line.text.length)
                    break;
                if (line.indent < line.baseIndent + 4) {
                    for (let stop of this.parser.endLeafBlock)
                        if (stop(this, line, leaf))
                            break lines;
                }
                for (let parser of leaf.parsers)
                    if (parser.nextLine(this, line, leaf))
                        return null;
                leaf.content += "\n" + line.scrub();
                for (let m of line.markers)
                    leaf.marks.push(m);
            }
            this.finishLeaf(leaf);
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        reuseFragment(start) {
            if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
                !this.fragments.matches(this.block.hash))
                return false;
            let taken = this.fragments.takeNodes(this);
            if (!taken)
                return false;
            let withoutGaps = taken, end = this.absoluteLineStart + taken;
            for (let i = 1; i < this.ranges.length; i++) {
                let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
                if (gapFrom >= this.lineStart && gapTo < end)
                    withoutGaps -= gapTo - gapFrom;
            }
            this.lineStart += withoutGaps;
            this.absoluteLineStart += taken;
            this.moveRangeI();
            if (this.absoluteLineStart < this.to) {
                this.lineStart++;
                this.absoluteLineStart++;
                this.readLine();
            }
            else {
                this.atEnd = true;
                this.readLine();
            }
            return true;
        }
        /// The number of parent blocks surrounding the current block.
        get depth() {
            return this.stack.length;
        }
        /// Get the type of the parent block at the given depth. When no
        /// depth is passed, return the type of the innermost parent.
        parentType(depth = this.depth - 1) {
            return this.parser.nodeSet.types[this.stack[depth].type];
        }
        /// Move to the next input line. This should only be called by
        /// (non-composite) [block parsers](#BlockParser.parse) that consume
        /// the line directly, or leaf block parser
        /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
        /// consume the current line (and return true).
        nextLine() {
            this.lineStart += this.line.text.length;
            if (this.absoluteLineEnd >= this.to) {
                this.absoluteLineStart = this.absoluteLineEnd;
                this.atEnd = true;
                this.readLine();
                return false;
            }
            else {
                this.lineStart++;
                this.absoluteLineStart = this.absoluteLineEnd + 1;
                this.moveRangeI();
                this.readLine();
                return true;
            }
        }
        moveRangeI() {
            while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
                this.rangeI++;
                this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
            }
        }
        /// @internal
        scanLine(start) {
            let r = scanLineResult;
            r.end = start;
            if (start >= this.to) {
                r.text = "";
            }
            else {
                r.text = this.lineChunkAt(start);
                r.end += r.text.length;
                if (this.ranges.length > 1) {
                    let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                    while (this.ranges[rangeI].to < r.end) {
                        rangeI++;
                        let nextFrom = this.ranges[rangeI].from;
                        let after = this.lineChunkAt(nextFrom);
                        r.end = nextFrom + after.length;
                        r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                        textOffset = r.end - r.text.length;
                    }
                }
            }
            return r;
        }
        /// @internal
        readLine() {
            let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
            this.absoluteLineEnd = end;
            line.reset(text);
            for (; line.depth < this.stack.length; line.depth++) {
                let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
                if (!handler)
                    throw new Error("Unhandled block context " + Type[cx.type]);
                if (!handler(cx, this, line))
                    break;
                line.forward();
            }
        }
        lineChunkAt(pos) {
            let next = this.input.chunk(pos), text;
            if (!this.input.lineChunks) {
                let eol = next.indexOf("\n");
                text = eol < 0 ? next : next.slice(0, eol);
            }
            else {
                text = next == "\n" ? "" : next;
            }
            return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
        }
        /// The end position of the previous line.
        prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
        /// @internal
        startContext(type, start, value = 0) {
            this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
            this.stack.push(this.block);
        }
        /// Start a composite block. Should only be called from [block
        /// parser functions](#BlockParser.parse) that return null.
        startComposite(type, start, value = 0) {
            this.startContext(this.parser.getNodeType(type), start, value);
        }
        /// @internal
        addNode(block, from, to) {
            if (typeof block == "number")
                block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
            this.block.addChild(block, from - this.block.from);
        }
        /// Add a block element. Can be called by [block
        /// parsers](#BlockParser.parse).
        addElement(elt) {
            this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
        }
        /// Add a block element from a [leaf parser](#LeafBlockParser). This
        /// makes sure any extra composite block markup (such as blockquote
        /// markers) inside the block are also added to the syntax tree.
        addLeafElement(leaf, elt) {
            this.addNode(this.buffer
                .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
                .finish(elt.type, elt.to - elt.from), elt.from);
        }
        /// @internal
        finishContext() {
            let cx = this.stack.pop();
            let top = this.stack[this.stack.length - 1];
            top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
            this.block = top;
        }
        finish() {
            while (this.stack.length > 1)
                this.finishContext();
            return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
        }
        addGaps(tree) {
            return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
        }
        /// @internal
        finishLeaf(leaf) {
            for (let parser of leaf.parsers)
                if (parser.finish(this, leaf))
                    return;
            let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
            this.addNode(this.buffer
                .writeElements(inline, -leaf.start)
                .finish(Type.Paragraph, leaf.content.length), leaf.start);
        }
        elt(type, from, to, children) {
            if (typeof type == "string")
                return elt(this.parser.getNodeType(type), from, to, children);
            return new TreeElement(type, from);
        }
        /// @internal
        get buffer() { return new Buffer(this.parser.nodeSet); }
    }
    function injectGaps(ranges, rangeI, tree, offset, dont) {
        if (dont.has(tree.tree))
            return tree.tree;
        let rangeEnd = ranges[rangeI].to;
        let children = [], positions = [], start = tree.from + offset;
        function movePastNext(upto, inclusive) {
            while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
                let size = ranges[rangeI + 1].from - rangeEnd;
                offset += size;
                upto += size;
                rangeI++;
                rangeEnd = ranges[rangeI].to;
            }
        }
        for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
            movePastNext(ch.from + offset, true);
            let from = ch.from + offset, node;
            if (ch.to + offset > rangeEnd) {
                node = injectGaps(ranges, rangeI, ch, offset, dont);
                movePastNext(ch.to + offset, false);
            }
            else {
                node = ch.toTree();
            }
            children.push(node);
            positions.push(from - start);
        }
        movePastNext(tree.to + offset, false);
        return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
    }
    /// A Markdown parser configuration.
    class MarkdownParser extends Parser {
        /// @internal
        constructor(
        /// The parser's syntax [node
        /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
        nodeSet, 
        /// @internal
        blockParsers, 
        /// @internal
        leafBlockParsers, 
        /// @internal
        blockNames, 
        /// @internal
        endLeafBlock, 
        /// @internal
        skipContextMarkup, 
        /// @internal
        inlineParsers, 
        /// @internal
        inlineNames, 
        /// @internal
        wrappers) {
            super();
            this.nodeSet = nodeSet;
            this.blockParsers = blockParsers;
            this.leafBlockParsers = leafBlockParsers;
            this.blockNames = blockNames;
            this.endLeafBlock = endLeafBlock;
            this.skipContextMarkup = skipContextMarkup;
            this.inlineParsers = inlineParsers;
            this.inlineNames = inlineNames;
            this.wrappers = wrappers;
            /// @internal
            this.nodeTypes = Object.create(null);
            for (let t of nodeSet.types)
                this.nodeTypes[t.name] = t.id;
        }
        createParse(input, fragments, ranges) {
            let parse = new BlockContext(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Reconfigure the parser.
        configure(spec) {
            let config = resolveConfig(spec);
            if (!config)
                return this;
            let { nodeSet, skipContextMarkup } = this;
            let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
            if (nonEmpty(config.defineNodes)) {
                skipContextMarkup = Object.assign({}, skipContextMarkup);
                let nodeTypes = nodeSet.types.slice(), styles;
                for (let s of config.defineNodes) {
                    let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                    if (nodeTypes.some(t => t.name == name))
                        continue;
                    if (composite)
                        skipContextMarkup[nodeTypes.length] =
                            (bl, cx, line) => composite(cx, line, bl.value);
                    let id = nodeTypes.length;
                    let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                        : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                    nodeTypes.push(NodeType.define({
                        id,
                        name,
                        props: group && [[NodeProp.group, group]]
                    }));
                    if (style) {
                        if (!styles)
                            styles = {};
                        if (Array.isArray(style) || style instanceof Tag)
                            styles[name] = style;
                        else
                            Object.assign(styles, style);
                    }
                }
                nodeSet = new NodeSet(nodeTypes);
                if (styles)
                    nodeSet = nodeSet.extend(styleTags(styles));
            }
            if (nonEmpty(config.props))
                nodeSet = nodeSet.extend(...config.props);
            if (nonEmpty(config.remove)) {
                for (let rm of config.remove) {
                    let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                    if (block > -1)
                        blockParsers[block] = leafBlockParsers[block] = undefined;
                    if (inline > -1)
                        inlineParsers[inline] = undefined;
                }
            }
            if (nonEmpty(config.parseBlock)) {
                for (let spec of config.parseBlock) {
                    let found = blockNames.indexOf(spec.name);
                    if (found > -1) {
                        blockParsers[found] = spec.parse;
                        leafBlockParsers[found] = spec.leaf;
                    }
                    else {
                        let pos = spec.before ? findName(blockNames, spec.before)
                            : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                        blockParsers.splice(pos, 0, spec.parse);
                        leafBlockParsers.splice(pos, 0, spec.leaf);
                        blockNames.splice(pos, 0, spec.name);
                    }
                    if (spec.endLeaf)
                        endLeafBlock.push(spec.endLeaf);
                }
            }
            if (nonEmpty(config.parseInline)) {
                for (let spec of config.parseInline) {
                    let found = inlineNames.indexOf(spec.name);
                    if (found > -1) {
                        inlineParsers[found] = spec.parse;
                    }
                    else {
                        let pos = spec.before ? findName(inlineNames, spec.before)
                            : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                        inlineParsers.splice(pos, 0, spec.parse);
                        inlineNames.splice(pos, 0, spec.name);
                    }
                }
            }
            if (config.wrap)
                wrappers = wrappers.concat(config.wrap);
            return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
        }
        /// @internal
        getNodeType(name) {
            let found = this.nodeTypes[name];
            if (found == null)
                throw new RangeError(`Unknown node type '${name}'`);
            return found;
        }
        /// Parse the given piece of inline text at the given offset,
        /// returning an array of [`Element`](#Element) objects representing
        /// the inline content.
        parseInline(text, offset) {
            let cx = new InlineContext(this, text, offset);
            outer: for (let pos = offset; pos < cx.end;) {
                let next = cx.char(pos);
                for (let token of this.inlineParsers)
                    if (token) {
                        let result = token(cx, next, pos);
                        if (result >= 0) {
                            pos = result;
                            continue outer;
                        }
                    }
                pos++;
            }
            return cx.resolveMarkers(0);
        }
    }
    function nonEmpty(a) {
        return a != null && a.length > 0;
    }
    function resolveConfig(spec) {
        if (!Array.isArray(spec))
            return spec;
        if (spec.length == 0)
            return null;
        let conf = resolveConfig(spec[0]);
        if (spec.length == 1)
            return conf;
        let rest = resolveConfig(spec.slice(1));
        if (!rest || !conf)
            return conf || rest;
        let conc = (a, b) => (a || none).concat(b || none);
        let wrapA = conf.wrap, wrapB = rest.wrap;
        return {
            props: conc(conf.props, rest.props),
            defineNodes: conc(conf.defineNodes, rest.defineNodes),
            parseBlock: conc(conf.parseBlock, rest.parseBlock),
            parseInline: conc(conf.parseInline, rest.parseInline),
            remove: conc(conf.remove, rest.remove),
            wrap: !wrapA ? wrapB : !wrapB ? wrapA :
                (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
        };
    }
    function findName(names, name) {
        let found = names.indexOf(name);
        if (found < 0)
            throw new RangeError(`Position specified relative to unknown parser ${name}`);
        return found;
    }
    let nodeTypes = [NodeType.none];
    for (let i = 1, name; name = Type[i]; i++) {
        nodeTypes[i] = NodeType.define({
            id: i,
            name,
            props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
        });
    }
    const none = [];
    class Buffer {
        constructor(nodeSet) {
            this.nodeSet = nodeSet;
            this.content = [];
            this.nodes = [];
        }
        write(type, from, to, children = 0) {
            this.content.push(type, from, to, 4 + children * 4);
            return this;
        }
        writeElements(elts, offset = 0) {
            for (let e of elts)
                e.writeTo(this, offset);
            return this;
        }
        finish(type, length) {
            return Tree.build({
                buffer: this.content,
                nodeSet: this.nodeSet,
                reused: this.nodes,
                topID: type,
                length
            });
        }
    }
    /// Elements are used to compose syntax nodes during parsing.
    class Element$1 {
        /// @internal
        constructor(
        /// The node's
        /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
        type, 
        /// The start of the node, as an offset from the start of the document.
        from, 
        /// The end of the node.
        to, 
        /// The node's child nodes @internal
        children = none) {
            this.type = type;
            this.from = from;
            this.to = to;
            this.children = children;
        }
        /// @internal
        writeTo(buf, offset) {
            let startOff = buf.content.length;
            buf.writeElements(this.children, offset);
            buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
        }
        /// @internal
        toTree(nodeSet) {
            return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
        }
    }
    class TreeElement {
        constructor(tree, from) {
            this.tree = tree;
            this.from = from;
        }
        get to() { return this.from + this.tree.length; }
        get type() { return this.tree.type.id; }
        get children() { return none; }
        writeTo(buf, offset) {
            buf.nodes.push(this.tree);
            buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
        }
        toTree() { return this.tree; }
    }
    function elt(type, from, to, children) {
        return new Element$1(type, from, to, children);
    }
    const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
    const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
    const LinkStart = {}, ImageStart = {};
    class InlineDelimiter {
        constructor(type, from, to, side) {
            this.type = type;
            this.from = from;
            this.to = to;
            this.side = side;
        }
    }
    const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
    try {
        Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
    }
    catch (_) { }
    const DefaultInline = {
        Escape(cx, next, start) {
            if (next != 92 /* '\\' */ || start == cx.end - 1)
                return -1;
            let escaped = cx.char(start + 1);
            for (let i = 0; i < Escapable.length; i++)
                if (Escapable.charCodeAt(i) == escaped)
                    return cx.append(elt(Type.Escape, start, start + 2));
            return -1;
        },
        Entity(cx, next, start) {
            if (next != 38 /* '&' */)
                return -1;
            let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
            return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
        },
        InlineCode(cx, next, start) {
            if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
                return -1;
            let pos = start + 1;
            while (pos < cx.end && cx.char(pos) == 96)
                pos++;
            let size = pos - start, curSize = 0;
            for (; pos < cx.end; pos++) {
                if (cx.char(pos) == 96) {
                    curSize++;
                    if (curSize == size && cx.char(pos + 1) != 96)
                        return cx.append(elt(Type.InlineCode, start, pos + 1, [
                            elt(Type.CodeMark, start, start + size),
                            elt(Type.CodeMark, pos + 1 - size, pos + 1)
                        ]));
                }
                else {
                    curSize = 0;
                }
            }
            return -1;
        },
        HTMLTag(cx, next, start) {
            if (next != 60 /* '<' */ || start == cx.end - 1)
                return -1;
            let after = cx.slice(start + 1, cx.end);
            let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
            if (url)
                return cx.append(elt(Type.URL, start, start + 1 + url[0].length));
            let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
            if (comment)
                return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
            let procInst = /^\?[^]*?\?>/.exec(after);
            if (procInst)
                return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
            let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
            if (!m)
                return -1;
            return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
        },
        Emphasis(cx, next, start) {
            if (next != 95 && next != 42)
                return -1;
            let pos = start + 1;
            while (cx.char(pos) == next)
                pos++;
            let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
            let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
            let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
            let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
            let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
            let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
            let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
            return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));
        },
        HardBreak(cx, next, start) {
            if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
                return cx.append(elt(Type.HardBreak, start, start + 2));
            if (next == 32) {
                let pos = start + 1;
                while (cx.char(pos) == 32)
                    pos++;
                if (cx.char(pos) == 10 && pos >= start + 2)
                    return cx.append(elt(Type.HardBreak, start, pos + 1));
            }
            return -1;
        },
        Link(cx, next, start) {
            return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;
        },
        Image(cx, next, start) {
            return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
                ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;
        },
        LinkEnd(cx, next, start) {
            if (next != 93 /* ']' */)
                return -1;
            // Scanning back to the next link/image start marker
            for (let i = cx.parts.length - 1; i >= 0; i--) {
                let part = cx.parts[i];
                if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                    // If this one has been set invalid (because it would produce
                    // a nested link) or there's no valid link here ignore both.
                    if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                        cx.parts[i] = null;
                        return -1;
                    }
                    // Finish the content and replace the entire range in
                    // this.parts with the link/image node.
                    let content = cx.takeContent(i);
                    let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
                    // Set any open-link markers before this link to invalid.
                    if (part.type == LinkStart)
                        for (let j = 0; j < i; j++) {
                            let p = cx.parts[j];
                            if (p instanceof InlineDelimiter && p.type == LinkStart)
                                p.side = 0;
                        }
                    return link.to;
                }
            }
            return -1;
        }
    };
    function finishLink(cx, content, type, start, startPos) {
        let { text } = cx, next = cx.char(startPos), endPos = startPos;
        content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
        content.push(elt(Type.LinkMark, startPos - 1, startPos));
        if (next == 40 /* '(' */) {
            let pos = cx.skipSpace(startPos + 1);
            let dest = parseURL(text, pos - cx.offset, cx.offset), title;
            if (dest) {
                pos = cx.skipSpace(dest.to);
                title = parseLinkTitle(text, pos - cx.offset, cx.offset);
                if (title)
                    pos = cx.skipSpace(title.to);
            }
            if (cx.char(pos) == 41 /* ')' */) {
                content.push(elt(Type.LinkMark, startPos, startPos + 1));
                endPos = pos + 1;
                if (dest)
                    content.push(dest);
                if (title)
                    content.push(title);
                content.push(elt(Type.LinkMark, pos, endPos));
            }
        }
        else if (next == 91 /* '[' */) {
            let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
            if (label) {
                content.push(label);
                endPos = label.to;
            }
        }
        return elt(type, start, endPos, content);
    }
    // These return `null` when falling off the end of the input, `false`
    // when parsing fails otherwise (for use in the incremental link
    // reference parser).
    function parseURL(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next == 60 /* '<' */) {
            for (let pos = start + 1; pos < text.length; pos++) {
                let ch = text.charCodeAt(pos);
                if (ch == 62 /* '>' */)
                    return elt(Type.URL, start + offset, pos + 1 + offset);
                if (ch == 60 || ch == 10 /* '<\n' */)
                    return false;
            }
            return null;
        }
        else {
            let depth = 0, pos = start;
            for (let escaped = false; pos < text.length; pos++) {
                let ch = text.charCodeAt(pos);
                if (space$2(ch)) {
                    break;
                }
                else if (escaped) {
                    escaped = false;
                }
                else if (ch == 40 /* '(' */) {
                    depth++;
                }
                else if (ch == 41 /* ')' */) {
                    if (!depth)
                        break;
                    depth--;
                }
                else if (ch == 92 /* '\\' */) {
                    escaped = true;
                }
            }
            return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
        }
    }
    function parseLinkTitle(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
            return false;
        let end = next == 40 ? 41 : next;
        for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
            let ch = text.charCodeAt(pos);
            if (escaped)
                escaped = false;
            else if (ch == end)
                return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
            else if (ch == 92 /* '\\' */)
                escaped = true;
        }
        return null;
    }
    function parseLinkLabel(text, start, offset, requireNonWS) {
        for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
            let ch = text.charCodeAt(pos);
            if (escaped)
                escaped = false;
            else if (ch == 93 /* ']' */)
                return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
            else {
                if (requireNonWS && !space$2(ch))
                    requireNonWS = false;
                if (ch == 91 /* '[' */)
                    return false;
                else if (ch == 92 /* '\\' */)
                    escaped = true;
            }
        }
        return null;
    }
    /// Inline parsing functions get access to this context, and use it to
    /// read the content and emit syntax nodes.
    class InlineContext {
        /// @internal
        constructor(
        /// The parser that is being used.
        parser, 
        /// The text of this inline section.
        text, 
        /// The starting offset of the section in the document.
        offset) {
            this.parser = parser;
            this.text = text;
            this.offset = offset;
            /// @internal
            this.parts = [];
        }
        /// Get the character code at the given (document-relative)
        /// position.
        char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
        /// The position of the end of this inline section.
        get end() { return this.offset + this.text.length; }
        /// Get a substring of this inline section. Again uses
        /// document-relative positions.
        slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
        /// @internal
        append(elt) {
            this.parts.push(elt);
            return elt.to;
        }
        /// Add a [delimiter](#DelimiterType) at this given position. `open`
        /// and `close` indicate whether this delimiter is opening, closing,
        /// or both. Returns the end of the delimiter, for convenient
        /// returning from [parse functions](#InlineParser.parse).
        addDelimiter(type, from, to, open, close) {
            return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));
        }
        /// Add an inline element. Returns the end of the element.
        addElement(elt) {
            return this.append(elt);
        }
        /// @internal
        resolveMarkers(from) {
            for (let i = from; i < this.parts.length; i++) {
                let close = this.parts[i];
                if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))
                    continue;
                let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
                let closeSize = close.to - close.from;
                let open, j = i - 1;
                for (; j >= from; j--) {
                    let part = this.parts[j];
                    if (!(part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type) ||
                        emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&
                            (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))
                        continue;
                    open = part;
                    break;
                }
                if (!open)
                    continue;
                let type = close.type.resolve, content = [];
                let start = open.from, end = close.to;
                if (emp) {
                    let size = Math.min(2, open.to - open.from, closeSize);
                    start = open.to - size;
                    end = close.from + size;
                    type = size == 1 ? "Emphasis" : "StrongEmphasis";
                }
                if (open.type.mark)
                    content.push(this.elt(open.type.mark, start, open.to));
                for (let k = j + 1; k < i; k++) {
                    if (this.parts[k] instanceof Element$1)
                        content.push(this.parts[k]);
                    this.parts[k] = null;
                }
                if (close.type.mark)
                    content.push(this.elt(close.type.mark, close.from, end));
                let element = this.elt(type, start, end, content);
                this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
                let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
                if (keep)
                    this.parts.splice(i, 0, element);
                else
                    this.parts[i] = element;
            }
            let result = [];
            for (let i = from; i < this.parts.length; i++) {
                let part = this.parts[i];
                if (part instanceof Element$1)
                    result.push(part);
            }
            return result;
        }
        /// Find an opening delimiter of the given type. Returns `null` if
        /// no delimiter is found, or an index that can be passed to
        /// [`takeContent`](#InlineContext.takeContent) otherwise.
        findOpeningDelimiter(type) {
            for (let i = this.parts.length - 1; i >= 0; i--) {
                let part = this.parts[i];
                if (part instanceof InlineDelimiter && part.type == type)
                    return i;
            }
            return null;
        }
        /// Remove all inline elements and delimiters starting from the
        /// given index (which you should get from
        /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
        /// resolve delimiters inside of them, and return them as an array
        /// of elements.
        takeContent(startIndex) {
            let content = this.resolveMarkers(startIndex);
            this.parts.length = startIndex;
            return content;
        }
        /// Skip space after the given (document) position, returning either
        /// the position of the next non-space character or the end of the
        /// section.
        skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
        elt(type, from, to, children) {
            if (typeof type == "string")
                return elt(this.parser.getNodeType(type), from, to, children);
            return new TreeElement(type, from);
        }
    }
    function injectMarks(elements, marks) {
        if (!marks.length)
            return elements;
        if (!elements.length)
            return marks;
        let elts = elements.slice(), eI = 0;
        for (let mark of marks) {
            while (eI < elts.length && elts[eI].to < mark.to)
                eI++;
            if (eI < elts.length && elts[eI].from < mark.from) {
                let e = elts[eI];
                if (e instanceof Element$1)
                    elts[eI] = new Element$1(e.type, e.from, e.to, injectMarks(e.children, [mark]));
            }
            else {
                elts.splice(eI++, 0, mark);
            }
        }
        return elts;
    }
    // These are blocks that can span blank lines, and should thus only be
    // reused if their next sibling is also being reused.
    const NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
    class FragmentCursor$1 {
        constructor(fragments, input) {
            this.fragments = fragments;
            this.input = input;
            // Index into fragment array
            this.i = 0;
            // Active fragment
            this.fragment = null;
            this.fragmentEnd = -1;
            // Cursor into the current fragment, if any. When `moveTo` returns
            // true, this points at the first block after `pos`.
            this.cursor = null;
            if (fragments.length)
                this.fragment = fragments[this.i++];
        }
        nextFragment() {
            this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
            this.cursor = null;
            this.fragmentEnd = -1;
        }
        moveTo(pos, lineStart) {
            while (this.fragment && this.fragment.to <= pos)
                this.nextFragment();
            if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
                return false;
            if (this.fragmentEnd < 0) {
                let end = this.fragment.to;
                while (end > 0 && this.input.read(end - 1, end) != "\n")
                    end--;
                this.fragmentEnd = end ? end - 1 : 0;
            }
            let c = this.cursor;
            if (!c) {
                c = this.cursor = this.fragment.tree.cursor();
                c.firstChild();
            }
            let rPos = pos + this.fragment.offset;
            while (c.to <= rPos)
                if (!c.parent())
                    return false;
            for (;;) {
                if (c.from >= rPos)
                    return this.fragment.from <= lineStart;
                if (!c.childAfter(rPos))
                    return false;
            }
        }
        matches(hash) {
            let tree = this.cursor.tree;
            return tree && tree.prop(NodeProp.contextHash) == hash;
        }
        takeNodes(cx) {
            let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
            let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
            let prevEnd = end, prevI = blockI;
            for (;;) {
                if (cur.to - off > fragEnd) {
                    if (cur.type.isAnonymous && cur.firstChild())
                        continue;
                    break;
                }
                cx.dontInject.add(cur.tree);
                cx.addNode(cur.tree, cur.from - off);
                // Taken content must always end in a block, because incremental
                // parsing happens on block boundaries. Never stop directly
                // after an indented code block, since those can continue after
                // any number of blank lines.
                if (cur.type.is("Block")) {
                    if (NotLast.indexOf(cur.type.id) < 0) {
                        end = cur.to - off;
                        blockI = cx.block.children.length;
                    }
                    else {
                        end = prevEnd;
                        blockI = prevI;
                        prevEnd = cur.to - off;
                        prevI = cx.block.children.length;
                    }
                }
                if (!cur.nextSibling())
                    break;
            }
            while (cx.block.children.length > blockI) {
                cx.block.children.pop();
                cx.block.positions.pop();
            }
            return end - start;
        }
    }
    const markdownHighlighting = styleTags({
        "Blockquote/...": tags$1.quote,
        HorizontalRule: tags$1.contentSeparator,
        "ATXHeading1/... SetextHeading1/...": tags$1.heading1,
        "ATXHeading2/... SetextHeading2/...": tags$1.heading2,
        "ATXHeading3/...": tags$1.heading3,
        "ATXHeading4/...": tags$1.heading4,
        "ATXHeading5/...": tags$1.heading5,
        "ATXHeading6/...": tags$1.heading6,
        "Comment CommentBlock": tags$1.comment,
        Escape: tags$1.escape,
        Entity: tags$1.character,
        "Emphasis/...": tags$1.emphasis,
        "StrongEmphasis/...": tags$1.strong,
        "Link/... Image/...": tags$1.link,
        "OrderedList/... BulletList/...": tags$1.list,
        "BlockQuote/...": tags$1.quote,
        "InlineCode CodeText": tags$1.monospace,
        URL: tags$1.url,
        "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags$1.processingInstruction,
        "CodeInfo LinkLabel": tags$1.labelName,
        LinkTitle: tags$1.string,
        Paragraph: tags$1.content
    });
    /// The default CommonMark parser.
    const parser$3 = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);

    function leftOverSpace(node, from, to) {
        let ranges = [];
        for (let n = node.firstChild, pos = from;; n = n.nextSibling) {
            let nextPos = n ? n.from : to;
            if (nextPos > pos)
                ranges.push({ from: pos, to: nextPos });
            if (!n)
                break;
            pos = n.to;
        }
        return ranges;
    }
    /// Create a Markdown extension to enable nested parsing on code
    /// blocks and/or embedded HTML.
    function parseCode(config) {
        let { codeParser, htmlParser } = config;
        let wrap = parseMixed((node, input) => {
            let id = node.type.id;
            if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {
                let info = "";
                if (id == Type.FencedCode) {
                    let infoNode = node.node.getChild(Type.CodeInfo);
                    if (infoNode)
                        info = input.read(infoNode.from, infoNode.to);
                }
                let parser = codeParser(info);
                if (parser)
                    return { parser, overlay: node => node.type.id == Type.CodeText };
            }
            else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {
                return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
            }
            return null;
        });
        return { wrap };
    }

    const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
    /// An extension that implements
    /// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
    /// Strikethrough syntax using `~~` delimiters.
    const Strikethrough = {
        defineNodes: [{
                name: "Strikethrough",
                style: { "Strikethrough/...": tags$1.strikethrough }
            }, {
                name: "StrikethroughMark",
                style: tags$1.processingInstruction
            }],
        parseInline: [{
                name: "Strikethrough",
                parse(cx, next, pos) {
                    if (next != 126 /* '~' */ || cx.char(pos + 1) != 126)
                        return -1;
                    return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, true, true);
                },
                after: "Emphasis"
            }]
    };
    function parseRow(cx, line, startI = 0, elts, offset = 0) {
        let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
        let parseCell = () => {
            elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
        };
        for (let i = startI; i < line.length; i++) {
            let next = line.charCodeAt(i);
            if (next == 124 /* '|' */ && !esc) {
                if (!first || cellStart > -1)
                    count++;
                first = false;
                if (elts) {
                    if (cellStart > -1)
                        parseCell();
                    elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
                }
                cellStart = cellEnd = -1;
            }
            else if (esc || next != 32 && next != 9) {
                if (cellStart < 0)
                    cellStart = i;
                cellEnd = i + 1;
            }
            esc = !esc && next == 92;
        }
        if (cellStart > -1) {
            count++;
            if (elts)
                parseCell();
        }
        return count;
    }
    function hasPipe(str, start) {
        for (let i = start; i < str.length; i++) {
            let next = str.charCodeAt(i);
            if (next == 124 /* '|' */)
                return true;
            if (next == 92 /* '\\' */)
                i++;
        }
        return false;
    }
    const delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
    class TableParser {
        constructor() {
            // Null means we haven't seen the second line yet, false means this
            // isn't a table, and an array means this is a table and we've
            // parsed the given rows so far.
            this.rows = null;
        }
        nextLine(cx, line, leaf) {
            if (this.rows == null) { // Second line
                this.rows = false;
                let lineText;
                if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
                    delimiterLine.test(lineText = line.text.slice(line.pos))) {
                    let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
                    if (firstCount == parseRow(cx, lineText, line.pos))
                        this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                            cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
                }
            }
            else if (this.rows) { // Line after the second
                let content = [];
                parseRow(cx, line.text, line.pos, content, cx.lineStart);
                this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
            }
            return false;
        }
        finish(cx, leaf) {
            if (!this.rows)
                return false;
            cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
            return true;
        }
    }
    /// This extension provides
    /// [GFM-style](https://github.github.com/gfm/#tables-extension-)
    /// tables, using syntax like this:
    ///
    /// ```
    /// | head 1 | head 2 |
    /// | ---    | ---    |
    /// | cell 1 | cell 2 |
    /// ```
    const Table = {
        defineNodes: [
            { name: "Table", block: true },
            { name: "TableHeader", style: { "TableHeader/...": tags$1.heading } },
            "TableRow",
            { name: "TableCell", style: tags$1.content },
            { name: "TableDelimiter", style: tags$1.processingInstruction },
        ],
        parseBlock: [{
                name: "Table",
                leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
                endLeaf(cx, line, leaf) {
                    if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
                        return false;
                    let next = cx.scanLine(cx.absoluteLineEnd + 1).text;
                    return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
                },
                before: "SetextHeading"
            }]
    };
    class TaskParser {
        nextLine() { return false; }
        finish(cx, leaf) {
            cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
                cx.elt("TaskMarker", leaf.start, leaf.start + 3),
                ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
            ]));
            return true;
        }
    }
    /// Extension providing
    /// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
    /// task list items, where list items can be prefixed with `[ ]` or
    /// `[x]` to add a checkbox.
    const TaskList = {
        defineNodes: [
            { name: "Task", block: true, style: tags$1.list },
            { name: "TaskMarker", style: tags$1.atom }
        ],
        parseBlock: [{
                name: "TaskList",
                leaf(cx, leaf) {
                    return /^\[[ xX]\]/.test(leaf.content) && cx.parentType().name == "ListItem" ? new TaskParser : null;
                },
                after: "SetextHeading"
            }]
    };
    /// Extension bundle containing [`Table`](#Table),
    /// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).
    const GFM = [Table, TaskList, Strikethrough];
    function parseSubSuper(ch, node, mark) {
        return (cx, next, pos) => {
            if (next != ch || cx.char(pos + 1) == ch)
                return -1;
            let elts = [cx.elt(mark, pos, pos + 1)];
            for (let i = pos + 1; i < cx.end; i++) {
                let next = cx.char(i);
                if (next == ch)
                    return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
                if (next == 92 /* '\\' */)
                    elts.push(cx.elt("Escape", i, i++ + 2));
                if (space$2(next))
                    break;
            }
            return -1;
        };
    }
    /// Extension providing
    /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
    /// superscript using `^` markers.
    const Superscript = {
        defineNodes: [
            { name: "Superscript", style: tags$1.special(tags$1.content) },
            { name: "SuperscriptMark", style: tags$1.processingInstruction }
        ],
        parseInline: [{
                name: "Superscript",
                parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
            }]
    };
    /// Extension providing
    /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
    /// subscript using `~` markers.
    const Subscript = {
        defineNodes: [
            { name: "Subscript", style: tags$1.special(tags$1.content) },
            { name: "SubscriptMark", style: tags$1.processingInstruction }
        ],
        parseInline: [{
                name: "Subscript",
                parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
            }]
    };
    /// Extension that parses two colons with only letters, underscores,
    /// and numbers between them as `Emoji` nodes.
    const Emoji = {
        defineNodes: [{ name: "Emoji", style: tags$1.character }],
        parseInline: [{
                name: "Emoji",
                parse(cx, next, pos) {
                    let match;
                    if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
                        return -1;
                    return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
                }
            }]
    };

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    class Stack {
        /// @internal
        constructor(
        /// The parse that this stack is part of @internal
        p, 
        /// Holds state, input pos, buffer index triplets for all but the
        /// top state @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        /// @internal
        curContext, 
        /// @internal
        lookAhead = 0, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.lookAhead = lookAhead;
            this.parent = parent;
        }
        /// @internal
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /// @internal
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        /// The stack's current [context](#lr.ContextTracker) value, if
        /// any. Its type will depend on the context tracker's type
        /// parameter, or it will be `null` if there is no context
        /// tracker.
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /// @internal
        reduce(action) {
            let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
            let { parser } = this.p;
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.reduceContext(type, this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
            let start = this.stack[base - 2];
            let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type, start);
        }
        // Shift a value into the buffer
        /// @internal
        storeNode(term, start, end, size = 4, isReduce = false) {
            if (term == 0 /* Err */ &&
                (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
                // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /// @internal
        shift(action, next, nextEnd) {
            let start = this.pos;
            if (action & 131072 /* GotoFlag */) {
                this.pushState(action & 65535 /* ValueMask */, this.pos);
            }
            else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                let nextState = action, { parser } = this.p;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                this.shiftContext(next, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                this.pos = nextEnd;
                this.shiftContext(next, start);
                if (next <= this.p.parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
        }
        // Apply an action
        /// @internal
        apply(action, next, nextEnd) {
            if (action & 65536 /* ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer.
        /// @internal
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190 /* Delete */;
        }
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
                if ((action & 65536 /* ReduceFlag */) == 0)
                    return true;
                if (action == 0)
                    return false;
                sim.reduce(action);
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.pushState(s, this.pos);
                stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                stack.shiftContext(nextStates[i], this.pos);
                stack.score -= 200 /* Insert */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        forceReduce() {
            let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
            if ((reduce & 65536 /* ReduceFlag */) == 0)
                return false;
            let { parser } = this.p;
            if (!parser.validAction(this.state, reduce)) {
                let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;
                let target = this.stack.length - depth * 3;
                if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)
                    return false;
                this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Reduce */;
            }
            this.reducePos = this.pos;
            this.reduce(reduce);
            return true;
        }
        /// @internal
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {
                if (!this.forceReduce()) {
                    this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);
                    break;
                }
            }
            return this;
        }
        /// Check whether this state has no further actions (assumed to be a direct descendant of the
        /// top state, since any other states must be able to continue
        /// somehow). @internal
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                !parser.stateSlot(this.state, 4 /* DefaultReduce */);
        }
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        restart() {
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /// @internal
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /// Get the parser used by this stack.
        get parser() { return this.p.parser; }
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        /// @internal
        emitContext() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3)
                this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
        }
        /// @internal
        emitLookAhead() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4)
                this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
        /// @internal
        setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
                this.emitLookAhead();
                this.lookAhead = lookAhead;
            }
        }
        /// @internal
        close() {
            if (this.curContext && this.curContext.tracker.strict)
                this.emitContext();
            if (this.lookAhead > 0)
                this.emitLookAhead();
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
    }
    var Recover;
    (function (Recover) {
        Recover[Recover["Insert"] = 200] = "Insert";
        Recover[Recover["Delete"] = 190] = "Delete";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
    })(Recover || (Recover = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(start) {
            this.start = start;
            this.state = start.state;
            this.stack = start.stack;
            this.base = this.stack.length;
        }
        reduce(action) {
            let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
            if (depth == 0) {
                if (this.stack == this.start.stack)
                    this.stack = this.stack.slice();
                this.stack.push(this.state, 0, 0);
                this.base += 3;
            }
            else {
                this.base -= (depth - 1) * 3;
            }
            let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
            this.state = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    class CachedToken {
        constructor() {
            this.start = -1;
            this.value = -1;
            this.end = -1;
            this.extended = -1;
            this.lookAhead = 0;
            this.mask = 0;
            this.context = 0;
        }
    }
    const nullToken = new CachedToken;
    /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
    /// through this interface. It presents the input as a stream of
    /// characters, tracking lookahead and hiding the complexity of
    /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
    class InputStream {
        /// @internal
        constructor(
        /// @internal
        input, 
        /// @internal
        ranges) {
            this.input = input;
            this.ranges = ranges;
            /// @internal
            this.chunk = "";
            /// @internal
            this.chunkOff = 0;
            /// Backup chunk
            this.chunk2 = "";
            this.chunk2Pos = 0;
            /// The character code of the next code unit in the input, or -1
            /// when the stream is at the end of the input.
            this.next = -1;
            /// @internal
            this.token = nullToken;
            this.rangeIndex = 0;
            this.pos = this.chunkPos = ranges[0].from;
            this.range = ranges[0];
            this.end = ranges[ranges.length - 1].to;
            this.readNext();
        }
        /// @internal
        resolveOffset(offset, assoc) {
            let range = this.range, index = this.rangeIndex;
            let pos = this.pos + offset;
            while (pos < range.from) {
                if (!index)
                    return null;
                let next = this.ranges[--index];
                pos -= range.from - next.to;
                range = next;
            }
            while (assoc < 0 ? pos > range.to : pos >= range.to) {
                if (index == this.ranges.length - 1)
                    return null;
                let next = this.ranges[++index];
                pos += next.from - range.to;
                range = next;
            }
            return pos;
        }
        /// Look at a code unit near the stream position. `.peek(0)` equals
        /// `.next`, `.peek(-1)` gives you the previous character, and so
        /// on.
        ///
        /// Note that looking around during tokenizing creates dependencies
        /// on potentially far-away content, which may reduce the
        /// effectiveness incremental parsing—when looking forward—or even
        /// cause invalid reparses when looking backward more than 25 code
        /// units, since the library does not track lookbehind.
        peek(offset) {
            let idx = this.chunkOff + offset, pos, result;
            if (idx >= 0 && idx < this.chunk.length) {
                pos = this.pos + offset;
                result = this.chunk.charCodeAt(idx);
            }
            else {
                let resolved = this.resolveOffset(offset, 1);
                if (resolved == null)
                    return -1;
                pos = resolved;
                if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                    result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
                }
                else {
                    let i = this.rangeIndex, range = this.range;
                    while (range.to <= pos)
                        range = this.ranges[++i];
                    this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                    if (pos + this.chunk2.length > range.to)
                        this.chunk2 = this.chunk2.slice(0, range.to - pos);
                    result = this.chunk2.charCodeAt(0);
                }
            }
            if (pos >= this.token.lookAhead)
                this.token.lookAhead = pos + 1;
            return result;
        }
        /// Accept a token. By default, the end of the token is set to the
        /// current stream position, but you can pass an offset (relative to
        /// the stream position) to change that.
        acceptToken(token, endOffset = 0) {
            let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start)
                throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
        }
        getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                let { chunk, chunkPos } = this;
                this.chunk = this.chunk2;
                this.chunkPos = this.chunk2Pos;
                this.chunk2 = chunk;
                this.chunk2Pos = chunkPos;
                this.chunkOff = this.pos - this.chunkPos;
            }
            else {
                this.chunk2 = this.chunk;
                this.chunk2Pos = this.chunkPos;
                let nextChunk = this.input.chunk(this.pos);
                let end = this.pos + nextChunk.length;
                this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
                this.chunkPos = this.pos;
                this.chunkOff = 0;
            }
        }
        readNext() {
            if (this.chunkOff >= this.chunk.length) {
                this.getChunk();
                if (this.chunkOff == this.chunk.length)
                    return this.next = -1;
            }
            return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /// Move the stream forward N (defaults to 1) code units. Returns
        /// the new value of [`next`](#lr.InputStream.next).
        advance(n = 1) {
            this.chunkOff += n;
            while (this.pos + n >= this.range.to) {
                if (this.rangeIndex == this.ranges.length - 1)
                    return this.setDone();
                n -= this.range.to - this.pos;
                this.range = this.ranges[++this.rangeIndex];
                this.pos = this.range.from;
            }
            this.pos += n;
            if (this.pos >= this.token.lookAhead)
                this.token.lookAhead = this.pos + 1;
            return this.readNext();
        }
        setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
        }
        /// @internal
        reset(pos, token) {
            if (token) {
                this.token = token;
                token.start = pos;
                token.lookAhead = pos + 1;
                token.value = token.extended = -1;
            }
            else {
                this.token = nullToken;
            }
            if (this.pos != pos) {
                this.pos = pos;
                if (pos == this.end) {
                    this.setDone();
                    return this;
                }
                while (pos < this.range.from)
                    this.range = this.ranges[--this.rangeIndex];
                while (pos >= this.range.to)
                    this.range = this.ranges[++this.rangeIndex];
                if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                    this.chunkOff = pos - this.chunkPos;
                }
                else {
                    this.chunk = "";
                    this.chunkOff = 0;
                }
                this.readNext();
            }
            return this;
        }
        /// @internal
        read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
                return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
                return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
            if (from >= this.range.from && to <= this.range.to)
                return this.input.read(from, to);
            let result = "";
            for (let r of this.ranges) {
                if (r.from >= to)
                    break;
                if (r.to > from)
                    result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
            }
            return result;
        }
    }
    /// @internal
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, stack) { readToken(this.data, input, stack, this.id); }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /// `@external tokens` declarations in the grammar should resolve to
    /// an instance of this class.
    class ExternalTokenizer {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream, scans for the types of tokens it
        /// recognizes at the stream's position, and calls
        /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
        /// one.
        constructor(
        /// @internal
        token, options = {}) {
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
    }
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `input.token` when it matches a token.
    function readToken(data, input, stack, group) {
        let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;
        scan: for (;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                        input.acceptToken(term);
                        break;
                    }
                }
            let next = input.next, low = 0, high = data[state + 2];
            // Special case for EOF
            if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* End */) {
                state = data[accEnd + high * 3 - 1];
                continue scan;
            }
            // Do a binary search on the state's edges
            for (; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1];
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    input.advance();
                    continue scan;
                }
            }
            break;
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* BigValCode */) {
                    value = 65535 /* BigVal */;
                    break;
                }
                if (next >= 92 /* Gap2 */)
                    next--;
                if (next >= 34 /* Gap1 */)
                    next--;
                let digit = next - 32 /* Start */;
                if (digit >= 46 /* Base */) {
                    digit -= 46 /* Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    var Safety;
    (function (Safety) {
        Safety[Safety["Margin"] = 25] = "Margin";
    })(Safety || (Safety = {}));
    function cutAt(tree, pos, side) {
        let cursor = tree.cursor(IterMode.IncludeAnonymous);
        cursor.moveTo(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))
                            : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    class FragmentCursor {
        constructor(fragments, nodeSet) {
            this.fragments = fragments;
            this.nodeSet = nodeSet;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                if (next instanceof Tree) {
                    if (start == pos) {
                        if (start < this.safeFrom)
                            return null;
                        let end = start + next.length;
                        if (end <= this.safeTo) {
                            let lookAhead = next.prop(NodeProp.lookAhead);
                            if (!lookAhead || end + lookAhead < this.fragment.to)
                                return next;
                        }
                    }
                    this.index[last]++;
                    if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
                else {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
            }
        }
    }
    class TokenCache {
        constructor(parser, stream) {
            this.stream = stream;
            this.tokens = [];
            this.mainToken = null;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            let lookAhead = 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.lookAhead > token.end + 25 /* Margin */)
                    lookAhead = Math.max(token.lookAhead, lookAhead);
                if (token.value != 0 /* Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (lookAhead)
                stack.setLookAhead(lookAhead);
            if (!main && stack.pos == this.stream.end) {
                main = new CachedToken;
                main.value = stack.p.parser.eofTerm;
                main.start = main.end = stack.pos;
                actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }
            this.mainToken = main;
            return this.actions;
        }
        getMainToken(stack) {
            if (this.mainToken)
                return this.mainToken;
            let main = new CachedToken, { pos, p } = stack;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;
            return main;
        }
        updateCachedToken(token, tokenizer, stack) {
            tokenizer.token(this.stream.reset(stack.pos, token), stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else {
                token.value = 0 /* Err */;
                token.end = Math.min(stack.p.stream.end, stack.pos + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                    if (data[i] == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Other */)
                                index = this.putAction(pair(data, i + 2), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    var Rec;
    (function (Rec) {
        Rec[Rec["Distance"] = 5] = "Distance";
        Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        // When two stacks have been running independently long enough to
        // add this many elements to their buffers, prune one.
        Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
        Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
        // Once a stack reaches this depth (in .stack.length) force-reduce
        // it back to CutTo to avoid creating trees that overflow the stack
        // on recursive traversal.
        Rec[Rec["CutDepth"] = 15000] = "CutDepth";
        Rec[Rec["CutTo"] = 9000] = "CutTo";
    })(Rec || (Rec = {}));
    class Parse {
        constructor(parser, input, fragments, ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.recovering = 0;
            this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
            this.minStackPos = 0;
            this.reused = [];
            this.stoppedAt = null;
            this.stream = new InputStream(input, ranges);
            this.tokens = new TokenCache(parser, this.stream);
            this.topTerm = parser.top[1];
            let { from } = ranges[0];
            this.stacks = [Stack.start(this, parser.top[0], from)];
            this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
                ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
            return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            let stacks = this.stacks, pos = this.minStackPos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i];
                for (;;) {
                    this.tokens.mainToken = null;
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.getMainToken(stack);
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished)
                    return this.stackToTree(finished);
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                    : this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished)
                    return this.stackToTree(finished.forceAll());
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
            }
            this.minStackPos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.minStackPos)
                    this.minStackPos = newStacks[i].pos;
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt)
                return stack.forceReduce() ? stack : null;
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree && cached.positions[0] == 0)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);
                return true;
            }
            if (stack.stack.length >= 15000 /* CutDepth */) {
                while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }
            }
            let actions = this.tokens.getActions(stack);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done)
                        continue;
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done)
                        break;
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.stream.end > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
            stack.close();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: stack.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm });
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    const id = x => x;
    /// Context trackers are used to track stateful context (such as
    /// indentation in the Python grammar, or parent elements in the XML
    /// grammar) needed by external tokenizers. You declare them in a
    /// grammar file as `@context exportName from "module"`.
    ///
    /// Context values should be immutable, and can be updated (replaced)
    /// on shift or reduce actions.
    ///
    /// The export used in a `@context` declaration should be of this
    /// type.
    class ContextTracker {
        /// Define a context tracker.
        constructor(spec) {
            this.start = spec.start;
            this.shift = spec.shift || id;
            this.reduce = spec.reduce || id;
            this.reuse = spec.reuse || id;
            this.hash = spec.hash || (() => 0);
            this.strict = spec.strict !== false;
        }
    }
    /// Holds the parse tables for a given grammar, as generated by
    /// `lezer-generator`, and provides [methods](#common.Parser) to parse
    /// content with.
    class LRParser extends Parser {
        /// @internal
        constructor(spec) {
            super();
            /// @internal
            this.wrappers = [];
            if (spec.version != 14 /* Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* Version */})`);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    if (typeof prop == "string")
                        prop = NodeProp[prop];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            if (spec.propSources)
                this.nodeSet = this.nodeSet.extend(...spec.propSources);
            this.strict = false;
            this.bufferLength = DefaultBufferLength;
            let tokenArray = decodeArray(spec.tokenData);
            this.context = spec.context;
            this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
            this.specializers = [];
            if (spec.specialized)
                for (let i = 0; i < spec.specialized.length; i++) {
                    this.specialized[i] = spec.specialized[i].term;
                    this.specializers[i] = spec.specialized[i].get;
                }
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
            let parse = new Parse(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Get a goto table entry @internal
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /// Check if this state has an action for a given terminal @internal
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* End */) {
                        if (data[i + 1] == 1 /* Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /// @internal
        stateSlot(state, slot) {
            return this.states[(state * 6 /* Size */) + slot];
        }
        /// @internal
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
        }
        /// @internal
        validAction(state, action) {
            if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                return true;
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair(this.data, i + 1))
                    return true;
            }
        }
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                if (this.data[i] == 65535 /* End */) {
                    if (this.data[i + 1] == 1 /* Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /// @internal
        overrides(token, prev) {
            let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
        }
        /// Configure the parser. Returns a new parser instance that has the
        /// given settings modified. Settings not provided in `config` are
        /// kept from the original parser.
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.specializers)
                copy.specializers = this.specializers.map(s => {
                    let found = config.specializers.find(r => r.from == s);
                    return found ? found.to : s;
                });
            if (config.contextTracker)
                copy.context = config.contextTracker;
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.wrap)
                copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
        /// are registered for this parser.
        hasWrappers() {
            return this.wrappers.length > 0;
        }
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /// The eof term id is always allocated directly after the node
        /// types. @internal
        get eofTerm() { return this.maxNode + 1; }
        /// The type of top node produced by the parser.
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /// @internal
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /// @internal
        parseDialect(dialect) {
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return new Dialect(dialect, flags, disabled);
        }
        /// (used by the output of the parser generator) @internal
        static deserialize(spec) {
            return new LRParser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            let stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
                stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const scriptText = 53,
      StartCloseScriptTag = 1,
      styleText = 54,
      StartCloseStyleTag = 2,
      textareaText = 55,
      StartCloseTextareaTag = 3,
      StartTag = 4,
      StartScriptTag = 5,
      StartStyleTag = 6,
      StartTextareaTag = 7,
      StartSelfClosingTag = 8,
      StartCloseTag = 9,
      NoMatchStartCloseTag = 10,
      MismatchedStartCloseTag = 11,
      missingCloseTag = 56,
      IncompleteCloseTag = 12,
      commentContent$1 = 57,
      Element = 18,
      ScriptText = 27,
      StyleText = 30,
      TextareaText = 33,
      OpenTag = 35,
      Dialect_noMatch = 0;

    /* Hand-written tokenizers for HTML. */

    const selfClosers = {
      area: true, base: true, br: true, col: true, command: true,
      embed: true, frame: true, hr: true, img: true, input: true,
      keygen: true, link: true, meta: true, param: true, source: true,
      track: true, wbr: true, menuitem: true
    };

    const implicitlyClosed = {
      dd: true, li: true, optgroup: true, option: true, p: true,
      rp: true, rt: true, tbody: true, td: true, tfoot: true,
      th: true, tr: true
    };

    const closeOnOpen = {
      dd: {dd: true, dt: true},
      dt: {dd: true, dt: true},
      li: {li: true},
      option: {option: true, optgroup: true},
      optgroup: {optgroup: true},
      p: {
        address: true, article: true, aside: true, blockquote: true, dir: true,
        div: true, dl: true, fieldset: true, footer: true, form: true,
        h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
        header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
        p: true, pre: true, section: true, table: true, ul: true
      },
      rp: {rp: true, rt: true},
      rt: {rp: true, rt: true},
      tbody: {tbody: true, tfoot: true},
      td: {td: true, th: true},
      tfoot: {tbody: true},
      th: {td: true, th: true},
      thead: {tbody: true, tfoot: true},
      tr: {tr: true}
    };

    function nameChar(ch) {
      return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
    }

    function isSpace(ch) {
      return ch == 9 || ch == 10 || ch == 13 || ch == 32
    }

    let cachedName = null, cachedInput = null, cachedPos = 0;
    function tagNameAfter(input, offset) {
      let pos = input.pos + offset;
      if (cachedPos == pos && cachedInput == input) return cachedName
      let next = input.peek(offset);
      while (isSpace(next)) next = input.peek(++offset);
      let name = "";
      for (;;) {
        if (!nameChar(next)) break
        name += String.fromCharCode(next);
        next = input.peek(++offset);
      }
      // Undefined to signal there's a <? or <!, null for just missing
      cachedInput = input; cachedPos = pos;
      return cachedName = name ? name.toLowerCase() : next == question || next == bang ? undefined : null
    }

    const lessThan = 60, greaterThan = 62, slash$1 = 47, question = 63, bang = 33, dash$1 = 45;

    function ElementContext(name, parent) {
      this.name = name;
      this.parent = parent;
      this.hash = parent ? parent.hash : 0;
      for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
    }

    const startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];

    const elementContext = new ContextTracker({
      start: null,
      shift(context, term, stack, input) {
        return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
      },
      reduce(context, term) {
        return term == Element && context ? context.parent : context
      },
      reuse(context, node, stack, input) {
        let type = node.type.id;
        return type == StartTag || type == OpenTag
          ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
      },
      hash(context) { return context ? context.hash : 0 },
      strict: false
    });

    const tagStart = new ExternalTokenizer((input, stack) => {
      if (input.next != lessThan) {
        // End of file, close any open tags
        if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
        return
      }
      input.advance();
      let close = input.next == slash$1;
      if (close) input.advance();
      let name = tagNameAfter(input, 0);
      if (name === undefined) return
      if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)

      let parent = stack.context ? stack.context.name : null;
      if (close) {
        if (name == parent) return input.acceptToken(StartCloseTag)
        if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
        if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
        for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
        input.acceptToken(MismatchedStartCloseTag);
      } else {
        if (name == "script") return input.acceptToken(StartScriptTag)
        if (name == "style") return input.acceptToken(StartStyleTag)
        if (name == "textarea") return input.acceptToken(StartTextareaTag)
        if (selfClosers.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)
        if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
        else input.acceptToken(StartTag);
      }
    }, {contextual: true});

    const commentContent = new ExternalTokenizer(input => {
      for (let dashes = 0, i = 0;; i++) {
        if (input.next < 0) {
          if (i) input.acceptToken(commentContent$1);
          break
        }
        if (input.next == dash$1) {
          dashes++;
        } else if (input.next == greaterThan && dashes >= 2) {
          if (i > 3) input.acceptToken(commentContent$1, -2);
          break
        } else {
          dashes = 0;
        }
        input.advance();
      }
    });

    function contentTokenizer(tag, textToken, endToken) {
      let lastState = 2 + tag.length;
      return new ExternalTokenizer(input => {
        // state means:
        // - 0 nothing matched
        // - 1 '<' matched
        // - 2 '</' + possibly whitespace matched
        // - 3-(1+tag.length) part of the tag matched
        // - lastState whole tag + possibly whitespace matched
        for (let state = 0, matchedLen = 0, i = 0;; i++) {
          if (input.next < 0) {
            if (i) input.acceptToken(textToken);
            break
          }
          if (state == 0 && input.next == lessThan ||
              state == 1 && input.next == slash$1 ||
              state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
            state++;
            matchedLen++;
          } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
            matchedLen++;
          } else if (state == lastState && input.next == greaterThan) {
            if (i > matchedLen)
              input.acceptToken(textToken, -matchedLen);
            else
              input.acceptToken(endToken, -(matchedLen - 2));
            break
          } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
            input.acceptToken(textToken, 1);
            break
          } else {
            state = matchedLen = 0;
          }
          input.advance();
        }
      })
    }

    const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);

    const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);

    const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);

    const htmlHighlighting = styleTags({
      "Text RawText": tags$1.content,
      "StartTag StartCloseTag SelfCloserEndTag EndTag SelfCloseEndTag": tags$1.angleBracket,
      TagName: tags$1.tagName,
      "MismatchedCloseTag/TagName": [tags$1.tagName,  tags$1.invalid],
      AttributeName: tags$1.attributeName,
      "AttributeValue UnquotedAttributeValue": tags$1.attributeValue,
      Is: tags$1.definitionOperator,
      "EntityReference CharacterReference": tags$1.character,
      Comment: tags$1.blockComment,
      ProcessingInst: tags$1.processingInstruction,
      DoctypeDecl: tags$1.documentMeta
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$2 = LRParser.deserialize({
      version: 14,
      states: ",xOVOxOOO!WQ!bO'#CoO!]Q!bO'#CyO!bQ!bO'#C|O!gQ!bO'#DPO!lQ!bO'#DRO!qOXO'#CnO!|OYO'#CnO#XO[O'#CnO$eOxO'#CnOOOW'#Cn'#CnO$lO!rO'#DSO$tQ!bO'#DUO$yQ!bO'#DVOOOW'#Dj'#DjOOOW'#DX'#DXQVOxOOO%OQ#tO,59ZO%WQ#tO,59eO%`Q#tO,59hO%hQ#tO,59kO%pQ#tO,59mOOOX'#D]'#D]O%xOXO'#CwO&TOXO,59YOOOY'#D^'#D^O&]OYO'#CzO&hOYO,59YOOO['#D_'#D_O&pO[O'#C}O&{O[O,59YOOOW'#D`'#D`O'TOxO,59YO'[Q!bO'#DQOOOW,59Y,59YOOO`'#Da'#DaO'aO!rO,59nOOOW,59n,59nO'iQ!bO,59pO'nQ!bO,59qOOOW-E7V-E7VO'sQ#tO'#CqOOQO'#DY'#DYO(OQ#tO1G.uOOOX1G.u1G.uO(WQ#tO1G/POOOY1G/P1G/PO(`Q#tO1G/SOOO[1G/S1G/SO(hQ#tO1G/VOOOW1G/V1G/VO(pQ#tO1G/XOOOW1G/X1G/XOOOX-E7Z-E7ZO(xQ!bO'#CxOOOW1G.t1G.tOOOY-E7[-E7[O(}Q!bO'#C{OOO[-E7]-E7]O)SQ!bO'#DOOOOW-E7^-E7^O)XQ!bO,59lOOO`-E7_-E7_OOOW1G/Y1G/YOOOW1G/[1G/[OOOW1G/]1G/]O)^Q&jO,59]OOQO-E7W-E7WOOOX7+$a7+$aOOOY7+$k7+$kOOO[7+$n7+$nOOOW7+$q7+$qOOOW7+$s7+$sO)iQ!bO,59dO)nQ!bO,59gO)sQ!bO,59jOOOW1G/W1G/WO)xO,UO'#CtO*WO7[O'#CtOOQO1G.w1G.wOOOW1G/O1G/OOOOW1G/R1G/ROOOW1G/U1G/UOOOO'#DZ'#DZO*fO,UO,59`OOQO,59`,59`OOOO'#D['#D[O*tO7[O,59`OOOO-E7X-E7XOOQO1G.z1G.zOOOO-E7Y-E7Y",
      stateData: "+[~O!]OS~OSSOTPOUQOVROWTOY]OZ[O[^O^^O_^O`^Oa^Ow^Oz_O!cZO~OdaO~OdbO~OdcO~OddO~OdeO~O!VfOPkP!YkP~O!WiOQnP!YnP~O!XlORqP!YqP~OSSOTPOUQOVROWTOXqOY]OZ[O[^O^^O_^O`^Oa^Ow^O!cZO~O!YrO~P#dO!ZsO!duO~OdvO~OdwO~OfyOj|O~OfyOj!OO~OfyOj!QO~OfyOj!SO~OfyOj!UO~O!VfOPkX!YkX~OP!WO!Y!XO~O!WiOQnX!YnX~OQ!ZO!Y!XO~O!XlORqX!YqX~OR!]O!Y!XO~O!Y!XO~P#dOd!_O~O!ZsO!d!aO~Oj!bO~Oj!cO~Og!dOfeXjeX~OfyOj!fO~OfyOj!gO~OfyOj!hO~OfyOj!iO~OfyOj!jO~Od!kO~Od!lO~Od!mO~Oj!nO~Oi!qO!_!oO!a!pO~Oj!rO~Oj!sO~Oj!tO~O_!uO`!uO!_!wO!`!uO~O_!xO`!xO!a!wO!b!xO~O_!uO`!uO!_!{O!`!uO~O_!xO`!xO!a!{O!b!xO~O`_a!cwz!c~",
      goto: "%o!_PPPPPPPPPPPPPPPPPP!`!fP!lPP!xPP!{#O#R#X#[#_#e#h#k#q#w!`P!`!`P#}$T$k$q$w$}%T%Z%aPPPPPPPP%gX^OX`pXUOX`pezabcde{}!P!R!TR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!TeZ!e{}!P!R!TQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
      nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue EndTag ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
      maxTerm: 66,
      context: elementContext,
      nodeProps: [
        ["closedBy", -11,1,2,3,4,5,6,7,8,9,10,11,"EndTag",-4,19,29,32,35,"CloseTag"],
        ["group", -9,12,15,16,17,18,38,39,40,41,"Entity",14,"Entity TextContent",-3,27,30,33,"TextContent Entity"],
        ["openedBy", 26,"StartTag StartCloseTag",-4,28,31,34,36,"OpenTag"]
      ],
      propSources: [htmlHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 9,
      tokenData: "!#b!aR!WOX$kXY)sYZ)sZ]$k]^)s^p$kpq)sqr$krs*zsv$kvw+dwx2yx}$k}!O3f!O!P$k!P!Q7_!Q![$k![!]8u!]!^$k!^!_>b!_!`!!p!`!a8T!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U$k4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!Z$vc^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!R&[V^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&Rq&xT^P!bpOv&qwx'Xx!^&q!^!_'g!_~&qP'^R^POv'Xw!^'X!_~'Xp'lQ!bpOv'gx~'ga'yU^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r`(bR!``Or(]sv(]w~(]!Q(rT!``!bpOr(krs'gsv(kwx(]x~(kW)WXiWOX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!a*O^^P!``!bp!]^OX&RXY)sYZ)sZ]&R]^)s^p&Rpq)sqr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!Z+TT!_h^P!bpOv&qwx'Xx!^&q!^!_'g!_~&q!Z+kbiWaPOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst/]tw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^)R!^!a.Q!a$f,s$f$g.Q$g~,s!Z,xbiWOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst)Rtw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^.i!^!a.Q!a$f,s$f$g.Q$g~,s!R.TTOp.Qqs.Qt!].Q!]!^.d!^~.Q!R.iO_!R!Z.pXiW_!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z/baiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^)R!^!a1q!a$f0g$f$g1q$g~0g!Z0laiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^2V!^!a1q!a$f0g$f$g1q$g~0g!R1tSOp1qq!]1q!]!^2Q!^~1q!R2VO`!R!Z2^XiW`!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z3SU!ax^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r!]3qe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O5S!O!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!]5_d^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!`&R!`!a6m!a$f$k$f$g&R$g~$k!T6xV^P!``!bp!dQOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!X7hX^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_!`&R!`!a8T!a~&R!X8`VjU^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!a9U!YfSdQ^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O8u!O!P8u!P!Q&R!Q![8u![!]8u!]!^$k!^!_(k!_!a&R!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g$}$k$}%O8u%O%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U8u4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Je$k$Je$Jg8u$Jg$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!a=Pe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g;=`$k;=`<%l8u<%l~$k!R>iW!``!bpOq(kqr?Rrs'gsv(kwx(]x!a(k!a!bKj!b~(k!R?YZ!``!bpOr(krs'gsv(kwx(]x}(k}!O?{!O!f(k!f!gAR!g#W(k#W#XGz#X~(k!R@SV!``!bpOr(krs'gsv(kwx(]x}(k}!O@i!O~(k!R@rT!``!bp!cPOr(krs'gsv(kwx(]x~(k!RAYV!``!bpOr(krs'gsv(kwx(]x!q(k!q!rAo!r~(k!RAvV!``!bpOr(krs'gsv(kwx(]x!e(k!e!fB]!f~(k!RBdV!``!bpOr(krs'gsv(kwx(]x!v(k!v!wBy!w~(k!RCQV!``!bpOr(krs'gsv(kwx(]x!{(k!{!|Cg!|~(k!RCnV!``!bpOr(krs'gsv(kwx(]x!r(k!r!sDT!s~(k!RD[V!``!bpOr(krs'gsv(kwx(]x!g(k!g!hDq!h~(k!RDxW!``!bpOrDqrsEbsvDqvwEvwxFfx!`Dq!`!aGb!a~DqqEgT!bpOvEbvxEvx!`Eb!`!aFX!a~EbPEyRO!`Ev!`!aFS!a~EvPFXOzPqF`Q!bpzPOv'gx~'gaFkV!``OrFfrsEvsvFfvwEvw!`Ff!`!aGQ!a~FfaGXR!``zPOr(]sv(]w~(]!RGkT!``!bpzPOr(krs'gsv(kwx(]x~(k!RHRV!``!bpOr(krs'gsv(kwx(]x#c(k#c#dHh#d~(k!RHoV!``!bpOr(krs'gsv(kwx(]x#V(k#V#WIU#W~(k!RI]V!``!bpOr(krs'gsv(kwx(]x#h(k#h#iIr#i~(k!RIyV!``!bpOr(krs'gsv(kwx(]x#m(k#m#nJ`#n~(k!RJgV!``!bpOr(krs'gsv(kwx(]x#d(k#d#eJ|#e~(k!RKTV!``!bpOr(krs'gsv(kwx(]x#X(k#X#YDq#Y~(k!RKqW!``!bpOrKjrsLZsvKjvwLowxNPx!aKj!a!b! g!b~KjqL`T!bpOvLZvxLox!aLZ!a!bM^!b~LZPLrRO!aLo!a!bL{!b~LoPMORO!`Lo!`!aMX!a~LoPM^OwPqMcT!bpOvLZvxLox!`LZ!`!aMr!a~LZqMyQ!bpwPOv'gx~'gaNUV!``OrNPrsLosvNPvwLow!aNP!a!bNk!b~NPaNpV!``OrNPrsLosvNPvwLow!`NP!`!a! V!a~NPa! ^R!``wPOr(]sv(]w~(]!R! nW!``!bpOrKjrsLZsvKjvwLowxNPx!`Kj!`!a!!W!a~Kj!R!!aT!``!bpwPOr(krs'gsv(kwx(]x~(k!V!!{VgS^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R",
      tokenizers: [scriptTokens, styleTokens, textareaTokens, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
      topRules: {"Document":[0,13]},
      dialects: {noMatch: 0},
      tokenPrec: 464
    });

    function getAttrs(element, input) {
      let attrs = Object.create(null);
      for (let att of element.firstChild.getChildren("Attribute")) {
        let name = att.getChild("AttributeName"), value = att.getChild("AttributeValue") || att.getChild("UnquotedAttributeValue");
        if (name) attrs[input.read(name.from, name.to)] =
          !value ? "" : value.name == "AttributeValue" ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
      }
      return attrs
    }

    function maybeNest(node, input, tags) {
      let attrs;
      for (let tag of tags) {
        if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent, input))))
          return {parser: tag.parser}
      }
      return null
    }

    // tags: {
    //   tag: "script" | "style" | "textarea",
    //   attrs?: ({[attr: string]: string}) => boolean,
    //   parser: Parser
    // }[]
     
    function configureNesting(tags) {
      let script = [], style = [], textarea = [];
      for (let tag of tags) {
        let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : null;
        if (!array) throw new RangeError("Only script, style, and textarea tags can host nested parsers")
        array.push(tag);
      }
      return parseMixed((node, input) => {
        let id = node.type.id;
        if (id == ScriptText) return maybeNest(node, input, script)
        if (id == StyleText) return maybeNest(node, input, style)
        if (id == TextareaText) return maybeNest(node, input, textarea)
        return null
      })
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const descendantOp = 93,
      Unit = 1,
      callee = 94,
      identifier$2 = 95,
      VariableName = 2;

    /* Hand-written tokenizers for CSS tokens that can't be
       expressed by Lezer's built-in tokenizer. */

    const space$1 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
    const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
          hash = 35, percent = 37;

    function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

    function isDigit(ch) { return ch >= 48 && ch <= 57 }

    const identifiers = new ExternalTokenizer((input, stack) => {
      for (let inside = false, dashes = 0, i = 0;; i++) {
        let {next} = input;
        if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit(next))) {
          if (!inside && (next != dash || i > 0)) inside = true;
          if (dashes === i && next == dash) dashes++;
          input.advance();
        } else {
          if (inside)
            input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier$2);
          break
        }
      }
    });

    const descendant = new ExternalTokenizer(input => {
      if (space$1.includes(input.peek(-1))) {
        let {next} = input;
        if (isAlpha(next) || next == underscore || next == hash || next == period ||
            next == bracketL || next == colon || next == dash)
          input.acceptToken(descendantOp);
      }
    });

    const unitToken = new ExternalTokenizer(input => {
      if (!space$1.includes(input.peek(-1))) {
        let {next} = input;
        if (next == percent) { input.advance(); input.acceptToken(Unit); }
        if (isAlpha(next)) {
          do { input.advance(); } while (isAlpha(input.next))
          input.acceptToken(Unit);
        }
      }
    });

    const cssHighlighting = styleTags({
      "import charset namespace keyframes": tags$1.definitionKeyword,
      "media supports": tags$1.controlKeyword,
      "from to selector": tags$1.keyword,
      NamespaceName: tags$1.namespace,
      KeyframeName: tags$1.labelName,
      TagName: tags$1.tagName,
      ClassName: tags$1.className,
      PseudoClassName: tags$1.constant(tags$1.className),
      IdName: tags$1.labelName,
      "FeatureName PropertyName": tags$1.propertyName,
      AttributeName: tags$1.attributeName,
      NumberLiteral: tags$1.number,
      KeywordQuery: tags$1.keyword,
      UnaryQueryOp: tags$1.operatorKeyword,
      "CallTag ValueName": tags$1.atom,
      VariableName: tags$1.variableName,
      Callee: tags$1.operatorKeyword,
      Unit: tags$1.unit,
      "UniversalSelector NestingSelector": tags$1.definitionOperator,
      AtKeyword: tags$1.keyword,
      MatchOp: tags$1.compareOperator,
      "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
      BinOp: tags$1.arithmeticOperator,
      Important: tags$1.modifier,
      Comment: tags$1.blockComment,
      ParenthesizedContent: tags$1.special(tags$1.name),
      ColorLiteral: tags$1.color,
      StringLiteral: tags$1.string,
      ":": tags$1.punctuation,
      "PseudoOp #": tags$1.derefOperator,
      "; ,": tags$1.separator,
      "( )": tags$1.paren,
      "[ ]": tags$1.squareBracket,
      "{ }": tags$1.brace
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_callee = {__proto__:null,lang:32, "nth-child":32, "nth-last-child":32, "nth-of-type":32, dir:32, url:60, "url-prefix":60, domain:60, regexp:60, selector:134};
    const spec_AtKeyword = {__proto__:null,"@import":114, "@media":138, "@charset":142, "@namespace":146, "@keyframes":152, "@supports":164};
    const spec_identifier$1 = {__proto__:null,not:128, only:128, from:158, to:160};
    const parser$1 = LRParser.deserialize({
      version: 14,
      states: "7WOYQ[OOOOQP'#Cd'#CdOOQP'#Cc'#CcO!ZQ[O'#CfO!}QXO'#CaO#UQ[O'#ChO#aQ[O'#DPO#fQ[O'#DTOOQP'#Ec'#EcO#kQdO'#DeO$VQ[O'#DrO#kQdO'#DtO$hQ[O'#DvO$sQ[O'#DyO$xQ[O'#EPO%WQ[O'#EROOQS'#Eb'#EbOOQS'#ES'#ESQYQ[OOOOQP'#Cg'#CgOOQP,59Q,59QO!ZQ[O,59QO%_Q[O'#EVO%yQWO,58{O&RQ[O,59SO#aQ[O,59kO#fQ[O,59oO%_Q[O,59sO%_Q[O,59uO%_Q[O,59vO'bQ[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO'iQWO,59SO'nQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO'sQ`O,59oOOQS'#Cp'#CpO#kQdO'#CqO'{QvO'#CsO)VQtO,5:POOQO'#Cx'#CxO'iQWO'#CwO)kQWO'#CyOOQS'#Ef'#EfOOQO'#Dh'#DhO)pQ[O'#DoO*OQWO'#EiO$xQ[O'#DmO*^QWO'#DpOOQO'#Ej'#EjO%|QWO,5:^O*cQpO,5:`OOQS'#Dx'#DxO*kQWO,5:bO*pQ[O,5:bOOQO'#D{'#D{O*xQWO,5:eO*}QWO,5:kO+VQWO,5:mOOQS-E8Q-E8QOOQP1G.l1G.lO+yQXO,5:qOOQO-E8T-E8TOOQS1G.g1G.gOOQP1G.n1G.nO'iQWO1G.nO'nQWO1G.nOOQP1G/V1G/VO,WQ`O1G/ZO,qQXO1G/_O-XQXO1G/aO-oQXO1G/bO.VQXO'#CdO.zQWO'#DaOOQS,59z,59zO/PQWO,59zO/XQ[O,59zO/`QdO'#CoO/gQ[O'#DOOOQP1G/Z1G/ZO#kQdO1G/ZO/nQpO,59]OOQS,59_,59_O#kQdO,59aO/vQWO1G/kOOQS,59c,59cO/{Q!bO,59eO0TQWO'#DhO0`QWO,5:TO0eQWO,5:ZO$xQ[O,5:VO$xQ[O'#EYO0mQWO,5;TO0xQWO,5:XO%_Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O1ZQWO1G/|O1`QdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XOOQP7+$Y7+$YOOQP7+$u7+$uO#kQdO7+$uO#kQdO,59{O1nQ[O'#EXO1xQWO1G/fOOQS1G/f1G/fO1xQWO1G/fO2QQtO'#ETO2uQdO'#EeO3PQWO,59ZO3UQXO'#EhO3]QWO,59jO3bQpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO3jQWO1G/PO#kQdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO3oQWO,5:tOOQO-E8W-E8WO3}QXO1G/vOOQS7+%h7+%hO4UQYO'#CsO%|QWO'#EZO4^QdO,5:hOOQS,5:h,5:hO4lQpO<<HaO4tQtO1G/gOOQO,5:s,5:sO5XQ[O,5:sOOQO-E8V-E8VOOQS7+%Q7+%QO5cQWO7+%QOOQS-E8R-E8RO#kQdO'#EUO5kQWO,5;POOQT1G.u1G.uO5sQWO,5;SOOQP1G/U1G/UOOQP<<Ha<<HaOOQS7+$k7+$kO5{QdO7+%ZOOQO7+%b7+%bOOQS,5:u,5:uOOQS-E8X-E8XOOQS1G0S1G0SOOQPAN={AN={O6SQtO'#EWO#kQdO'#EWO6}QdO7+%ROOQO7+%R7+%ROOQO1G0_1G0_OOQS<<Hl<<HlO7_QdO,5:pOOQO-E8S-E8SOOQO<<Hu<<HuO7iQtO,5:rOOQS-E8U-E8UOOQO<<Hm<<Hm",
      stateData: "8j~O#TOSROS~OUWOXWO]TO^TOtUOxVO!Y_O!ZXO!gYO!iZO!k[O!n]O!t^O#RPO#WRO~O#RcO~O]hO^hOpfOtiOxjO|kO!PmO#PlO#WeO~O!RnO~P!`O`sO#QqO#RpO~O#RuO~O#RwO~OQ!QObzOf!QOh!QOn!PO#Q}O#RyO#Z{O~Ob!SO!b!UO!e!VO#R!RO!R#]P~Oh![On!PO#R!ZO~O#R!^O~Ob!SO!b!UO!e!VO#R!RO~O!W#]P~P$VOUWOXWO]TO^TOtUOxVO#RPO#WRO~OpfO!RnO~O`!hO#QqO#RpO~OQ!pOUWOXWO]TO^TOtUOxVO!Y_O!ZXO!gYO!iZO!k[O!n]O!t^O#R!oO#WRO~O!Q!qO~P&^Ob!tO~Ob!uO~Ov!vOz!wO~OP!yObgXjgX!WgX!bgX!egX#RgXagXQgXfgXhgXngXpgX#QgX#ZgXvgX!QgX!VgX~Ob!SOj!zO!b!UO!e!VO#R!RO!W#]P~Ob!}O~Ob!SO!b!UO!e!VO#R#OO~Op#SO!`#RO!R#]X!W#]X~Ob#VO~Oj!zO!W#XO~O!W#YO~Oh#ZOn!PO~O!R#[O~O!RnO!`#RO~O!RnO!W#_O~O]hO^hOtiOxjO|kO!PmO#PlO#WeO~Op!ya!R!yaa!ya~P+_Ov#aOz#bO~O]hO^hOtiOxjO#WeO~Op{i|{i!P{i!R{i#P{ia{i~P,`Op}i|}i!P}i!R}i#P}ia}i~P,`Op!Oi|!Oi!P!Oi!R!Oi#P!Oia!Oi~P,`O]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#PWX#WWX~O]#cO~O!Q#fO!W#dO~O!Q#fO~P&^Oa#XP~P#kOa#[P~P%_Oa#nOj!zO~O!W#pO~Oh#qOo#qO~O]!^Xa![X!`![X~O]#rO~Oa#sO!`#RO~Op#SO!R#]a!W#]a~O!`#ROp!aa!R!aa!W!aaa!aa~O!W#xO~O!Q#|O!q#zO!r#zO#Z#yO~O!Q!{X!W!{X~P&^O!Q$SO!W#dO~Oj!zOQ!wXa!wXb!wXf!wXh!wXn!wXp!wX#Q!wX#R!wX#Z!wX~Op$VOa#XX~P#kOa$XO~Oa#[X~P!`Oa$ZO~Oj!zOv$[O~Oa$]O~O!`#ROp!|a!R!|a!W!|a~Oa$_O~P+_OP!yO!RgX~O!Q$bO!q#zO!r#zO#Z#yO~Oj!zOv$cO~Oj!zOp$eO!V$gO!Q!Ti!W!Ti~P#kO!Q!{a!W!{a~P&^O!Q$iO!W#dO~Op$VOa#Xa~OpfOa#[a~Oa$lO~P#kOj!zOQ!zXb!zXf!zXh!zXn!zXp!zX!Q!zX!V!zX!W!zX#Q!zX#R!zX#Z!zX~Op$eO!V$oO!Q!Tq!W!Tq~P#kOa!xap!xa~P#kOj!zOQ!zab!zaf!zah!zan!zap!za!Q!za!V!za!W!za#Q!za#R!za#Z!za~Oo#Zj!Pj~",
      goto: ",O#_PPPPP#`P#h#vP#h$U#hPP$[PPP$b$k$kP$}P$kP$k%e%wPPP&a&g#hP&mP#hP&sP#hP#h#hPPP&y']'iPP#`PP'o'o'y'oP'oP'o'oP#`P#`P#`P'|#`P(P(SPP#`P#`(V(e(s(y)T)Z)e)kPPPPPP)q)yP*e*hP+^+a+j]`Obn!s#d$QiWObfklmn!s!u#V#d$QiQObfklmn!s!u#V#d$QQdRR!ceQrTR!ghQ!gsQ!|!OR#`!hq!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jT#z#[#{q!OXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jQ![[R#Z!]QtTR!ihQ!gtR#`!iQvUR!jiQxVR!kjQoSQ!fgQ#W!XQ#^!`Q#_!aR$`#zQ!rnQ#g!sQ$P#dR$h$QX!pn!s#d$Qa!WY^_|!S!U#R#SR#P!SR!][R!_]R#]!_QbOU!bb!s$QQ!snR$Q#dQ#i!tU$U#i$^$jQ$^#rR$j$VQ$W#iR$k$WQgSS!eg$YR$Y#kQ$f$OR$n$fQ#e!rS$R#e$TR$T#gQ#T!TR#v#TQ#{#[R$a#{]aObn!s#d$Q[SObn!s#d$QQ!dfQ!lkQ!mlQ!nmQ#k!uR#w#VR#j!tQ|XQ!YZQ!xz[#h!t#i#r$V$^$jQ#m!wQ#o!zQ#}#bQ$O#cS$d$O$fR$m$eR#l!uQ!XYQ!a_R!{|U!TY_|Q!`^Q#Q!SQ#U!UQ#t#RR#u#S",
      nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
      maxTerm: 106,
      nodeProps: [
        ["openedBy", 17,"(",48,"{"],
        ["closedBy", 18,")",49,"}"]
      ],
      propSources: [cssHighlighting],
      skippedNodes: [0,3],
      repeatNodeCount: 8,
      tokenData: "Ay~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8U}!O8a!O!P8x!P!Q9Z!Q![;e![!]<Y!]!^<x!^!_$w!_!`=T!`!a=`!a!b$w!b!c>O!c!}$w!}#O?[#O#P$w#P#Q?g#Q#R2U#R#T$w#T#U?r#U#c$w#c#d@q#d#o$w#o#pAQ#p#q2U#q#rA]#r#sAh#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQoWOy%Qz~%Q~%bf#T~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#T~oWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q^(fSOy%Qz#]%Q#]#^(r#^~%Q^(wSoWOy%Qz#a%Q#a#b)T#b~%Q^)YSoWOy%Qz#d%Q#d#e)f#e~%Q^)kSoWOy%Qz#c%Q#c#d)w#d~%Q^)|SoWOy%Qz#f%Q#f#g*Y#g~%Q^*_SoWOy%Qz#h%Q#h#i*k#i~%Q^*pSoWOy%Qz#T%Q#T#U*|#U~%Q^+RSoWOy%Qz#b%Q#b#c+_#c~%Q^+dSoWOy%Qz#h%Q#h#i+p#i~%Q^+wQ!VUoWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOh~~,lPO~+}_,tWtPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWoWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWoWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWfUoWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWfUoWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWoWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWfUoWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WoWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQfUoWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQzQoWOy%Qz~%QX2wQXPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQbVOy%Qz~%Q~3zOa~_4RSUPjSOy%Qz!_%Q!_!`2e!`~%Q_4fUjS!PPOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SoWOy%Qz!Q%Q!Q![5Z![~%Q^5bWoW#ZUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWoWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSoWOy%Qz!Q%Q!Q![6z![~%Q^7RSoW#ZUOy%Qz!Q%Q!Q![6z![~%Q^7fYoW#ZUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8ZQpVOy%Qz~%Q^8fUjSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_8}S#WPOy%Qz!Q%Q!Q![5Z![~%Q~9`RjSOy%Qz{9i{~%Q~9nSoWOy9iyz9zz{:o{~9i~9}ROz9zz{:W{~9z~:ZTOz9zz{:W{!P9z!P!Q:j!Q~9z~:oOR~~:tUoWOy9iyz9zz{:o{!P9i!P!Q;W!Q~9i~;_QoWR~Oy%Qz~%Q^;jY#ZUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QX<_S]POy%Qz![%Q![!]<k!]~%QX<rQ^PoWOy%Qz~%Q_<}Q!WVOy%Qz~%QY=YQzQOy%Qz~%QX=eS|POy%Qz!`%Q!`!a=q!a~%QX=xQ|PoWOy%Qz~%QX>RUOy%Qz!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX>lY!YPoWOy%Qz}%Q}!O>e!O!Q%Q!Q![>e![!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX?aQxPOy%Qz~%Q^?lQvUOy%Qz~%QX?uSOy%Qz#b%Q#b#c@R#c~%QX@WSoWOy%Qz#W%Q#W#X@d#X~%QX@kQ!`PoWOy%Qz~%QX@tSOy%Qz#f%Q#f#g@d#g~%QXAVQ!RPOy%Qz~%Q_AbQ!QVOy%Qz~%QZAmS!PPOy%Qz!_%Q!_!`2e!`~%Q",
      tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
      topRules: {"StyleSheet":[0,4]},
      specialized: [{term: 94, get: value => spec_callee[value] || -1},{term: 56, get: value => spec_AtKeyword[value] || -1},{term: 95, get: value => spec_identifier$1[value] || -1}],
      tokenPrec: 1078
    });

    let _properties = null;
    function properties() {
        if (!_properties && typeof document == "object" && document.body) {
            let names = [];
            for (let prop in document.body.style) {
                if (!/[A-Z]|^-|^(item|length)$/.test(prop))
                    names.push(prop);
            }
            _properties = names.sort().map(name => ({ type: "property", label: name }));
        }
        return _properties || [];
    }
    const pseudoClasses = /*@__PURE__*/[
        "active", "after", "before", "checked", "default",
        "disabled", "empty", "enabled", "first-child", "first-letter",
        "first-line", "first-of-type", "focus", "hover", "in-range",
        "indeterminate", "invalid", "lang", "last-child", "last-of-type",
        "link", "not", "nth-child", "nth-last-child", "nth-last-of-type",
        "nth-of-type", "only-of-type", "only-child", "optional", "out-of-range",
        "placeholder", "read-only", "read-write", "required", "root",
        "selection", "target", "valid", "visited"
    ].map(name => ({ type: "class", label: name }));
    const values = /*@__PURE__*/[
        "above", "absolute", "activeborder", "additive", "activecaption", "after-white-space",
        "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always",
        "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column",
        "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below",
        "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
        "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
        "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize",
        "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle",
        "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn",
        "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content",
        "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover",
        "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
        "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in",
        "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed",
        "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize",
        "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end",
        "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion",
        "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box",
        "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from",
        "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide",
        "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
        "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext",
        "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid",
        "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all",
        "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear",
        "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower",
        "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation",
        "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic",
        "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower",
        "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none",
        "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize",
        "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside",
        "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused",
        "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait",
        "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio",
        "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat",
        "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
        "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round",
        "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation",
        "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position",
        "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show",
        "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
        "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps",
        "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out",
        "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start",
        "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks",
        "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell",
        "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row",
        "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin",
        "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top",
        "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent",
        "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin",
        "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill",
        "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe",
        "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"
    ].map(name => ({ type: "keyword", label: name })).concat(/*@__PURE__*/[
        "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
        "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
        "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
        "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
        "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
        "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
        "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
        "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
        "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
        "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
        "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
        "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
        "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
        "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
        "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
        "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
        "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
        "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
        "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
        "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
        "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
        "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
        "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
        "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
        "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
        "whitesmoke", "yellow", "yellowgreen"
    ].map(name => ({ type: "constant", label: name })));
    const tags = /*@__PURE__*/[
        "a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body",
        "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del",
        "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer",
        "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe",
        "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output",
        "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary",
        "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"
    ].map(name => ({ type: "type", label: name }));
    const identifier$1 = /^[\w-]*/;
    /**
    CSS property and value keyword completion source.
    */
    const cssCompletionSource = context => {
        let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
        if (node.name == "PropertyName")
            return { from: node.from, options: properties(), validFor: identifier$1 };
        if (node.name == "ValueName")
            return { from: node.from, options: values, validFor: identifier$1 };
        if (node.name == "PseudoClassName")
            return { from: node.from, options: pseudoClasses, validFor: identifier$1 };
        if (node.name == "TagName") {
            for (let { parent } = node; parent; parent = parent.parent)
                if (parent.name == "Block")
                    return { from: node.from, options: properties(), validFor: identifier$1 };
            return { from: node.from, options: tags, validFor: identifier$1 };
        }
        if (!context.explicit)
            return null;
        let above = node.resolve(pos), before = above.childBefore(pos);
        if (before && before.name == ":" && above.name == "PseudoClassSelector")
            return { from: pos, options: pseudoClasses, validFor: identifier$1 };
        if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
            return { from: pos, options: values, validFor: identifier$1 };
        if (above.name == "Block")
            return { from: pos, options: properties(), validFor: identifier$1 };
        return null;
    };

    /**
    A language provider based on the [Lezer CSS
    parser](https://github.com/lezer-parser/css), extended with
    highlighting and indentation information.
    */
    const cssLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$1.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Declaration: /*@__PURE__*/continuedIndent()
                }),
                /*@__PURE__*/foldNodeProp.add({
                    Block: foldInside
                })
            ]
        }),
        languageData: {
            commentTokens: { block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*\}$/,
            wordChars: "-"
        }
    });
    /**
    Language support for CSS.
    */
    function css() {
        return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const TSExtends = 1,
      noSemi = 281,
      incdec = 2,
      incdecPrefix = 3,
      templateContent = 282,
      InterpolationStart = 4,
      templateEnd = 283,
      insertSemi = 284,
      spaces = 286,
      newline = 287,
      LineComment = 5,
      BlockComment = 6,
      Dialect_ts = 1;

    /* Hand-written tokenizers for JavaScript tokens that can't be
       expressed by lezer's built-in tokenizer. */

    const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                   8201, 8202, 8232, 8233, 8239, 8287, 12288];

    const braceR = 125, braceL = 123, semicolon = 59, slash = 47, star = 42,
          plus = 43, minus = 45, dollar = 36, backtick = 96, backslash = 92;

    const trackNewline = new ContextTracker({
      start: false,
      shift(context, term) {
        return term == LineComment || term == BlockComment || term == spaces ? context : term == newline
      },
      strict: false
    });

    const insertSemicolon = new ExternalTokenizer((input, stack) => {
      let {next} = input;
      if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi))
        input.acceptToken(insertSemi);
    }, {contextual: true, fallback: true});

    const noSemicolon = new ExternalTokenizer((input, stack) => {
      let {next} = input, after;
      if (space.indexOf(next) > -1) return
      if (next == slash && ((after = input.peek(1)) == slash || after == star)) return
      if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi))
        input.acceptToken(noSemi);
    }, {contextual: true});

    const incdecToken = new ExternalTokenizer((input, stack) => {
      let {next} = input;
      if (next == plus || next == minus) {
        input.advance();
        if (next == input.next) {
          input.advance();
          let mayPostfix = !stack.context && stack.canShift(incdec);
          input.acceptToken(mayPostfix ? incdec : incdecPrefix);
        }
      }
    }, {contextual: true});

    const template = new ExternalTokenizer(input => {
      for (let afterDollar = false, i = 0;; i++) {
        let {next} = input;
        if (next < 0) {
          if (i) input.acceptToken(templateContent);
          break
        } else if (next == backtick) {
          if (i) input.acceptToken(templateContent);
          else input.acceptToken(templateEnd, 1);
          break
        } else if (next == braceL && afterDollar) {
          if (i == 1) input.acceptToken(InterpolationStart, 1);
          else input.acceptToken(templateContent, -1);
          break
        } else if (next == 10 /* "\n" */ && i) {
          // Break up template strings on lines, to avoid huge tokens
          input.advance();
          input.acceptToken(templateContent);
          break
        } else if (next == backslash) {
          input.advance();
        }
        afterDollar = next == dollar;
        input.advance();
      }
    });

    const tsExtends = new ExternalTokenizer((input, stack) => {
      if (input.next != 101 || !stack.dialectEnabled(Dialect_ts)) return
      input.advance();
      for (let i = 0; i < 6; i++) {
        if (input.next != "xtends".charCodeAt(i)) return
        input.advance();
      }
      if (input.next >= 57 && input.next <= 65 || input.next >= 48 && input.next <= 90 ||
          input.next == 95 || input.next >= 97 && input.next <= 122 || input.next > 160) return
      input.acceptToken(TSExtends);
    });

    const jsHighlight = styleTags({
      "get set async static": tags$1.modifier,
      "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
      "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
      "let var const function class extends": tags$1.definitionKeyword,
      "import export from": tags$1.moduleKeyword,
      "with debugger as new": tags$1.keyword,
      TemplateString: tags$1.special(tags$1.string),
      Super: tags$1.atom,
      BooleanLiteral: tags$1.bool,
      this: tags$1.self,
      null: tags$1.null,
      Star: tags$1.modifier,
      VariableName: tags$1.variableName,
      "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags$1.function(tags$1.variableName),
      VariableDefinition: tags$1.definition(tags$1.variableName),
      Label: tags$1.labelName,
      PropertyName: tags$1.propertyName,
      PrivatePropertyName: tags$1.special(tags$1.propertyName),
      "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
      "FunctionDeclaration/VariableDefinition": tags$1.function(tags$1.definition(tags$1.variableName)),
      "ClassDeclaration/VariableDefinition": tags$1.definition(tags$1.className),
      PropertyDefinition: tags$1.definition(tags$1.propertyName),
      PrivatePropertyDefinition: tags$1.definition(tags$1.special(tags$1.propertyName)),
      UpdateOp: tags$1.updateOperator,
      LineComment: tags$1.lineComment,
      BlockComment: tags$1.blockComment,
      Number: tags$1.number,
      String: tags$1.string,
      ArithOp: tags$1.arithmeticOperator,
      LogicOp: tags$1.logicOperator,
      BitOp: tags$1.bitwiseOperator,
      CompareOp: tags$1.compareOperator,
      RegExp: tags$1.regexp,
      Equals: tags$1.definitionOperator,
      "Arrow : Spread": tags$1.punctuation,
      "( )": tags$1.paren,
      "[ ]": tags$1.squareBracket,
      "{ }": tags$1.brace,
      "InterpolationStart InterpolationEnd": tags$1.special(tags$1.brace),
      ".": tags$1.derefOperator,
      ", ;": tags$1.separator,

      TypeName: tags$1.typeName,
      TypeDefinition: tags$1.definition(tags$1.typeName),
      "type enum interface implements namespace module declare": tags$1.definitionKeyword,
      "abstract global Privacy readonly override": tags$1.modifier,
      "is keyof unique infer": tags$1.operatorKeyword,

      JSXAttributeValue: tags$1.attributeValue,
      JSXText: tags$1.content,
      "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
      "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
      "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.attributeName
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier = {__proto__:null,export:18, as:23, from:29, default:32, async:37, function:38, this:48, true:56, false:56, void:66, typeof:70, null:86, super:88, new:122, await:139, yield:141, delete:142, class:152, extends:154, public:197, private:197, protected:197, readonly:199, instanceof:220, in:222, const:224, import:256, keyof:307, unique:311, infer:317, is:351, abstract:371, implements:373, type:375, let:378, var:380, interface:387, enum:391, namespace:397, module:399, declare:403, global:407, for:428, of:437, while:440, with:444, do:448, if:452, else:454, switch:458, case:464, try:470, catch:474, finally:478, return:482, throw:486, break:490, continue:494, debugger:498};
    const spec_word = {__proto__:null,async:109, get:111, set:113, public:161, private:161, protected:161, static:163, abstract:165, override:167, readonly:173, new:355};
    const spec_LessThan = {__proto__:null,"<":129};
    const parser = LRParser.deserialize({
      version: 14,
      states: "$8SO`QdOOO'QQ(C|O'#ChO'XOWO'#DVO)dQdO'#D]O)tQdO'#DhO){QdO'#DrO-xQdO'#DxOOQO'#E]'#E]O.]Q`O'#E[O.bQ`O'#E[OOQ(C['#Ef'#EfO0aQ(C|O'#ItO2wQ(C|O'#IuO3eQ`O'#EzO3jQ!bO'#FaOOQ(C['#FS'#FSO3rO#tO'#FSO4QQ&jO'#FhO5bQ`O'#FgOOQ(C['#Iu'#IuOOQ(CW'#It'#ItOOQS'#J^'#J^O5gQ`O'#HpO5lQ(ChO'#HqOOQS'#Ih'#IhOOQS'#Hr'#HrQ`QdOOO){QdO'#DjO5tQ`O'#G[O5yQ&jO'#CmO6XQ`O'#EZO6dQ`O'#EgO6iQ,UO'#FRO7TQ`O'#G[O7YQ`O'#G`O7eQ`O'#G`O7sQ`O'#GcO7sQ`O'#GdO7sQ`O'#GfO5tQ`O'#GiO8dQ`O'#GlO9rQ`O'#CdO:SQ`O'#GyO:[Q`O'#HPO:[Q`O'#HRO`QdO'#HTO:[Q`O'#HVO:[Q`O'#HYO:aQ`O'#H`O:fQ(CjO'#HfO){QdO'#HhO:qQ(CjO'#HjO:|Q(CjO'#HlO5lQ(ChO'#HnO){QdO'#DWOOOW'#Ht'#HtO;XOWO,59qOOQ(C[,59q,59qO=jQtO'#ChO=tQdO'#HuO>XQ`O'#IvO@WQtO'#IvO'dQdO'#IvO@_Q`O,59wO@uQ7[O'#DbOAnQ`O'#E]OA{Q`O'#JROBWQ`O'#JQOBWQ`O'#JQOB`Q`O,5:yOBeQ`O'#JPOBlQaO'#DyO5yQ&jO'#EZOBzQ`O'#EZOCVQpO'#FROOQ(C[,5:S,5:SOC_QdO,5:SOE]Q(C|O,5:^OEyQ`O,5:dOFdQ(ChO'#JOO7YQ`O'#I}OFkQ`O'#I}OFsQ`O,5:xOFxQ`O'#I}OGWQdO,5:vOIWQ&jO'#EWOJeQ`O,5:vOKwQ&jO'#DlOLOQdO'#DqOLYQ7[O,5;PO){QdO,5;POOQS'#Er'#ErOOQS'#Et'#EtO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;RO){QdO,5;ROOQS'#Ex'#ExOLbQdO,5;cOOQ(C[,5;h,5;hOOQ(C[,5;i,5;iONbQ`O,5;iOOQ(C[,5;j,5;jO){QdO'#IPONgQ(ChO,5<TO! RQ&jO,5;RO){QdO,5;fO! kQ!bO'#JVO! YQ!bO'#JVO! rQ!bO'#JVO!!TQ!bO,5;qOOOO,5;{,5;{O!!cQdO'#FcOOOO'#IO'#IOO3rO#tO,5;nO!!jQ!bO'#FeOOQ(C[,5;n,5;nO!#WQ,VO'#CrOOQ(C]'#Cu'#CuO!#kQ`O'#CuO!#pOWO'#CyO!$^Q,VO,5<QO!$eQ`O,5<SO!%tQ&jO'#FrO!&RQ`O'#FsO!&WQ`O'#FsO!&]Q&jO'#FwO!'[Q7[O'#F{O!'}Q,VO'#IqOOQ(C]'#Iq'#IqO!(XQaO'#IpO!(gQ`O'#IoO!(oQ`O'#CqOOQ(C]'#Cs'#CsOOQ(C]'#C|'#C|O!(wQ`O'#DOOJjQ&jO'#FjOJjQ&jO'#FlO!(|Q`O'#FnO!)RQ`O'#FoO!&WQ`O'#FuOJjQ&jO'#FzO!)WQ`O'#E^O!)oQ`O,5<RO`QdO,5>[OOQS'#Ik'#IkOOQS,5>],5>]OOQS-E;p-E;pO!+kQ(C|O,5:UOOQ(CX'#Cp'#CpO!,[Q&kO,5<vOOQO'#Cf'#CfO!,mQ(ChO'#IlO5bQ`O'#IlO:aQ`O,59XO!-OQ!bO,59XO!-WQ&jO,59XO5yQ&jO,59XO!-cQ`O,5:vO!-kQ`O'#GxO!-yQ`O'#JbO){QdO,5;kO!.RQ7[O,5;mO!.WQ`O,5=cO!.]Q`O,5=cO!.bQ`O,5=cO5lQ(ChO,5=cO5tQ`O,5<vO!.pQ`O'#E_O!/UQ7[O'#E`OOQ(CW'#JP'#JPO!/gQ(ChO'#J_O5lQ(ChO,5<zO7sQ`O,5=QOOQP'#Cr'#CrO!/rQ!bO,5<}O!/zQ!cO,5=OO!0VQ`O,5=QO!0[QpO,5=TO:aQ`O'#GnO5tQ`O'#GpO!0dQ`O'#GpO5yQ&jO'#GsO!0iQ`O'#GsOOQS,5=W,5=WO!0nQ`O'#GtO!0vQ`O'#CmO!0{Q`O,59OO!1VQ`O,59OO!3XQdO,59OOOQS,59O,59OO!3fQ(ChO,59OO){QdO,59OO!3qQdO'#G{OOQS'#G|'#G|OOQS'#G}'#G}O`QdO,5=eO!4RQ`O,5=eO){QdO'#DxO`QdO,5=kO`QdO,5=mO!4WQ`O,5=oO`QdO,5=qO!4]Q`O,5=tO!4bQdO,5=zOOQS,5>Q,5>QO){QdO,5>QO5lQ(ChO,5>SOOQS,5>U,5>UO!8cQ`O,5>UOOQS,5>W,5>WO!8cQ`O,5>WOOQS,5>Y,5>YO!8hQpO,59rOOOW-E;r-E;rOOQ(C[1G/]1G/]O!8mQtO,5>aO'dQdO,5>aOOQO,5>f,5>fO!8wQdO'#HuOOQO-E;s-E;sO!9UQ`O,5?bO!9^QtO,5?bO!9eQ`O,5?lOOQ(C[1G/c1G/cO!9mQ!bO'#DTOOQO'#Ix'#IxO){QdO'#IxO!:[Q!bO'#IxO!:yQ!bO'#DcO!;[Q7[O'#DcO!=gQdO'#DcO!=nQ`O'#IwO!=vQ`O,59|O!={Q`O'#EaO!>ZQ`O'#JSO!>cQ`O,5:zO!>yQ7[O'#DcO){QdO,5?mO!?TQ`O'#HzOOQO-E;x-E;xO!9eQ`O,5?lOOQ(CW1G0e1G0eO!@aQ7[O'#D|OOQ(C[,5:e,5:eO){QdO,5:eOIWQ&jO,5:eO!@hQaO,5:eO:aQ`O,5:uO!-OQ!bO,5:uO!-WQ&jO,5:uO5yQ&jO,5:uOOQ(C[1G/n1G/nOOQ(C[1G0O1G0OOOQ(CW'#EV'#EVO){QdO,5?jO!@sQ(ChO,5?jO!AUQ(ChO,5?jO!A]Q`O,5?iO!AeQ`O'#H|O!A]Q`O,5?iOOQ(CW1G0d1G0dO7YQ`O,5?iOOQ(C[1G0b1G0bO!BPQ(C|O1G0bO!CRQ(CyO,5:rOOQ(C]'#Fq'#FqO!CoQ(C}O'#IqOGWQdO1G0bO!EqQ,VO'#IyO!E{Q`O,5:WO!FQQtO'#IzO){QdO'#IzO!F[Q`O,5:]OOQ(C]'#DT'#DTOOQ(C[1G0k1G0kO!FaQ`O1G0kO!HrQ(C|O1G0mO!HyQ(C|O1G0mO!K^Q(C|O1G0mO!KeQ(C|O1G0mO!MlQ(C|O1G0mO!NPQ(C|O1G0mO#!pQ(C|O1G0mO#!wQ(C|O1G0mO#%[Q(C|O1G0mO#%cQ(C|O1G0mO#'WQ(C|O1G0mO#*QQMlO'#ChO#+{QMlO1G0}O#-vQMlO'#IuOOQ(C[1G1T1G1TO#.ZQ(C|O,5>kOOQ(CW-E;}-E;}O#.zQ(C}O1G0mOOQ(C[1G0m1G0mO#1PQ(C|O1G1QO#1pQ!bO,5;sO#1uQ!bO,5;tO#1zQ!bO'#F[O#2`Q`O'#FZOOQO'#JW'#JWOOQO'#H}'#H}O#2eQ!bO1G1]OOQ(C[1G1]1G1]OOOO1G1f1G1fO#2sQMlO'#ItO#2}Q`O,5;}OLbQdO,5;}OOOO-E;|-E;|OOQ(C[1G1Y1G1YOOQ(C[,5<P,5<PO#3SQ!bO,5<POOQ(C],59a,59aOIWQ&jO'#C{OOOW'#Hs'#HsO#3XOWO,59eOOQ(C],59e,59eO){QdO1G1lO!)RQ`O'#IRO#3dQ`O,5<eOOQ(C],5<b,5<bOOQO'#GV'#GVOJjQ&jO,5<pOOQO'#GX'#GXOJjQ&jO,5<rOIWQ&jO,5<tOOQO1G1n1G1nO#3oQqO'#CpO#4SQqO,5<^O#4ZQ`O'#JZO5tQ`O'#JZO#4iQ`O,5<`OJjQ&jO,5<_O#4nQ`O'#FtO#4yQ`O,5<_O#5OQqO'#FqO#5]QqO'#J[O#5gQ`O'#J[OIWQ&jO'#J[O#5lQ`O,5<cOOQ(CW'#Dg'#DgO#5qQ!bO'#F|O!'VQ7[O'#F|O!'VQ7[O'#GOO#6SQ`O'#GPO!&WQ`O'#GSO#6XQ(ChO'#ITO#6dQ7[O,5<gOOQ(C],5<g,5<gO#6kQ7[O'#F|O#6yQ7[O'#F}O#7RQ7[O'#F}OOQ(C],5<u,5<uOJjQ&jO,5?[OJjQ&jO,5?[O#7WQ`O'#IUO#7cQ`O,5?ZO#7kQ`O,59]OOQ(C]'#Ch'#ChO#8[Q,VO,59jOOQ(C],59j,59jO#8}Q,VO,5<UO#9pQ,VO,5<WO#9zQ`O,5<YOOQ(C],5<Z,5<ZO#:PQ`O,5<aO#:UQ,VO,5<fOGWQdO1G1mO#:fQ`O1G1mOOQS1G3v1G3vOOQ(C[1G/p1G/pONbQ`O1G/pOOQS1G2b1G2bOIWQ&jO1G2bO){QdO1G2bOIWQ&jO1G2bO#:kQaO1G2bO#<QQ&jO'#EWOOQ(CW,5?W,5?WO#<[Q(ChO,5?WOOQS1G.s1G.sO:aQ`O1G.sO!-OQ!bO1G.sO!-WQ&jO1G.sO#<mQ`O1G0bO#<rQ`O'#ChO#<}Q`O'#JcO#=VQ`O,5=dO#=[Q`O'#JcO#=aQ`O'#JcO#=iQ`O'#I^O#=wQ`O,5?|O#>PQtO1G1VOOQ(C[1G1X1G1XO5tQ`O1G2}O#>WQ`O1G2}O#>]Q`O1G2}O#>bQ`O1G2}OOQS1G2}1G2}O#>gQ&kO1G2bO7YQ`O'#JQO7YQ`O'#EaO7YQ`O'#IWO#>xQ(ChO,5?yOOQS1G2f1G2fO!0VQ`O1G2lOIWQ&jO1G2iO#?TQ`O1G2iOOQS1G2j1G2jOIWQ&jO1G2jO#?YQaO1G2jO#?bQ7[O'#GhOOQS1G2l1G2lO!'VQ7[O'#IYO!0[QpO1G2oOOQS1G2o1G2oOOQS,5=Y,5=YO#?jQ&kO,5=[O5tQ`O,5=[O#6SQ`O,5=_O5bQ`O,5=_O!-OQ!bO,5=_O!-WQ&jO,5=_O5yQ&jO,5=_O#?{Q`O'#JaO#@WQ`O,5=`OOQS1G.j1G.jO#@]Q(ChO1G.jO#@hQ`O1G.jO#@mQ`O1G.jO5lQ(ChO1G.jO#@uQtO,5@OO#APQ`O,5@OO#A[QdO,5=gO#AcQ`O,5=gO7YQ`O,5@OOOQS1G3P1G3PO`QdO1G3POOQS1G3V1G3VOOQS1G3X1G3XO:[Q`O1G3ZO#AhQdO1G3]O#EcQdO'#H[OOQS1G3`1G3`O#EpQ`O'#HbO:aQ`O'#HdOOQS1G3f1G3fO#ExQdO1G3fO5lQ(ChO1G3lOOQS1G3n1G3nOOQ(CW'#Fx'#FxO5lQ(ChO1G3pO5lQ(ChO1G3rOOOW1G/^1G/^O#IvQpO,5<TO#JOQtO1G3{OOQO1G4Q1G4QO){QdO,5>aO#JYQ`O1G4|O#JbQ`O1G5WO#JjQ`O,5?dOLbQdO,5:{O7YQ`O,5:{O:aQ`O,59}OLbQdO,59}O!-OQ!bO,59}O#JoQMlO,59}OOQO,5:{,5:{O#JyQ7[O'#HvO#KaQ`O,5?cOOQ(C[1G/h1G/hO#KiQ7[O'#H{O#K}Q`O,5?nOOQ(CW1G0f1G0fO!;[Q7[O,59}O#LVQtO1G5XO7YQ`O,5>fOOQ(CW'#ES'#ESO#LaQ(DjO'#ETO!@XQ7[O'#D}OOQO'#Hy'#HyO#L{Q7[O,5:hOOQ(C[,5:h,5:hO#MSQ7[O'#D}O#MeQ7[O'#D}O#MlQ7[O'#EYO#MoQ7[O'#ETO#M|Q7[O'#ETO!@XQ7[O'#ETO#NaQ`O1G0PO#NfQqO1G0POOQ(C[1G0P1G0PO){QdO1G0POIWQ&jO1G0POOQ(C[1G0a1G0aO:aQ`O1G0aO!-OQ!bO1G0aO!-WQ&jO1G0aO#NmQ(C|O1G5UO){QdO1G5UO#N}Q(ChO1G5UO$ `Q`O1G5TO7YQ`O,5>hOOQO,5>h,5>hO$ hQ`O,5>hOOQO-E;z-E;zO$ `Q`O1G5TO$ vQ(C}O,59jO$#xQ(C}O,5<UO$%}Q(C}O,5<WO$(SQ(C}O,5<fOOQ(C[7+%|7+%|O$*_Q(C|O7+%|O$+OQ&jO'#HwO$+YQ`O,5?eOOQ(C]1G/r1G/rO$+bQdO'#HxO$+oQ`O,5?fO$+wQtO,5?fOOQ(C[1G/w1G/wOOQ(C[7+&V7+&VO$,RQMlO,5:^O){QdO7+&iO$,]QMlO,5:UOOQO1G1_1G1_OOQO1G1`1G1`O$,jQ!LQO,5;vOLbQdO,5;uOOQO-E;{-E;{OOQ(C[7+&w7+&wOOOO7+'Q7+'QOOOO1G1i1G1iO$,uQ`O1G1iOOQ(C[1G1k1G1kO$,zQqO,59gOOOW-E;q-E;qOOQ(C]1G/P1G/PO$-RQ(C|O7+'WOOQ(C],5>m,5>mO$-rQ`O,5>mOOQ(C]1G2P1G2PP$-wQ`O'#IRPOQ(C]-E<P-E<PO$.hQ,VO1G2[O$/ZQ,VO1G2^O$/eQqO1G2`OOQ(C]1G1x1G1xO$/lQ`O'#IQO$/zQ`O,5?uO$/zQ`O,5?uO$0SQ`O,5?uO$0_Q`O,5?uOOQO1G1z1G1zO$0mQ,VO1G1yOJjQ&jO1G1yO$0}Q&jO'#ISO$1_Q`O,5?vOIWQ&jO,5?vO$1gQqO,5?vOOQ(C]1G1}1G1}OOQ(CW,5<h,5<hOOQ(CW,5<i,5<iO$1qQ`O,5<iO#5}Q`O,5<iO!-OQ!bO,5<hO$1vQ`O,5<jOOQ(CW,5<k,5<kO$1qQ`O,5<nOOQO,5>o,5>oOOQO-E<R-E<ROOQ(C]1G2R1G2RO!'VQ7[O,5<hO$2OQ`O,5<iO!'VQ7[O,5<jO!'VQ7[O,5<iO$2ZQ,VO1G4vO$2eQ,VO1G4vOOQO,5>p,5>pOOQO-E<S-E<SOOQP1G.w1G.wO!.RQ7[O,59lO){QdO,59lO$2rQ`O1G1tOJjQ&jO1G1{O$2wQ(C|O7+'XOOQ(C[7+'X7+'XOGWQdO7+'XOOQ(C[7+%[7+%[O$3hQqO'#J]O#NaQ`O7+'|O$3rQ`O7+'|O$3zQqO7+'|OOQS7+'|7+'|OIWQ&jO7+'|O){QdO7+'|OIWQ&jO7+'|O$4UQ(CyO'#ChO$4iQ(CyO,5<lO$5ZQ`O,5<lOOQ(CW1G4r1G4rOOQS7+$_7+$_O:aQ`O7+$_O!-OQ!bO7+$_OGWQdO7+%|O$5`Q`O'#I]O$5qQ`O,5?}OOQO1G3O1G3OO5tQ`O,5?}O$5qQ`O,5?}O$5yQ`O,5?}OOQO,5>x,5>xOOQO-E<[-E<[OOQ(C[7+&q7+&qO$6OQ`O7+(iO5lQ(ChO7+(iO5tQ`O7+(iO$6TQ`O7+(iO$6YQaO7+'|OOQ(CW,5>r,5>rOOQ(CW-E<U-E<UOOQS7+(W7+(WO$6hQ(CyO7+(TOIWQ&jO7+(TO$6rQqO7+(UOOQS7+(U7+(UOIWQ&jO7+(UO$6yQ`O'#J`O$7UQ`O,5=SOOQO,5>t,5>tOOQO-E<W-E<WOOQS7+(Z7+(ZO$8OQ7[O'#GqOOQS1G2v1G2vOIWQ&jO1G2vO){QdO1G2vOIWQ&jO1G2vO$8VQaO1G2vO$8eQ&kO1G2vO5lQ(ChO1G2yO#6SQ`O1G2yO5bQ`O1G2yO!-OQ!bO1G2yO!-WQ&jO1G2yO$8vQ`O'#I[O$9RQ`O,5?{O$9ZQ7[O,5?{OOQ(CW1G2z1G2zOOQS7+$U7+$UO$9cQ`O7+$UO5lQ(ChO7+$UO$9hQ`O7+$UO){QdO1G5jO){QdO1G5kO$9mQdO1G3RO$9tQ`O1G3RO$9yQdO1G3RO$:QQ(ChO1G5jOOQS7+(k7+(kO5lQ(ChO7+(uO`QdO7+(wOOQS'#Jf'#JfOOQS'#I_'#I_O$:[QdO,5=vOOQS,5=v,5=vO){QdO'#H]O$:iQ`O'#H_OOQS,5=|,5=|O7YQ`O,5=|OOQS,5>O,5>OOOQS7+)Q7+)QOOQS7+)W7+)WOOQS7+)[7+)[OOQS7+)^7+)^OOQO1G5O1G5OO$:nQMlO1G0gO$:xQ`O1G0gOOQO1G/i1G/iO$;TQMlO1G/iO:aQ`O1G/iOLbQdO'#DcOOQO,5>b,5>bOOQO-E;t-E;tOOQO,5>g,5>gOOQO-E;y-E;yO!-OQ!bO1G/iO:aQ`O,5:iOOQO,5:o,5:oO){QdO,5:oO$;_Q(ChO,5:oO$;jQ(ChO,5:oO!-OQ!bO,5:iOOQO-E;w-E;wOOQ(C[1G0S1G0SO!@XQ7[O,5:iO$;xQ7[O,5:iO$<ZQ(DjO,5:oO$<uQ7[O,5:iO!@XQ7[O,5:oOOQO,5:t,5:tO$<|Q7[O,5:oO$=ZQ(ChO,5:oOOQ(C[7+%k7+%kO#NaQ`O7+%kO#NfQqO7+%kOOQ(C[7+%{7+%{O:aQ`O7+%{O!-OQ!bO7+%{O$=oQ(C|O7+*pO){QdO7+*pOOQO1G4S1G4SO7YQ`O1G4SO$>PQ`O7+*oO$>XQ(C}O1G2[O$@^Q(C}O1G2^O$BcQ(C}O1G1yO$DnQ,VO,5>cOOQO-E;u-E;uO$DxQtO,5>dO){QdO,5>dOOQO-E;v-E;vO$ESQ`O1G5QO$E[QMlO1G0bO$GcQMlO1G0mO$GjQMlO1G0mO$IkQMlO1G0mO$IrQMlO1G0mO$KgQMlO1G0mO$KzQMlO1G0mO$NXQMlO1G0mO$N`QMlO1G0mO%!aQMlO1G0mO%!hQMlO1G0mO%$]QMlO1G0mO%$pQ(C|O<<JTO%%rQMmO1G0mO%'|QMmO'#IqO%)iQMlO1G1QOLbQdO'#F^OOQO'#JX'#JXOOQO1G1b1G1bO%)vQ`O1G1aO%){QMlO,5>kOOOO7+'T7+'TOOOW1G/R1G/ROOQ(C]1G4X1G4XOJjQ&jO7+'zO%*VQ`O,5>lO5tQ`O,5>lOOQO-E<O-E<OO%*eQ`O1G5aO%*eQ`O1G5aO%*mQ`O1G5aO%*xQ,VO7+'eO%+YQqO,5>nO%+dQ`O,5>nOIWQ&jO,5>nOOQO-E<Q-E<QO%+iQqO1G5bO%+sQ`O1G5bOOQ(CW1G2T1G2TO$1qQ`O1G2TOOQ(CW1G2S1G2SO%+{Q`O1G2UOIWQ&jO1G2UOOQ(CW1G2Y1G2YO!-OQ!bO1G2SO#5}Q`O1G2TO%,QQ`O1G2UO%,YQ`O1G2TOJjQ&jO7+*bOOQ(C]1G/W1G/WO%,eQ`O1G/WOOQ(C]7+'`7+'`O%,jQ,VO7+'gO%,zQ(C|O<<JsOOQ(C[<<Js<<JsOIWQ&jO'#IVO%-kQ`O,5?wOOQS<<Kh<<KhOIWQ&jO<<KhO#NaQ`O<<KhO%-sQ`O<<KhO%-{QqO<<KhOIWQ&jO1G2WOOQS<<Gy<<GyO:aQ`O<<GyO%.VQ(C|O<<IhOOQ(C[<<Ih<<IhOOQO,5>w,5>wO%.vQ`O,5>wO%.{Q`O,5>wOOQO-E<Z-E<ZO%/TQ`O1G5iO%/TQ`O1G5iO5tQ`O1G5iO%/]Q`O<<LTOOQS<<LT<<LTO%/bQ`O<<LTO5lQ(ChO<<LTO){QdO<<KhOIWQ&jO<<KhOOQS<<Ko<<KoO$6hQ(CyO<<KoOOQS<<Kp<<KpO$6rQqO<<KpO%/gQ7[O'#IXO%/rQ`O,5?zOLbQdO,5?zOOQS1G2n1G2nO#LaQ(DjO'#ETO!@XQ7[O'#GrOOQO'#IZ'#IZO%/zQ7[O,5=]OOQS,5=],5=]O%0RQ7[O'#ETO%0^Q7[O'#ETO%0uQ7[O'#ETO%1PQ7[O'#GrO%1bQ`O7+(bO%1gQ`O7+(bO%1oQqO7+(bOOQS7+(b7+(bOIWQ&jO7+(bO){QdO7+(bOIWQ&jO7+(bO%1yQaO7+(bOOQS7+(e7+(eO5lQ(ChO7+(eO#6SQ`O7+(eO5bQ`O7+(eO!-OQ!bO7+(eO%2XQ`O,5>vOOQO-E<Y-E<YOOQO'#Gu'#GuO%2dQ`O1G5gO5lQ(ChO<<GpOOQS<<Gp<<GpO%2lQ`O<<GpO%2qQ`O7++UO%2vQ`O7++VOOQS7+(m7+(mO%2{Q`O7+(mO%3QQdO7+(mO%3XQ`O7+(mO){QdO7++UO){QdO7++VOOQS<<La<<LaOOQS<<Lc<<LcOOQS-E<]-E<]OOQS1G3b1G3bO%3^Q`O,5=wOOQS,5=y,5=yO%3cQ`O1G3hOLbQdO7+&ROOQO7+%T7+%TO%3hQMlO1G5XO:aQ`O7+%TOOQO1G0T1G0TO%3rQ(C|O1G0ZOOQO1G0Z1G0ZO){QdO1G0ZO%3|Q(ChO1G0ZO:aQ`O1G0TO!-OQ!bO1G0TO!@XQ7[O1G0TO%4XQ(ChO1G0ZO%4gQ7[O1G0TO%4xQ(ChO1G0ZO%5^Q(DjO1G0ZO%5hQ7[O1G0TO!@XQ7[O1G0ZOOQ(C[<<IV<<IVOOQ(C[<<Ig<<IgO:aQ`O<<IgO%5oQ(C|O<<N[OOQO7+)n7+)nO%6PQ(C}O7+'eO%8[Q(C}O7+'gO%:gQtO1G4OO%:qQMlO7+%|O%;gQMmO,59jO%=hQMmO,5<UO%?lQMmO,5<WO%A[QMmO,5<fO%B}QMlO7+'WO%C[QMlO7+'XO%CiQ`O,5;xOOQO7+&{7+&{O%CnQ,VO<<KfOOQO1G4W1G4WO%CuQ`O1G4WO%DQQ`O1G4WO%D`Q`O7+*{O%D`Q`O7+*{OIWQ&jO1G4YO%DhQqO1G4YO%DrQ`O7+*|OOQ(CW7+'o7+'oO$1qQ`O7+'pO%DzQqO7+'pOOQ(CW7+'n7+'nO$1qQ`O7+'oO%ERQ`O7+'pOIWQ&jO7+'pO#5}Q`O7+'oO%EWQ,VO<<M|OOQ(C]7+$r7+$rO%EbQqO,5>qOOQO-E<T-E<TO#NaQ`OANASOOQSANASANASOIWQ&jOANASO%ElQ(CyO7+'rOOQSAN=eAN=eO5tQ`O1G4cOOQO1G4c1G4cO%E|Q`O1G4cO%FRQ`O7++TO%FRQ`O7++TO5lQ(ChOANAoO%FZQ`OANAoOOQSANAoANAoO%F`Q`OANASO%FhQqOANASOOQSANAZANAZOOQSANA[ANA[O%FrQ`O,5>sOOQO-E<V-E<VO%F}QMlO1G5fO#6SQ`O,5=^O5bQ`O,5=^O!-OQ!bO,5=^OOQO-E<X-E<XOOQS1G2w1G2wO$<ZQ(DjO,5:oO!@XQ7[O,5=^O%GXQ7[O,5=^O%GjQ7[O,5:oOOQS<<K|<<K|OIWQ&jO<<K|O%1bQ`O<<K|O%GtQ`O<<K|O%G|QqO<<K|O){QdO<<K|OIWQ&jO<<K|OOQS<<LP<<LPO5lQ(ChO<<LPO#6SQ`O<<LPO5bQ`O<<LPO%HWQ7[O1G4bO%H`Q`O7++ROOQSAN=[AN=[O5lQ(ChOAN=[OOQS<<Np<<NpOOQS<<Nq<<NqOOQS<<LX<<LXO%HhQ`O<<LXO%HmQdO<<LXO%HtQ`O<<NpO%HyQ`O<<NqOOQS1G3c1G3cO:aQ`O7+)SO%IOQMlO<<ImOOQO<<Ho<<HoOOQO7+%u7+%uO%3rQ(C|O7+%uO){QdO7+%uOOQO7+%o7+%oO:aQ`O7+%oO!-OQ!bO7+%oO%IYQ(ChO7+%uO!@XQ7[O7+%oO%IeQ(ChO7+%uO%IsQ7[O7+%oO%JUQ(ChO7+%uOOQ(C[AN?RAN?RO%JjQMlO<<JTO%JwQMmO1G1yO%MOQMmO1G2[O& SQMmO1G2^O&!rQMlO<<JsO&#PQMlO<<IhOOQO1G1d1G1dOJjQ&jOANAQOOQO7+)r7+)rO&#^Q`O7+)rO&#iQ`O<<NgO&#qQqO7+)tOOQ(CW<<K[<<K[O$1qQ`O<<K[OOQ(CW<<KZ<<KZO&#{QqO<<K[O$1qQ`O<<KZOOQSG26nG26nO#NaQ`OG26nOOQO7+)}7+)}O5tQ`O7+)}O&$SQ`O<<NoOOQSG27ZG27ZO5lQ(ChOG27ZOIWQ&jOG26nOLbQdO1G4_O&$[Q`O7++QO5lQ(ChO1G2xO#6SQ`O1G2xO5bQ`O1G2xO!-OQ!bO1G2xO!@XQ7[O1G2xO%5^Q(DjO1G0ZO&$dQ7[O1G2xO%1bQ`OANAhOOQSANAhANAhOIWQ&jOANAhO&$uQ`OANAhO&$}QqOANAhOOQSANAkANAkO5lQ(ChOANAkO#6SQ`OANAkOOQO'#Gv'#GvOOQO7+)|7+)|OOQSG22vG22vOOQSANAsANAsO&%XQ`OANAsOOQSAND[AND[OOQSAND]AND]OOQS<<Ln<<LnOOQO<<Ia<<IaO%3rQ(C|O<<IaOOQO<<IZ<<IZO:aQ`O<<IZO){QdO<<IaO!-OQ!bO<<IZO&%^Q(ChO<<IaO!@XQ7[O<<IZO&%iQ(ChO<<IaO&%wQMmO7+'eO&'jQMmO7+'gO&)]Q,VOG26lOOQO<<M^<<M^OOQ(CWAN@vAN@vO$1qQ`OAN@vOOQ(CWAN@uAN@uOOQSLD,YLD,YOOQO<<Mi<<MiOOQSLD,uLD,uO#NaQ`OLD,YO&)mQMlO7+)yOOQO7+(d7+(dO5lQ(ChO7+(dO#6SQ`O7+(dO5bQ`O7+(dO!-OQ!bO7+(dO!@XQ7[O7+(dOOQSG27SG27SO%1bQ`OG27SOIWQ&jOG27SOOQSG27VG27VO5lQ(ChOG27VOOQSG27_G27_OOQOAN>{AN>{OOQOAN>uAN>uO%3rQ(C|OAN>{O:aQ`OAN>uO){QdOAN>{O!-OQ!bOAN>uO&)wQ(ChOAN>{O&*SQ(C}OG26lOOQ(CWG26bG26bOOQS!$( t!$( tOOQO<<LO<<LOO5lQ(ChO<<LOO#6SQ`O<<LOO5bQ`O<<LOO!-OQ!bO<<LOOOQSLD,nLD,nO%1bQ`OLD,nOOQSLD,qLD,qOOQOG24gG24gOOQOG24aG24aO%3rQ(C|OG24gO:aQ`OG24aO){QdOG24gO&,pQ!LRO,5:rO&-gQ$ITO'#IqOOQOANAjANAjO5lQ(ChOANAjO#6SQ`OANAjO5bQ`OANAjOOQS!$(!Y!$(!YOOQOLD*RLD*ROOQOLD){LD){O%3rQ(C|OLD*RO&.ZQMmOG26lO&/|Q!LRO,59jO&0pQ!LRO,5<UO&1dQ!LRO,5<WO&2WQ!LRO,5<fOOQOG27UG27UO5lQ(ChOG27UO#6SQ`OG27UOOQO!$'Mm!$'MmO&2}Q!LRO1G2[O&3qQ!LRO1G2^O&4eQ!LRO1G1yOOQOLD,pLD,pO5lQ(ChOLD,pO&5[Q!LRO7+'eO&6RQ!LRO7+'gOOQO!$(![!$(![O&6xQ!LROG26lOLbQdO'#DrO&7oQtO'#ItOLbQdO'#DjO&7vQ(C|O'#ChO&8aQtO'#ChO&8qQdO,5:vO&:qQ&jO'#EWOLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO,5;ROLbQdO'#IPO&<OQ`O,5<TO&=eQ&jO,5;ROLbQdO,5;fO!(wQ`O'#DOO!(wQ`O'#DOO!(wQ`O'#DOOIWQ&jO'#FjO&:qQ&jO'#FjO&<WQ&jO'#FjOIWQ&jO'#FlO&:qQ&jO'#FlO&<WQ&jO'#FlOIWQ&jO'#FzO&:qQ&jO'#FzO&<WQ&jO'#FzOLbQdO,5?mO&8qQdO1G0bO&=lQMlO'#ChOLbQdO1G1lOIWQ&jO,5<pO&:qQ&jO,5<pO&<WQ&jO,5<pOIWQ&jO,5<rO&:qQ&jO,5<rO&<WQ&jO,5<rOIWQ&jO,5<_O&:qQ&jO,5<_O&<WQ&jO,5<_O&8qQdO1G1mOLbQdO7+&iOIWQ&jO1G1yO&:qQ&jO1G1yO&<WQ&jO1G1yOIWQ&jO1G1{O&:qQ&jO1G1{O&<WQ&jO1G1{O&8qQdO7+'XO&8qQdO7+%|O&=vQ`O7+'pOIWQ&jOANAQO&:qQ&jOANAQO&<WQ&jOANAQO&=vQ`O<<K[O&=vQ`OAN@vO&={Q`O'#E[O&>QQ`O'#E[O&>YQ`O'#EzO&>_Q`O'#EgO&>dQ`O'#JRO&>oQ`O'#JPO&>zQ`O,5:vO&?PQ,VO,5<QO&?WQ`O'#FsO&?]Q`O'#FsO&?bQ`O'#FsO&?gQ`O,5<RO&?oQ`O,5:vO&?wQMlO1G0}O&@OQ`O,5<_O&@TQ`O,5<_O&@YQ`O,5<_O&@_Q`O,5<aO&@dQ`O,5<aO&@iQ`O,5<aO&@nQ`O1G1mO&@sQ`O1G0bO&@xQ`O1G2UO&@}Q,VO<<KfO&AUQ,VO<<KfO&A]Q,VO<<KfO&AdQqO7+'pO&AkQ`O7+'pO&ApQqO<<K[O4QQ&jO'#FhO5bQ`O'#FgOBzQ`O'#EZOLbQdO,5;cO!&WQ`O'#FsO!&WQ`O'#FsO!&WQ`O'#FsO!&WQ`O'#FuO!&WQ`O'#FuO!&WQ`O'#FuO&AwQ`O,5<jOJjQ&jO7+'zOJjQ&jO7+'zOJjQ&jO7+'zOIWQ&jO1G2UO&BPQ`O1G2UOIWQ&jO7+'pO!'VQ7[O'#GOO$/eQqO1G2`O$/eQqO1G2`O$/eQqO1G2`O!'VQ7[O,5<jOIWQ&jO,5<tOIWQ&jO,5<tOIWQ&jO,5<t",
      stateData: "&B}~O'YOS'ZOSTOSUOS~OQTORTOXyO]cO_hObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#dsO#tpO#x^O%PqO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO%axO%nzO%t{O%v|O%x}O%z!OO%}!PO&T!QO&Z!RO&]!SO&_!TO&a!UO&c!VO']PO'fQO'oYO'|aO~OQ[XZ[X_[Xj[Xu[Xv[Xx[X!R[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'W[X'f[X'p[X'w[X'x[X~O!]$lX~P$zOS!WO'U!XO'V!ZO~OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']![O'fQO'oYO'|aO~O!Q!`O!R!]O!O'jP!O'tP~P'dO!S!mO~P`OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9aO'fQO'oYO'|aO~OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!T!bO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O'fQO'oYO'|aO~O!Q!rO#U!uO#V!rO']9bO!c'qP~P+{O#W!vO~O!]!wO#W!vO~OQ#^OZ#dOj#ROu!{Ov!{Ox!|O!R#bO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_'hX'W'hX!c'hX!O'hX!T'hX%Q'hX!]'hX~P.jO!{#eO#o#eOQ'iXZ'iX_'iXj'iXu'iXv'iXx'iX!R'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX~O#c'iX'W'iX!O'iX!c'iXn'iX!T'iX%Q'iX!]'iX~P0zO!{#eO~O#z#fO$R#jO~O!T#kO#x^O$U#lO$W#nO~O]#qOh$QOj#rOk#qOl#qOq$ROs$SOx#yO!T#zO!_$XO!d#vO#V$YO#t$VO$_$TO$a$UO$d$WO']#pO'b$PO'f#sO'a'cP~O!d$ZO~O!]$]O~O_$^O'W$^O~O']$bO~O!d$ZO']$bO'^$dO'b$PO~Oc$jO!d$ZO']$bO~O#c#TO~O]$sOu$oO!T$lO!d$nO%R$rO']$bO'^$dO^(UP~O!n$tO~Ox$uO!T$vO']$bO~Ox$uO!T$vO%Z$zO']$bO~O']${O~O#dsO%RtO%TrO%UrO%XuO%ZvO%^wO%_wO~Ob%UOc%TO!n%RO%P%SO%c%QO~P7xOb%XOcmO!T%WO!nlO#dsO%PqO%TrO%UrO%XuO%ZvO%^wO%_wO%axO~O`%[O!{%_O%R%YO'^$dO~P8wO!d%`O!g%dO~O!d%eO~O!TSO~O_$^O'T%mO'W$^O~O_$^O'T%pO'W$^O~O_$^O'T%rO'W$^O~OS!WO'U!XO'V%vO~OQ[XZ[Xj[Xu[Xv[Xx[X!R[X!RdX!a[X!b[X!d[X!j[X!{[X!{dX#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X~O!O[X!OdX~P;dO!Q%xO!O&iX!O&nX!R&iX!R&nX~P'dO!R%zO!O'jX~OQ#^OZ#dOj#ROu!{Ov!{Ox!|O!R%zO!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O!O'jX~P>aO!O&PO~Ox&SO!W&^O!X&VO!Y&VO'^$dO~O]&TOk&TO!Q&WO'g&QO!S'kP!S'vP~P@dO!O'sX!R'sX!]'sX!c'sX'p'sX~O!{'sX#W#PX!S'sX~PA]O!{&_O!O'uX!R'uX~O!R&`O!O'tX~O!O&cO~O!{#eO~PA]OP&gO!T&dO!o&fO']$bO~Oc&lO!d$ZO']$bO~Ou$oO!d$nO~O!S&mO~P`Ou!{Ov!{Ox!|O!b!yO!d!zO'fQOQ!faZ!faj!fa!R!fa!a!fa!j!fa#[!fa#]!fa#^!fa#_!fa#`!fa#a!fa#b!fa#c!fa#e!fa#g!fa#i!fa#j!fa'p!fa'w!fa'x!fa~O_!fa'W!fa!O!fa!c!fan!fa!T!fa%Q!fa!]!fa~PCfO!c&nO~O!]!wO!{&pO'p&oO!R'rX_'rX'W'rX~O!c'rX~PFOO!R&tO!c'qX~O!c&vO~Ox$uO!T$vO#V&wO']$bO~OQTORTO]cOb!kOc!jOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!TSO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!n!iO#t!lO#x^O']9aO'fQO'oYO'|aO~O]#qOh$QOj#rOk#qOl#qOq$ROs9tOx#yO!T#zO!_;eO!d#vO#V9}O#t$VO$_9wO$a9zO$d$WO']&{O'b$PO'f#sO~O#W&}O~O]#qOh$QOj#rOk#qOl#qOq$ROs$SOx#yO!T#zO!_$XO!d#vO#V$YO#t$VO$_$TO$a$UO$d$WO']&{O'b$PO'f#sO~O'a'mP~PJjO!Q'RO!c'nP~P){O'g'TO'oYO~OQ9^OR9^O]cOb;`Oc!jOhcOj9^OkcOlcOq9^Os9^OxRO{cO|cO}cO!T!bO!_9`O!dUO!g9^O!h9^O!i9^O!j9^O!k9^O!n!iO#t!lO#x^O']'cO'fQO'oYO'|;^O~O!d!zO~O!R#bO_$]a'W$]a!c$]a!O$]a!T$]a%Q$]a!]$]a~O#d'jO~PIWO!]'lO!T'yX#w'yX#z'yX$R'yX~Ou'mO~P! YOu'mO!T'yX#w'yX#z'yX$R'yX~O!T'oO#w'sO#z'nO$R'tO~O!Q'wO~PLbO#z#fO$R'zO~OP$eXu$eXx$eX!b$eX'w$eX'x$eX~OPfX!RfX!{fX'afX'a$eX~P!!rOk'|O~OS'}O'U(OO'V(QO~OP(ZOu(SOx(TO'w(VO'x(XO~O'a(RO~P!#{O'a([O~O]#qOh$QOj#rOk#qOl#qOq$ROs9tOx#yO!T#zO!_;eO!d#vO#V9}O#t$VO$_9wO$a9zO$d$WO'b$PO'f#sO~O!Q(`O'](]O!c'}P~P!$jO#W(bO~O!d(cO~O!Q(hO'](eO!O(OP~P!$jOj(uOx(mO!W(sO!X(lO!Y(lO!d(cO!x(tO$w(oO'^$dO'g(jO~O!S(rO~P!&jO!b!yOP'eXu'eXx'eX'w'eX'x'eX!R'eX!{'eX~O'a'eX#m'eX~P!'cOP(xO!{(wO!R'dX'a'dX~O!R(yO'a'cX~O']${O'a'cP~O'](|O~O!d)RO~O']&{O~Ox$uO!Q!rO!T$vO#U!uO#V!rO']$bO!c'qP~O!]!wO#W)VO~OQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO#j#ZO'fQO'p#[O'w!}O'x#OO~O_!^a!R!^a'W!^a!O!^a!c!^an!^a!T!^a%Q!^a!]!^a~P!)wOP)_O!T&dO!o)^O%Q)]O'b$PO~O!])aO!T'`X_'`X!R'`X'W'`X~O!d$ZO'b$PO~O!d$ZO']$bO'b$PO~O!]!wO#W&}O~O])lO%R)mO'])iO!S(VP~O!R)nO^(UX~O'g'TO~OZ)rO~O^)sO~O!T$lO']$bO'^$dO^(UP~Ox$uO!Q)xO!R&`O!T$vO']$bO!O'tP~O]&ZOk&ZO!Q)yO'g'TO!S'vP~O!R)zO_(RX'W(RX~O!{*OO'b$PO~OP*RO!T#zO'b$PO~O!T*TO~Ou*VO!TSO~O!n*[O~Oc*aO~O'](|O!S(TP~Oc$jO~O%RtO']${O~P8wOZ*gO^*fO~OQTORTO]cObnOcmOhcOjTOkcOlcOqTOsTOxRO{cO|cO}cO!_kO!dUO!gTO!hTO!iTO!jTO!kTO!nlO#x^O%PqO'fQO'oYO'|aO~O!T!bO#t!lO']9aO~P!1_O^*fO_$^O'W$^O~O_*kO#d*mO%T*mO%U*mO~P){O!d%`O~O%t*rO~O!T*tO~O&V*vO&X*wOQ&SaR&SaX&Sa]&Sa_&Sab&Sac&Sah&Saj&Sak&Sal&Saq&Sas&Sax&Sa{&Sa|&Sa}&Sa!T&Sa!_&Sa!d&Sa!g&Sa!h&Sa!i&Sa!j&Sa!k&Sa!n&Sa#d&Sa#t&Sa#x&Sa%P&Sa%R&Sa%T&Sa%U&Sa%X&Sa%Z&Sa%^&Sa%_&Sa%a&Sa%n&Sa%t&Sa%v&Sa%x&Sa%z&Sa%}&Sa&T&Sa&Z&Sa&]&Sa&_&Sa&a&Sa&c&Sa'S&Sa']&Sa'f&Sa'o&Sa'|&Sa!S&Sa%{&Sa`&Sa&Q&Sa~O']*|O~On+PO~O!O&ia!R&ia~P!)wO!Q+TO!O&iX!R&iX~P){O!R%zO!O'ja~O!O'ja~P>aO!R&`O!O'ta~O!RwX!R!ZX!SwX!S!ZX!]wX!]!ZX!d!ZX!{wX'b!ZX~O!]+YO!{+XO!R#TX!R'lX!S#TX!S'lX!]'lX!d'lX'b'lX~O!]+[O!d$ZO'b$PO!R!VX!S!VX~O]&ROk&ROx&SO'g(jO~OQ9^OR9^O]cOb;`Oc!jOhcOj9^OkcOlcOq9^Os9^OxRO{cO|cO}cO!T!bO!_9`O!dUO!g9^O!h9^O!i9^O!j9^O!k9^O!n!iO#t!lO#x^O'fQO'oYO'|;^O~O']:SO~P!;jO!R+`O!S'kX~O!S+bO~O!]+YO!{+XO!R#TX!S#TX~O!R+cO!S'vX~O!S+eO~O]&ROk&ROx&SO'^$dO'g(jO~O!X+fO!Y+fO~P!>hOx$uO!Q+hO!T$vO']$bO!O&nX!R&nX~O_+lO!W+oO!X+kO!Y+kO!r+sO!s+qO!t+rO!u+pO!x+tO'^$dO'g(jO'o+iO~O!S+nO~P!?iOP+yO!T&dO!o+xO~O!{,PO!R'ra!c'ra_'ra'W'ra~O!]!wO~P!@sO!R&tO!c'qa~Ox$uO!Q,SO!T$vO#U,UO#V,SO']$bO!R&pX!c&pX~O_#Oi!R#Oi'W#Oi!O#Oi!c#Oin#Oi!T#Oi%Q#Oi!]#Oi~P!)wOP;tOu(SOx(TO'w(VO'x(XO~O#W!za!R!za!c!za!{!za!T!za_!za'W!za!O!za~P!BpO#W'eXQ'eXZ'eX_'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX'W'eX'f'eX'p'eX!c'eX!O'eX!T'eXn'eX%Q'eX!]'eX~P!'cO!R,_O'a'mX~P!#{O'a,aO~O!R,bO!c'nX~P!)wO!c,eO~O!O,fO~OQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zi_#Zij#Zi!R#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O#[#Zi~P!FfO#[#PO~P!FfOQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO'fQOZ#Zi_#Zi!R#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~Oj#Zi~P!IQOj#RO~P!IQOQ#^Oj#ROu!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO'fQO_#Zi!R#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'w#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P!KlOZ#dO!a#TO#a#TO#b#TO#c#TO~P!KlOQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO'fQO_#Zi!R#Zi#g#Zi#i#Zi#j#Zi'W#Zi'p#Zi'x#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'w#Zi~P!NdO'w!}O~P!NdOQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO'fQO'w!}O_#Zi!R#Zi#i#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~O'x#Zi~P##OO'x#OO~P##OOQ#^OZ#dOj#ROu!{Ov!{Ox!|O!a#TO!b!yO!d!zO!j#^O#[#PO#]#QO#^#QO#_#QO#`#SO#a#TO#b#TO#c#TO#e#UO#g#WO#i#YO'fQO'w!}O'x#OO~O_#Zi!R#Zi#j#Zi'W#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P#%jOQ[XZ[Xj[Xu[Xv[Xx[X!a[X!b[X!d[X!j[X!{[X#WdX#[[X#][X#^[X#_[X#`[X#a[X#b[X#c[X#e[X#g[X#i[X#j[X#o[X'f[X'p[X'w[X'x[X!R[X!S[X~O#m[X~P#'}OQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO#g9lO#i9nO#j9oO'fQO'p#[O'w!}O'x#OO~O#m,hO~P#*XOQ'iXZ'iXj'iXu'iXv'iXx'iX!a'iX!b'iX!d'iX!j'iX#['iX#]'iX#^'iX#_'iX#`'iX#a'iX#b'iX#e'iX#g'iX#i'iX#j'iX'f'iX'p'iX'w'iX'x'iX!R'iX~O!{9sO#o9sO#c'iX#m'iX!S'iX~P#,SO_&sa!R&sa'W&sa!c&san&sa!O&sa!T&sa%Q&sa!]&sa~P!)wOQ#ZiZ#Zi_#Zij#Ziv#Zi!R#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi'W#Zi'f#Zi'p#Zi!O#Zi!c#Zin#Zi!T#Zi%Q#Zi!]#Zi~P!BpO_#ni!R#ni'W#ni!O#ni!c#nin#ni!T#ni%Q#ni!]#ni~P!)wO#z,jO~O#z,kO~O!]'lO!{,lO!T$OX#w$OX#z$OX$R$OX~O!Q,mO~O!T'oO#w,oO#z'nO$R,pO~O!R9pO!S'hX~P#*XO!S,qO~O$R,sO~OS'}O'U(OO'V,vO~O],yOk,yO!O,zO~O!RdX!]dX!cdX!c$eX'pdX~P!!rO!c-QO~P!BpO!R-RO!]!wO'p&oO!c'}X~O!c-WO~O!Q(`O']$bO!c'}P~O#W-YO~O!O$eX!R$eX!]$lX~P!!rO!R-ZO!O(OX~P!BpO!]-]O~O!O-_O~Oj-cO!]!wO!d$ZO'b$PO'p&oO~O!])aO~O_$^O!R-hO'W$^O~O!S-jO~P!&jO!X-kO!Y-kO'^$dO'g(jO~Ox-mO'g(jO~O!x-nO~O']${O!R&xX'a&xX~O!R(yO'a'ca~O'a-sO~Ou-tOv-tOx-uOPra'wra'xra!Rra!{ra~O'ara#mra~P#7pOu(SOx(TOP$^a'w$^a'x$^a!R$^a!{$^a~O'a$^a#m$^a~P#8fOu(SOx(TOP$`a'w$`a'x$`a!R$`a!{$`a~O'a$`a#m$`a~P#9XO]-vO~O#W-wO~O'a$na!R$na!{$na#m$na~P!#{O#W-zO~OP.TO!T&dO!o.SO%Q.RO~O]#qOj#rOk#qOl#qOq$ROs9tOx#yO!T#zO!_;eO!d#vO#V9}O#t$VO$_9wO$a9zO$d$WO'b$PO'f#sO~Oh.VO'].UO~P#:yO!])aO!T'`a_'`a!R'`a'W'`a~O#W.]O~OZ[X!RdX!SdX~O!R.^O!S(VX~O!S.`O~OZ.aO~O].cO'])iO~O!T$lO']$bO^'QX!R'QX~O!R)nO^(Ua~O!c.fO~P!)wO].hO~OZ.iO~O^.jO~OP.TO!T&dO!o.SO%Q.RO'b$PO~O!R)zO_(Ra'W(Ra~O!{.pO~OP.sO!T#zO~O'g'TO!S(SP~OP.}O!T.yO!o.|O%Q.{O'b$PO~OZ/XO!R/VO!S(TX~O!S/YO~O^/[O_$^O'W$^O~O]/]O~O]/^O'](|O~O#c/_O%r/`O~P0zO!{#eO#c/_O%r/`O~O_/aO~P){O_/cO~O%{/gOQ%yiR%yiX%yi]%yi_%yib%yic%yih%yij%yik%yil%yiq%yis%yix%yi{%yi|%yi}%yi!T%yi!_%yi!d%yi!g%yi!h%yi!i%yi!j%yi!k%yi!n%yi#d%yi#t%yi#x%yi%P%yi%R%yi%T%yi%U%yi%X%yi%Z%yi%^%yi%_%yi%a%yi%n%yi%t%yi%v%yi%x%yi%z%yi%}%yi&T%yi&Z%yi&]%yi&_%yi&a%yi&c%yi'S%yi']%yi'f%yi'o%yi'|%yi!S%yi`%yi&Q%yi~O`/mO!S/kO&Q/lO~P`O!TSO!d/oO~O&X*wOQ&SiR&SiX&Si]&Si_&Sib&Sic&Sih&Sij&Sik&Sil&Siq&Sis&Six&Si{&Si|&Si}&Si!T&Si!_&Si!d&Si!g&Si!h&Si!i&Si!j&Si!k&Si!n&Si#d&Si#t&Si#x&Si%P&Si%R&Si%T&Si%U&Si%X&Si%Z&Si%^&Si%_&Si%a&Si%n&Si%t&Si%v&Si%x&Si%z&Si%}&Si&T&Si&Z&Si&]&Si&_&Si&a&Si&c&Si'S&Si']&Si'f&Si'o&Si'|&Si!S&Si%{&Si`&Si&Q&Si~O!R#bOn$]a~O!O&ii!R&ii~P!)wO!R%zO!O'ji~O!R&`O!O'ti~O!O/uO~O!R!Va!S!Va~P#*XO]&ROk&RO!Q/{O'g(jO!R&jX!S&jX~P@dO!R+`O!S'ka~O]&ZOk&ZO!Q)yO'g'TO!R&oX!S&oX~O!R+cO!S'va~O!O'ui!R'ui~P!)wO_$^O!]!wO!d$ZO!j0VO!{0TO'W$^O'b$PO'p&oO~O!S0YO~P!?iO!X0ZO!Y0ZO'^$dO'g(jO'o+iO~O!W0[O~P#MSO!TSO!W0[O!u0^O!x0_O~P#MSO!W0[O!s0aO!t0aO!u0^O!x0_O~P#MSO!T&dO~O!T&dO~P!BpO!R'ri!c'ri_'ri'W'ri~P!)wO!{0jO!R'ri!c'ri_'ri'W'ri~O!R&tO!c'qi~Ox$uO!T$vO#V0lO']$bO~O#WraQraZra_rajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra'Wra'fra'pra!cra!Ora!Tranra%Qra!]ra~P#7pO#W$^aQ$^aZ$^a_$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a'W$^a'f$^a'p$^a!c$^a!O$^a!T$^an$^a%Q$^a!]$^a~P#8fO#W$`aQ$`aZ$`a_$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a'W$`a'f$`a'p$`a!c$`a!O$`a!T$`an$`a%Q$`a!]$`a~P#9XO#W$naQ$naZ$na_$naj$nav$na!R$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na'W$na'f$na'p$na!c$na!O$na!T$na!{$nan$na%Q$na!]$na~P!BpO_#Oq!R#Oq'W#Oq!O#Oq!c#Oqn#Oq!T#Oq%Q#Oq!]#Oq~P!)wO!R&kX'a&kX~PJjO!R,_O'a'ma~O!Q0tO!R&lX!c&lX~P){O!R,bO!c'na~O!R,bO!c'na~P!)wO#m!fa!S!fa~PCfO#m!^a!R!^a!S!^a~P#*XO!T1XO#x^O$P1YO~O!S1^O~On1_O~P!BpO_$Yq!R$Yq'W$Yq!O$Yq!c$Yqn$Yq!T$Yq%Q$Yq!]$Yq~P!)wO!O1`O~O],yOk,yO~Ou(SOx(TO'x(XOP$xi'w$xi!R$xi!{$xi~O'a$xi#m$xi~P$.POu(SOx(TOP$zi'w$zi'x$zi!R$zi!{$zi~O'a$zi#m$zi~P$.rO'p#[O~P!BpO!Q1cO']$bO!R&tX!c&tX~O!R-RO!c'}a~O!R-RO!]!wO!c'}a~O!R-RO!]!wO'p&oO!c'}a~O'a$gi!R$gi!{$gi#m$gi~P!#{O!Q1kO'](eO!O&vX!R&vX~P!$jO!R-ZO!O(Oa~O!R-ZO!O(Oa~P!BpO!]!wO~O!]!wO#c1sO~Oj1vO!]!wO'p&oO~O!R'di'a'di~P!#{O!{1yO!R'di'a'di~P!#{O!c1|O~O_$Zq!R$Zq'W$Zq!O$Zq!c$Zqn$Zq!T$Zq%Q$Zq!]$Zq~P!)wO!R2QO!T(PX~P!BpO!T&dO%Q2TO~O!T&dO%Q2TO~P!BpO!T$eX$u[X_$eX!R$eX'W$eX~P!!rO$u2XOPgXugXxgX!TgX'wgX'xgX_gX!RgX'WgX~O$u2XO~O]2_O%R2`O'])iO!R'PX!S'PX~O!R.^O!S(Va~OZ2dO~O^2eO~O]2hO~OP2jO!T&dO!o2iO%Q2TO~O_$^O'W$^O~P!BpO!T#zO~P!BpO!R2oO!{2qO!S(SX~O!S2rO~Ox;oO!W2{O!X2tO!Y2tO!r2zO!s2yO!t2yO!x2xO'^$dO'g(jO'o+iO~O!S2wO~P$7ZOP3SO!T.yO!o3RO%Q3QO~OP3SO!T.yO!o3RO%Q3QO'b$PO~O'](|O!R'OX!S'OX~O!R/VO!S(Ta~O]3^O'g3]O~O]3_O~O^3aO~O!c3dO~P){O_3fO~O_3fO~P){O#c3hO%r3iO~PFOO`/mO!S3mO&Q/lO~P`O!]3oO~O!R#Ti!S#Ti~P#*XO!{3qO!R#Ti!S#Ti~O!R!Vi!S!Vi~P#*XO_$^O!{3xO'W$^O~O_$^O!]!wO!{3xO'W$^O~O!X3|O!Y3|O'^$dO'g(jO'o+iO~O_$^O!]!wO!d$ZO!j3}O!{3xO'W$^O'b$PO'p&oO~O!W4OO~P$;xO!W4OO!u4RO!x4SO~P$;xO_$^O!]!wO!j3}O!{3xO'W$^O'p&oO~O!R'rq!c'rq_'rq'W'rq~P!)wO!R&tO!c'qq~O#W$xiQ$xiZ$xi_$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi'W$xi'f$xi'p$xi!c$xi!O$xi!T$xin$xi%Q$xi!]$xi~P$.PO#W$ziQ$ziZ$zi_$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi'W$zi'f$zi'p$zi!c$zi!O$zi!T$zin$zi%Q$zi!]$zi~P$.rO#W$giQ$giZ$gi_$gij$giv$gi!R$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi'W$gi'f$gi'p$gi!c$gi!O$gi!T$gi!{$gin$gi%Q$gi!]$gi~P!BpO!R&ka'a&ka~P!#{O!R&la!c&la~P!)wO!R,bO!c'ni~O#m#Oi!R#Oi!S#Oi~P#*XOQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O'fQOZ#Zij#Zi!a#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~O#[#Zi~P$EiO#[9eO~P$EiOQ#^Ou!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO'fQOZ#Zi!a#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~Oj#Zi~P$GqOj9gO~P$GqOQ#^Oj9gOu!{Ov!{Ox!|O!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO'fQO#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'w#Zi'x#Zi!R#Zi!S#Zi~OZ#Zi!a#Zi#a#Zi#b#Zi#c#Zi~P$IyOZ9rO!a9iO#a9iO#b9iO#c9iO~P$IyOQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO'fQO#g#Zi#i#Zi#j#Zi#m#Zi'p#Zi'x#Zi!R#Zi!S#Zi~O'w#Zi~P$L_O'w!}O~P$L_OQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO#g9lO'fQO'w!}O#i#Zi#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~O'x#Zi~P$NgO'x#OO~P$NgOQ#^OZ9rOj9gOu!{Ov!{Ox!|O!a9iO!b!yO!d!zO!j#^O#[9eO#]9fO#^9fO#_9fO#`9hO#a9iO#b9iO#c9iO#e9jO#g9lO#i9nO'fQO'w!}O'x#OO~O#j#Zi#m#Zi'p#Zi!R#Zi!S#Zi~P%!oO_#ky!R#ky'W#ky!O#ky!c#kyn#ky!T#ky%Q#ky!]#ky~P!)wOP;vOu(SOx(TO'w(VO'x(XO~OQ#ZiZ#Zij#Ziv#Zi!a#Zi!b#Zi!d#Zi!j#Zi#[#Zi#]#Zi#^#Zi#_#Zi#`#Zi#a#Zi#b#Zi#c#Zi#e#Zi#g#Zi#i#Zi#j#Zi#m#Zi'f#Zi'p#Zi!R#Zi!S#Zi~P%%aO!b!yOP'eXu'eXx'eX'w'eX'x'eX!S'eX~OQ'eXZ'eXj'eXv'eX!a'eX!d'eX!j'eX#['eX#]'eX#^'eX#_'eX#`'eX#a'eX#b'eX#c'eX#e'eX#g'eX#i'eX#j'eX#m'eX'f'eX'p'eX!R'eX~P%'eO#m#ni!R#ni!S#ni~P#*XO!S4eO~O!R&sa!S&sa~P#*XO!]!wO'p&oO!R&ta!c&ta~O!R-RO!c'}i~O!R-RO!]!wO!c'}i~O'a$gq!R$gq!{$gq#m$gq~P!#{O!O&va!R&va~P!BpO!]4lO~O!R-ZO!O(Oi~P!BpO!R-ZO!O(Oi~O!O4pO~O!]!wO#c4uO~Oj4vO!]!wO'p&oO~O!O4xO~O'a$iq!R$iq!{$iq#m$iq~P!#{O_$Zy!R$Zy'W$Zy!O$Zy!c$Zyn$Zy!T$Zy%Q$Zy!]$Zy~P!)wO!R2QO!T(Pa~O!T&dO%Q4}O~O!T&dO%Q4}O~P!BpO_#Oy!R#Oy'W#Oy!O#Oy!c#Oyn#Oy!T#Oy%Q#Oy!]#Oy~P!)wOZ5QO~O]5SO'])iO~O!R.^O!S(Vi~O]5VO~O^5WO~O'g'TO!R&{X!S&{X~O!R2oO!S(Sa~O!S5eO~P$7ZOx;sO'g(jO'o+iO~O!W5hO!X5gO!Y5gO!x0_O'^$dO'g(jO'o+iO~O!s5iO!t5iO~P%0^O!X5gO!Y5gO'^$dO'g(jO'o+iO~O!T.yO~O!T.yO%Q5kO~O!T.yO%Q5kO~P!BpOP5pO!T.yO!o5oO%Q5kO~OZ5uO!R'Oa!S'Oa~O!R/VO!S(Ti~O]5xO~O!c5yO~O!c5zO~O!c5{O~O!c5{O~P){O_5}O~O!]6QO~O!c6RO~O!R'ui!S'ui~P#*XO_$^O'W$^O~P!)wO_$^O!{6WO'W$^O~O_$^O!]!wO!{6WO'W$^O~O!X6]O!Y6]O'^$dO'g(jO'o+iO~O_$^O!]!wO!j6^O!{6WO'W$^O'p&oO~O!d$ZO'b$PO~P%4xO!W6_O~P%4gO!R'ry!c'ry_'ry'W'ry~P!)wO#W$gqQ$gqZ$gq_$gqj$gqv$gq!R$gq!a$gq!b$gq!d$gq!j$gq#[$gq#]$gq#^$gq#_$gq#`$gq#a$gq#b$gq#c$gq#e$gq#g$gq#i$gq#j$gq'W$gq'f$gq'p$gq!c$gq!O$gq!T$gq!{$gqn$gq%Q$gq!]$gq~P!BpO#W$iqQ$iqZ$iq_$iqj$iqv$iq!R$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq'W$iq'f$iq'p$iq!c$iq!O$iq!T$iq!{$iqn$iq%Q$iq!]$iq~P!BpO!R&li!c&li~P!)wO#m#Oq!R#Oq!S#Oq~P#*XOu-tOv-tOx-uOPra'wra'xra!Sra~OQraZrajra!ara!bra!dra!jra#[ra#]ra#^ra#_ra#`ra#ara#bra#cra#era#gra#ira#jra#mra'fra'pra!Rra~P%;OOu(SOx(TOP$^a'w$^a'x$^a!S$^a~OQ$^aZ$^aj$^av$^a!a$^a!b$^a!d$^a!j$^a#[$^a#]$^a#^$^a#_$^a#`$^a#a$^a#b$^a#c$^a#e$^a#g$^a#i$^a#j$^a#m$^a'f$^a'p$^a!R$^a~P%=SOu(SOx(TOP$`a'w$`a'x$`a!S$`a~OQ$`aZ$`aj$`av$`a!a$`a!b$`a!d$`a!j$`a#[$`a#]$`a#^$`a#_$`a#`$`a#a$`a#b$`a#c$`a#e$`a#g$`a#i$`a#j$`a#m$`a'f$`a'p$`a!R$`a~P%?WOQ$naZ$naj$nav$na!a$na!b$na!d$na!j$na#[$na#]$na#^$na#_$na#`$na#a$na#b$na#c$na#e$na#g$na#i$na#j$na#m$na'f$na'p$na!R$na!S$na~P%%aO#m$Yq!R$Yq!S$Yq~P#*XO#m$Zq!R$Zq!S$Zq~P#*XO!S6hO~O#m6iO~P!#{O!]!wO!R&ti!c&ti~O!]!wO'p&oO!R&ti!c&ti~O!R-RO!c'}q~O!O&vi!R&vi~P!BpO!R-ZO!O(Oq~O!O6oO~P!BpO!O6oO~O!R'dy'a'dy~P!#{O!R&ya!T&ya~P!BpO!T$tq_$tq!R$tq'W$tq~P!BpOZ6vO~O!R.^O!S(Vq~O]6yO~O!T&dO%Q6zO~O!T&dO%Q6zO~P!BpO!{6{O!R&{a!S&{a~O!R2oO!S(Si~P#*XO!X7RO!Y7RO'^$dO'g(jO'o+iO~O!W7TO!x4SO~P%GXO!T.yO%Q7WO~O!T.yO%Q7WO~P!BpO]7_O'g7^O~O!R/VO!S(Tq~O!c7aO~O!c7aO~P){O!c7cO~O!c7dO~O!R#Ty!S#Ty~P#*XO_$^O!{7jO'W$^O~O_$^O!]!wO!{7jO'W$^O~O!X7mO!Y7mO'^$dO'g(jO'o+iO~O_$^O!]!wO!j7nO!{7jO'W$^O'p&oO~O#m#ky!R#ky!S#ky~P#*XOQ$giZ$gij$giv$gi!a$gi!b$gi!d$gi!j$gi#[$gi#]$gi#^$gi#_$gi#`$gi#a$gi#b$gi#c$gi#e$gi#g$gi#i$gi#j$gi#m$gi'f$gi'p$gi!R$gi!S$gi~P%%aOu(SOx(TO'x(XOP$xi'w$xi!S$xi~OQ$xiZ$xij$xiv$xi!a$xi!b$xi!d$xi!j$xi#[$xi#]$xi#^$xi#_$xi#`$xi#a$xi#b$xi#c$xi#e$xi#g$xi#i$xi#j$xi#m$xi'f$xi'p$xi!R$xi~P%LjOu(SOx(TOP$zi'w$zi'x$zi!S$zi~OQ$ziZ$zij$ziv$zi!a$zi!b$zi!d$zi!j$zi#[$zi#]$zi#^$zi#_$zi#`$zi#a$zi#b$zi#c$zi#e$zi#g$zi#i$zi#j$zi#m$zi'f$zi'p$zi!R$zi~P%NnO#m$Zy!R$Zy!S$Zy~P#*XO#m#Oy!R#Oy!S#Oy~P#*XO!]!wO!R&tq!c&tq~O!R-RO!c'}y~O!O&vq!R&vq~P!BpO!O7tO~P!BpO!R.^O!S(Vy~O!R2oO!S(Sq~O!X8QO!Y8QO'^$dO'g(jO'o+iO~O!T.yO%Q8TO~O!T.yO%Q8TO~P!BpO!c8WO~O_$^O!{8]O'W$^O~O_$^O!]!wO!{8]O'W$^O~OQ$gqZ$gqj$gqv$gq!a$gq!b$gq!d$gq!j$gq#[$gq#]$gq#^$gq#_$gq#`$gq#a$gq#b$gq#c$gq#e$gq#g$gq#i$gq#j$gq#m$gq'f$gq'p$gq!R$gq!S$gq~P%%aOQ$iqZ$iqj$iqv$iq!a$iq!b$iq!d$iq!j$iq#[$iq#]$iq#^$iq#_$iq#`$iq#a$iq#b$iq#c$iq#e$iq#g$iq#i$iq#j$iq#m$iq'f$iq'p$iq!R$iq!S$iq~P%%aO'a$|!Z!R$|!Z!{$|!Z#m$|!Z~P!#{O!R&{q!S&{q~P#*XO_$^O!{8oO'W$^O~O#W$|!ZQ$|!ZZ$|!Z_$|!Zj$|!Zv$|!Z!R$|!Z!a$|!Z!b$|!Z!d$|!Z!j$|!Z#[$|!Z#]$|!Z#^$|!Z#_$|!Z#`$|!Z#a$|!Z#b$|!Z#c$|!Z#e$|!Z#g$|!Z#i$|!Z#j$|!Z'W$|!Z'f$|!Z'p$|!Z!c$|!Z!O$|!Z!T$|!Z!{$|!Zn$|!Z%Q$|!Z!]$|!Z~P!BpOP;uOu(SOx(TO'w(VO'x(XO~O!S!za!W!za!X!za!Y!za!r!za!s!za!t!za!x!za'^!za'g!za'o!za~P&,_O!W'eX!X'eX!Y'eX!r'eX!s'eX!t'eX!x'eX'^'eX'g'eX'o'eX~P%'eOQ$|!ZZ$|!Zj$|!Zv$|!Z!a$|!Z!b$|!Z!d$|!Z!j$|!Z#[$|!Z#]$|!Z#^$|!Z#_$|!Z#`$|!Z#a$|!Z#b$|!Z#c$|!Z#e$|!Z#g$|!Z#i$|!Z#j$|!Z#m$|!Z'f$|!Z'p$|!Z!R$|!Z!S$|!Z~P%%aO!Wra!Xra!Yra!rra!sra!tra!xra'^ra'gra'ora~P%;OO!W$^a!X$^a!Y$^a!r$^a!s$^a!t$^a!x$^a'^$^a'g$^a'o$^a~P%=SO!W$`a!X$`a!Y$`a!r$`a!s$`a!t$`a!x$`a'^$`a'g$`a'o$`a~P%?WO!S$na!W$na!X$na!Y$na!r$na!s$na!t$na!x$na'^$na'g$na'o$na~P&,_O!W$xi!X$xi!Y$xi!r$xi!s$xi!t$xi!x$xi'^$xi'g$xi'o$xi~P%LjO!W$zi!X$zi!Y$zi!r$zi!s$zi!t$zi!x$zi'^$zi'g$zi'o$zi~P%NnO!S$gi!W$gi!X$gi!Y$gi!r$gi!s$gi!t$gi!x$gi'^$gi'g$gi'o$gi~P&,_O!S$gq!W$gq!X$gq!Y$gq!r$gq!s$gq!t$gq!x$gq'^$gq'g$gq'o$gq~P&,_O!S$iq!W$iq!X$iq!Y$iq!r$iq!s$iq!t$iq!x$iq'^$iq'g$iq'o$iq~P&,_O!S$|!Z!W$|!Z!X$|!Z!Y$|!Z!r$|!Z!s$|!Z!t$|!Z!x$|!Z'^$|!Z'g$|!Z'o$|!Z~P&,_On'hX~P.jOn[X!O[X!c[X%r[X!T[X%Q[X!][X~P$zO!]dX!c[X!cdX'pdX~P;dOQ9^OR9^O]cOb;`Oc!jOhcOj9^OkcOlcOq9^Os9^OxRO{cO|cO}cO!TSO!_9`O!dUO!g9^O!h9^O!i9^O!j9^O!k9^O!n!iO#t!lO#x^O']'cO'fQO'oYO'|;^O~O]#qOh$QOj#rOk#qOl#qOq$ROs9uOx#yO!T#zO!_;fO!d#vO#V:OO#t$VO$_9xO$a9{O$d$WO']&{O'b$PO'f#sO~O!R9pO!S$]a~O]#qOh$QOj#rOk#qOl#qOq$ROs9vOx#yO!T#zO!_;gO!d#vO#V:PO#t$VO$_9yO$a9|O$d$WO']&{O'b$PO'f#sO~O#d'jO~P&<WO!S[X!SdX~P;dO!]9dO~O#W9cO~O!]!wO#W9cO~O!{9sO~O#c9iO~O!{:QO!R'uX!S'uX~O!{9sO!R'sX!S'sX~O#W:RO~O'a:TO~P!#{O#W:[O~O#W:]O~O#W:^O~O!]!wO#W:_O~O!]!wO#W:RO~O#m:`O~P#*XO#W:aO~O#W:bO~O#W:cO~O#W:dO~O#W:eO~O#W:fO~O#W:gO~O#W:hO~O!O:iO~O#m:jO~P!#{O#m:kO~P!#{O#m:lO~P!#{O!O:mO~P!BpO!O:mO~O!O:nO~P!BpO!]!wO#c;lO~O!]!wO#c;nO~O#x~!b!r!t!u#U#V'|$_$a$d$u%P%Q%R%X%Z%^%_%a%c~UT#x'|#]}'Y'Z#z'Y']'g~",
      goto: "#Kk(ZPPPPPPPP([P(lP*`PPPP-zPP.a3s7o8SP8SPPP8SP:U8SP8SP:YPP:`P:t?VPPPP?ZPPPP?ZA{PPPBRDdP?ZPFwPPPPHp?ZPPPPPJi?ZPPMjNgPPPPNk!!TP!!]!#^PNg?Z?Z!&n!)i!.[!.[!1kPPP!1r!4h?ZPPPPPPPPPP!7_P!8pPP?Z!9}P?ZP?Z?Z?Z?ZP?Z!;dPP!>]P!AQ!AY!A^!A^P!>YP!Ab!AbP!DVP!DZ?Z?Z!Da!GT8SP8SP8S8SP!HW8S8S!Jf8S!M_8S# g8S8S#!T#$c#$c#$g#$c#$oP#$cP8S#%k8S#'X8S8S-zPPP#(yPP#)c#)cP#)cP#)x#)cPP#*OP#)uP#)u#*b!!X#)u#+P#+V#+Y([#+]([P#+d#+d#+dP([P([P([P([PP([P#+j#+mP#+m([P#+qP#+tP([P([P([P([P([P([([#+z#,U#,[#,b#,p#,v#,|#-W#-^#-m#-s#.R#.X#._#.m#/S#0z#1Y#1`#1f#1l#1r#1|#2S#2Y#2d#2v#2|PPPPPPPP#3SPP#3v#7OPP#8f#8m#8uPP#>a#@t#Fp#Fs#Fv#GR#GUPP#GX#G]#Gz#Hq#Hu#IZPP#I_#Ie#IiP#Il#Ip#Is#Jc#Jy#KO#KR#KU#K[#K_#Kc#KgmhOSj}!n$]%c%f%g%i*o*t/g/jQ$imQ$ppQ%ZyS&V!b+`Q&k!jS(l#z(qQ)g$jQ)t$rQ*`%TQ+f&^S+k&d+mQ+}&lQ-k(sQ/U*aY0Z+o+p+q+r+sS2t.y2vU3|0[0^0aU5g2y2z2{S6]4O4RS7R5h5iQ7m6_R8Q7T$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8o!j'e#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ(}$SQ)l$lQ*b%WQ*i%`Q,X9tQ.W)aQ.c)mQ/^*gQ2_.^Q3Z/VQ4^9vQ5S2`R8{9upeOSjy}!n$]%Y%c%f%g%i*o*t/g/jR*d%[&WVOSTjkn}!S!W!k!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%z&S&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;`;a[!cRU!]!`%x&WQ$clQ$hmS$mp$rv$wrs!r!u$Z$u&`&t&w)x)y)z*m+Y+h,S,U/o0lQ%PwQ&h!iQ&j!jS(_#v(cS)f$i$jQ)j$lQ)w$tQ*Z%RQ*_%TS+|&k&lQ-V(`Q.[)gQ.b)mQ.d)nQ.g)rQ/P*[S/T*`*aQ0h+}Q1b-RQ2^.^Q2b.aQ2g.iQ3Y/UQ4i1cQ5R2`Q5U2dQ6u5QR7w6vx#xa!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;k!Y$fm!j$h$i$j&U&j&k&l(k)f)g+]+j+|+}-d.[0Q0W0]0h1u3{4Q6Z7k8^Q)`$cQ*P$|Q*S$}Q*^%TQ.k)wQ/O*ZU/S*_*`*aQ3T/PS3X/T/UQ5b2sQ5t3YS7P5c5fS8O7Q7SQ8f8PQ8u8g#[;b!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vd;c9d9x9{:O:V:Y:]:b:e:ke;d9r9y9|:P:W:Z:^:c:f:lW#}a$P(y;^S$|t%YQ$}uQ%OvR)}$z%P#|a!w!y#d#v#y$T$U$Y&g'}(W(Y(Z(b(h(w(x)])_)a*O*R+y,_-Y-Z-]-w.R.T.p.s.{.}1a1k1s1y2Q2T2X2j3Q3S4l4u4}5k5p6i6z7W8T9d9r9w9x9y9z9{9|9}:O:P:U:V:W:X:Y:Z:[:]:^:a:b:c:d:e:f:j:k:l;^;i;j;k;l;n;t;u;vT(O#s(PX)O$S9t9u9vU&Z!b$v+cQ'U!{Q)q$oQ.t*TQ1z-tR5^2o&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;a$]#aZ!_!o$a%w%}&y'Q'W'X'Y'Z'[']'^'_'`'a'b'd'g'k'u)p+R+^+g,O,^,d,g,i,w-x/v/y0i0s0w0x0y0z0{0|0}1O1P1Q1R1S1T1W1]2O2[3s3v4W4[4]4b4c5`6S6V6b6f6g7g7z8Z8m8y9_:|T!XQ!Y&_cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ&X!bR/|+`Y&R!b&V&^+`+fS(k#z(qS+j&d+mS-d(l(sQ-e(mQ-l(tQ.v*VU0W+k+o+pU0]+q+r+sS0b+t2xQ1u-kQ1w-mQ1x-nS2s.y2vU3{0Z0[0^Q4P0_Q4Q0aS5c2t2{S5f2y2zU6Z3|4O4RQ6`4SS7Q5g5hQ7S5iS7k6]6_S8P7R7TQ8^7mQ8g8QQ;h;oR;m;slhOSj}!n$]%c%f%g%i*o*t/g/jQ%k!QS&x!v9cQ)d$gQ*X%PQ*Y%QQ+z&iS,]&}:RS-y)V:_Q.Y)eQ.x*WQ/n*vQ/p*wQ/x+ZQ0`+qQ0f+{S2P-z:gQ2Y.ZS2].]:hQ3r/zQ3u0RQ4U0gQ5P2ZQ6T3tQ6X3zQ6a4VQ7e6RQ7h6YQ8Y7iQ8l8[R8x8n$W#`Z!_!o%w%}&y'Q'W'X'Y'Z'[']'^'_'`'a'b'd'g'k'u)p+R+^+g,O,^,d,g,w-x/v/y0i0s0w0x0y0z0{0|0}1O1P1Q1R1S1T1W1]2O2[3s3v4W4[4]4b4c5`6S6V6b6f6g7g7z8Z8m8y9_:|W(v#{&|1V8qT)Z$a,i$W#_Z!_!o%w%}&y'Q'W'X'Y'Z'[']'^'_'`'a'b'd'g'k'u)p+R+^+g,O,^,d,g,w-x/v/y0i0s0w0x0y0z0{0|0}1O1P1Q1R1S1T1W1]2O2[3s3v4W4[4]4b4c5`6S6V6b6f6g7g7z8Z8m8y9_:|Q'f#`S)Y$a,iR-{)Z&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ%f{Q%g|Q%i!OQ%j!PR/f*rQ&e!iQ)[$cQ+w&hS.Q)`)wS0c+u+vW2S-}.O.P.kS4T0d0eU4|2U2V2WU6s4{5Y5ZQ7v6tR8b7yT+l&d+mS+j&d+mU0W+k+o+pU0]+q+r+sS0b+t2xS2s.y2vU3{0Z0[0^Q4P0_Q4Q0aS5c2t2{S5f2y2zU6Z3|4O4RQ6`4SS7Q5g5hQ7S5iS7k6]6_S8P7R7TQ8^7mR8g8QS+l&d+mT2u.y2vS&r!q/dQ-U(_Q-b(kS0V+j2sQ1g-VS1p-c-lU3}0]0b5fQ4h1bS4s1v1xU6^4P4Q7SQ6k4iQ6r4vR7n6`Q!xXS&q!q/dQ)W$[Q)b$eQ)h$kQ,Q&rQ-T(_Q-a(kQ-f(nQ.X)cQ/Q*]S0U+j2sS1f-U-VS1o-b-lQ1r-eQ1t-gQ3V/RW3y0V0]0b5fQ4g1bQ4k1gS4o1p1xQ4t1wQ5r3WW6[3}4P4Q7SS6j4h4iS6n4p:iQ6p4sQ6}5aQ7[5sS7l6^6`Q7r6kS7s6o:mQ7u6rQ7|7OQ8V7]Q8_7nS8a7t:nQ8d7}Q8s8eQ9Q8tQ9X9RQ:u:pQ;T:zQ;U:{Q;V;hR;[;m$rWORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oS!xn!k!j:o#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aR:u;`$rXORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oQ$[b!Y$em!j$h$i$j&U&j&k&l(k)f)g+]+j+|+}-d.[0Q0W0]0h1u3{4Q6Z7k8^S$kn!kQ)c$fQ*]%TW/R*^*_*`*aU3W/S/T/UQ5a2sS5s3X3YU7O5b5c5fQ7]5tU7}7P7Q7SS8e8O8PS8t8f8gQ9R8u!j:p#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aQ:z;_R:{;`$f]OSTjk}!S!W!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%c%e%f%g%i%m%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oY!hRU!]!`%xv$wrs!r!u$Z$u&`&t&w)x)y)z*m+Y+h,S,U/o0lQ*j%`!h:q#]#k'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aR:t&WS&[!b$vR0O+c$p[ORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8o!j'e#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aR*i%`$roORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8oQ'U!{!k:r#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;a!h#VZ!_$a%w%}&y'Q'_'`'a'b'g'k)p+R+g,O,^,d,w-x0i0s1T2O2[3v4W4[6V7g8Z8m8y9_!R9k'd'u+^,i/v/y0w1P1Q1R1S1W1]3s4]4b4c5`6S6b6f6g7z:|!d#XZ!_$a%w%}&y'Q'a'b'g'k)p+R+g,O,^,d,w-x0i0s1T2O2[3v4W4[6V7g8Z8m8y9_}9m'd'u+^,i/v/y0w1R1S1W1]3s4]4b4c5`6S6b6f6g7z:|!`#]Z!_$a%w%}&y'Q'g'k)p+R+g,O,^,d,w-x0i0s1T2O2[3v4W4[6V7g8Z8m8y9_Q1a-Px;a'd'u+^,i/v/y0w1W1]3s4]4b4c5`6S6b6f6g7z:|Q;i;pQ;j;qR;k;r&^cORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aS#l`#mR1Y,l&e_ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,l,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aS#g^#nT'n#i'rT#h^#nT'p#i'r&e`ORSTU`jk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#]#b#e#k#m$]$n%[%_%`%c%e%f%g%i%m%x%z&S&W&_&f&p&}'R'w(R)V)^*k*o*t+T+X+[+x,P,b,h,l,m-u-z.S.].|/_/`/a/c/g/j/l/{0T0j0t1X2i2q3R3f3h3i3q3x5o5}6W6{7j8]8o9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;aT#l`#mQ#o`R'y#m$rbORSTUjk}!S!W!]!`!n!v!z!|#P#Q#R#S#T#U#V#W#X#Y#Z#b#e$]$n%[%_%`%c%e%f%g%i%m%x%z&S&_&f&p&}'R(R)V)^*k*o*t+T+x,P,b,h-u-z.S.].|/_/`/a/c/g/j/l0T0j0t2i3R3f3h3i3x5o5}6W7j8]8o!k;_#]#k&W'w+X+[,m/{1X2q3q6{9^9`9c9e9f9g9h9i9j9k9l9m9n9o9p9s:Q:R:T:_:`:g:h;a#RdOSUj}!S!W!n!|#k$]%[%_%`%c%e%f%g%i%m&S&f'w)^*k*o*t+x,m-u.S.|/_/`/a/c/g/j/l1X2i3R3f3h3i5o5}x#{a!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;k#[&|!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vQ)S$WQ,x(Sd1V9r9y9|:P:W:Z:^:c:f:le8q9d9x9{:O:V:Y:]:b:e:kx#wa!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;kQ(d#xS(n#z(qQ)T$XQ-g(o#[:w!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vd:x9d9x9{:O:V:Y:]:b:e:kd:y9r9y9|:P:W:Z:^:c:f:lQ:};bQ;O;cQ;P;dQ;Q;eQ;R;fR;S;gx#{a!y$T$U$Y(W(Y(b(w(x,_-Y-w1a1y6i;^;i;j;k#[&|!w#d#v#y&g'}(Z(h)])_)a*O*R+y-Z-].R.T.p.s.{.}1k1s2Q2T2X2j3Q3S4l4u4}5k5p6z7W8T9w9z9}:U:X:[:a:d:j;l;n;t;u;vd1V9r9y9|:P:W:Z:^:c:f:le8q9d9x9{:O:V:Y:]:b:e:klfOSj}!n$]%c%f%g%i*o*t/g/jQ(g#yQ*}%pQ+O%rR1j-Z%O#|a!w!y#d#v#y$T$U$Y&g'}(W(Y(Z(b(h(w(x)])_)a*O*R+y,_-Y-Z-]-w.R.T.p.s.{.}1a1k1s1y2Q2T2X2j3Q3S4l4u4}5k5p6i6z7W8T9d9r9w9x9y9z9{9|9}:O:P:U:V:W:X:Y:Z:[:]:^:a:b:c:d:e:f:j:k:l;^;i;j;k;l;n;t;u;vQ*Q$}Q.r*SQ2m.qR5]2nT(p#z(qS(p#z(qT2u.y2vQ)b$eQ-f(nQ.X)cQ/Q*]Q3V/RQ5r3WQ6}5aQ7[5sQ7|7OQ8V7]Q8d7}Q8s8eQ9Q8tR9X9Rp(W#t'O)U-X-o-p0q1h1}4f4w7q:v;W;X;Y!n:U&z'i(^(f+v,[,t-P-^-|.P.o.q0e0p1i1m2W2l2n3O4Y4Z4m4q4y5O5Z5n6m6q7Y8`;Z;];p;q;r[:V8p9O9V9Y9Z9]]:W1U4a6c7o7p8zr(Y#t'O)U,}-X-o-p0q1h1}4f4w7q:v;W;X;Y!p:X&z'i(^(f+v,[,t-P-^-|.P.o.q0e0n0p1i1m2W2l2n3O4Y4Z4m4q4y5O5Z5n6m6q7Y8`;Z;];p;q;r^:Y8p9O9T9V9Y9Z9]_:Z1U4a6c6d7o7p8zpeOSjy}!n$]%Y%c%f%g%i*o*t/g/jQ%VxR*k%`peOSjy}!n$]%Y%c%f%g%i*o*t/g/jR%VxQ*U%OR.n)}qeOSjy}!n$]%Y%c%f%g%i*o*t/g/jQ.z*ZS3P/O/PW5j2|2}3O3TU7V5l5m5nU8R7U7X7YQ8h8SR8v8iQ%^yR*e%YR3^/XR7_5uS$mp$rR.d)nQ%czR*o%dR*u%jT/h*t/jR*y%kQ*x%kR/q*yQjOQ!nST$`j!nQ(P#sR,u(PQ!YQR%u!YQ!^RU%{!^%|+UQ%|!_R+U%}Q+a&XR/}+aQ,`'OR0r,`Q,c'QS0u,c0vR0v,dQ+m&dR0X+mS!eR$uU&a!e&b+VQ&b!fR+V&OQ+d&[R0P+dQ&u!sQ,R&sU,V&u,R0mR0m,WQ'r#iR,n'rQ#m`R'x#mQ#cZU'h#c+Q9qQ+Q9_R9q'uQ-S(_W1d-S1e4j6lU1e-T-U-VS4j1f1gR6l4k$k(U#t&z'O'i(^(f)P)Q)U+v,Y,Z,[,t,}-O-P-X-^-o-p-|.P.o.q0e0n0o0p0q1U1h1i1m1}2W2l2n3O4Y4Z4_4`4a4f4m4q4w4y5O5Z5n6c6d6e6m6q7Y7o7p7q8`8p8z8|8}9O9T9U9V9Y9Z9]:v;W;X;Y;Z;];p;q;rQ-[(fU1l-[1n4nQ1n-^R4n1mQ(q#zR-i(qQ(z$OR-r(zQ2R-|R4z2RQ){$xR.m){Q2p.tS5_2p6|R6|5`Q*W%PR.w*WQ2v.yR5d2vQ/W*bS3[/W5vR5v3^Q._)jW2a._2c5T6wQ2c.bQ5T2bR6w5UQ)o$mR.e)oQ/j*tR3l/jWiOSj!nQ%h}Q)X$]Q*n%cQ*p%fQ*q%gQ*s%iQ/e*oS/h*t/jR3k/gQ$_gQ%l!RQ%o!TQ%q!UQ%s!VQ)v$sQ)|$yQ*d%^Q*{%nQ-h(pS/Z*e*hQ/r*zQ/s*}Q/t+OS0S+j2sQ2f.hQ2k.oQ3U/QQ3`/]Q3j/fY3w0U0V0]0b5fQ5X2hQ5[2lQ5q3VQ5w3_[6U3v3y3}4P4Q7SQ6x5VQ7Z5rQ7`5xW7f6V6[6^6`Q7x6yQ7{6}Q8U7[U8X7g7l7nQ8c7|Q8j8VS8k8Z8_Q8r8dQ8w8mQ9P8sQ9S8yQ9W9QR9[9XQ$gmQ&i!jU)e$h$i$jQ+Z&UU+{&j&k&lQ-`(kS.Z)f)gQ/z+]Q0R+jS0g+|+}Q1q-dQ2Z.[Q3t0QS3z0W0]Q4V0hQ4r1uS6Y3{4QQ7i6ZQ8[7kR8n8^S#ua;^R({$PU$Oa$P;^R-q(yQ#taS&z!w)aQ'O!yQ'i#dQ(^#vQ(f#yQ)P$TQ)Q$UQ)U$YQ+v&gQ,Y9wQ,Z9zQ,[9}Q,t'}Q,}(WQ-O(YQ-P(ZQ-X(bQ-^(hQ-o(wQ-p(xd-|)].R.{2T3Q4}5k6z7W8TQ.P)_Q.o*OQ.q*RQ0e+yQ0n:UQ0o:XQ0p:[Q0q,_Q1U9rQ1h-YQ1i-ZQ1m-]Q1}-wQ2W.TQ2l.pQ2n.sQ3O.}Q4Y:aQ4Z:dQ4_9yQ4`9|Q4a:PQ4f1aQ4m1kQ4q1sQ4w1yQ4y2QQ5O2XQ5Z2jQ5n3SQ6c:^Q6d:WQ6e:ZQ6m4lQ6q4uQ7Y5pQ7o:cQ7p:fQ7q6iQ8`:jQ8p9dQ8z:lQ8|9xQ8}9{Q9O:OQ9T:VQ9U:YQ9V:]Q9Y:bQ9Z:eQ9]:kQ:v;^Q;W;iQ;X;jQ;Y;kQ;Z;lQ;];nQ;p;tQ;q;uR;r;vlgOSj}!n$]%c%f%g%i*o*t/g/jS!pU%eQ%n!SQ%t!WQ'V!|Q'v#kS*h%[%_Q*l%`Q*z%mQ+W&SQ+u&fQ,r'wQ.O)^Q/b*kQ0d+xQ1[,mQ1{-uQ2V.SQ2}.|Q3b/_Q3c/`Q3e/aQ3g/cQ3n/lQ4d1XQ5Y2iQ5m3RQ5|3fQ6O3hQ6P3iQ7X5oR7b5}!vZOSUj}!S!n!|$]%[%_%`%c%e%f%g%i%m&S&f)^*k*o*t+x-u.S.|/_/`/a/c/g/j/l2i3R3f3h3i5o5}Q!_RQ!oTQ$akS%w!]%zQ%}!`Q&y!vQ'Q!zQ'W#PQ'X#QQ'Y#RQ'Z#SQ'[#TQ']#UQ'^#VQ'_#WQ'`#XQ'a#YQ'b#ZQ'd#]Q'g#bQ'k#eW'u#k'w,m1XQ)p$nS+R%x+TS+^&W/{Q+g&_Q,O&pQ,^&}Q,d'RQ,g9^Q,i9`Q,w(RQ-x)VQ/v+XQ/y+[Q0i,PQ0s,bQ0w9cQ0x9eQ0y9fQ0z9gQ0{9hQ0|9iQ0}9jQ1O9kQ1P9lQ1Q9mQ1R9nQ1S9oQ1T,hQ1W9sQ1]9pQ2O-zQ2[.]Q3s:QQ3v0TQ4W0jQ4[0tQ4]:RQ4b:TQ4c:_Q5`2qQ6S3qQ6V3xQ6b:`Q6f:gQ6g:hQ7g6WQ7z6{Q8Z7jQ8m8]Q8y8oQ9_!WR:|;aR!aRR&Y!bS&U!b+`S+]&V&^R0Q+fR'P!yR'S!zT!tU$ZS!sU$ZU$xrs*mS&s!r!uQ,T&tQ,W&wQ.l)zS0k,S,UR4X0l`!dR!]!`$u%x&`)x+hh!qUrs!r!u$Z&t&w)z,S,U0lQ/d*mQ/w+YQ3p/oT:s&W)yT!gR$uS!fR$uS%y!]&`S&O!`)xS+S%x+hT+_&W)yT&]!b$vQ#i^R'{#nT'q#i'rR1Z,lT(a#v(cR(i#yQ-})]Q2U.RQ2|.{Q4{2TQ5l3QQ6t4}Q7U5kQ7y6zQ8S7WR8i8TlhOSj}!n$]%c%f%g%i*o*t/g/jQ%]yR*d%YV$yrs*mR.u*TR*c%WQ$qpR)u$rR)k$lT%az%dT%bz%dT/i*t/j",
      nodeNames: "⚠ extends ArithOp ArithOp InterpolationStart LineComment BlockComment Script ExportDeclaration export Star as VariableName String from ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Interpolation null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression PrivatePropertyName BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
      maxTerm: 332,
      context: trackNewline,
      nodeProps: [
        ["closedBy", 4,"InterpolationEnd",40,"]",51,"}",66,")",132,"JSXSelfCloseEndTag JSXEndTag",146,"JSXEndTag"],
        ["group", -26,8,15,17,58,184,188,191,192,194,197,200,211,213,219,221,223,225,228,234,240,242,244,246,248,250,251,"Statement",-30,12,13,24,27,28,41,43,44,45,47,52,60,68,74,75,91,92,101,103,119,122,124,125,126,127,129,130,148,149,151,"Expression",-22,23,25,29,32,34,152,154,156,157,159,160,161,163,164,165,167,168,169,178,180,182,183,"Type",-3,79,85,90,"ClassItem"],
        ["openedBy", 30,"InterpolationStart",46,"[",50,"{",65,"(",131,"JSXStartTag",141,"JSXStartTag JSXStartCloseTag"]
      ],
      propSources: [jsHighlight],
      skippedNodes: [0,5,6],
      repeatNodeCount: 28,
      tokenData: "!C}~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst0htu2`uv4pvw5ewx6cxy<yyz=Zz{=k{|>k|}?O}!O>k!O!P?`!P!QCl!Q!R!0[!R![!1q![!]!7s!]!^!8V!^!_!8g!_!`!9d!`!a!:[!a!b!<R!b!c%T!c!}2`!}#O!=d#O#P%T#P#Q!=t#Q#R!>U#R#S2`#S#T!>i#T#o2`#o#p!>y#p#q!?O#q#r!?f#r#s!?x#s$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$I|2`$I|$I}!Bq$I}$JO!Bq$JO$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`W%YR$UWO!^%T!_#o%T#p~%T7Z%jg$UW'Y7ROX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T7Z'YR$UW'Z7RO!^%T!_#o%T#p~%T$T'jS$UW!j#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#e#v$UWO!^%T!_!`(Z!`#o%T#p~%T$O(bR#e#v$UWO!^%T!_#o%T#p~%T)X(rZ$UW]#eOY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV$UWOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR$P&j$UWO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO$P&j)X*{R$P&j$UW]#eO!^%T!_#o%T#p~%T)P+ZV]#eOY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U)P+wO$P&j]#e)P+zROr+Urs,Ts~+U)P,[U$P&j]#eOY,nZr,nrs-Vs#O,n#O#P-[#P~,n#e,sU]#eOY,nZr,nrs-Vs#O,n#O#P-[#P~,n#e-[O]#e#e-_PO~,n)X-gV$UWOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k)X.VZ$P&j$UW]#eOY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x#m/PZ$UW]#eOY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x#m/yR$UW]#eO!^%T!_#o%T#p~%T#m0XT$UWO!^.x!^!_,n!_#o.x#o#p,n#p~.x3]0mZ$UWOt%Ttu1`u!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`3]1g]$UW'o3TOt%Ttu1`u!Q%T!Q![1`![!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`7Z2k_$UW#zS']$y'g3SOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`[3q_$UW#zSOt%Ttu3ju}%T}!O3j!O!Q%T!Q![3j![!^%T!_!c%T!c!}3j!}#R%T#R#S3j#S#T%T#T#o3j#p$g%T$g~3j$O4wS#^#v$UWO!^%T!_!`5T!`#o%T#p~%T$O5[R$UW#o#vO!^%T!_#o%T#p~%T5b5lU'x5Y$UWOv%Tvw6Ow!^%T!_!`5T!`#o%T#p~%T$O6VS$UW#i#vO!^%T!_!`5T!`#o%T#p~%T)X6jZ$UW]#eOY6cYZ7]Zw6cwx*rx!^6c!^!_8T!_#O6c#O#P:T#P#o6c#o#p8T#p~6c&r7bV$UWOw7]wx*Px!^7]!^!_7w!_#o7]#o#p7w#p~7]&j7zROw7wwx*mx~7w)P8YV]#eOY8TYZ7wZw8Twx+px#O8T#O#P8o#P~8T)P8rROw8Twx8{x~8T)P9SU$P&j]#eOY9fZw9fwx-Vx#O9f#O#P9}#P~9f#e9kU]#eOY9fZw9fwx-Vx#O9f#O#P9}#P~9f#e:QPO~9f)X:YV$UWOw6cwx:ox!^6c!^!_8T!_#o6c#o#p8T#p~6c)X:xZ$P&j$UW]#eOY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k#m;rZ$UW]#eOY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k#m<jT$UWO!^;k!^!_9f!_#o;k#o#p9f#p~;k&i=QR!d&a$UWO!^%T!_#o%T#p~%Tk=bR!cc$UWO!^%T!_#o%T#p~%T7V=tU'^4V#_#v$UWOz%Tz{>W{!^%T!_!`5T!`#o%T#p~%T$O>_S#[#v$UWO!^%T!_!`5T!`#o%T#p~%T%w>rSj%o$UWO!^%T!_!`5T!`#o%T#p~%T&i?VR!R&a$UWO!^%T!_#o%T#p~%T7Z?gVu5^$UWO!O%T!O!P?|!P!Q%T!Q![@r![!^%T!_#o%T#p~%T!{@RT$UWO!O%T!O!P@b!P!^%T!_#o%T#p~%T!{@iR!Q!s$UWO!^%T!_#o%T#p~%T!{@yZ$UWk!sO!Q%T!Q![@r![!^%T!_!g%T!g!hAl!h#R%T#R#S@r#S#X%T#X#YAl#Y#o%T#p~%T!{AqZ$UWO{%T{|Bd|}%T}!OBd!O!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T!{BiV$UWO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T!{CVV$UWk!sO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T7ZCs`$UW#]#vOYDuYZ%TZzDuz{Jl{!PDu!P!Q!-e!Q!^Du!^!_Fx!_!`!.^!`!a!/]!a!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXD|[$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXEy_$UW}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%TPF}V}POYFxZ!PFx!P!QGd!Q!}Fx!}#OG{#O#PHh#P~FxPGiU}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGdPHOTOYG{Z#OG{#O#PH_#P#QFx#Q~G{PHbQOYG{Z~G{PHkQOYFxZ~FxXHvY$UWOYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~HqXIkV$UWOYHqYZ%TZ!^Hq!^!_G{!_#oHq#o#pG{#p~HqXJVV$UWOYDuYZ%TZ!^Du!^!_Fx!_#oDu#o#pFx#p~Du7ZJs^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q!,R!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7ZKtV$UWOzKoz{LZ{!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZL`X$UWOzKoz{LZ{!PKo!P!QL{!Q!^Ko!^!_M]!_#oKo#o#pM]#p~Ko7ZMSR$UWU7RO!^%T!_#o%T#p~%T7RM`ROzM]z{Mi{~M]7RMlTOzM]z{Mi{!PM]!P!QM{!Q~M]7RNQOU7R7ZNX^$UW}POYJlYZKoZzJlz{NQ{!PJl!P!Q! T!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl7Z! ^_$UWU7R}PO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%T7R!!bY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!&x!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#VY}POY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!#u!Q!}!!]!}#O!$`#O#P!&f#P~!!]7R!#|UU7R}P#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGd7R!$cWOY!$`YZM]Zz!$`z{!${{#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%OYOY!$`YZM]Zz!$`z{!${{!P!$`!P!Q!%n!Q#O!$`#O#P!&S#P#Q!!]#Q~!$`7R!%sTU7ROYG{Z#OG{#O#PH_#P#QFx#Q~G{7R!&VTOY!$`YZM]Zz!$`z{!${{~!$`7R!&iTOY!!]YZM]Zz!!]z{!#Q{~!!]7R!&}_}POzM]z{Mi{#ZM]#Z#[!&x#[#]M]#]#^!&x#^#aM]#a#b!&x#b#gM]#g#h!&x#h#iM]#i#j!&x#j#mM]#m#n!&x#n~M]7Z!(R[$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!(|^$UWOY!'|YZKoZz!'|z{!(w{!P!'|!P!Q!)x!Q!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|7Z!*PY$UWU7ROYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~Hq7Z!*tX$UWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#o!'|#o#p!$`#p~!'|7Z!+fX$UWOYJlYZKoZzJlz{NQ{!^Jl!^!_!!]!_#oJl#o#p!!]#p~Jl7Z!,Yc$UW}POzKoz{LZ{!^Ko!^!_M]!_#ZKo#Z#[!,R#[#]Ko#]#^!,R#^#aKo#a#b!,R#b#gKo#g#h!,R#h#iKo#i#j!,R#j#mKo#m#n!,R#n#oKo#o#pM]#p~Ko7Z!-lV$UWT7ROY!-eYZ%TZ!^!-e!^!_!.R!_#o!-e#o#p!.R#p~!-e7R!.WQT7ROY!.RZ~!.R$P!.g[$UW#o#v}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du]!/f[#wS$UW}POYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du!{!0cd$UWk!sO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#U%T#U#V!3X#V#X%T#X#YAl#Y#b%T#b#c!2w#c#d!4m#d#l%T#l#m!5{#m#o%T#p~%T!{!1x_$UWk!sO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#X%T#X#YAl#Y#b%T#b#c!2w#c#o%T#p~%T!{!3OR$UWk!sO!^%T!_#o%T#p~%T!{!3^W$UWO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#o%T#p~%T!{!3}Y$UWk!sO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#b%T#b#c!2w#c#o%T#p~%T!{!4rV$UWO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#o%T#p~%T!{!5`X$UWk!sO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#b%T#b#c!2w#c#o%T#p~%T!{!6QZ$UWO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#o%T#p~%T!{!6z]$UWk!sO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#b%T#b#c!2w#c#o%T#p~%T$u!7|R!]V$UW#m$fO!^%T!_#o%T#p~%T!q!8^R_!i$UWO!^%T!_#o%T#p~%T5w!8rR'bd!a/n#x&s'|P!P!Q!8{!^!_!9Q!_!`!9_W!9QO$WW#v!9VP#`#v!_!`!9Y#v!9_O#o#v#v!9dO#a#v$u!9kT!{$m$UWO!^%T!_!`'v!`!a!9z!a#o%T#p~%T$P!:RR#W#w$UWO!^%T!_#o%T#p~%T%V!:gT'a!R#a#v$RS$UWO!^%T!_!`!:v!`!a!;W!a#o%T#p~%T$O!:}R#a#v$UWO!^%T!_#o%T#p~%T$O!;_T#`#v$UWO!^%T!_!`5T!`!a!;n!a#o%T#p~%T$O!;uS#`#v$UWO!^%T!_!`5T!`#o%T#p~%T*a!<YV'p#{$UWO!O%T!O!P!<o!P!^%T!_!a%T!a!b!=P!b#o%T#p~%T*[!<vRv*S$UWO!^%T!_#o%T#p~%T$O!=WS$UW#j#vO!^%T!_!`5T!`#o%T#p~%T7V!=kRx6}$UWO!^%T!_#o%T#p~%Tk!={R!Oc$UWO!^%T!_#o%T#p~%T$O!>]S#g#v$UWO!^%T!_!`5T!`#o%T#p~%T$a!>pR$UW'f$XO!^%T!_#o%T#p~%T~!?OO!T~5b!?VT'w5Y$UWO!^%T!_!`5T!`#o%T#p#q!=P#q~%T6X!?oR!S5}nQ$UWO!^%T!_#o%T#p~%TX!@PR!kP$UWO!^%T!_#o%T#p~%T7Z!@gr$UW'Y7R#zS']$y'g3SOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`7Z!CO_$UW'Z7R#zS']$y'g3SOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`",
      tokenizers: [tsExtends, noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, insertSemicolon],
      topRules: {"Script":[0,7]},
      dialects: {jsx: 12107, ts: 12109},
      dynamicPrecedences: {"149":1,"176":1},
      specialized: [{term: 289, get: value => spec_identifier[value] || -1},{term: 299, get: value => spec_word[value] || -1},{term: 63, get: value => spec_LessThan[value] || -1}],
      tokenPrec: 12130
    });

    /**
    A collection of JavaScript-related
    [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
    */
    const snippets = [
        /*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
            label: "function",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
            label: "for",
            detail: "of loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("do {\n\t${}\n} while (${})", {
            label: "do",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("while (${}) {\n\t${}\n}", {
            label: "while",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
            label: "try",
            detail: "/ catch block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n}", {
            label: "if",
            detail: "block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
            label: "if",
            detail: "/ else block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
            label: "import",
            detail: "named",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
            label: "import",
            detail: "default",
            type: "keyword"
        })
    ];

    const cache = /*@__PURE__*/new NodeWeakMap();
    const ScopeNodes = /*@__PURE__*/new Set([
        "Script", "Block",
        "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration",
        "ForStatement"
    ]);
    function defID(type) {
        return (node, def) => {
            let id = node.node.getChild("VariableDefinition");
            if (id)
                def(id, type);
            return true;
        };
    }
    const functionContext = ["FunctionDeclaration"];
    const gatherCompletions = {
        FunctionDeclaration: /*@__PURE__*/defID("function"),
        ClassDeclaration: /*@__PURE__*/defID("class"),
        ClassExpression: () => true,
        EnumDeclaration: /*@__PURE__*/defID("constant"),
        TypeAliasDeclaration: /*@__PURE__*/defID("type"),
        NamespaceDeclaration: /*@__PURE__*/defID("namespace"),
        VariableDefinition(node, def) { if (!node.matchContext(functionContext))
            def(node, "variable"); },
        TypeDefinition(node, def) { def(node, "type"); },
        __proto__: null
    };
    function getScope(doc, node) {
        let cached = cache.get(node);
        if (cached)
            return cached;
        let completions = [], top = true;
        function def(node, type) {
            let name = doc.sliceString(node.from, node.to);
            completions.push({ label: name, type });
        }
        node.cursor(IterMode.IncludeAnonymous).iterate(node => {
            if (top) {
                top = false;
            }
            else if (node.name) {
                let gather = gatherCompletions[node.name];
                if (gather && gather(node, def) || ScopeNodes.has(node.name))
                    return false;
            }
            else if (node.to - node.from > 8192) {
                // Allow caching for bigger internal nodes
                for (let c of getScope(doc, node.node))
                    completions.push(c);
                return false;
            }
        });
        cache.set(node, completions);
        return completions;
    }
    const Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
    const dontComplete = [
        "TemplateString", "String", "RegExp",
        "LineComment", "BlockComment",
        "VariableDefinition", "TypeDefinition", "Label",
        "PropertyDefinition", "PropertyName",
        "PrivatePropertyDefinition", "PrivatePropertyName"
    ];
    /**
    Completion source that looks up locally defined names in
    JavaScript code.
    */
    function localCompletionSource(context) {
        let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
        if (dontComplete.indexOf(inner.name) > -1)
            return null;
        let isWord = inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
        if (!isWord && !context.explicit)
            return null;
        let options = [];
        for (let pos = inner; pos; pos = pos.parent) {
            if (ScopeNodes.has(pos.name))
                options = options.concat(getScope(context.state.doc, pos));
        }
        return {
            options,
            from: isWord ? inner.from : context.pos,
            validFor: Identifier
        };
    }

    /**
    A language provider based on the [Lezer JavaScript
    parser](https://github.com/lezer-parser/javascript), extended with
    highlighting and indentation information.
    */
    const javascriptLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                    TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
                    LabeledStatement: flatIndent,
                    SwitchBody: context => {
                        let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                    },
                    Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                    ArrowFunction: cx => cx.baseIndent + cx.unit,
                    "TemplateString BlockComment": () => -1,
                    "Statement Property": /*@__PURE__*/continuedIndent({ except: /^{/ }),
                    JSXElement(context) {
                        let closed = /^\s*<\//.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    JSXEscape(context) {
                        let closed = /\s*\}/.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    "JSXOpenTag JSXSelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": foldInside,
                    BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
            wordChars: "$"
        }
    });
    /**
    A language provider for TypeScript.
    */
    const typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "ts" });
    /**
    Language provider for JSX.
    */
    const jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "jsx" });
    /**
    Language provider for JSX + TypeScript.
    */
    const tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "jsx ts" });
    const keywords = /*@__PURE__*/"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kw => ({ label: kw, type: "keyword" }));
    /**
    JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
    completion.
    */
    function javascript(config = {}) {
        let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
            : config.typescript ? typescriptLanguage : javascriptLanguage;
        return new LanguageSupport(lang, [
            javascriptLanguage.data.of({
                autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))
            }),
            javascriptLanguage.data.of({
                autocomplete: localCompletionSource
            }),
            config.jsx ? autoCloseTags$1 : [],
        ]);
    }
    function elementName$1(doc, tree, max = doc.length) {
        if (!tree)
            return "";
        let name = tree.getChild("JSXIdentifier");
        return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
    }
    const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
    /**
    Extension that will automatically insert JSX close tags when a `>` or
    `/` is typed.
    */
    const autoCloseTags$1 = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {
        if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||
            from != to || (text != ">" && text != "/") ||
            !javascriptLanguage.isActiveAt(view.state, from, -1))
            return false;
        let { state } = view;
        let changes = state.changeByRange(range => {
            var _a, _b, _c;
            let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;
            if (around.name == "JSXStartTag")
                around = around.parent;
            if (text == ">" && around.name == "JSXFragmentTag") {
                return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `><>` } };
            }
            else if (text == ">" && around.name == "JSXIdentifier") {
                if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "JSXEndTag" && (name = elementName$1(state.doc, around.parent, head)))
                    return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };
            }
            else if (text == "/" && around.name == "JSXFragmentTag") {
                let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
                if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "JSXEndTag" && (name = elementName$1(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {
                    let insert = `/${name}>`;
                    return { range: EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };
                }
            }
            return { range };
        });
        if (changes.changes.empty)
            return false;
        view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
        return true;
    });

    const Targets = ["_blank", "_self", "_top", "_parent"];
    const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
    const Methods = ["get", "post", "put", "delete"];
    const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
    const Bool = ["true", "false"];
    const S = {}; // Empty tag spec
    const Tags = {
        a: {
            attrs: {
                href: null, ping: null, type: null,
                media: null,
                target: Targets,
                hreflang: null
            }
        },
        abbr: S,
        acronym: S,
        address: S,
        applet: S,
        area: {
            attrs: {
                alt: null, coords: null, href: null, target: null, ping: null,
                media: null, hreflang: null, type: null,
                shape: ["default", "rect", "circle", "poly"]
            }
        },
        article: S,
        aside: S,
        audio: {
            attrs: {
                src: null, mediagroup: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["none", "metadata", "auto"],
                autoplay: ["autoplay"],
                loop: ["loop"],
                controls: ["controls"]
            }
        },
        b: S,
        base: { attrs: { href: null, target: Targets } },
        basefont: S,
        bdi: S,
        bdo: S,
        big: S,
        blockquote: { attrs: { cite: null } },
        body: S,
        br: S,
        button: {
            attrs: {
                form: null, formaction: null, name: null, value: null,
                autofocus: ["autofocus"],
                disabled: ["autofocus"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                type: ["submit", "reset", "button"]
            }
        },
        canvas: { attrs: { width: null, height: null } },
        caption: S,
        center: S,
        cite: S,
        code: S,
        col: { attrs: { span: null } },
        colgroup: { attrs: { span: null } },
        command: {
            attrs: {
                type: ["command", "checkbox", "radio"],
                label: null, icon: null, radiogroup: null, command: null, title: null,
                disabled: ["disabled"],
                checked: ["checked"]
            }
        },
        data: { attrs: { value: null } },
        datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
        datalist: { attrs: { data: null } },
        dd: S,
        del: { attrs: { cite: null, datetime: null } },
        details: { attrs: { open: ["open"] } },
        dfn: S,
        dir: S,
        div: S,
        dl: S,
        dt: S,
        em: S,
        embed: { attrs: { src: null, type: null, width: null, height: null } },
        eventsource: { attrs: { src: null } },
        fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
        figcaption: S,
        figure: S,
        font: S,
        footer: S,
        form: {
            attrs: {
                action: null, name: null,
                "accept-charset": Charsets,
                autocomplete: ["on", "off"],
                enctype: Encs,
                method: Methods,
                novalidate: ["novalidate"],
                target: Targets
            }
        },
        frame: S,
        frameset: S,
        h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,
        head: {
            children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
        },
        header: S,
        hgroup: S,
        hr: S,
        html: {
            attrs: { manifest: null }
        },
        i: S,
        iframe: {
            attrs: {
                src: null, srcdoc: null, name: null, width: null, height: null,
                sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
                seamless: ["seamless"]
            }
        },
        img: {
            attrs: {
                alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"]
            }
        },
        input: {
            attrs: {
                alt: null, dirname: null, form: null, formaction: null,
                height: null, list: null, max: null, maxlength: null, min: null,
                name: null, pattern: null, placeholder: null, size: null, src: null,
                step: null, value: null, width: null,
                accept: ["audio/*", "video/*", "image/*"],
                autocomplete: ["on", "off"],
                autofocus: ["autofocus"],
                checked: ["checked"],
                disabled: ["disabled"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                multiple: ["multiple"],
                readonly: ["readonly"],
                required: ["required"],
                type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
                    "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
                    "file", "submit", "image", "reset", "button"]
            }
        },
        ins: { attrs: { cite: null, datetime: null } },
        kbd: S,
        keygen: {
            attrs: {
                challenge: null, form: null, name: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                keytype: ["RSA"]
            }
        },
        label: { attrs: { for: null, form: null } },
        legend: S,
        li: { attrs: { value: null } },
        link: {
            attrs: {
                href: null, type: null,
                hreflang: null,
                media: null,
                sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
            }
        },
        map: { attrs: { name: null } },
        mark: S,
        menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
        meta: {
            attrs: {
                content: null,
                charset: Charsets,
                name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
                "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
            }
        },
        meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
        nav: S,
        noframes: S,
        noscript: S,
        object: {
            attrs: {
                data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
                typemustmatch: ["typemustmatch"]
            }
        },
        ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
            children: ["li", "script", "template", "ul", "ol"] },
        optgroup: { attrs: { disabled: ["disabled"], label: null } },
        option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
        output: { attrs: { for: null, form: null, name: null } },
        p: S,
        param: { attrs: { name: null, value: null } },
        pre: S,
        progress: { attrs: { value: null, max: null } },
        q: { attrs: { cite: null } },
        rp: S,
        rt: S,
        ruby: S,
        s: S,
        samp: S,
        script: {
            attrs: {
                type: ["text/javascript"],
                src: null,
                async: ["async"],
                defer: ["defer"],
                charset: Charsets
            }
        },
        section: S,
        select: {
            attrs: {
                form: null, name: null, size: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                multiple: ["multiple"]
            }
        },
        slot: { attrs: { name: null } },
        small: S,
        source: { attrs: { src: null, type: null, media: null } },
        span: S,
        strike: S,
        strong: S,
        style: {
            attrs: {
                type: ["text/css"],
                media: null,
                scoped: null
            }
        },
        sub: S,
        summary: S,
        sup: S,
        table: S,
        tbody: S,
        td: { attrs: { colspan: null, rowspan: null, headers: null } },
        template: S,
        textarea: {
            attrs: {
                dirname: null, form: null, maxlength: null, name: null, placeholder: null,
                rows: null, cols: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                readonly: ["readonly"],
                required: ["required"],
                wrap: ["soft", "hard"]
            }
        },
        tfoot: S,
        th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
        thead: S,
        time: { attrs: { datetime: null } },
        title: S,
        tr: S,
        track: {
            attrs: {
                src: null, label: null, default: null,
                kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
                srclang: null
            }
        },
        tt: S,
        u: S,
        ul: { children: ["li", "script", "template", "ul", "ol"] },
        var: S,
        video: {
            attrs: {
                src: null, poster: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["auto", "metadata", "none"],
                autoplay: ["autoplay"],
                mediagroup: ["movie"],
                muted: ["muted"],
                controls: ["controls"]
            }
        },
        wbr: S
    };
    const GlobalAttrs = {
        accesskey: null,
        class: null,
        contenteditable: Bool,
        contextmenu: null,
        dir: ["ltr", "rtl", "auto"],
        draggable: ["true", "false", "auto"],
        dropzone: ["copy", "move", "link", "string:", "file:"],
        hidden: ["hidden"],
        id: null,
        inert: ["inert"],
        itemid: null,
        itemprop: null,
        itemref: null,
        itemscope: ["itemscope"],
        itemtype: null,
        lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
        spellcheck: Bool,
        autocorrect: Bool,
        autocapitalize: Bool,
        style: null,
        tabindex: null,
        title: null,
        translate: ["yes", "no"],
        onclick: null,
        rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
        role: /*@__PURE__*/"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
        "aria-activedescendant": null,
        "aria-atomic": Bool,
        "aria-autocomplete": ["inline", "list", "both", "none"],
        "aria-busy": Bool,
        "aria-checked": ["true", "false", "mixed", "undefined"],
        "aria-controls": null,
        "aria-describedby": null,
        "aria-disabled": Bool,
        "aria-dropeffect": null,
        "aria-expanded": ["true", "false", "undefined"],
        "aria-flowto": null,
        "aria-grabbed": ["true", "false", "undefined"],
        "aria-haspopup": Bool,
        "aria-hidden": Bool,
        "aria-invalid": ["true", "false", "grammar", "spelling"],
        "aria-label": null,
        "aria-labelledby": null,
        "aria-level": null,
        "aria-live": ["off", "polite", "assertive"],
        "aria-multiline": Bool,
        "aria-multiselectable": Bool,
        "aria-owns": null,
        "aria-posinset": null,
        "aria-pressed": ["true", "false", "mixed", "undefined"],
        "aria-readonly": Bool,
        "aria-relevant": null,
        "aria-required": Bool,
        "aria-selected": ["true", "false", "undefined"],
        "aria-setsize": null,
        "aria-sort": ["ascending", "descending", "none", "other"],
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null
    };
    class Schema {
        constructor(extraTags, extraAttrs) {
            this.tags = Object.assign(Object.assign({}, Tags), extraTags);
            this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
            this.allTags = Object.keys(this.tags);
            this.globalAttrNames = Object.keys(this.globalAttrs);
        }
    }
    Schema.default = /*@__PURE__*/new Schema;
    function elementName(doc, tree, max = doc.length) {
        if (!tree)
            return "";
        let tag = tree.firstChild;
        let name = tag && tag.getChild("TagName");
        return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
    }
    function findParentElement(tree, skip = false) {
        for (let cur = tree.parent; cur; cur = cur.parent)
            if (cur.name == "Element") {
                if (skip)
                    skip = false;
                else
                    return cur;
            }
        return null;
    }
    function allowedChildren(doc, tree, schema) {
        let parentInfo = schema.tags[elementName(doc, findParentElement(tree, true))];
        return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
    }
    function openTags(doc, tree) {
        let open = [];
        for (let parent = tree; parent = findParentElement(parent);) {
            let tagName = elementName(doc, parent);
            if (tagName && parent.lastChild.name == "CloseTag")
                break;
            if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
                open.push(tagName);
        }
        return open;
    }
    const identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
    function completeTag(state, schema, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: allowedChildren(state.doc, tree, schema).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end,
                type: "type", boost: 99 - i }))),
            validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeCloseTag(state, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
            validFor: identifier };
    }
    function completeStartTag(state, schema, tree, pos) {
        let options = [], level = 0;
        for (let tagName of allowedChildren(state.doc, tree, schema))
            options.push({ label: "<" + tagName, type: "type" });
        for (let open of openTags(state.doc, tree))
            options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
        return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeAttrName(state, schema, tree, from, to) {
        let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
        let names = (info && info.attrs ? Object.keys(info.attrs).concat(schema.globalAttrNames) : schema.globalAttrNames);
        return { from, to,
            options: names.map(attrName => ({ label: attrName, type: "property" })),
            validFor: identifier };
    }
    function completeAttrValue(state, schema, tree, from, to) {
        var _a;
        let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
        let options = [], token = undefined;
        if (nameNode) {
            let attrName = state.sliceDoc(nameNode.from, nameNode.to);
            let attrs = schema.globalAttrs[attrName];
            if (!attrs) {
                let elt = findParentElement(tree), info = elt ? schema.tags[elementName(state.doc, elt)] : null;
                attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
            }
            if (attrs) {
                let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
                if (/^['"]/.test(base)) {
                    token = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
                    quoteStart = "";
                    quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
                    base = base.slice(1);
                    from++;
                }
                else {
                    token = /^[^\s<>='"]*$/;
                }
                for (let value of attrs)
                    options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
            }
        }
        return { from, to, options, validFor: token };
    }
    function htmlCompletionFor(schema, context) {
        let { state, pos } = context, around = syntaxTree(state).resolveInner(pos), tree = around.resolve(pos, -1);
        for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
            let last = before.lastChild;
            if (!last || !last.type.isError || last.from < last.to)
                break;
            around = tree = before;
            scan = last.from;
        }
        if (tree.name == "TagName") {
            return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
                : completeTag(state, schema, tree, tree.from, pos);
        }
        else if (tree.name == "StartTag") {
            return completeTag(state, schema, tree, pos, pos);
        }
        else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
            return completeCloseTag(state, tree, pos, pos);
        }
        else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
            return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
        }
        else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
            return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
        }
        else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
            return completeStartTag(state, schema, tree, pos);
        }
        else {
            return null;
        }
    }
    /**
    Create a completion source for HTML extended with additional tags
    or attributes.
    */
    function htmlCompletionSourceWith(config) {
        let { extraTags, extraGlobalAttributes: extraAttrs } = config;
        let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
        return (context) => htmlCompletionFor(schema, context);
    }

    /**
    A language provider based on the [Lezer HTML
    parser](https://github.com/lezer-parser/html), extended with the
    JavaScript and CSS parsers to parse the content of `<script>` and
    `<style>` tags.
    */
    const htmlLanguage = /*@__PURE__*/LRLanguage.define({
        parser: /*@__PURE__*/parser$2.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Element(context) {
                        let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                        if (context.node.to <= context.pos + after[0].length)
                            return context.continue();
                        return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
                    },
                    "OpenTag CloseTag SelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    },
                    Document(context) {
                        if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                            return context.continue();
                        let endElt = null, close;
                        for (let cur = context.node;;) {
                            let last = cur.lastChild;
                            if (!last || last.name != "Element" || last.to != cur.to)
                                break;
                            endElt = cur = last;
                        }
                        if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                            return context.lineIndent(endElt.from) + context.unit;
                        return null;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    Element(node) {
                        let first = node.firstChild, last = node.lastChild;
                        if (!first || first.name != "OpenTag")
                            return null;
                        return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
                    }
                })
            ],
            wrap: /*@__PURE__*/configureNesting([
                { tag: "script",
                    attrs(attrs) {
                        return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
                    },
                    parser: javascriptLanguage.parser },
                { tag: "style",
                    attrs(attrs) {
                        return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
                    },
                    parser: cssLanguage.parser }
            ])
        }),
        languageData: {
            commentTokens: { block: { open: "<!--", close: "-->" } },
            indentOnInput: /^\s*<\/\w+\W$/,
            wordChars: "-._"
        }
    });
    /**
    Language support for HTML, including
    [`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
    CSS support extensions.
    */
    function html(config = {}) {
        let lang = htmlLanguage;
        if (config.matchClosingTags === false)
            lang = lang.configure({ dialect: "noMatch" });
        return new LanguageSupport(lang, [
            htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),
            config.autoCloseTags !== false ? autoCloseTags : [],
            javascript().support,
            css().support
        ]);
    }
    /**
    Extension that will automatically insert close tags when a `>` or
    `/` is typed.
    */
    const autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {
        if (view.composing || view.state.readOnly || from != to || (text != ">" && text != "/") ||
            !htmlLanguage.isActiveAt(view.state, from, -1))
            return false;
        let { state } = view;
        let changes = state.changeByRange(range => {
            var _a, _b, _c;
            let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;
            if (around.name == "TagName" || around.name == "StartTag")
                around = around.parent;
            if (text == ">" && around.name == "OpenTag") {
                if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" && (name = elementName(state.doc, around.parent, head)))
                    return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };
            }
            else if (text == "/" && around.name == "OpenTag") {
                let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
                if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name = elementName(state.doc, base, head))) {
                    let insert = `/${name}>`;
                    return { range: EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };
                }
            }
            return { range };
        });
        if (changes.changes.empty)
            return false;
        view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
        return true;
    });

    const data = /*@__PURE__*/defineLanguageFacet({ block: { open: "<!--", close: "-->" } });
    const commonmark = /*@__PURE__*/parser$3.configure({
        props: [
            /*@__PURE__*/foldNodeProp.add(type => {
                if (!type.is("Block") || type.is("Document"))
                    return undefined;
                return (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
            }),
            /*@__PURE__*/indentNodeProp.add({
                Document: () => null
            }),
            /*@__PURE__*/languageDataProp.add({
                Document: data
            })
        ]
    });
    function mkLang(parser) {
        return new Language(data, parser);
    }
    /**
    Language support for strict CommonMark.
    */
    const commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);
    const extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);
    /**
    Language support for [GFM](https://github.github.com/gfm/) plus
    subscript, superscript, and emoji syntax.
    */
    const markdownLanguage = /*@__PURE__*/mkLang(extended);
    function getCodeParser(languages, defaultLanguage) {
        return (info) => {
            if (info && languages) {
                let found = null;
                if (typeof languages == "function")
                    found = languages(info);
                else
                    found = LanguageDescription.matchLanguageName(languages, info, true);
                if (found instanceof LanguageDescription)
                    return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());
                else if (found)
                    return found.parser;
            }
            return defaultLanguage ? defaultLanguage.parser : null;
        };
    }

    function nodeStart(node, doc) {
        return doc.sliceString(node.from, node.from + 50);
    }
    class Context {
        constructor(node, from, to, spaceBefore, spaceAfter, type, item) {
            this.node = node;
            this.from = from;
            this.to = to;
            this.spaceBefore = spaceBefore;
            this.spaceAfter = spaceAfter;
            this.type = type;
            this.item = item;
        }
        blank(trailing = true) {
            let result = this.spaceBefore;
            if (this.node.name == "Blockquote")
                result += ">";
            else
                for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
                    result += " ";
            return result + (trailing ? this.spaceAfter : "");
        }
        marker(doc, add) {
            let number = this.node.name == "OrderedList" ? String((+itemNumber(this.item, doc)[2] + add)) : "";
            return this.spaceBefore + number + this.type + this.spaceAfter;
        }
    }
    function getContext(node, line, doc) {
        let nodes = [];
        for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
            if (cur.name == "ListItem" || cur.name == "Blockquote")
                nodes.push(cur);
        }
        let context = [], pos = 0;
        for (let i = nodes.length - 1; i >= 0; i--) {
            let node = nodes[i], match, start = pos;
            if (node.name == "Blockquote" && (match = /^[ \t]*>( ?)/.exec(line.slice(pos)))) {
                pos += match[0].length;
                context.push(new Context(node, start, pos, "", match[1], ">", null));
            }
            else if (node.name == "ListItem" && node.parent.name == "OrderedList" &&
                (match = /^([ \t]*)\d+([.)])([ \t]*)/.exec(nodeStart(node, doc)))) {
                let after = match[3], len = match[0].length;
                if (after.length >= 4) {
                    after = after.slice(0, after.length - 4);
                    len -= 4;
                }
                pos += len;
                context.push(new Context(node.parent, start, pos, match[1], after, match[2], node));
            }
            else if (node.name == "ListItem" && node.parent.name == "BulletList" &&
                (match = /^([ \t]*)([-+*])([ \t]{1,4}\[[ xX]\])?([ \t]+)/.exec(nodeStart(node, doc)))) {
                let after = match[4], len = match[0].length;
                if (after.length > 4) {
                    after = after.slice(0, after.length - 4);
                    len -= 4;
                }
                let type = match[2];
                if (match[3])
                    type += match[3].replace(/[xX]/, ' ');
                pos += len;
                context.push(new Context(node.parent, start, pos, match[1], after, type, node));
            }
        }
        return context;
    }
    function itemNumber(item, doc) {
        return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
    }
    function renumberList(after, doc, changes, offset = 0) {
        for (let prev = -1, node = after;;) {
            if (node.name == "ListItem") {
                let m = itemNumber(node, doc);
                let number = +m[2];
                if (prev >= 0) {
                    if (number != prev + 1)
                        return;
                    changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });
                }
                prev = number;
            }
            let next = node.nextSibling;
            if (!next)
                break;
            node = next;
        }
    }
    /**
    This command, when invoked in Markdown context with cursor
    selection(s), will create a new line with the markup for
    blockquotes and lists that were active on the old line. If the
    cursor was directly after the end of the markup for the old line,
    trailing whitespace and list markers are removed from that line.

    The command does nothing in non-Markdown context, so it should
    not be used as the only binding for Enter (even in a Markdown
    document, HTML and code regions might use a different language).
    */
    const insertNewlineContinueMarkup = ({ state, dispatch }) => {
        let tree = syntaxTree(state), { doc } = state;
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))
                return dont = { range };
            let pos = range.from, line = doc.lineAt(pos);
            let context = getContext(tree.resolveInner(pos, -1), line.text, doc);
            while (context.length && context[context.length - 1].from > pos - line.from)
                context.pop();
            if (!context.length)
                return dont = { range };
            let inner = context[context.length - 1];
            if (inner.to - inner.spaceAfter.length > pos - line.from)
                return dont = { range };
            let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\S/.test(line.text.slice(inner.to));
            // Empty line in list
            if (inner.item && emptyLine) {
                // First list item or blank line before: delete a level of markup
                if (inner.node.firstChild.to >= pos ||
                    line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
                    let next = context.length > 1 ? context[context.length - 2] : null;
                    let delTo, insert = "";
                    if (next && next.item) { // Re-add marker for the list at the next level
                        delTo = line.from + next.from;
                        insert = next.marker(doc, 1);
                    }
                    else {
                        delTo = line.from + (next ? next.to : 0);
                    }
                    let changes = [{ from: delTo, to: pos, insert }];
                    if (inner.node.name == "OrderedList")
                        renumberList(inner.item, doc, changes, -2);
                    if (next && next.node.name == "OrderedList")
                        renumberList(next.item, doc, changes);
                    return { range: EditorSelection.cursor(delTo + insert.length), changes };
                }
                else { // Move this line down
                    let insert = "";
                    for (let i = 0, e = context.length - 2; i <= e; i++)
                        insert += context[i].blank(i < e);
                    insert += state.lineBreak;
                    return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };
                }
            }
            if (inner.node.name == "Blockquote" && emptyLine && line.from) {
                let prevLine = doc.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
                // Two aligned empty quoted lines in a row
                if (quoted && quoted.index == inner.from) {
                    let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },
                        { from: line.from + inner.from, to: line.to }]);
                    return { range: range.map(changes), changes };
                }
            }
            let changes = [];
            if (inner.node.name == "OrderedList")
                renumberList(inner.item, doc, changes);
            let insert = state.lineBreak;
            let continued = inner.item && inner.item.from < line.from;
            // If not dedented
            if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
                for (let i = 0, e = context.length - 1; i <= e; i++)
                    insert += i == e && !continued ? context[i].marker(doc, 1) : context[i].blank();
            }
            let from = pos;
            while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
                from--;
            changes.push({ from, to: pos, insert });
            return { range: EditorSelection.cursor(from + insert.length), changes };
        });
        if (dont)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    function isMark(node) {
        return node.name == "QuoteMark" || node.name == "ListMark";
    }
    function contextNodeForDelete(tree, pos) {
        let node = tree.resolveInner(pos, -1), scan = pos;
        if (isMark(node)) {
            scan = node.from;
            node = node.parent;
        }
        for (let prev; prev = node.childBefore(scan);) {
            if (isMark(prev)) {
                scan = prev.from;
            }
            else if (prev.name == "OrderedList" || prev.name == "BulletList") {
                node = prev.lastChild;
                scan = node.to;
            }
            else {
                break;
            }
        }
        return node;
    }
    /**
    This command will, when invoked in a Markdown context with the
    cursor directly after list or blockquote markup, delete one level
    of markup. When the markup is for a list, it will be replaced by
    spaces on the first invocation (a further invocation will delete
    the spaces), to make it easy to continue a list.

    When not after Markdown block markup, this command will return
    false, so it is intended to be bound alongside other deletion
    commands, with a higher precedence than the more generic commands.
    */
    const deleteMarkupBackward = ({ state, dispatch }) => {
        let tree = syntaxTree(state);
        let dont = null, changes = state.changeByRange(range => {
            let pos = range.from, { doc } = state;
            if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
                let line = doc.lineAt(pos);
                let context = getContext(contextNodeForDelete(tree, pos), line.text, doc);
                if (context.length) {
                    let inner = context[context.length - 1];
                    let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
                    // Delete extra trailing space after markup
                    if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
                        return { range: EditorSelection.cursor(line.from + spaceEnd),
                            changes: { from: line.from + spaceEnd, to: pos } };
                    if (pos - line.from == spaceEnd) {
                        let start = line.from + inner.from;
                        // Replace a list item marker with blank space
                        if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to)))
                            return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank() } };
                        // Delete one level of indentation
                        if (start < pos)
                            return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };
                    }
                }
            }
            return dont = { range };
        });
        if (dont)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
        return true;
    };

    /**
    A small keymap with Markdown-specific bindings. Binds Enter to
    [`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)
    and Backspace to
    [`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).
    */
    const markdownKeymap = [
        { key: "Enter", run: insertNewlineContinueMarkup },
        { key: "Backspace", run: deleteMarkupBackward }
    ];
    const htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });
    /**
    Markdown language support.
    */
    function markdown(config = {}) {
        let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;
        if (!(parser instanceof MarkdownParser))
            throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
        let extensions = config.extensions ? [config.extensions] : [];
        let support = [htmlNoMatch.support], defaultCode;
        if (defaultCodeLanguage instanceof LanguageSupport) {
            support.push(defaultCodeLanguage.support);
            defaultCode = defaultCodeLanguage.language;
        }
        else if (defaultCodeLanguage) {
            defaultCode = defaultCodeLanguage;
        }
        let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;
        extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
        if (addKeymap)
            support.push(Prec.high(keymap.of(markdownKeymap)));
        return new LanguageSupport(mkLang(parser.configure(extensions)), support);
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    let defaultTheme = {
      name: "Default",
      font: "Fira Code, Menlo",
      fontSize: "16pt",
      textAreaColor: '#454158',
      backgroundColor: '#22212C',
      textColor: '#80ffea',
      borderColor: '#1B1A23',
      Cyan: "#80FFEA",
      Green: "#8AFF80",
      Orange: "#FFCA80",
      Pink: "#FF80BF",
      Purple: "#9580FF",
      Red: "#FF9580",
      Yellow: "#FFFF80",
      functionColor: "#9580FF",
      stringColor: "#8AFF80",
      constantColor: "#FFCA80",
      keywordColor: "#FFFF80",
      highlightBackgroundColor: "#4f4f5f",
      selectionColor: "#22212C",
      buttons: [
        {
          color: '#80FFEA',
          id: 0
        },
        {
          color: '#8AFF80',
          id: 1
        },
        {
          color: '#FFCA80',
          id: 2
        },
        {
          color: '#FF80BF',
          id: 3
        },
        {
          color: '#9580FF',
          id: 4
        },
        {
          color: '#FF9580',
          id: 5
        },
        {
          color: 'blue',
          id: 6
        },
        {
          color: 'green',
          id: 7
        },
        {
          color: 'red',
          id: 8
        },
        {
          color: 'purple',
          id: 9
        },
      ]
    };

    const theme = writable(defaultTheme);

    /* src/components/CodeMirror.svelte generated by Svelte v3.49.0 */
    const file$n = "src/components/CodeMirror.svelte";

    function create_fragment$n(ctx) {
    	let div;
    	let div_style_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "name", "editor");
    			attr_dev(div, "id", "CMeditor");
    			attr_dev(div, "style", div_style_value = "height: " + /*height*/ ctx[0] + "; width: " + /*width*/ ctx[1] + "; " + /*styling*/ ctx[2]);
    			attr_dev(div, "class", "svelte-1p9zuvj");
    			add_location(div, file$n, 367, 0, 8757);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[6](div);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*height, width, styling*/ 7 && div_style_value !== (div_style_value = "height: " + /*height*/ ctx[0] + "; width: " + /*width*/ ctx[1] + "; " + /*styling*/ ctx[2])) {
    				attr_dev(div, "style", div_style_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[6](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(11, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CodeMirror', slots, []);
    	const dispatch = createEventDispatcher();
    	let { height = 0 } = $$props;
    	let { width = 0 } = $$props;
    	let { styling = "" } = $$props;
    	let { config = {} } = $$props;
    	let { initFinished = false } = $$props;
    	let CodeMirrorEditor = null;
    	let edState = null;
    	let edView = null;
    	let editorFunctions = null;
    	let currentCursor = null;

    	//
    	// This is the basic theming definitions.
    	//
    	const editorTheme = /*@__PURE__*/
    	EditorView.theme(
    		{
    			"&": {
    				color: $theme.textColor,
    				backgroundColor: $theme.textAreaColor,
    				height,
    				minHeight: height
    			},
    			".cm-content": {
    				caretColor: $theme.Cyan,
    				minHeight: height
    			},
    			"&.cm-focused .cm-cursor": { borderLeftColor: $theme.Cyan },
    			"&.cm-focused .cm-selectionBackground, .cm-selectionBackground, ::selection": { backgroundColor: $theme.selectionColor },
    			".cm-panels": {
    				backgroundColor: $theme.backgroundColor,
    				color: $theme.textColor
    			},
    			".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    			".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    			".cm-searchMatch": {
    				backgroundColor: "#72a1ff59",
    				outline: "1px solid #457dff"
    			},
    			".cm-searchMatch.cm-searchMatch-selected": { backgroundColor: "#6199ff2f" },
    			".cm-activeLine": {
    				backgroundColor: $theme.highlightBackgroundColor
    			},
    			".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    			".cm-matchingBracket, .cm-nonmatchingBracket": {
    				backgroundColor: "#bad0f847",
    				outline: "1px solid #515a6b"
    			},
    			".cm-gutter": { minHeight: height },
    			".cm-gutters": {
    				backgroundColor: $theme.backgroundColor,
    				color: $theme.green,
    				border: "none"
    			},
    			".cm-activeLineGutter": {
    				backgroundColor: $theme.highlightBackgroundColor
    			},
    			".cm-foldPlaceholder": {
    				backgroundColor: "transparent",
    				border: "none",
    				color: "#ddd"
    			},
    			".cm-tooltip": {
    				border: "1px solid #181a1f",
    				backgroundColor: $theme.backgroundColor
    			},
    			".cm-tooltip-autocomplete": {
    				"& > ul > li[aria-selected]": {
    					backgroundColor: $theme.highlightBackgroundColor,
    					color: $theme.textColor
    				}
    			}
    		},
    		{ dark: true }
    	);

    	function fire(name, data) {
    		dispatch(name, { data });
    	}

    	function setValue(text) {
    		//
    		// Since we are setting a whole new document, create new editor
    		// states and views.
    		//
    		if (initFinished) {
    			CreateEditorState(text);
    		}
    	}

    	function CreateEditorState(text) {
    		//
    		// Clear out the div element in case a previous editor was
    		// created.
    		//
    		if (edView !== null) {
    			edView.destroy();
    			$$invalidate(3, CodeMirrorEditor.innerHTML = "", CodeMirrorEditor);
    		}

    		//
    		// Setup the extensions array.
    		//
    		const exts = [
    			highlightSpecialChars(),
    			history(),
    			drawSelection(),
    			dropCursor(),
    			EditorState.allowMultipleSelections.of(true),
    			indentOnInput(),
    			syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
    			bracketMatching(),
    			closeBrackets(),
    			autocompletion(),
    			rectangularSelection(),
    			crosshairCursor(),
    			highlightSelectionMatches(),
    			keymap.of([
    				...closeBracketsKeymap,
    				...defaultKeymap,
    				...searchKeymap,
    				...historyKeymap,
    				...foldKeymap,
    				...completionKeymap,
    				...lintKeymap
    			]),
    			editorTheme,
    			EditorView.updateListener.of(update => {
    				if (update.docChanged) {
    					fire("textChange", { value: getValue(), cursor: getCursor() });
    				}
    			})
    		];

    		//
    		// Add extensions based on the configuration.
    		//
    		if (config.lineNumbers) {
    			exts.push(foldGutter());
    			exts.push(lineNumbers());
    		}

    		switch (config.language) {
    			case "markdown":
    				exts.push(markdown());
    				break;
    			case "javascript":
    				exts.push(javascript());
    				break;
    			default:
    				exts.push(markdown());
    				break;
    		}

    		if (config.lineWrapping) {
    			exts.push(EditorView.lineWrapping);
    		}

    		if (config.lineHighlight) {
    			exts.push(highlightActiveLine());
    		}

    		//
    		// Create the editor state.
    		//
    		edState = EditorState.create({ doc: text, extensions: exts });

    		//
    		// Create the editor View.
    		//
    		edView = new EditorView({ state: edState, parent: CodeMirrorEditor });
    	}

    	onMount(() => {
    		//
    		// Create the editor.
    		//
    		CreateEditorState("");

    		//
    		// Create the editor functions object.
    		//
    		editorFunctions = {
    			getSelection,
    			getValue,
    			replaceSelection,
    			somethingSelected,
    			setCursor,
    			getCursor,
    			setValue,
    			getLine,
    			focus,
    			getEdView,
    			getEdState,
    			isFocused,
    			insertAtCursor
    		};

    		//
    		// Give the parent the functions for interacting with the editor.
    		//
    		fire("editorChange", editorFunctions);

    		//
    		// Make sure the editor is focused.
    		//
    		focus();

    		//
    		// Return a function to run to clean up after mounting.
    		//
    		return () => {
    			// this function runs when the
    			// component is destroyed
    			edState = null;

    			edView = null;
    			editorFunctions = null;
    		};
    	});

    	function insertAtCursor(text) {
    		if (typeof edView !== "undefined") {
    			let point = getCursor();
    			let transaction = edView.state.update({ changes: [{ from: point, insert: text }] });
    			edView.dispatch(transaction);
    		}
    	}

    	function isFocused() {
    		if (typeof edView !== "undefined") {
    			return edView.hasFocus;
    		}

    		return false;
    	}

    	function getLine(pos) {
    		if (typeof edView !== "undefined") {
    			return edView.docView.domAtPos(pos).node.textContent;
    		}

    		return "";
    	}

    	function getSelection() {
    		if (typeof edView !== "undefined") {
    			return edView.state.sliceDoc(edView.state.selection.main.from, edView.state.selection.main.to);
    		}
    	}

    	function replaceSelection(newText) {
    		if (typeof edView !== "undefined") {
    			let point = edView.state.selection.main.from;

    			let transaction = edView.state.update({
    				changes: [
    					{
    						from: edView.state.selection.main.from,
    						to: edView.state.selection.main.to
    					},
    					{ from: point, insert: newText }
    				]
    			});

    			edView.dispatch(transaction);
    		}
    	}

    	function somethingSelected() {
    		if (typeof edView !== "undefined") {
    			return edView.state.selection.ranges.some(r => !r.empty);
    		}
    	}

    	function setCursor(pos) {
    		if (typeof edView !== "undefined") {
    			currentCursor = pos;
    			edView.dispatch({ selection: { anchor: currentCursor } });
    		}
    	}

    	function getCursor() {
    		if (typeof edView !== "undefined") {
    			currentCursor = edView.state.selection.main.head;
    			return currentCursor;
    		} else {
    			return 0;
    		}
    	}

    	function getValue() {
    		if (typeof edView !== "undefined") {
    			return edView.state.doc.toString();
    		}
    	}

    	function focus() {
    		if (typeof edView !== "undefined") {
    			edView.focus();
    		}
    	}

    	function getEdView() {
    		return edView;
    	}

    	function getEdState() {
    		return edState;
    	}

    	const writable_props = ['height', 'width', 'styling', 'config', 'initFinished'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CodeMirror> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			CodeMirrorEditor = $$value;
    			$$invalidate(3, CodeMirrorEditor);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('styling' in $$props) $$invalidate(2, styling = $$props.styling);
    		if ('config' in $$props) $$invalidate(4, config = $$props.config);
    		if ('initFinished' in $$props) $$invalidate(5, initFinished = $$props.initFinished);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		lineNumbers,
    		highlightActiveLineGutter,
    		highlightSpecialChars,
    		drawSelection,
    		dropCursor,
    		rectangularSelection,
    		crosshairCursor,
    		highlightActiveLine,
    		keymap,
    		EditorView,
    		EditorState,
    		foldGutter,
    		indentOnInput,
    		syntaxHighlighting,
    		defaultHighlightStyle,
    		bracketMatching,
    		foldKeymap,
    		history,
    		defaultKeymap,
    		historyKeymap,
    		highlightSelectionMatches,
    		searchKeymap,
    		closeBrackets,
    		autocompletion,
    		closeBracketsKeymap,
    		completionKeymap,
    		lintKeymap,
    		markdown,
    		javascript,
    		theme,
    		dispatch,
    		height,
    		width,
    		styling,
    		config,
    		initFinished,
    		CodeMirrorEditor,
    		edState,
    		edView,
    		editorFunctions,
    		currentCursor,
    		editorTheme,
    		fire,
    		setValue,
    		CreateEditorState,
    		insertAtCursor,
    		isFocused,
    		getLine,
    		getSelection,
    		replaceSelection,
    		somethingSelected,
    		setCursor,
    		getCursor,
    		getValue,
    		focus,
    		getEdView,
    		getEdState,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('height' in $$props) $$invalidate(0, height = $$props.height);
    		if ('width' in $$props) $$invalidate(1, width = $$props.width);
    		if ('styling' in $$props) $$invalidate(2, styling = $$props.styling);
    		if ('config' in $$props) $$invalidate(4, config = $$props.config);
    		if ('initFinished' in $$props) $$invalidate(5, initFinished = $$props.initFinished);
    		if ('CodeMirrorEditor' in $$props) $$invalidate(3, CodeMirrorEditor = $$props.CodeMirrorEditor);
    		if ('edState' in $$props) edState = $$props.edState;
    		if ('edView' in $$props) edView = $$props.edView;
    		if ('editorFunctions' in $$props) editorFunctions = $$props.editorFunctions;
    		if ('currentCursor' in $$props) currentCursor = $$props.currentCursor;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [height, width, styling, CodeMirrorEditor, config, initFinished, div_binding];
    }

    class CodeMirror extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			height: 0,
    			width: 1,
    			styling: 2,
    			config: 4,
    			initFinished: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CodeMirror",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get height() {
    		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styling() {
    		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styling(value) {
    		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get config() {
    		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get initFinished() {
    		throw new Error("<CodeMirror>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set initFinished(value) {
    		throw new Error("<CodeMirror>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/AddressBook.svelte generated by Svelte v3.49.0 */

    const { console: console_1$2 } = globals;
    const file$m = "src/components/AddressBook.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (99:8) {#each emails as pemail}
    function create_each_block$b(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*pemail*/ ctx[17].name + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*pemail*/ ctx[17].email + "";
    	let t2;
    	let t3;
    	let td2;
    	let t5;
    	let td3;
    	let t7;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*pemail*/ ctx[17]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[12](/*pemail*/ ctx[17]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space$3();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space$3();
    			td2 = element("td");
    			td2.textContent = "🖋";
    			t5 = space$3();
    			td3 = element("td");
    			td3.textContent = "❌";
    			t7 = space$3();
    			add_location(td0, file$m, 100, 12, 2149);
    			add_location(td1, file$m, 101, 12, 2184);
    			attr_dev(td2, "class", "iconClick svelte-1c11hkb");
    			add_location(td2, file$m, 102, 12, 2220);
    			attr_dev(td3, "class", "iconClick svelte-1c11hkb");
    			add_location(td3, file$m, 110, 12, 2401);
    			add_location(tr, file$m, 99, 10, 2132);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(tr, t7);

    			if (!mounted) {
    				dispose = [
    					listen_dev(td2, "click", click_handler, false, false, false),
    					listen_dev(td3, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*emails*/ 1 && t0_value !== (t0_value = /*pemail*/ ctx[17].name + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*emails*/ 1 && t2_value !== (t2_value = /*pemail*/ ctx[17].email + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(99:8) {#each emails as pemail}",
    		ctx
    	});

    	return block;
    }

    // (140:0) {#if addedit}
    function create_if_block$g(ctx) {
    	let div3;
    	let div0;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let div1;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let div2;
    	let button0;
    	let t6;
    	let t7;
    	let button1;
    	let t8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Name:";
    			t1 = space$3();
    			input0 = element("input");
    			t2 = space$3();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Email:";
    			t4 = space$3();
    			input1 = element("input");
    			t5 = space$3();
    			div2 = element("div");
    			button0 = element("button");
    			t6 = text("Save");
    			t7 = space$3();
    			button1 = element("button");
    			t8 = text("Close");
    			attr_dev(label0, "for", "aename");
    			add_location(label0, file$m, 145, 6, 3322);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "aename");
    			set_style(input0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(input0, "color", /*$theme*/ ctx[4].textColor);
    			set_style(input0, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(input0, "class", "svelte-1c11hkb");
    			add_location(input0, file$m, 146, 6, 3364);
    			attr_dev(div0, "id", "addeditrow");
    			attr_dev(div0, "class", "svelte-1c11hkb");
    			add_location(div0, file$m, 144, 4, 3294);
    			attr_dev(label1, "for", "aeemail");
    			add_location(label1, file$m, 154, 6, 3610);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "aeemail");
    			set_style(input1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(input1, "color", /*$theme*/ ctx[4].textColor);
    			set_style(input1, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(input1, "class", "svelte-1c11hkb");
    			add_location(input1, file$m, 155, 6, 3654);
    			attr_dev(div1, "id", "addeditrow");
    			attr_dev(div1, "class", "svelte-1c11hkb");
    			add_location(div1, file$m, 153, 4, 3582);
    			set_style(button0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[4].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(button0, "class", "svelte-1c11hkb");
    			add_location(button0, file$m, 163, 6, 3901);
    			set_style(button1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[4].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(button1, "class", "svelte-1c11hkb");
    			add_location(button1, file$m, 169, 6, 4099);
    			attr_dev(div2, "id", "buttonrow");
    			attr_dev(div2, "class", "svelte-1c11hkb");
    			add_location(div2, file$m, 162, 4, 3874);
    			attr_dev(div3, "id", "addeditdiv");
    			set_style(div3, "background-color", /*$theme*/ ctx[4].backgroundColor);
    			set_style(div3, "font-family", /*$theme*/ ctx[4].font);
    			set_style(div3, "color", /*$theme*/ ctx[4].textColor);
    			set_style(div3, "font-size", /*$theme*/ ctx[4].fontSize);
    			set_style(div3, "border-color", /*$theme*/ ctx[4].textAreaColor);
    			attr_dev(div3, "class", "svelte-1c11hkb");
    			add_location(div3, file$m, 140, 2, 3082);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*name*/ ctx[2]);
    			append_dev(div3, t2);
    			append_dev(div3, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			set_input_value(input1, /*email*/ ctx[3]);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t6);
    			append_dev(div2, t7);
    			append_dev(div2, button1);
    			append_dev(button1, t8);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[13]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[14]),
    					listen_dev(button0, "click", /*addNew*/ ctx[7], false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*name*/ 4 && input0.value !== /*name*/ ctx[2]) {
    				set_input_value(input0, /*name*/ ctx[2]);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*email*/ 8 && input1.value !== /*email*/ ctx[3]) {
    				set_input_value(input1, /*email*/ ctx[3]);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button0, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button0, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button1, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button1, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div3, "background-color", /*$theme*/ ctx[4].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div3, "font-family", /*$theme*/ ctx[4].font);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div3, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div3, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div3, "border-color", /*$theme*/ ctx[4].textAreaColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(140:0) {#if addedit}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div2;
    	let div0;
    	let table;
    	let thead;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t4;
    	let th3;
    	let t5;
    	let tbody;
    	let t6;
    	let div1;
    	let button0;
    	let t7;
    	let t8;
    	let button1;
    	let t9;
    	let t10;
    	let if_block_anchor;
    	let mounted;
    	let dispose;
    	let each_value = /*emails*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	let if_block = /*addedit*/ ctx[1] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			table = element("table");
    			thead = element("thead");
    			th0 = element("th");
    			th0.textContent = "Name";
    			t1 = space$3();
    			th1 = element("th");
    			th1.textContent = "Address";
    			t3 = space$3();
    			th2 = element("th");
    			t4 = space$3();
    			th3 = element("th");
    			t5 = space$3();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t6 = space$3();
    			div1 = element("div");
    			button0 = element("button");
    			t7 = text("New");
    			t8 = space$3();
    			button1 = element("button");
    			t9 = text("Close");
    			t10 = space$3();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    			add_location(th0, file$m, 95, 8, 2015);
    			add_location(th1, file$m, 95, 22, 2029);
    			add_location(th2, file$m, 95, 39, 2046);
    			add_location(th3, file$m, 95, 46, 2053);
    			add_location(thead, file$m, 94, 6, 1999);
    			add_location(tbody, file$m, 97, 6, 2081);
    			add_location(table, file$m, 93, 4, 1985);
    			attr_dev(div0, "id", "tablediv");
    			attr_dev(div0, "class", "svelte-1c11hkb");
    			add_location(div0, file$m, 92, 2, 1961);
    			set_style(button0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[4].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(button0, "class", "svelte-1c11hkb");
    			add_location(button0, file$m, 124, 4, 2667);
    			set_style(button1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[4].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(button1, "class", "svelte-1c11hkb");
    			add_location(button1, file$m, 130, 4, 2856);
    			attr_dev(div1, "id", "buttonrow");
    			attr_dev(div1, "class", "svelte-1c11hkb");
    			add_location(div1, file$m, 123, 2, 2642);
    			attr_dev(div2, "id", "addressBook");
    			set_style(div2, "background-color", /*$theme*/ ctx[4].backgroundColor);
    			set_style(div2, "font-family", /*$theme*/ ctx[4].font);
    			set_style(div2, "color", /*$theme*/ ctx[4].textColor);
    			set_style(div2, "font-size", /*$theme*/ ctx[4].fontSize);
    			set_style(div2, "border-color", /*$theme*/ ctx[4].borderColor);
    			attr_dev(div2, "class", "svelte-1c11hkb");
    			add_location(div2, file$m, 88, 0, 1758);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, table);
    			append_dev(table, thead);
    			append_dev(thead, th0);
    			append_dev(thead, t1);
    			append_dev(thead, th1);
    			append_dev(thead, t3);
    			append_dev(thead, th2);
    			append_dev(thead, t4);
    			append_dev(thead, th3);
    			append_dev(table, t5);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, t7);
    			append_dev(div1, t8);
    			append_dev(div1, button1);
    			append_dev(button1, t9);
    			insert_dev(target, t10, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*newAddress*/ ctx[5], false, false, false),
    					listen_dev(button1, "click", /*closeAddressBook*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*deleteEmail, emails, editEmail*/ 769) {
    				each_value = /*emails*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button0, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button0, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button1, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(button1, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div2, "background-color", /*$theme*/ ctx[4].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div2, "font-family", /*$theme*/ ctx[4].font);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div2, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div2, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(div2, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (/*addedit*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t10);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(4, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AddressBook', slots, []);
    	let { show } = $$props;
    	let emails = [];
    	let addedit = false;
    	let name = "";
    	let email = "";

    	onMount(() => {
    		getEmails();
    	});

    	function getEmails(callback) {
    		//
    		// Get the emails from the server.
    		//
    		fetch("http://localhost:9978/api/emailit/emails", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			$$invalidate(0, emails = data.emails);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function newAddress() {
    		$$invalidate(1, addedit = true);
    		$$invalidate(2, name = "");
    		$$invalidate(3, email = "");
    	}

    	function closeAddressBook() {
    		$$invalidate(10, show = false);
    	}

    	function addNew() {
    		$$invalidate(3, email = email.trim());
    		$$invalidate(2, name = name.trim());
    		$$invalidate(0, emails = emails.filter(item => item.email !== email));
    		emails.push({ name, email });
    		$$invalidate(0, emails);

    		fetch("http://localhost:9978/api/emailit/addEmail", {
    			method: "PUT",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify({ name, email })
    		});

    		$$invalidate(1, addedit = false);
    	}

    	function editEmail(eemail) {
    		console.log(eemail);
    		$$invalidate(2, name = eemail.name);
    		$$invalidate(3, email = eemail.email);
    	}

    	function deleteEmail(dem) {
    		dem.email = dem.email.trim();
    		$$invalidate(0, emails = emails.filter(item => item.email !== dem.email));

    		fetch("http://localhost:9978/api/emailit/addEmail", {
    			method: "DELETE",
    			headers: { "Content-type": "application/json" },
    			body: { name: "", email: dem.email }
    		});
    	}

    	const writable_props = ['show'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<AddressBook> was created with unknown prop '${key}'`);
    	});

    	const click_handler = pemail => {
    		editEmail(pemail);
    	};

    	const click_handler_1 = pemail => {
    		deleteEmail(pemail);
    	};

    	function input0_input_handler() {
    		name = this.value;
    		$$invalidate(2, name);
    	}

    	function input1_input_handler() {
    		email = this.value;
    		$$invalidate(3, email);
    	}

    	const click_handler_2 = () => {
    		$$invalidate(1, addedit = false);
    	};

    	$$self.$$set = $$props => {
    		if ('show' in $$props) $$invalidate(10, show = $$props.show);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		theme,
    		show,
    		emails,
    		addedit,
    		name,
    		email,
    		getEmails,
    		newAddress,
    		closeAddressBook,
    		addNew,
    		editEmail,
    		deleteEmail,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('show' in $$props) $$invalidate(10, show = $$props.show);
    		if ('emails' in $$props) $$invalidate(0, emails = $$props.emails);
    		if ('addedit' in $$props) $$invalidate(1, addedit = $$props.addedit);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('email' in $$props) $$invalidate(3, email = $$props.email);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		emails,
    		addedit,
    		name,
    		email,
    		$theme,
    		newAddress,
    		closeAddressBook,
    		addNew,
    		editEmail,
    		deleteEmail,
    		show,
    		click_handler,
    		click_handler_1,
    		input0_input_handler,
    		input1_input_handler,
    		click_handler_2
    	];
    }

    class AddressBook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { show: 10 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AddressBook",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*show*/ ctx[10] === undefined && !('show' in props)) {
    			console_1$2.warn("<AddressBook> was created without expected prop 'show'");
    		}
    	}

    	get show() {
    		throw new Error("<AddressBook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<AddressBook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var showdown$1 = {exports: {}};

    (function (module) {
    	(function(){
    	/**
    	 * Created by Tivie on 13-07-2015.
    	 */

    	function getDefaultOpts (simple) {

    	  var defaultOptions = {
    	    omitExtraWLInCodeBlocks: {
    	      defaultValue: false,
    	      describe: 'Omit the default extra whiteline added to code blocks',
    	      type: 'boolean'
    	    },
    	    noHeaderId: {
    	      defaultValue: false,
    	      describe: 'Turn on/off generated header id',
    	      type: 'boolean'
    	    },
    	    prefixHeaderId: {
    	      defaultValue: false,
    	      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
    	      type: 'string'
    	    },
    	    rawPrefixHeaderId: {
    	      defaultValue: false,
    	      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
    	      type: 'boolean'
    	    },
    	    ghCompatibleHeaderId: {
    	      defaultValue: false,
    	      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
    	      type: 'boolean'
    	    },
    	    rawHeaderId: {
    	      defaultValue: false,
    	      describe: 'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
    	      type: 'boolean'
    	    },
    	    headerLevelStart: {
    	      defaultValue: false,
    	      describe: 'The header blocks level start',
    	      type: 'integer'
    	    },
    	    parseImgDimensions: {
    	      defaultValue: false,
    	      describe: 'Turn on/off image dimension parsing',
    	      type: 'boolean'
    	    },
    	    simplifiedAutoLink: {
    	      defaultValue: false,
    	      describe: 'Turn on/off GFM autolink style',
    	      type: 'boolean'
    	    },
    	    excludeTrailingPunctuationFromURLs: {
    	      defaultValue: false,
    	      describe: 'Excludes trailing punctuation from links generated with autoLinking',
    	      type: 'boolean'
    	    },
    	    literalMidWordUnderscores: {
    	      defaultValue: false,
    	      describe: 'Parse midword underscores as literal underscores',
    	      type: 'boolean'
    	    },
    	    literalMidWordAsterisks: {
    	      defaultValue: false,
    	      describe: 'Parse midword asterisks as literal asterisks',
    	      type: 'boolean'
    	    },
    	    strikethrough: {
    	      defaultValue: false,
    	      describe: 'Turn on/off strikethrough support',
    	      type: 'boolean'
    	    },
    	    tables: {
    	      defaultValue: false,
    	      describe: 'Turn on/off tables support',
    	      type: 'boolean'
    	    },
    	    tablesHeaderId: {
    	      defaultValue: false,
    	      describe: 'Add an id to table headers',
    	      type: 'boolean'
    	    },
    	    ghCodeBlocks: {
    	      defaultValue: true,
    	      describe: 'Turn on/off GFM fenced code blocks support',
    	      type: 'boolean'
    	    },
    	    tasklists: {
    	      defaultValue: false,
    	      describe: 'Turn on/off GFM tasklist support',
    	      type: 'boolean'
    	    },
    	    smoothLivePreview: {
    	      defaultValue: false,
    	      describe: 'Prevents weird effects in live previews due to incomplete input',
    	      type: 'boolean'
    	    },
    	    smartIndentationFix: {
    	      defaultValue: false,
    	      describe: 'Tries to smartly fix indentation in es6 strings',
    	      type: 'boolean'
    	    },
    	    disableForced4SpacesIndentedSublists: {
    	      defaultValue: false,
    	      describe: 'Disables the requirement of indenting nested sublists by 4 spaces',
    	      type: 'boolean'
    	    },
    	    simpleLineBreaks: {
    	      defaultValue: false,
    	      describe: 'Parses simple line breaks as <br> (GFM Style)',
    	      type: 'boolean'
    	    },
    	    requireSpaceBeforeHeadingText: {
    	      defaultValue: false,
    	      describe: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
    	      type: 'boolean'
    	    },
    	    ghMentions: {
    	      defaultValue: false,
    	      describe: 'Enables github @mentions',
    	      type: 'boolean'
    	    },
    	    ghMentionsLink: {
    	      defaultValue: 'https://github.com/{u}',
    	      describe: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
    	      type: 'string'
    	    },
    	    encodeEmails: {
    	      defaultValue: true,
    	      describe: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
    	      type: 'boolean'
    	    },
    	    openLinksInNewWindow: {
    	      defaultValue: false,
    	      describe: 'Open all links in new windows',
    	      type: 'boolean'
    	    },
    	    backslashEscapesHTMLTags: {
    	      defaultValue: false,
    	      describe: 'Support for HTML Tag escaping. ex: \<div>foo\</div>',
    	      type: 'boolean'
    	    },
    	    emoji: {
    	      defaultValue: false,
    	      describe: 'Enable emoji support. Ex: `this is a :smile: emoji`',
    	      type: 'boolean'
    	    },
    	    underline: {
    	      defaultValue: false,
    	      describe: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
    	      type: 'boolean'
    	    },
    	    ellipsis: {
    	      defaultValue: true,
    	      describe: 'Replaces three dots with the ellipsis unicode character',
    	      type: 'boolean'
    	    },
    	    completeHTMLDocument: {
    	      defaultValue: false,
    	      describe: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
    	      type: 'boolean'
    	    },
    	    metadata: {
    	      defaultValue: false,
    	      describe: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
    	      type: 'boolean'
    	    },
    	    splitAdjacentBlockquotes: {
    	      defaultValue: false,
    	      describe: 'Split adjacent blockquote blocks',
    	      type: 'boolean'
    	    }
    	  };
    	  if (simple === false) {
    	    return JSON.parse(JSON.stringify(defaultOptions));
    	  }
    	  var ret = {};
    	  for (var opt in defaultOptions) {
    	    if (defaultOptions.hasOwnProperty(opt)) {
    	      ret[opt] = defaultOptions[opt].defaultValue;
    	    }
    	  }
    	  return ret;
    	}

    	function allOptionsOn () {
    	  var options = getDefaultOpts(true),
    	      ret = {};
    	  for (var opt in options) {
    	    if (options.hasOwnProperty(opt)) {
    	      ret[opt] = true;
    	    }
    	  }
    	  return ret;
    	}

    	/**
    	 * Created by Tivie on 06-01-2015.
    	 */

    	// Private properties
    	var showdown = {},
    	    parsers = {},
    	    extensions = {},
    	    globalOptions = getDefaultOpts(true),
    	    setFlavor = 'vanilla',
    	    flavor = {
    	      github: {
    	        omitExtraWLInCodeBlocks:              true,
    	        simplifiedAutoLink:                   true,
    	        excludeTrailingPunctuationFromURLs:   true,
    	        literalMidWordUnderscores:            true,
    	        strikethrough:                        true,
    	        tables:                               true,
    	        tablesHeaderId:                       true,
    	        ghCodeBlocks:                         true,
    	        tasklists:                            true,
    	        disableForced4SpacesIndentedSublists: true,
    	        simpleLineBreaks:                     true,
    	        requireSpaceBeforeHeadingText:        true,
    	        ghCompatibleHeaderId:                 true,
    	        ghMentions:                           true,
    	        backslashEscapesHTMLTags:             true,
    	        emoji:                                true,
    	        splitAdjacentBlockquotes:             true
    	      },
    	      original: {
    	        noHeaderId:                           true,
    	        ghCodeBlocks:                         false
    	      },
    	      ghost: {
    	        omitExtraWLInCodeBlocks:              true,
    	        parseImgDimensions:                   true,
    	        simplifiedAutoLink:                   true,
    	        excludeTrailingPunctuationFromURLs:   true,
    	        literalMidWordUnderscores:            true,
    	        strikethrough:                        true,
    	        tables:                               true,
    	        tablesHeaderId:                       true,
    	        ghCodeBlocks:                         true,
    	        tasklists:                            true,
    	        smoothLivePreview:                    true,
    	        simpleLineBreaks:                     true,
    	        requireSpaceBeforeHeadingText:        true,
    	        ghMentions:                           false,
    	        encodeEmails:                         true
    	      },
    	      vanilla: getDefaultOpts(true),
    	      allOn: allOptionsOn()
    	    };

    	/**
    	 * helper namespace
    	 * @type {{}}
    	 */
    	showdown.helper = {};

    	/**
    	 * TODO LEGACY SUPPORT CODE
    	 * @type {{}}
    	 */
    	showdown.extensions = {};

    	/**
    	 * Set a global option
    	 * @static
    	 * @param {string} key
    	 * @param {*} value
    	 * @returns {showdown}
    	 */
    	showdown.setOption = function (key, value) {
    	  globalOptions[key] = value;
    	  return this;
    	};

    	/**
    	 * Get a global option
    	 * @static
    	 * @param {string} key
    	 * @returns {*}
    	 */
    	showdown.getOption = function (key) {
    	  return globalOptions[key];
    	};

    	/**
    	 * Get the global options
    	 * @static
    	 * @returns {{}}
    	 */
    	showdown.getOptions = function () {
    	  return globalOptions;
    	};

    	/**
    	 * Reset global options to the default values
    	 * @static
    	 */
    	showdown.resetOptions = function () {
    	  globalOptions = getDefaultOpts(true);
    	};

    	/**
    	 * Set the flavor showdown should use as default
    	 * @param {string} name
    	 */
    	showdown.setFlavor = function (name) {
    	  if (!flavor.hasOwnProperty(name)) {
    	    throw Error(name + ' flavor was not found');
    	  }
    	  showdown.resetOptions();
    	  var preset = flavor[name];
    	  setFlavor = name;
    	  for (var option in preset) {
    	    if (preset.hasOwnProperty(option)) {
    	      globalOptions[option] = preset[option];
    	    }
    	  }
    	};

    	/**
    	 * Get the currently set flavor
    	 * @returns {string}
    	 */
    	showdown.getFlavor = function () {
    	  return setFlavor;
    	};

    	/**
    	 * Get the options of a specified flavor. Returns undefined if the flavor was not found
    	 * @param {string} name Name of the flavor
    	 * @returns {{}|undefined}
    	 */
    	showdown.getFlavorOptions = function (name) {
    	  if (flavor.hasOwnProperty(name)) {
    	    return flavor[name];
    	  }
    	};

    	/**
    	 * Get the default options
    	 * @static
    	 * @param {boolean} [simple=true]
    	 * @returns {{}}
    	 */
    	showdown.getDefaultOptions = function (simple) {
    	  return getDefaultOpts(simple);
    	};

    	/**
    	 * Get or set a subParser
    	 *
    	 * subParser(name)       - Get a registered subParser
    	 * subParser(name, func) - Register a subParser
    	 * @static
    	 * @param {string} name
    	 * @param {function} [func]
    	 * @returns {*}
    	 */
    	showdown.subParser = function (name, func) {
    	  if (showdown.helper.isString(name)) {
    	    if (typeof func !== 'undefined') {
    	      parsers[name] = func;
    	    } else {
    	      if (parsers.hasOwnProperty(name)) {
    	        return parsers[name];
    	      } else {
    	        throw Error('SubParser named ' + name + ' not registered!');
    	      }
    	    }
    	  }
    	};

    	/**
    	 * Gets or registers an extension
    	 * @static
    	 * @param {string} name
    	 * @param {object|object[]|function=} ext
    	 * @returns {*}
    	 */
    	showdown.extension = function (name, ext) {

    	  if (!showdown.helper.isString(name)) {
    	    throw Error('Extension \'name\' must be a string');
    	  }

    	  name = showdown.helper.stdExtName(name);

    	  // Getter
    	  if (showdown.helper.isUndefined(ext)) {
    	    if (!extensions.hasOwnProperty(name)) {
    	      throw Error('Extension named ' + name + ' is not registered!');
    	    }
    	    return extensions[name];

    	    // Setter
    	  } else {
    	    // Expand extension if it's wrapped in a function
    	    if (typeof ext === 'function') {
    	      ext = ext();
    	    }

    	    // Ensure extension is an array
    	    if (!showdown.helper.isArray(ext)) {
    	      ext = [ext];
    	    }

    	    var validExtension = validate(ext, name);

    	    if (validExtension.valid) {
    	      extensions[name] = ext;
    	    } else {
    	      throw Error(validExtension.error);
    	    }
    	  }
    	};

    	/**
    	 * Gets all extensions registered
    	 * @returns {{}}
    	 */
    	showdown.getAllExtensions = function () {
    	  return extensions;
    	};

    	/**
    	 * Remove an extension
    	 * @param {string} name
    	 */
    	showdown.removeExtension = function (name) {
    	  delete extensions[name];
    	};

    	/**
    	 * Removes all extensions
    	 */
    	showdown.resetExtensions = function () {
    	  extensions = {};
    	};

    	/**
    	 * Validate extension
    	 * @param {array} extension
    	 * @param {string} name
    	 * @returns {{valid: boolean, error: string}}
    	 */
    	function validate (extension, name) {

    	  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',
    	      ret = {
    	        valid: true,
    	        error: ''
    	      };

    	  if (!showdown.helper.isArray(extension)) {
    	    extension = [extension];
    	  }

    	  for (var i = 0; i < extension.length; ++i) {
    	    var baseMsg = errMsg + ' sub-extension ' + i + ': ',
    	        ext = extension[i];
    	    if (typeof ext !== 'object') {
    	      ret.valid = false;
    	      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';
    	      return ret;
    	    }

    	    if (!showdown.helper.isString(ext.type)) {
    	      ret.valid = false;
    	      ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + ' given';
    	      return ret;
    	    }

    	    var type = ext.type = ext.type.toLowerCase();

    	    // normalize extension type
    	    if (type === 'language') {
    	      type = ext.type = 'lang';
    	    }

    	    if (type === 'html') {
    	      type = ext.type = 'output';
    	    }

    	    if (type !== 'lang' && type !== 'output' && type !== 'listener') {
    	      ret.valid = false;
    	      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
    	      return ret;
    	    }

    	    if (type === 'listener') {
    	      if (showdown.helper.isUndefined(ext.listeners)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
    	        return ret;
    	      }
    	    } else {
    	      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
    	        return ret;
    	      }
    	    }

    	    if (ext.listeners) {
    	      if (typeof ext.listeners !== 'object') {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + ' given';
    	        return ret;
    	      }
    	      for (var ln in ext.listeners) {
    	        if (ext.listeners.hasOwnProperty(ln)) {
    	          if (typeof ext.listeners[ln] !== 'function') {
    	            ret.valid = false;
    	            ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln +
    	              ' must be a function but ' + typeof ext.listeners[ln] + ' given';
    	            return ret;
    	          }
    	        }
    	      }
    	    }

    	    if (ext.filter) {
    	      if (typeof ext.filter !== 'function') {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + ' given';
    	        return ret;
    	      }
    	    } else if (ext.regex) {
    	      if (showdown.helper.isString(ext.regex)) {
    	        ext.regex = new RegExp(ext.regex, 'g');
    	      }
    	      if (!(ext.regex instanceof RegExp)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';
    	        return ret;
    	      }
    	      if (showdown.helper.isUndefined(ext.replace)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
    	        return ret;
    	      }
    	    }
    	  }
    	  return ret;
    	}

    	/**
    	 * Validate extension
    	 * @param {object} ext
    	 * @returns {boolean}
    	 */
    	showdown.validateExtension = function (ext) {

    	  var validateExtension = validate(ext, null);
    	  if (!validateExtension.valid) {
    	    console.warn(validateExtension.error);
    	    return false;
    	  }
    	  return true;
    	};

    	/**
    	 * showdownjs helper functions
    	 */

    	if (!showdown.hasOwnProperty('helper')) {
    	  showdown.helper = {};
    	}

    	/**
    	 * Check if var is string
    	 * @static
    	 * @param {string} a
    	 * @returns {boolean}
    	 */
    	showdown.helper.isString = function (a) {
    	  return (typeof a === 'string' || a instanceof String);
    	};

    	/**
    	 * Check if var is a function
    	 * @static
    	 * @param {*} a
    	 * @returns {boolean}
    	 */
    	showdown.helper.isFunction = function (a) {
    	  var getType = {};
    	  return a && getType.toString.call(a) === '[object Function]';
    	};

    	/**
    	 * isArray helper function
    	 * @static
    	 * @param {*} a
    	 * @returns {boolean}
    	 */
    	showdown.helper.isArray = function (a) {
    	  return Array.isArray(a);
    	};

    	/**
    	 * Check if value is undefined
    	 * @static
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
    	 */
    	showdown.helper.isUndefined = function (value) {
    	  return typeof value === 'undefined';
    	};

    	/**
    	 * ForEach helper function
    	 * Iterates over Arrays and Objects (own properties only)
    	 * @static
    	 * @param {*} obj
    	 * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object
    	 */
    	showdown.helper.forEach = function (obj, callback) {
    	  // check if obj is defined
    	  if (showdown.helper.isUndefined(obj)) {
    	    throw new Error('obj param is required');
    	  }

    	  if (showdown.helper.isUndefined(callback)) {
    	    throw new Error('callback param is required');
    	  }

    	  if (!showdown.helper.isFunction(callback)) {
    	    throw new Error('callback param must be a function/closure');
    	  }

    	  if (typeof obj.forEach === 'function') {
    	    obj.forEach(callback);
    	  } else if (showdown.helper.isArray(obj)) {
    	    for (var i = 0; i < obj.length; i++) {
    	      callback(obj[i], i, obj);
    	    }
    	  } else if (typeof (obj) === 'object') {
    	    for (var prop in obj) {
    	      if (obj.hasOwnProperty(prop)) {
    	        callback(obj[prop], prop, obj);
    	      }
    	    }
    	  } else {
    	    throw new Error('obj does not seem to be an array or an iterable object');
    	  }
    	};

    	/**
    	 * Standardidize extension name
    	 * @static
    	 * @param {string} s extension name
    	 * @returns {string}
    	 */
    	showdown.helper.stdExtName = function (s) {
    	  return s.replace(/[_?*+\/\\.^-]/g, '').replace(/\s/g, '').toLowerCase();
    	};

    	function escapeCharactersCallback (wholeMatch, m1) {
    	  var charCodeToEscape = m1.charCodeAt(0);
    	  return '¨E' + charCodeToEscape + 'E';
    	}

    	/**
    	 * Callback used to escape characters when passing through String.replace
    	 * @static
    	 * @param {string} wholeMatch
    	 * @param {string} m1
    	 * @returns {string}
    	 */
    	showdown.helper.escapeCharactersCallback = escapeCharactersCallback;

    	/**
    	 * Escape characters in a string
    	 * @static
    	 * @param {string} text
    	 * @param {string} charsToEscape
    	 * @param {boolean} afterBackslash
    	 * @returns {XML|string|void|*}
    	 */
    	showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {
    	  // First we have to escape the escape characters so that
    	  // we can build a character class out of them
    	  var regexString = '([' + charsToEscape.replace(/([\[\]\\])/g, '\\$1') + '])';

    	  if (afterBackslash) {
    	    regexString = '\\\\' + regexString;
    	  }

    	  var regex = new RegExp(regexString, 'g');
    	  text = text.replace(regex, escapeCharactersCallback);

    	  return text;
    	};

    	/**
    	 * Unescape HTML entities
    	 * @param txt
    	 * @returns {string}
    	 */
    	showdown.helper.unescapeHTMLEntities = function (txt) {

    	  return txt
    	    .replace(/&quot;/g, '"')
    	    .replace(/&lt;/g, '<')
    	    .replace(/&gt;/g, '>')
    	    .replace(/&amp;/g, '&');
    	};

    	var rgxFindMatchPos = function (str, left, right, flags) {
    	  var f = flags || '',
    	      g = f.indexOf('g') > -1,
    	      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),
    	      l = new RegExp(left, f.replace(/g/g, '')),
    	      pos = [],
    	      t, s, m, start, end;

    	  do {
    	    t = 0;
    	    while ((m = x.exec(str))) {
    	      if (l.test(m[0])) {
    	        if (!(t++)) {
    	          s = x.lastIndex;
    	          start = s - m[0].length;
    	        }
    	      } else if (t) {
    	        if (!--t) {
    	          end = m.index + m[0].length;
    	          var obj = {
    	            left: {start: start, end: s},
    	            match: {start: s, end: m.index},
    	            right: {start: m.index, end: end},
    	            wholeMatch: {start: start, end: end}
    	          };
    	          pos.push(obj);
    	          if (!g) {
    	            return pos;
    	          }
    	        }
    	      }
    	    }
    	  } while (t && (x.lastIndex = s));

    	  return pos;
    	};

    	/**
    	 * matchRecursiveRegExp
    	 *
    	 * (c) 2007 Steven Levithan <stevenlevithan.com>
    	 * MIT License
    	 *
    	 * Accepts a string to search, a left and right format delimiter
    	 * as regex patterns, and optional regex flags. Returns an array
    	 * of matches, allowing nested instances of left/right delimiters.
    	 * Use the "g" flag to return all matches, otherwise only the
    	 * first is returned. Be careful to ensure that the left and
    	 * right format delimiters produce mutually exclusive matches.
    	 * Backreferences are not supported within the right delimiter
    	 * due to how it is internally combined with the left delimiter.
    	 * When matching strings whose format delimiters are unbalanced
    	 * to the left or right, the output is intentionally as a
    	 * conventional regex library with recursion support would
    	 * produce, e.g. "<<x>" and "<x>>" both produce ["x"] when using
    	 * "<" and ">" as the delimiters (both strings contain a single,
    	 * balanced instance of "<x>").
    	 *
    	 * examples:
    	 * matchRecursiveRegExp("test", "\\(", "\\)")
    	 * returns: []
    	 * matchRecursiveRegExp("<t<<e>><s>>t<>", "<", ">", "g")
    	 * returns: ["t<<e>><s>", ""]
    	 * matchRecursiveRegExp("<div id=\"x\">test</div>", "<div\\b[^>]*>", "</div>", "gi")
    	 * returns: ["test"]
    	 */
    	showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {

    	  var matchPos = rgxFindMatchPos (str, left, right, flags),
    	      results = [];

    	  for (var i = 0; i < matchPos.length; ++i) {
    	    results.push([
    	      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
    	      str.slice(matchPos[i].match.start, matchPos[i].match.end),
    	      str.slice(matchPos[i].left.start, matchPos[i].left.end),
    	      str.slice(matchPos[i].right.start, matchPos[i].right.end)
    	    ]);
    	  }
    	  return results;
    	};

    	/**
    	 *
    	 * @param {string} str
    	 * @param {string|function} replacement
    	 * @param {string} left
    	 * @param {string} right
    	 * @param {string} flags
    	 * @returns {string}
    	 */
    	showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {

    	  if (!showdown.helper.isFunction(replacement)) {
    	    var repStr = replacement;
    	    replacement = function () {
    	      return repStr;
    	    };
    	  }

    	  var matchPos = rgxFindMatchPos(str, left, right, flags),
    	      finalStr = str,
    	      lng = matchPos.length;

    	  if (lng > 0) {
    	    var bits = [];
    	    if (matchPos[0].wholeMatch.start !== 0) {
    	      bits.push(str.slice(0, matchPos[0].wholeMatch.start));
    	    }
    	    for (var i = 0; i < lng; ++i) {
    	      bits.push(
    	        replacement(
    	          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
    	          str.slice(matchPos[i].match.start, matchPos[i].match.end),
    	          str.slice(matchPos[i].left.start, matchPos[i].left.end),
    	          str.slice(matchPos[i].right.start, matchPos[i].right.end)
    	        )
    	      );
    	      if (i < lng - 1) {
    	        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));
    	      }
    	    }
    	    if (matchPos[lng - 1].wholeMatch.end < str.length) {
    	      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
    	    }
    	    finalStr = bits.join('');
    	  }
    	  return finalStr;
    	};

    	/**
    	 * Returns the index within the passed String object of the first occurrence of the specified regex,
    	 * starting the search at fromIndex. Returns -1 if the value is not found.
    	 *
    	 * @param {string} str string to search
    	 * @param {RegExp} regex Regular expression to search
    	 * @param {int} [fromIndex = 0] Index to start the search
    	 * @returns {Number}
    	 * @throws InvalidArgumentError
    	 */
    	showdown.helper.regexIndexOf = function (str, regex, fromIndex) {
    	  if (!showdown.helper.isString(str)) {
    	    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
    	  }
    	  if (regex instanceof RegExp === false) {
    	    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';
    	  }
    	  var indexOf = str.substring(fromIndex || 0).search(regex);
    	  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;
    	};

    	/**
    	 * Splits the passed string object at the defined index, and returns an array composed of the two substrings
    	 * @param {string} str string to split
    	 * @param {int} index index to split string at
    	 * @returns {[string,string]}
    	 * @throws InvalidArgumentError
    	 */
    	showdown.helper.splitAtIndex = function (str, index) {
    	  if (!showdown.helper.isString(str)) {
    	    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
    	  }
    	  return [str.substring(0, index), str.substring(index)];
    	};

    	/**
    	 * Obfuscate an e-mail address through the use of Character Entities,
    	 * transforming ASCII characters into their equivalent decimal or hex entities.
    	 *
    	 * Since it has a random component, subsequent calls to this function produce different results
    	 *
    	 * @param {string} mail
    	 * @returns {string}
    	 */
    	showdown.helper.encodeEmailAddress = function (mail) {
    	  var encode = [
    	    function (ch) {
    	      return '&#' + ch.charCodeAt(0) + ';';
    	    },
    	    function (ch) {
    	      return '&#x' + ch.charCodeAt(0).toString(16) + ';';
    	    },
    	    function (ch) {
    	      return ch;
    	    }
    	  ];

    	  mail = mail.replace(/./g, function (ch) {
    	    if (ch === '@') {
    	      // this *must* be encoded. I insist.
    	      ch = encode[Math.floor(Math.random() * 2)](ch);
    	    } else {
    	      var r = Math.random();
    	      // roughly 10% raw, 45% hex, 45% dec
    	      ch = (
    	        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)
    	      );
    	    }
    	    return ch;
    	  });

    	  return mail;
    	};

    	/**
    	 *
    	 * @param str
    	 * @param targetLength
    	 * @param padString
    	 * @returns {string}
    	 */
    	showdown.helper.padEnd = function padEnd (str, targetLength, padString) {
    	  /*jshint bitwise: false*/
    	  // eslint-disable-next-line space-infix-ops
    	  targetLength = targetLength>>0; //floor if number or convert non-number to 0;
    	  /*jshint bitwise: true*/
    	  padString = String(padString || ' ');
    	  if (str.length > targetLength) {
    	    return String(str);
    	  } else {
    	    targetLength = targetLength - str.length;
    	    if (targetLength > padString.length) {
    	      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
    	    }
    	    return String(str) + padString.slice(0,targetLength);
    	  }
    	};

    	/**
    	 * POLYFILLS
    	 */
    	// use this instead of builtin is undefined for IE8 compatibility
    	if (typeof (console) === 'undefined') {
    	  console = {
    	    warn: function (msg) {
    	      alert(msg);
    	    },
    	    log: function (msg) {
    	      alert(msg);
    	    },
    	    error: function (msg) {
    	      throw msg;
    	    }
    	  };
    	}

    	/**
    	 * Common regexes.
    	 * We declare some common regexes to improve performance
    	 */
    	showdown.helper.regexes = {
    	  asteriskDashAndColon: /([*_:~])/g
    	};

    	/**
    	 * EMOJIS LIST
    	 */
    	showdown.helper.emojis = {
    	  '+1':'\ud83d\udc4d',
    	  '-1':'\ud83d\udc4e',
    	  '100':'\ud83d\udcaf',
    	  '1234':'\ud83d\udd22',
    	  '1st_place_medal':'\ud83e\udd47',
    	  '2nd_place_medal':'\ud83e\udd48',
    	  '3rd_place_medal':'\ud83e\udd49',
    	  '8ball':'\ud83c\udfb1',
    	  'a':'\ud83c\udd70\ufe0f',
    	  'ab':'\ud83c\udd8e',
    	  'abc':'\ud83d\udd24',
    	  'abcd':'\ud83d\udd21',
    	  'accept':'\ud83c\ude51',
    	  'aerial_tramway':'\ud83d\udea1',
    	  'airplane':'\u2708\ufe0f',
    	  'alarm_clock':'\u23f0',
    	  'alembic':'\u2697\ufe0f',
    	  'alien':'\ud83d\udc7d',
    	  'ambulance':'\ud83d\ude91',
    	  'amphora':'\ud83c\udffa',
    	  'anchor':'\u2693\ufe0f',
    	  'angel':'\ud83d\udc7c',
    	  'anger':'\ud83d\udca2',
    	  'angry':'\ud83d\ude20',
    	  'anguished':'\ud83d\ude27',
    	  'ant':'\ud83d\udc1c',
    	  'apple':'\ud83c\udf4e',
    	  'aquarius':'\u2652\ufe0f',
    	  'aries':'\u2648\ufe0f',
    	  'arrow_backward':'\u25c0\ufe0f',
    	  'arrow_double_down':'\u23ec',
    	  'arrow_double_up':'\u23eb',
    	  'arrow_down':'\u2b07\ufe0f',
    	  'arrow_down_small':'\ud83d\udd3d',
    	  'arrow_forward':'\u25b6\ufe0f',
    	  'arrow_heading_down':'\u2935\ufe0f',
    	  'arrow_heading_up':'\u2934\ufe0f',
    	  'arrow_left':'\u2b05\ufe0f',
    	  'arrow_lower_left':'\u2199\ufe0f',
    	  'arrow_lower_right':'\u2198\ufe0f',
    	  'arrow_right':'\u27a1\ufe0f',
    	  'arrow_right_hook':'\u21aa\ufe0f',
    	  'arrow_up':'\u2b06\ufe0f',
    	  'arrow_up_down':'\u2195\ufe0f',
    	  'arrow_up_small':'\ud83d\udd3c',
    	  'arrow_upper_left':'\u2196\ufe0f',
    	  'arrow_upper_right':'\u2197\ufe0f',
    	  'arrows_clockwise':'\ud83d\udd03',
    	  'arrows_counterclockwise':'\ud83d\udd04',
    	  'art':'\ud83c\udfa8',
    	  'articulated_lorry':'\ud83d\ude9b',
    	  'artificial_satellite':'\ud83d\udef0',
    	  'astonished':'\ud83d\ude32',
    	  'athletic_shoe':'\ud83d\udc5f',
    	  'atm':'\ud83c\udfe7',
    	  'atom_symbol':'\u269b\ufe0f',
    	  'avocado':'\ud83e\udd51',
    	  'b':'\ud83c\udd71\ufe0f',
    	  'baby':'\ud83d\udc76',
    	  'baby_bottle':'\ud83c\udf7c',
    	  'baby_chick':'\ud83d\udc24',
    	  'baby_symbol':'\ud83d\udebc',
    	  'back':'\ud83d\udd19',
    	  'bacon':'\ud83e\udd53',
    	  'badminton':'\ud83c\udff8',
    	  'baggage_claim':'\ud83d\udec4',
    	  'baguette_bread':'\ud83e\udd56',
    	  'balance_scale':'\u2696\ufe0f',
    	  'balloon':'\ud83c\udf88',
    	  'ballot_box':'\ud83d\uddf3',
    	  'ballot_box_with_check':'\u2611\ufe0f',
    	  'bamboo':'\ud83c\udf8d',
    	  'banana':'\ud83c\udf4c',
    	  'bangbang':'\u203c\ufe0f',
    	  'bank':'\ud83c\udfe6',
    	  'bar_chart':'\ud83d\udcca',
    	  'barber':'\ud83d\udc88',
    	  'baseball':'\u26be\ufe0f',
    	  'basketball':'\ud83c\udfc0',
    	  'basketball_man':'\u26f9\ufe0f',
    	  'basketball_woman':'\u26f9\ufe0f&zwj;\u2640\ufe0f',
    	  'bat':'\ud83e\udd87',
    	  'bath':'\ud83d\udec0',
    	  'bathtub':'\ud83d\udec1',
    	  'battery':'\ud83d\udd0b',
    	  'beach_umbrella':'\ud83c\udfd6',
    	  'bear':'\ud83d\udc3b',
    	  'bed':'\ud83d\udecf',
    	  'bee':'\ud83d\udc1d',
    	  'beer':'\ud83c\udf7a',
    	  'beers':'\ud83c\udf7b',
    	  'beetle':'\ud83d\udc1e',
    	  'beginner':'\ud83d\udd30',
    	  'bell':'\ud83d\udd14',
    	  'bellhop_bell':'\ud83d\udece',
    	  'bento':'\ud83c\udf71',
    	  'biking_man':'\ud83d\udeb4',
    	  'bike':'\ud83d\udeb2',
    	  'biking_woman':'\ud83d\udeb4&zwj;\u2640\ufe0f',
    	  'bikini':'\ud83d\udc59',
    	  'biohazard':'\u2623\ufe0f',
    	  'bird':'\ud83d\udc26',
    	  'birthday':'\ud83c\udf82',
    	  'black_circle':'\u26ab\ufe0f',
    	  'black_flag':'\ud83c\udff4',
    	  'black_heart':'\ud83d\udda4',
    	  'black_joker':'\ud83c\udccf',
    	  'black_large_square':'\u2b1b\ufe0f',
    	  'black_medium_small_square':'\u25fe\ufe0f',
    	  'black_medium_square':'\u25fc\ufe0f',
    	  'black_nib':'\u2712\ufe0f',
    	  'black_small_square':'\u25aa\ufe0f',
    	  'black_square_button':'\ud83d\udd32',
    	  'blonde_man':'\ud83d\udc71',
    	  'blonde_woman':'\ud83d\udc71&zwj;\u2640\ufe0f',
    	  'blossom':'\ud83c\udf3c',
    	  'blowfish':'\ud83d\udc21',
    	  'blue_book':'\ud83d\udcd8',
    	  'blue_car':'\ud83d\ude99',
    	  'blue_heart':'\ud83d\udc99',
    	  'blush':'\ud83d\ude0a',
    	  'boar':'\ud83d\udc17',
    	  'boat':'\u26f5\ufe0f',
    	  'bomb':'\ud83d\udca3',
    	  'book':'\ud83d\udcd6',
    	  'bookmark':'\ud83d\udd16',
    	  'bookmark_tabs':'\ud83d\udcd1',
    	  'books':'\ud83d\udcda',
    	  'boom':'\ud83d\udca5',
    	  'boot':'\ud83d\udc62',
    	  'bouquet':'\ud83d\udc90',
    	  'bowing_man':'\ud83d\ude47',
    	  'bow_and_arrow':'\ud83c\udff9',
    	  'bowing_woman':'\ud83d\ude47&zwj;\u2640\ufe0f',
    	  'bowling':'\ud83c\udfb3',
    	  'boxing_glove':'\ud83e\udd4a',
    	  'boy':'\ud83d\udc66',
    	  'bread':'\ud83c\udf5e',
    	  'bride_with_veil':'\ud83d\udc70',
    	  'bridge_at_night':'\ud83c\udf09',
    	  'briefcase':'\ud83d\udcbc',
    	  'broken_heart':'\ud83d\udc94',
    	  'bug':'\ud83d\udc1b',
    	  'building_construction':'\ud83c\udfd7',
    	  'bulb':'\ud83d\udca1',
    	  'bullettrain_front':'\ud83d\ude85',
    	  'bullettrain_side':'\ud83d\ude84',
    	  'burrito':'\ud83c\udf2f',
    	  'bus':'\ud83d\ude8c',
    	  'business_suit_levitating':'\ud83d\udd74',
    	  'busstop':'\ud83d\ude8f',
    	  'bust_in_silhouette':'\ud83d\udc64',
    	  'busts_in_silhouette':'\ud83d\udc65',
    	  'butterfly':'\ud83e\udd8b',
    	  'cactus':'\ud83c\udf35',
    	  'cake':'\ud83c\udf70',
    	  'calendar':'\ud83d\udcc6',
    	  'call_me_hand':'\ud83e\udd19',
    	  'calling':'\ud83d\udcf2',
    	  'camel':'\ud83d\udc2b',
    	  'camera':'\ud83d\udcf7',
    	  'camera_flash':'\ud83d\udcf8',
    	  'camping':'\ud83c\udfd5',
    	  'cancer':'\u264b\ufe0f',
    	  'candle':'\ud83d\udd6f',
    	  'candy':'\ud83c\udf6c',
    	  'canoe':'\ud83d\udef6',
    	  'capital_abcd':'\ud83d\udd20',
    	  'capricorn':'\u2651\ufe0f',
    	  'car':'\ud83d\ude97',
    	  'card_file_box':'\ud83d\uddc3',
    	  'card_index':'\ud83d\udcc7',
    	  'card_index_dividers':'\ud83d\uddc2',
    	  'carousel_horse':'\ud83c\udfa0',
    	  'carrot':'\ud83e\udd55',
    	  'cat':'\ud83d\udc31',
    	  'cat2':'\ud83d\udc08',
    	  'cd':'\ud83d\udcbf',
    	  'chains':'\u26d3',
    	  'champagne':'\ud83c\udf7e',
    	  'chart':'\ud83d\udcb9',
    	  'chart_with_downwards_trend':'\ud83d\udcc9',
    	  'chart_with_upwards_trend':'\ud83d\udcc8',
    	  'checkered_flag':'\ud83c\udfc1',
    	  'cheese':'\ud83e\uddc0',
    	  'cherries':'\ud83c\udf52',
    	  'cherry_blossom':'\ud83c\udf38',
    	  'chestnut':'\ud83c\udf30',
    	  'chicken':'\ud83d\udc14',
    	  'children_crossing':'\ud83d\udeb8',
    	  'chipmunk':'\ud83d\udc3f',
    	  'chocolate_bar':'\ud83c\udf6b',
    	  'christmas_tree':'\ud83c\udf84',
    	  'church':'\u26ea\ufe0f',
    	  'cinema':'\ud83c\udfa6',
    	  'circus_tent':'\ud83c\udfaa',
    	  'city_sunrise':'\ud83c\udf07',
    	  'city_sunset':'\ud83c\udf06',
    	  'cityscape':'\ud83c\udfd9',
    	  'cl':'\ud83c\udd91',
    	  'clamp':'\ud83d\udddc',
    	  'clap':'\ud83d\udc4f',
    	  'clapper':'\ud83c\udfac',
    	  'classical_building':'\ud83c\udfdb',
    	  'clinking_glasses':'\ud83e\udd42',
    	  'clipboard':'\ud83d\udccb',
    	  'clock1':'\ud83d\udd50',
    	  'clock10':'\ud83d\udd59',
    	  'clock1030':'\ud83d\udd65',
    	  'clock11':'\ud83d\udd5a',
    	  'clock1130':'\ud83d\udd66',
    	  'clock12':'\ud83d\udd5b',
    	  'clock1230':'\ud83d\udd67',
    	  'clock130':'\ud83d\udd5c',
    	  'clock2':'\ud83d\udd51',
    	  'clock230':'\ud83d\udd5d',
    	  'clock3':'\ud83d\udd52',
    	  'clock330':'\ud83d\udd5e',
    	  'clock4':'\ud83d\udd53',
    	  'clock430':'\ud83d\udd5f',
    	  'clock5':'\ud83d\udd54',
    	  'clock530':'\ud83d\udd60',
    	  'clock6':'\ud83d\udd55',
    	  'clock630':'\ud83d\udd61',
    	  'clock7':'\ud83d\udd56',
    	  'clock730':'\ud83d\udd62',
    	  'clock8':'\ud83d\udd57',
    	  'clock830':'\ud83d\udd63',
    	  'clock9':'\ud83d\udd58',
    	  'clock930':'\ud83d\udd64',
    	  'closed_book':'\ud83d\udcd5',
    	  'closed_lock_with_key':'\ud83d\udd10',
    	  'closed_umbrella':'\ud83c\udf02',
    	  'cloud':'\u2601\ufe0f',
    	  'cloud_with_lightning':'\ud83c\udf29',
    	  'cloud_with_lightning_and_rain':'\u26c8',
    	  'cloud_with_rain':'\ud83c\udf27',
    	  'cloud_with_snow':'\ud83c\udf28',
    	  'clown_face':'\ud83e\udd21',
    	  'clubs':'\u2663\ufe0f',
    	  'cocktail':'\ud83c\udf78',
    	  'coffee':'\u2615\ufe0f',
    	  'coffin':'\u26b0\ufe0f',
    	  'cold_sweat':'\ud83d\ude30',
    	  'comet':'\u2604\ufe0f',
    	  'computer':'\ud83d\udcbb',
    	  'computer_mouse':'\ud83d\uddb1',
    	  'confetti_ball':'\ud83c\udf8a',
    	  'confounded':'\ud83d\ude16',
    	  'confused':'\ud83d\ude15',
    	  'congratulations':'\u3297\ufe0f',
    	  'construction':'\ud83d\udea7',
    	  'construction_worker_man':'\ud83d\udc77',
    	  'construction_worker_woman':'\ud83d\udc77&zwj;\u2640\ufe0f',
    	  'control_knobs':'\ud83c\udf9b',
    	  'convenience_store':'\ud83c\udfea',
    	  'cookie':'\ud83c\udf6a',
    	  'cool':'\ud83c\udd92',
    	  'policeman':'\ud83d\udc6e',
    	  'copyright':'\u00a9\ufe0f',
    	  'corn':'\ud83c\udf3d',
    	  'couch_and_lamp':'\ud83d\udecb',
    	  'couple':'\ud83d\udc6b',
    	  'couple_with_heart_woman_man':'\ud83d\udc91',
    	  'couple_with_heart_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68',
    	  'couple_with_heart_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69',
    	  'couplekiss_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68',
    	  'couplekiss_man_woman':'\ud83d\udc8f',
    	  'couplekiss_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69',
    	  'cow':'\ud83d\udc2e',
    	  'cow2':'\ud83d\udc04',
    	  'cowboy_hat_face':'\ud83e\udd20',
    	  'crab':'\ud83e\udd80',
    	  'crayon':'\ud83d\udd8d',
    	  'credit_card':'\ud83d\udcb3',
    	  'crescent_moon':'\ud83c\udf19',
    	  'cricket':'\ud83c\udfcf',
    	  'crocodile':'\ud83d\udc0a',
    	  'croissant':'\ud83e\udd50',
    	  'crossed_fingers':'\ud83e\udd1e',
    	  'crossed_flags':'\ud83c\udf8c',
    	  'crossed_swords':'\u2694\ufe0f',
    	  'crown':'\ud83d\udc51',
    	  'cry':'\ud83d\ude22',
    	  'crying_cat_face':'\ud83d\ude3f',
    	  'crystal_ball':'\ud83d\udd2e',
    	  'cucumber':'\ud83e\udd52',
    	  'cupid':'\ud83d\udc98',
    	  'curly_loop':'\u27b0',
    	  'currency_exchange':'\ud83d\udcb1',
    	  'curry':'\ud83c\udf5b',
    	  'custard':'\ud83c\udf6e',
    	  'customs':'\ud83d\udec3',
    	  'cyclone':'\ud83c\udf00',
    	  'dagger':'\ud83d\udde1',
    	  'dancer':'\ud83d\udc83',
    	  'dancing_women':'\ud83d\udc6f',
    	  'dancing_men':'\ud83d\udc6f&zwj;\u2642\ufe0f',
    	  'dango':'\ud83c\udf61',
    	  'dark_sunglasses':'\ud83d\udd76',
    	  'dart':'\ud83c\udfaf',
    	  'dash':'\ud83d\udca8',
    	  'date':'\ud83d\udcc5',
    	  'deciduous_tree':'\ud83c\udf33',
    	  'deer':'\ud83e\udd8c',
    	  'department_store':'\ud83c\udfec',
    	  'derelict_house':'\ud83c\udfda',
    	  'desert':'\ud83c\udfdc',
    	  'desert_island':'\ud83c\udfdd',
    	  'desktop_computer':'\ud83d\udda5',
    	  'male_detective':'\ud83d\udd75\ufe0f',
    	  'diamond_shape_with_a_dot_inside':'\ud83d\udca0',
    	  'diamonds':'\u2666\ufe0f',
    	  'disappointed':'\ud83d\ude1e',
    	  'disappointed_relieved':'\ud83d\ude25',
    	  'dizzy':'\ud83d\udcab',
    	  'dizzy_face':'\ud83d\ude35',
    	  'do_not_litter':'\ud83d\udeaf',
    	  'dog':'\ud83d\udc36',
    	  'dog2':'\ud83d\udc15',
    	  'dollar':'\ud83d\udcb5',
    	  'dolls':'\ud83c\udf8e',
    	  'dolphin':'\ud83d\udc2c',
    	  'door':'\ud83d\udeaa',
    	  'doughnut':'\ud83c\udf69',
    	  'dove':'\ud83d\udd4a',
    	  'dragon':'\ud83d\udc09',
    	  'dragon_face':'\ud83d\udc32',
    	  'dress':'\ud83d\udc57',
    	  'dromedary_camel':'\ud83d\udc2a',
    	  'drooling_face':'\ud83e\udd24',
    	  'droplet':'\ud83d\udca7',
    	  'drum':'\ud83e\udd41',
    	  'duck':'\ud83e\udd86',
    	  'dvd':'\ud83d\udcc0',
    	  'e-mail':'\ud83d\udce7',
    	  'eagle':'\ud83e\udd85',
    	  'ear':'\ud83d\udc42',
    	  'ear_of_rice':'\ud83c\udf3e',
    	  'earth_africa':'\ud83c\udf0d',
    	  'earth_americas':'\ud83c\udf0e',
    	  'earth_asia':'\ud83c\udf0f',
    	  'egg':'\ud83e\udd5a',
    	  'eggplant':'\ud83c\udf46',
    	  'eight_pointed_black_star':'\u2734\ufe0f',
    	  'eight_spoked_asterisk':'\u2733\ufe0f',
    	  'electric_plug':'\ud83d\udd0c',
    	  'elephant':'\ud83d\udc18',
    	  'email':'\u2709\ufe0f',
    	  'end':'\ud83d\udd1a',
    	  'envelope_with_arrow':'\ud83d\udce9',
    	  'euro':'\ud83d\udcb6',
    	  'european_castle':'\ud83c\udff0',
    	  'european_post_office':'\ud83c\udfe4',
    	  'evergreen_tree':'\ud83c\udf32',
    	  'exclamation':'\u2757\ufe0f',
    	  'expressionless':'\ud83d\ude11',
    	  'eye':'\ud83d\udc41',
    	  'eye_speech_bubble':'\ud83d\udc41&zwj;\ud83d\udde8',
    	  'eyeglasses':'\ud83d\udc53',
    	  'eyes':'\ud83d\udc40',
    	  'face_with_head_bandage':'\ud83e\udd15',
    	  'face_with_thermometer':'\ud83e\udd12',
    	  'fist_oncoming':'\ud83d\udc4a',
    	  'factory':'\ud83c\udfed',
    	  'fallen_leaf':'\ud83c\udf42',
    	  'family_man_woman_boy':'\ud83d\udc6a',
    	  'family_man_boy':'\ud83d\udc68&zwj;\ud83d\udc66',
    	  'family_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_man_girl':'\ud83d\udc68&zwj;\ud83d\udc67',
    	  'family_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_man_man_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66',
    	  'family_man_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_man_man_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67',
    	  'family_man_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_man_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_man_woman_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_man_woman_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
    	  'family_man_woman_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_man_woman_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc66',
    	  'family_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc67',
    	  'family_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_woman_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66',
    	  'family_woman_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_woman_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
    	  'family_woman_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_woman_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'fast_forward':'\u23e9',
    	  'fax':'\ud83d\udce0',
    	  'fearful':'\ud83d\ude28',
    	  'feet':'\ud83d\udc3e',
    	  'female_detective':'\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f',
    	  'ferris_wheel':'\ud83c\udfa1',
    	  'ferry':'\u26f4',
    	  'field_hockey':'\ud83c\udfd1',
    	  'file_cabinet':'\ud83d\uddc4',
    	  'file_folder':'\ud83d\udcc1',
    	  'film_projector':'\ud83d\udcfd',
    	  'film_strip':'\ud83c\udf9e',
    	  'fire':'\ud83d\udd25',
    	  'fire_engine':'\ud83d\ude92',
    	  'fireworks':'\ud83c\udf86',
    	  'first_quarter_moon':'\ud83c\udf13',
    	  'first_quarter_moon_with_face':'\ud83c\udf1b',
    	  'fish':'\ud83d\udc1f',
    	  'fish_cake':'\ud83c\udf65',
    	  'fishing_pole_and_fish':'\ud83c\udfa3',
    	  'fist_raised':'\u270a',
    	  'fist_left':'\ud83e\udd1b',
    	  'fist_right':'\ud83e\udd1c',
    	  'flags':'\ud83c\udf8f',
    	  'flashlight':'\ud83d\udd26',
    	  'fleur_de_lis':'\u269c\ufe0f',
    	  'flight_arrival':'\ud83d\udeec',
    	  'flight_departure':'\ud83d\udeeb',
    	  'floppy_disk':'\ud83d\udcbe',
    	  'flower_playing_cards':'\ud83c\udfb4',
    	  'flushed':'\ud83d\ude33',
    	  'fog':'\ud83c\udf2b',
    	  'foggy':'\ud83c\udf01',
    	  'football':'\ud83c\udfc8',
    	  'footprints':'\ud83d\udc63',
    	  'fork_and_knife':'\ud83c\udf74',
    	  'fountain':'\u26f2\ufe0f',
    	  'fountain_pen':'\ud83d\udd8b',
    	  'four_leaf_clover':'\ud83c\udf40',
    	  'fox_face':'\ud83e\udd8a',
    	  'framed_picture':'\ud83d\uddbc',
    	  'free':'\ud83c\udd93',
    	  'fried_egg':'\ud83c\udf73',
    	  'fried_shrimp':'\ud83c\udf64',
    	  'fries':'\ud83c\udf5f',
    	  'frog':'\ud83d\udc38',
    	  'frowning':'\ud83d\ude26',
    	  'frowning_face':'\u2639\ufe0f',
    	  'frowning_man':'\ud83d\ude4d&zwj;\u2642\ufe0f',
    	  'frowning_woman':'\ud83d\ude4d',
    	  'middle_finger':'\ud83d\udd95',
    	  'fuelpump':'\u26fd\ufe0f',
    	  'full_moon':'\ud83c\udf15',
    	  'full_moon_with_face':'\ud83c\udf1d',
    	  'funeral_urn':'\u26b1\ufe0f',
    	  'game_die':'\ud83c\udfb2',
    	  'gear':'\u2699\ufe0f',
    	  'gem':'\ud83d\udc8e',
    	  'gemini':'\u264a\ufe0f',
    	  'ghost':'\ud83d\udc7b',
    	  'gift':'\ud83c\udf81',
    	  'gift_heart':'\ud83d\udc9d',
    	  'girl':'\ud83d\udc67',
    	  'globe_with_meridians':'\ud83c\udf10',
    	  'goal_net':'\ud83e\udd45',
    	  'goat':'\ud83d\udc10',
    	  'golf':'\u26f3\ufe0f',
    	  'golfing_man':'\ud83c\udfcc\ufe0f',
    	  'golfing_woman':'\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f',
    	  'gorilla':'\ud83e\udd8d',
    	  'grapes':'\ud83c\udf47',
    	  'green_apple':'\ud83c\udf4f',
    	  'green_book':'\ud83d\udcd7',
    	  'green_heart':'\ud83d\udc9a',
    	  'green_salad':'\ud83e\udd57',
    	  'grey_exclamation':'\u2755',
    	  'grey_question':'\u2754',
    	  'grimacing':'\ud83d\ude2c',
    	  'grin':'\ud83d\ude01',
    	  'grinning':'\ud83d\ude00',
    	  'guardsman':'\ud83d\udc82',
    	  'guardswoman':'\ud83d\udc82&zwj;\u2640\ufe0f',
    	  'guitar':'\ud83c\udfb8',
    	  'gun':'\ud83d\udd2b',
    	  'haircut_woman':'\ud83d\udc87',
    	  'haircut_man':'\ud83d\udc87&zwj;\u2642\ufe0f',
    	  'hamburger':'\ud83c\udf54',
    	  'hammer':'\ud83d\udd28',
    	  'hammer_and_pick':'\u2692',
    	  'hammer_and_wrench':'\ud83d\udee0',
    	  'hamster':'\ud83d\udc39',
    	  'hand':'\u270b',
    	  'handbag':'\ud83d\udc5c',
    	  'handshake':'\ud83e\udd1d',
    	  'hankey':'\ud83d\udca9',
    	  'hatched_chick':'\ud83d\udc25',
    	  'hatching_chick':'\ud83d\udc23',
    	  'headphones':'\ud83c\udfa7',
    	  'hear_no_evil':'\ud83d\ude49',
    	  'heart':'\u2764\ufe0f',
    	  'heart_decoration':'\ud83d\udc9f',
    	  'heart_eyes':'\ud83d\ude0d',
    	  'heart_eyes_cat':'\ud83d\ude3b',
    	  'heartbeat':'\ud83d\udc93',
    	  'heartpulse':'\ud83d\udc97',
    	  'hearts':'\u2665\ufe0f',
    	  'heavy_check_mark':'\u2714\ufe0f',
    	  'heavy_division_sign':'\u2797',
    	  'heavy_dollar_sign':'\ud83d\udcb2',
    	  'heavy_heart_exclamation':'\u2763\ufe0f',
    	  'heavy_minus_sign':'\u2796',
    	  'heavy_multiplication_x':'\u2716\ufe0f',
    	  'heavy_plus_sign':'\u2795',
    	  'helicopter':'\ud83d\ude81',
    	  'herb':'\ud83c\udf3f',
    	  'hibiscus':'\ud83c\udf3a',
    	  'high_brightness':'\ud83d\udd06',
    	  'high_heel':'\ud83d\udc60',
    	  'hocho':'\ud83d\udd2a',
    	  'hole':'\ud83d\udd73',
    	  'honey_pot':'\ud83c\udf6f',
    	  'horse':'\ud83d\udc34',
    	  'horse_racing':'\ud83c\udfc7',
    	  'hospital':'\ud83c\udfe5',
    	  'hot_pepper':'\ud83c\udf36',
    	  'hotdog':'\ud83c\udf2d',
    	  'hotel':'\ud83c\udfe8',
    	  'hotsprings':'\u2668\ufe0f',
    	  'hourglass':'\u231b\ufe0f',
    	  'hourglass_flowing_sand':'\u23f3',
    	  'house':'\ud83c\udfe0',
    	  'house_with_garden':'\ud83c\udfe1',
    	  'houses':'\ud83c\udfd8',
    	  'hugs':'\ud83e\udd17',
    	  'hushed':'\ud83d\ude2f',
    	  'ice_cream':'\ud83c\udf68',
    	  'ice_hockey':'\ud83c\udfd2',
    	  'ice_skate':'\u26f8',
    	  'icecream':'\ud83c\udf66',
    	  'id':'\ud83c\udd94',
    	  'ideograph_advantage':'\ud83c\ude50',
    	  'imp':'\ud83d\udc7f',
    	  'inbox_tray':'\ud83d\udce5',
    	  'incoming_envelope':'\ud83d\udce8',
    	  'tipping_hand_woman':'\ud83d\udc81',
    	  'information_source':'\u2139\ufe0f',
    	  'innocent':'\ud83d\ude07',
    	  'interrobang':'\u2049\ufe0f',
    	  'iphone':'\ud83d\udcf1',
    	  'izakaya_lantern':'\ud83c\udfee',
    	  'jack_o_lantern':'\ud83c\udf83',
    	  'japan':'\ud83d\uddfe',
    	  'japanese_castle':'\ud83c\udfef',
    	  'japanese_goblin':'\ud83d\udc7a',
    	  'japanese_ogre':'\ud83d\udc79',
    	  'jeans':'\ud83d\udc56',
    	  'joy':'\ud83d\ude02',
    	  'joy_cat':'\ud83d\ude39',
    	  'joystick':'\ud83d\udd79',
    	  'kaaba':'\ud83d\udd4b',
    	  'key':'\ud83d\udd11',
    	  'keyboard':'\u2328\ufe0f',
    	  'keycap_ten':'\ud83d\udd1f',
    	  'kick_scooter':'\ud83d\udef4',
    	  'kimono':'\ud83d\udc58',
    	  'kiss':'\ud83d\udc8b',
    	  'kissing':'\ud83d\ude17',
    	  'kissing_cat':'\ud83d\ude3d',
    	  'kissing_closed_eyes':'\ud83d\ude1a',
    	  'kissing_heart':'\ud83d\ude18',
    	  'kissing_smiling_eyes':'\ud83d\ude19',
    	  'kiwi_fruit':'\ud83e\udd5d',
    	  'koala':'\ud83d\udc28',
    	  'koko':'\ud83c\ude01',
    	  'label':'\ud83c\udff7',
    	  'large_blue_circle':'\ud83d\udd35',
    	  'large_blue_diamond':'\ud83d\udd37',
    	  'large_orange_diamond':'\ud83d\udd36',
    	  'last_quarter_moon':'\ud83c\udf17',
    	  'last_quarter_moon_with_face':'\ud83c\udf1c',
    	  'latin_cross':'\u271d\ufe0f',
    	  'laughing':'\ud83d\ude06',
    	  'leaves':'\ud83c\udf43',
    	  'ledger':'\ud83d\udcd2',
    	  'left_luggage':'\ud83d\udec5',
    	  'left_right_arrow':'\u2194\ufe0f',
    	  'leftwards_arrow_with_hook':'\u21a9\ufe0f',
    	  'lemon':'\ud83c\udf4b',
    	  'leo':'\u264c\ufe0f',
    	  'leopard':'\ud83d\udc06',
    	  'level_slider':'\ud83c\udf9a',
    	  'libra':'\u264e\ufe0f',
    	  'light_rail':'\ud83d\ude88',
    	  'link':'\ud83d\udd17',
    	  'lion':'\ud83e\udd81',
    	  'lips':'\ud83d\udc44',
    	  'lipstick':'\ud83d\udc84',
    	  'lizard':'\ud83e\udd8e',
    	  'lock':'\ud83d\udd12',
    	  'lock_with_ink_pen':'\ud83d\udd0f',
    	  'lollipop':'\ud83c\udf6d',
    	  'loop':'\u27bf',
    	  'loud_sound':'\ud83d\udd0a',
    	  'loudspeaker':'\ud83d\udce2',
    	  'love_hotel':'\ud83c\udfe9',
    	  'love_letter':'\ud83d\udc8c',
    	  'low_brightness':'\ud83d\udd05',
    	  'lying_face':'\ud83e\udd25',
    	  'm':'\u24c2\ufe0f',
    	  'mag':'\ud83d\udd0d',
    	  'mag_right':'\ud83d\udd0e',
    	  'mahjong':'\ud83c\udc04\ufe0f',
    	  'mailbox':'\ud83d\udceb',
    	  'mailbox_closed':'\ud83d\udcea',
    	  'mailbox_with_mail':'\ud83d\udcec',
    	  'mailbox_with_no_mail':'\ud83d\udced',
    	  'man':'\ud83d\udc68',
    	  'man_artist':'\ud83d\udc68&zwj;\ud83c\udfa8',
    	  'man_astronaut':'\ud83d\udc68&zwj;\ud83d\ude80',
    	  'man_cartwheeling':'\ud83e\udd38&zwj;\u2642\ufe0f',
    	  'man_cook':'\ud83d\udc68&zwj;\ud83c\udf73',
    	  'man_dancing':'\ud83d\udd7a',
    	  'man_facepalming':'\ud83e\udd26&zwj;\u2642\ufe0f',
    	  'man_factory_worker':'\ud83d\udc68&zwj;\ud83c\udfed',
    	  'man_farmer':'\ud83d\udc68&zwj;\ud83c\udf3e',
    	  'man_firefighter':'\ud83d\udc68&zwj;\ud83d\ude92',
    	  'man_health_worker':'\ud83d\udc68&zwj;\u2695\ufe0f',
    	  'man_in_tuxedo':'\ud83e\udd35',
    	  'man_judge':'\ud83d\udc68&zwj;\u2696\ufe0f',
    	  'man_juggling':'\ud83e\udd39&zwj;\u2642\ufe0f',
    	  'man_mechanic':'\ud83d\udc68&zwj;\ud83d\udd27',
    	  'man_office_worker':'\ud83d\udc68&zwj;\ud83d\udcbc',
    	  'man_pilot':'\ud83d\udc68&zwj;\u2708\ufe0f',
    	  'man_playing_handball':'\ud83e\udd3e&zwj;\u2642\ufe0f',
    	  'man_playing_water_polo':'\ud83e\udd3d&zwj;\u2642\ufe0f',
    	  'man_scientist':'\ud83d\udc68&zwj;\ud83d\udd2c',
    	  'man_shrugging':'\ud83e\udd37&zwj;\u2642\ufe0f',
    	  'man_singer':'\ud83d\udc68&zwj;\ud83c\udfa4',
    	  'man_student':'\ud83d\udc68&zwj;\ud83c\udf93',
    	  'man_teacher':'\ud83d\udc68&zwj;\ud83c\udfeb',
    	  'man_technologist':'\ud83d\udc68&zwj;\ud83d\udcbb',
    	  'man_with_gua_pi_mao':'\ud83d\udc72',
    	  'man_with_turban':'\ud83d\udc73',
    	  'tangerine':'\ud83c\udf4a',
    	  'mans_shoe':'\ud83d\udc5e',
    	  'mantelpiece_clock':'\ud83d\udd70',
    	  'maple_leaf':'\ud83c\udf41',
    	  'martial_arts_uniform':'\ud83e\udd4b',
    	  'mask':'\ud83d\ude37',
    	  'massage_woman':'\ud83d\udc86',
    	  'massage_man':'\ud83d\udc86&zwj;\u2642\ufe0f',
    	  'meat_on_bone':'\ud83c\udf56',
    	  'medal_military':'\ud83c\udf96',
    	  'medal_sports':'\ud83c\udfc5',
    	  'mega':'\ud83d\udce3',
    	  'melon':'\ud83c\udf48',
    	  'memo':'\ud83d\udcdd',
    	  'men_wrestling':'\ud83e\udd3c&zwj;\u2642\ufe0f',
    	  'menorah':'\ud83d\udd4e',
    	  'mens':'\ud83d\udeb9',
    	  'metal':'\ud83e\udd18',
    	  'metro':'\ud83d\ude87',
    	  'microphone':'\ud83c\udfa4',
    	  'microscope':'\ud83d\udd2c',
    	  'milk_glass':'\ud83e\udd5b',
    	  'milky_way':'\ud83c\udf0c',
    	  'minibus':'\ud83d\ude90',
    	  'minidisc':'\ud83d\udcbd',
    	  'mobile_phone_off':'\ud83d\udcf4',
    	  'money_mouth_face':'\ud83e\udd11',
    	  'money_with_wings':'\ud83d\udcb8',
    	  'moneybag':'\ud83d\udcb0',
    	  'monkey':'\ud83d\udc12',
    	  'monkey_face':'\ud83d\udc35',
    	  'monorail':'\ud83d\ude9d',
    	  'moon':'\ud83c\udf14',
    	  'mortar_board':'\ud83c\udf93',
    	  'mosque':'\ud83d\udd4c',
    	  'motor_boat':'\ud83d\udee5',
    	  'motor_scooter':'\ud83d\udef5',
    	  'motorcycle':'\ud83c\udfcd',
    	  'motorway':'\ud83d\udee3',
    	  'mount_fuji':'\ud83d\uddfb',
    	  'mountain':'\u26f0',
    	  'mountain_biking_man':'\ud83d\udeb5',
    	  'mountain_biking_woman':'\ud83d\udeb5&zwj;\u2640\ufe0f',
    	  'mountain_cableway':'\ud83d\udea0',
    	  'mountain_railway':'\ud83d\ude9e',
    	  'mountain_snow':'\ud83c\udfd4',
    	  'mouse':'\ud83d\udc2d',
    	  'mouse2':'\ud83d\udc01',
    	  'movie_camera':'\ud83c\udfa5',
    	  'moyai':'\ud83d\uddff',
    	  'mrs_claus':'\ud83e\udd36',
    	  'muscle':'\ud83d\udcaa',
    	  'mushroom':'\ud83c\udf44',
    	  'musical_keyboard':'\ud83c\udfb9',
    	  'musical_note':'\ud83c\udfb5',
    	  'musical_score':'\ud83c\udfbc',
    	  'mute':'\ud83d\udd07',
    	  'nail_care':'\ud83d\udc85',
    	  'name_badge':'\ud83d\udcdb',
    	  'national_park':'\ud83c\udfde',
    	  'nauseated_face':'\ud83e\udd22',
    	  'necktie':'\ud83d\udc54',
    	  'negative_squared_cross_mark':'\u274e',
    	  'nerd_face':'\ud83e\udd13',
    	  'neutral_face':'\ud83d\ude10',
    	  'new':'\ud83c\udd95',
    	  'new_moon':'\ud83c\udf11',
    	  'new_moon_with_face':'\ud83c\udf1a',
    	  'newspaper':'\ud83d\udcf0',
    	  'newspaper_roll':'\ud83d\uddde',
    	  'next_track_button':'\u23ed',
    	  'ng':'\ud83c\udd96',
    	  'no_good_man':'\ud83d\ude45&zwj;\u2642\ufe0f',
    	  'no_good_woman':'\ud83d\ude45',
    	  'night_with_stars':'\ud83c\udf03',
    	  'no_bell':'\ud83d\udd15',
    	  'no_bicycles':'\ud83d\udeb3',
    	  'no_entry':'\u26d4\ufe0f',
    	  'no_entry_sign':'\ud83d\udeab',
    	  'no_mobile_phones':'\ud83d\udcf5',
    	  'no_mouth':'\ud83d\ude36',
    	  'no_pedestrians':'\ud83d\udeb7',
    	  'no_smoking':'\ud83d\udead',
    	  'non-potable_water':'\ud83d\udeb1',
    	  'nose':'\ud83d\udc43',
    	  'notebook':'\ud83d\udcd3',
    	  'notebook_with_decorative_cover':'\ud83d\udcd4',
    	  'notes':'\ud83c\udfb6',
    	  'nut_and_bolt':'\ud83d\udd29',
    	  'o':'\u2b55\ufe0f',
    	  'o2':'\ud83c\udd7e\ufe0f',
    	  'ocean':'\ud83c\udf0a',
    	  'octopus':'\ud83d\udc19',
    	  'oden':'\ud83c\udf62',
    	  'office':'\ud83c\udfe2',
    	  'oil_drum':'\ud83d\udee2',
    	  'ok':'\ud83c\udd97',
    	  'ok_hand':'\ud83d\udc4c',
    	  'ok_man':'\ud83d\ude46&zwj;\u2642\ufe0f',
    	  'ok_woman':'\ud83d\ude46',
    	  'old_key':'\ud83d\udddd',
    	  'older_man':'\ud83d\udc74',
    	  'older_woman':'\ud83d\udc75',
    	  'om':'\ud83d\udd49',
    	  'on':'\ud83d\udd1b',
    	  'oncoming_automobile':'\ud83d\ude98',
    	  'oncoming_bus':'\ud83d\ude8d',
    	  'oncoming_police_car':'\ud83d\ude94',
    	  'oncoming_taxi':'\ud83d\ude96',
    	  'open_file_folder':'\ud83d\udcc2',
    	  'open_hands':'\ud83d\udc50',
    	  'open_mouth':'\ud83d\ude2e',
    	  'open_umbrella':'\u2602\ufe0f',
    	  'ophiuchus':'\u26ce',
    	  'orange_book':'\ud83d\udcd9',
    	  'orthodox_cross':'\u2626\ufe0f',
    	  'outbox_tray':'\ud83d\udce4',
    	  'owl':'\ud83e\udd89',
    	  'ox':'\ud83d\udc02',
    	  'package':'\ud83d\udce6',
    	  'page_facing_up':'\ud83d\udcc4',
    	  'page_with_curl':'\ud83d\udcc3',
    	  'pager':'\ud83d\udcdf',
    	  'paintbrush':'\ud83d\udd8c',
    	  'palm_tree':'\ud83c\udf34',
    	  'pancakes':'\ud83e\udd5e',
    	  'panda_face':'\ud83d\udc3c',
    	  'paperclip':'\ud83d\udcce',
    	  'paperclips':'\ud83d\udd87',
    	  'parasol_on_ground':'\u26f1',
    	  'parking':'\ud83c\udd7f\ufe0f',
    	  'part_alternation_mark':'\u303d\ufe0f',
    	  'partly_sunny':'\u26c5\ufe0f',
    	  'passenger_ship':'\ud83d\udef3',
    	  'passport_control':'\ud83d\udec2',
    	  'pause_button':'\u23f8',
    	  'peace_symbol':'\u262e\ufe0f',
    	  'peach':'\ud83c\udf51',
    	  'peanuts':'\ud83e\udd5c',
    	  'pear':'\ud83c\udf50',
    	  'pen':'\ud83d\udd8a',
    	  'pencil2':'\u270f\ufe0f',
    	  'penguin':'\ud83d\udc27',
    	  'pensive':'\ud83d\ude14',
    	  'performing_arts':'\ud83c\udfad',
    	  'persevere':'\ud83d\ude23',
    	  'person_fencing':'\ud83e\udd3a',
    	  'pouting_woman':'\ud83d\ude4e',
    	  'phone':'\u260e\ufe0f',
    	  'pick':'\u26cf',
    	  'pig':'\ud83d\udc37',
    	  'pig2':'\ud83d\udc16',
    	  'pig_nose':'\ud83d\udc3d',
    	  'pill':'\ud83d\udc8a',
    	  'pineapple':'\ud83c\udf4d',
    	  'ping_pong':'\ud83c\udfd3',
    	  'pisces':'\u2653\ufe0f',
    	  'pizza':'\ud83c\udf55',
    	  'place_of_worship':'\ud83d\uded0',
    	  'plate_with_cutlery':'\ud83c\udf7d',
    	  'play_or_pause_button':'\u23ef',
    	  'point_down':'\ud83d\udc47',
    	  'point_left':'\ud83d\udc48',
    	  'point_right':'\ud83d\udc49',
    	  'point_up':'\u261d\ufe0f',
    	  'point_up_2':'\ud83d\udc46',
    	  'police_car':'\ud83d\ude93',
    	  'policewoman':'\ud83d\udc6e&zwj;\u2640\ufe0f',
    	  'poodle':'\ud83d\udc29',
    	  'popcorn':'\ud83c\udf7f',
    	  'post_office':'\ud83c\udfe3',
    	  'postal_horn':'\ud83d\udcef',
    	  'postbox':'\ud83d\udcee',
    	  'potable_water':'\ud83d\udeb0',
    	  'potato':'\ud83e\udd54',
    	  'pouch':'\ud83d\udc5d',
    	  'poultry_leg':'\ud83c\udf57',
    	  'pound':'\ud83d\udcb7',
    	  'rage':'\ud83d\ude21',
    	  'pouting_cat':'\ud83d\ude3e',
    	  'pouting_man':'\ud83d\ude4e&zwj;\u2642\ufe0f',
    	  'pray':'\ud83d\ude4f',
    	  'prayer_beads':'\ud83d\udcff',
    	  'pregnant_woman':'\ud83e\udd30',
    	  'previous_track_button':'\u23ee',
    	  'prince':'\ud83e\udd34',
    	  'princess':'\ud83d\udc78',
    	  'printer':'\ud83d\udda8',
    	  'purple_heart':'\ud83d\udc9c',
    	  'purse':'\ud83d\udc5b',
    	  'pushpin':'\ud83d\udccc',
    	  'put_litter_in_its_place':'\ud83d\udeae',
    	  'question':'\u2753',
    	  'rabbit':'\ud83d\udc30',
    	  'rabbit2':'\ud83d\udc07',
    	  'racehorse':'\ud83d\udc0e',
    	  'racing_car':'\ud83c\udfce',
    	  'radio':'\ud83d\udcfb',
    	  'radio_button':'\ud83d\udd18',
    	  'radioactive':'\u2622\ufe0f',
    	  'railway_car':'\ud83d\ude83',
    	  'railway_track':'\ud83d\udee4',
    	  'rainbow':'\ud83c\udf08',
    	  'rainbow_flag':'\ud83c\udff3\ufe0f&zwj;\ud83c\udf08',
    	  'raised_back_of_hand':'\ud83e\udd1a',
    	  'raised_hand_with_fingers_splayed':'\ud83d\udd90',
    	  'raised_hands':'\ud83d\ude4c',
    	  'raising_hand_woman':'\ud83d\ude4b',
    	  'raising_hand_man':'\ud83d\ude4b&zwj;\u2642\ufe0f',
    	  'ram':'\ud83d\udc0f',
    	  'ramen':'\ud83c\udf5c',
    	  'rat':'\ud83d\udc00',
    	  'record_button':'\u23fa',
    	  'recycle':'\u267b\ufe0f',
    	  'red_circle':'\ud83d\udd34',
    	  'registered':'\u00ae\ufe0f',
    	  'relaxed':'\u263a\ufe0f',
    	  'relieved':'\ud83d\ude0c',
    	  'reminder_ribbon':'\ud83c\udf97',
    	  'repeat':'\ud83d\udd01',
    	  'repeat_one':'\ud83d\udd02',
    	  'rescue_worker_helmet':'\u26d1',
    	  'restroom':'\ud83d\udebb',
    	  'revolving_hearts':'\ud83d\udc9e',
    	  'rewind':'\u23ea',
    	  'rhinoceros':'\ud83e\udd8f',
    	  'ribbon':'\ud83c\udf80',
    	  'rice':'\ud83c\udf5a',
    	  'rice_ball':'\ud83c\udf59',
    	  'rice_cracker':'\ud83c\udf58',
    	  'rice_scene':'\ud83c\udf91',
    	  'right_anger_bubble':'\ud83d\uddef',
    	  'ring':'\ud83d\udc8d',
    	  'robot':'\ud83e\udd16',
    	  'rocket':'\ud83d\ude80',
    	  'rofl':'\ud83e\udd23',
    	  'roll_eyes':'\ud83d\ude44',
    	  'roller_coaster':'\ud83c\udfa2',
    	  'rooster':'\ud83d\udc13',
    	  'rose':'\ud83c\udf39',
    	  'rosette':'\ud83c\udff5',
    	  'rotating_light':'\ud83d\udea8',
    	  'round_pushpin':'\ud83d\udccd',
    	  'rowing_man':'\ud83d\udea3',
    	  'rowing_woman':'\ud83d\udea3&zwj;\u2640\ufe0f',
    	  'rugby_football':'\ud83c\udfc9',
    	  'running_man':'\ud83c\udfc3',
    	  'running_shirt_with_sash':'\ud83c\udfbd',
    	  'running_woman':'\ud83c\udfc3&zwj;\u2640\ufe0f',
    	  'sa':'\ud83c\ude02\ufe0f',
    	  'sagittarius':'\u2650\ufe0f',
    	  'sake':'\ud83c\udf76',
    	  'sandal':'\ud83d\udc61',
    	  'santa':'\ud83c\udf85',
    	  'satellite':'\ud83d\udce1',
    	  'saxophone':'\ud83c\udfb7',
    	  'school':'\ud83c\udfeb',
    	  'school_satchel':'\ud83c\udf92',
    	  'scissors':'\u2702\ufe0f',
    	  'scorpion':'\ud83e\udd82',
    	  'scorpius':'\u264f\ufe0f',
    	  'scream':'\ud83d\ude31',
    	  'scream_cat':'\ud83d\ude40',
    	  'scroll':'\ud83d\udcdc',
    	  'seat':'\ud83d\udcba',
    	  'secret':'\u3299\ufe0f',
    	  'see_no_evil':'\ud83d\ude48',
    	  'seedling':'\ud83c\udf31',
    	  'selfie':'\ud83e\udd33',
    	  'shallow_pan_of_food':'\ud83e\udd58',
    	  'shamrock':'\u2618\ufe0f',
    	  'shark':'\ud83e\udd88',
    	  'shaved_ice':'\ud83c\udf67',
    	  'sheep':'\ud83d\udc11',
    	  'shell':'\ud83d\udc1a',
    	  'shield':'\ud83d\udee1',
    	  'shinto_shrine':'\u26e9',
    	  'ship':'\ud83d\udea2',
    	  'shirt':'\ud83d\udc55',
    	  'shopping':'\ud83d\udecd',
    	  'shopping_cart':'\ud83d\uded2',
    	  'shower':'\ud83d\udebf',
    	  'shrimp':'\ud83e\udd90',
    	  'signal_strength':'\ud83d\udcf6',
    	  'six_pointed_star':'\ud83d\udd2f',
    	  'ski':'\ud83c\udfbf',
    	  'skier':'\u26f7',
    	  'skull':'\ud83d\udc80',
    	  'skull_and_crossbones':'\u2620\ufe0f',
    	  'sleeping':'\ud83d\ude34',
    	  'sleeping_bed':'\ud83d\udecc',
    	  'sleepy':'\ud83d\ude2a',
    	  'slightly_frowning_face':'\ud83d\ude41',
    	  'slightly_smiling_face':'\ud83d\ude42',
    	  'slot_machine':'\ud83c\udfb0',
    	  'small_airplane':'\ud83d\udee9',
    	  'small_blue_diamond':'\ud83d\udd39',
    	  'small_orange_diamond':'\ud83d\udd38',
    	  'small_red_triangle':'\ud83d\udd3a',
    	  'small_red_triangle_down':'\ud83d\udd3b',
    	  'smile':'\ud83d\ude04',
    	  'smile_cat':'\ud83d\ude38',
    	  'smiley':'\ud83d\ude03',
    	  'smiley_cat':'\ud83d\ude3a',
    	  'smiling_imp':'\ud83d\ude08',
    	  'smirk':'\ud83d\ude0f',
    	  'smirk_cat':'\ud83d\ude3c',
    	  'smoking':'\ud83d\udeac',
    	  'snail':'\ud83d\udc0c',
    	  'snake':'\ud83d\udc0d',
    	  'sneezing_face':'\ud83e\udd27',
    	  'snowboarder':'\ud83c\udfc2',
    	  'snowflake':'\u2744\ufe0f',
    	  'snowman':'\u26c4\ufe0f',
    	  'snowman_with_snow':'\u2603\ufe0f',
    	  'sob':'\ud83d\ude2d',
    	  'soccer':'\u26bd\ufe0f',
    	  'soon':'\ud83d\udd1c',
    	  'sos':'\ud83c\udd98',
    	  'sound':'\ud83d\udd09',
    	  'space_invader':'\ud83d\udc7e',
    	  'spades':'\u2660\ufe0f',
    	  'spaghetti':'\ud83c\udf5d',
    	  'sparkle':'\u2747\ufe0f',
    	  'sparkler':'\ud83c\udf87',
    	  'sparkles':'\u2728',
    	  'sparkling_heart':'\ud83d\udc96',
    	  'speak_no_evil':'\ud83d\ude4a',
    	  'speaker':'\ud83d\udd08',
    	  'speaking_head':'\ud83d\udde3',
    	  'speech_balloon':'\ud83d\udcac',
    	  'speedboat':'\ud83d\udea4',
    	  'spider':'\ud83d\udd77',
    	  'spider_web':'\ud83d\udd78',
    	  'spiral_calendar':'\ud83d\uddd3',
    	  'spiral_notepad':'\ud83d\uddd2',
    	  'spoon':'\ud83e\udd44',
    	  'squid':'\ud83e\udd91',
    	  'stadium':'\ud83c\udfdf',
    	  'star':'\u2b50\ufe0f',
    	  'star2':'\ud83c\udf1f',
    	  'star_and_crescent':'\u262a\ufe0f',
    	  'star_of_david':'\u2721\ufe0f',
    	  'stars':'\ud83c\udf20',
    	  'station':'\ud83d\ude89',
    	  'statue_of_liberty':'\ud83d\uddfd',
    	  'steam_locomotive':'\ud83d\ude82',
    	  'stew':'\ud83c\udf72',
    	  'stop_button':'\u23f9',
    	  'stop_sign':'\ud83d\uded1',
    	  'stopwatch':'\u23f1',
    	  'straight_ruler':'\ud83d\udccf',
    	  'strawberry':'\ud83c\udf53',
    	  'stuck_out_tongue':'\ud83d\ude1b',
    	  'stuck_out_tongue_closed_eyes':'\ud83d\ude1d',
    	  'stuck_out_tongue_winking_eye':'\ud83d\ude1c',
    	  'studio_microphone':'\ud83c\udf99',
    	  'stuffed_flatbread':'\ud83e\udd59',
    	  'sun_behind_large_cloud':'\ud83c\udf25',
    	  'sun_behind_rain_cloud':'\ud83c\udf26',
    	  'sun_behind_small_cloud':'\ud83c\udf24',
    	  'sun_with_face':'\ud83c\udf1e',
    	  'sunflower':'\ud83c\udf3b',
    	  'sunglasses':'\ud83d\ude0e',
    	  'sunny':'\u2600\ufe0f',
    	  'sunrise':'\ud83c\udf05',
    	  'sunrise_over_mountains':'\ud83c\udf04',
    	  'surfing_man':'\ud83c\udfc4',
    	  'surfing_woman':'\ud83c\udfc4&zwj;\u2640\ufe0f',
    	  'sushi':'\ud83c\udf63',
    	  'suspension_railway':'\ud83d\ude9f',
    	  'sweat':'\ud83d\ude13',
    	  'sweat_drops':'\ud83d\udca6',
    	  'sweat_smile':'\ud83d\ude05',
    	  'sweet_potato':'\ud83c\udf60',
    	  'swimming_man':'\ud83c\udfca',
    	  'swimming_woman':'\ud83c\udfca&zwj;\u2640\ufe0f',
    	  'symbols':'\ud83d\udd23',
    	  'synagogue':'\ud83d\udd4d',
    	  'syringe':'\ud83d\udc89',
    	  'taco':'\ud83c\udf2e',
    	  'tada':'\ud83c\udf89',
    	  'tanabata_tree':'\ud83c\udf8b',
    	  'taurus':'\u2649\ufe0f',
    	  'taxi':'\ud83d\ude95',
    	  'tea':'\ud83c\udf75',
    	  'telephone_receiver':'\ud83d\udcde',
    	  'telescope':'\ud83d\udd2d',
    	  'tennis':'\ud83c\udfbe',
    	  'tent':'\u26fa\ufe0f',
    	  'thermometer':'\ud83c\udf21',
    	  'thinking':'\ud83e\udd14',
    	  'thought_balloon':'\ud83d\udcad',
    	  'ticket':'\ud83c\udfab',
    	  'tickets':'\ud83c\udf9f',
    	  'tiger':'\ud83d\udc2f',
    	  'tiger2':'\ud83d\udc05',
    	  'timer_clock':'\u23f2',
    	  'tipping_hand_man':'\ud83d\udc81&zwj;\u2642\ufe0f',
    	  'tired_face':'\ud83d\ude2b',
    	  'tm':'\u2122\ufe0f',
    	  'toilet':'\ud83d\udebd',
    	  'tokyo_tower':'\ud83d\uddfc',
    	  'tomato':'\ud83c\udf45',
    	  'tongue':'\ud83d\udc45',
    	  'top':'\ud83d\udd1d',
    	  'tophat':'\ud83c\udfa9',
    	  'tornado':'\ud83c\udf2a',
    	  'trackball':'\ud83d\uddb2',
    	  'tractor':'\ud83d\ude9c',
    	  'traffic_light':'\ud83d\udea5',
    	  'train':'\ud83d\ude8b',
    	  'train2':'\ud83d\ude86',
    	  'tram':'\ud83d\ude8a',
    	  'triangular_flag_on_post':'\ud83d\udea9',
    	  'triangular_ruler':'\ud83d\udcd0',
    	  'trident':'\ud83d\udd31',
    	  'triumph':'\ud83d\ude24',
    	  'trolleybus':'\ud83d\ude8e',
    	  'trophy':'\ud83c\udfc6',
    	  'tropical_drink':'\ud83c\udf79',
    	  'tropical_fish':'\ud83d\udc20',
    	  'truck':'\ud83d\ude9a',
    	  'trumpet':'\ud83c\udfba',
    	  'tulip':'\ud83c\udf37',
    	  'tumbler_glass':'\ud83e\udd43',
    	  'turkey':'\ud83e\udd83',
    	  'turtle':'\ud83d\udc22',
    	  'tv':'\ud83d\udcfa',
    	  'twisted_rightwards_arrows':'\ud83d\udd00',
    	  'two_hearts':'\ud83d\udc95',
    	  'two_men_holding_hands':'\ud83d\udc6c',
    	  'two_women_holding_hands':'\ud83d\udc6d',
    	  'u5272':'\ud83c\ude39',
    	  'u5408':'\ud83c\ude34',
    	  'u55b6':'\ud83c\ude3a',
    	  'u6307':'\ud83c\ude2f\ufe0f',
    	  'u6708':'\ud83c\ude37\ufe0f',
    	  'u6709':'\ud83c\ude36',
    	  'u6e80':'\ud83c\ude35',
    	  'u7121':'\ud83c\ude1a\ufe0f',
    	  'u7533':'\ud83c\ude38',
    	  'u7981':'\ud83c\ude32',
    	  'u7a7a':'\ud83c\ude33',
    	  'umbrella':'\u2614\ufe0f',
    	  'unamused':'\ud83d\ude12',
    	  'underage':'\ud83d\udd1e',
    	  'unicorn':'\ud83e\udd84',
    	  'unlock':'\ud83d\udd13',
    	  'up':'\ud83c\udd99',
    	  'upside_down_face':'\ud83d\ude43',
    	  'v':'\u270c\ufe0f',
    	  'vertical_traffic_light':'\ud83d\udea6',
    	  'vhs':'\ud83d\udcfc',
    	  'vibration_mode':'\ud83d\udcf3',
    	  'video_camera':'\ud83d\udcf9',
    	  'video_game':'\ud83c\udfae',
    	  'violin':'\ud83c\udfbb',
    	  'virgo':'\u264d\ufe0f',
    	  'volcano':'\ud83c\udf0b',
    	  'volleyball':'\ud83c\udfd0',
    	  'vs':'\ud83c\udd9a',
    	  'vulcan_salute':'\ud83d\udd96',
    	  'walking_man':'\ud83d\udeb6',
    	  'walking_woman':'\ud83d\udeb6&zwj;\u2640\ufe0f',
    	  'waning_crescent_moon':'\ud83c\udf18',
    	  'waning_gibbous_moon':'\ud83c\udf16',
    	  'warning':'\u26a0\ufe0f',
    	  'wastebasket':'\ud83d\uddd1',
    	  'watch':'\u231a\ufe0f',
    	  'water_buffalo':'\ud83d\udc03',
    	  'watermelon':'\ud83c\udf49',
    	  'wave':'\ud83d\udc4b',
    	  'wavy_dash':'\u3030\ufe0f',
    	  'waxing_crescent_moon':'\ud83c\udf12',
    	  'wc':'\ud83d\udebe',
    	  'weary':'\ud83d\ude29',
    	  'wedding':'\ud83d\udc92',
    	  'weight_lifting_man':'\ud83c\udfcb\ufe0f',
    	  'weight_lifting_woman':'\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f',
    	  'whale':'\ud83d\udc33',
    	  'whale2':'\ud83d\udc0b',
    	  'wheel_of_dharma':'\u2638\ufe0f',
    	  'wheelchair':'\u267f\ufe0f',
    	  'white_check_mark':'\u2705',
    	  'white_circle':'\u26aa\ufe0f',
    	  'white_flag':'\ud83c\udff3\ufe0f',
    	  'white_flower':'\ud83d\udcae',
    	  'white_large_square':'\u2b1c\ufe0f',
    	  'white_medium_small_square':'\u25fd\ufe0f',
    	  'white_medium_square':'\u25fb\ufe0f',
    	  'white_small_square':'\u25ab\ufe0f',
    	  'white_square_button':'\ud83d\udd33',
    	  'wilted_flower':'\ud83e\udd40',
    	  'wind_chime':'\ud83c\udf90',
    	  'wind_face':'\ud83c\udf2c',
    	  'wine_glass':'\ud83c\udf77',
    	  'wink':'\ud83d\ude09',
    	  'wolf':'\ud83d\udc3a',
    	  'woman':'\ud83d\udc69',
    	  'woman_artist':'\ud83d\udc69&zwj;\ud83c\udfa8',
    	  'woman_astronaut':'\ud83d\udc69&zwj;\ud83d\ude80',
    	  'woman_cartwheeling':'\ud83e\udd38&zwj;\u2640\ufe0f',
    	  'woman_cook':'\ud83d\udc69&zwj;\ud83c\udf73',
    	  'woman_facepalming':'\ud83e\udd26&zwj;\u2640\ufe0f',
    	  'woman_factory_worker':'\ud83d\udc69&zwj;\ud83c\udfed',
    	  'woman_farmer':'\ud83d\udc69&zwj;\ud83c\udf3e',
    	  'woman_firefighter':'\ud83d\udc69&zwj;\ud83d\ude92',
    	  'woman_health_worker':'\ud83d\udc69&zwj;\u2695\ufe0f',
    	  'woman_judge':'\ud83d\udc69&zwj;\u2696\ufe0f',
    	  'woman_juggling':'\ud83e\udd39&zwj;\u2640\ufe0f',
    	  'woman_mechanic':'\ud83d\udc69&zwj;\ud83d\udd27',
    	  'woman_office_worker':'\ud83d\udc69&zwj;\ud83d\udcbc',
    	  'woman_pilot':'\ud83d\udc69&zwj;\u2708\ufe0f',
    	  'woman_playing_handball':'\ud83e\udd3e&zwj;\u2640\ufe0f',
    	  'woman_playing_water_polo':'\ud83e\udd3d&zwj;\u2640\ufe0f',
    	  'woman_scientist':'\ud83d\udc69&zwj;\ud83d\udd2c',
    	  'woman_shrugging':'\ud83e\udd37&zwj;\u2640\ufe0f',
    	  'woman_singer':'\ud83d\udc69&zwj;\ud83c\udfa4',
    	  'woman_student':'\ud83d\udc69&zwj;\ud83c\udf93',
    	  'woman_teacher':'\ud83d\udc69&zwj;\ud83c\udfeb',
    	  'woman_technologist':'\ud83d\udc69&zwj;\ud83d\udcbb',
    	  'woman_with_turban':'\ud83d\udc73&zwj;\u2640\ufe0f',
    	  'womans_clothes':'\ud83d\udc5a',
    	  'womans_hat':'\ud83d\udc52',
    	  'women_wrestling':'\ud83e\udd3c&zwj;\u2640\ufe0f',
    	  'womens':'\ud83d\udeba',
    	  'world_map':'\ud83d\uddfa',
    	  'worried':'\ud83d\ude1f',
    	  'wrench':'\ud83d\udd27',
    	  'writing_hand':'\u270d\ufe0f',
    	  'x':'\u274c',
    	  'yellow_heart':'\ud83d\udc9b',
    	  'yen':'\ud83d\udcb4',
    	  'yin_yang':'\u262f\ufe0f',
    	  'yum':'\ud83d\ude0b',
    	  'zap':'\u26a1\ufe0f',
    	  'zipper_mouth_face':'\ud83e\udd10',
    	  'zzz':'\ud83d\udca4',

    	  /* special emojis :P */
    	  'octocat':  '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
    	  'showdown': '<span style="font-family: \'Anonymous Pro\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>'
    	};

    	/**
    	 * Created by Estevao on 31-05-2015.
    	 */

    	/**
    	 * Showdown Converter class
    	 * @class
    	 * @param {object} [converterOptions]
    	 * @returns {Converter}
    	 */
    	showdown.Converter = function (converterOptions) {

    	  var
    	      /**
    	       * Options used by this converter
    	       * @private
    	       * @type {{}}
    	       */
    	      options = {},

    	      /**
    	       * Language extensions used by this converter
    	       * @private
    	       * @type {Array}
    	       */
    	      langExtensions = [],

    	      /**
    	       * Output modifiers extensions used by this converter
    	       * @private
    	       * @type {Array}
    	       */
    	      outputModifiers = [],

    	      /**
    	       * Event listeners
    	       * @private
    	       * @type {{}}
    	       */
    	      listeners = {},

    	      /**
    	       * The flavor set in this converter
    	       */
    	      setConvFlavor = setFlavor,

    	      /**
    	       * Metadata of the document
    	       * @type {{parsed: {}, raw: string, format: string}}
    	       */
    	      metadata = {
    	        parsed: {},
    	        raw: '',
    	        format: ''
    	      };

    	  _constructor();

    	  /**
    	   * Converter constructor
    	   * @private
    	   */
    	  function _constructor () {
    	    converterOptions = converterOptions || {};

    	    for (var gOpt in globalOptions) {
    	      if (globalOptions.hasOwnProperty(gOpt)) {
    	        options[gOpt] = globalOptions[gOpt];
    	      }
    	    }

    	    // Merge options
    	    if (typeof converterOptions === 'object') {
    	      for (var opt in converterOptions) {
    	        if (converterOptions.hasOwnProperty(opt)) {
    	          options[opt] = converterOptions[opt];
    	        }
    	      }
    	    } else {
    	      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +
    	      ' was passed instead.');
    	    }

    	    if (options.extensions) {
    	      showdown.helper.forEach(options.extensions, _parseExtension);
    	    }
    	  }

    	  /**
    	   * Parse extension
    	   * @param {*} ext
    	   * @param {string} [name='']
    	   * @private
    	   */
    	  function _parseExtension (ext, name) {

    	    name = name || null;
    	    // If it's a string, the extension was previously loaded
    	    if (showdown.helper.isString(ext)) {
    	      ext = showdown.helper.stdExtName(ext);
    	      name = ext;

    	      // LEGACY_SUPPORT CODE
    	      if (showdown.extensions[ext]) {
    	        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +
    	          'Please inform the developer that the extension should be updated!');
    	        legacyExtensionLoading(showdown.extensions[ext], ext);
    	        return;
    	        // END LEGACY SUPPORT CODE

    	      } else if (!showdown.helper.isUndefined(extensions[ext])) {
    	        ext = extensions[ext];

    	      } else {
    	        throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
    	      }
    	    }

    	    if (typeof ext === 'function') {
    	      ext = ext();
    	    }

    	    if (!showdown.helper.isArray(ext)) {
    	      ext = [ext];
    	    }

    	    var validExt = validate(ext, name);
    	    if (!validExt.valid) {
    	      throw Error(validExt.error);
    	    }

    	    for (var i = 0; i < ext.length; ++i) {
    	      switch (ext[i].type) {

    	        case 'lang':
    	          langExtensions.push(ext[i]);
    	          break;

    	        case 'output':
    	          outputModifiers.push(ext[i]);
    	          break;
    	      }
    	      if (ext[i].hasOwnProperty('listeners')) {
    	        for (var ln in ext[i].listeners) {
    	          if (ext[i].listeners.hasOwnProperty(ln)) {
    	            listen(ln, ext[i].listeners[ln]);
    	          }
    	        }
    	      }
    	    }

    	  }

    	  /**
    	   * LEGACY_SUPPORT
    	   * @param {*} ext
    	   * @param {string} name
    	   */
    	  function legacyExtensionLoading (ext, name) {
    	    if (typeof ext === 'function') {
    	      ext = ext(new showdown.Converter());
    	    }
    	    if (!showdown.helper.isArray(ext)) {
    	      ext = [ext];
    	    }
    	    var valid = validate(ext, name);

    	    if (!valid.valid) {
    	      throw Error(valid.error);
    	    }

    	    for (var i = 0; i < ext.length; ++i) {
    	      switch (ext[i].type) {
    	        case 'lang':
    	          langExtensions.push(ext[i]);
    	          break;
    	        case 'output':
    	          outputModifiers.push(ext[i]);
    	          break;
    	        default:// should never reach here
    	          throw Error('Extension loader error: Type unrecognized!!!');
    	      }
    	    }
    	  }

    	  /**
    	   * Listen to an event
    	   * @param {string} name
    	   * @param {function} callback
    	   */
    	  function listen (name, callback) {
    	    if (!showdown.helper.isString(name)) {
    	      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');
    	    }

    	    if (typeof callback !== 'function') {
    	      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');
    	    }

    	    if (!listeners.hasOwnProperty(name)) {
    	      listeners[name] = [];
    	    }
    	    listeners[name].push(callback);
    	  }

    	  function rTrimInputText (text) {
    	    var rsp = text.match(/^\s*/)[0].length,
    	        rgx = new RegExp('^\\s{0,' + rsp + '}', 'gm');
    	    return text.replace(rgx, '');
    	  }

    	  /**
    	   * Dispatch an event
    	   * @private
    	   * @param {string} evtName Event name
    	   * @param {string} text Text
    	   * @param {{}} options Converter Options
    	   * @param {{}} globals
    	   * @returns {string}
    	   */
    	  this._dispatch = function dispatch (evtName, text, options, globals) {
    	    if (listeners.hasOwnProperty(evtName)) {
    	      for (var ei = 0; ei < listeners[evtName].length; ++ei) {
    	        var nText = listeners[evtName][ei](evtName, text, this, options, globals);
    	        if (nText && typeof nText !== 'undefined') {
    	          text = nText;
    	        }
    	      }
    	    }
    	    return text;
    	  };

    	  /**
    	   * Listen to an event
    	   * @param {string} name
    	   * @param {function} callback
    	   * @returns {showdown.Converter}
    	   */
    	  this.listen = function (name, callback) {
    	    listen(name, callback);
    	    return this;
    	  };

    	  /**
    	   * Converts a markdown string into HTML
    	   * @param {string} text
    	   * @returns {*}
    	   */
    	  this.makeHtml = function (text) {
    	    //check if text is not falsy
    	    if (!text) {
    	      return text;
    	    }

    	    var globals = {
    	      gHtmlBlocks:     [],
    	      gHtmlMdBlocks:   [],
    	      gHtmlSpans:      [],
    	      gUrls:           {},
    	      gTitles:         {},
    	      gDimensions:     {},
    	      gListLevel:      0,
    	      hashLinkCounts:  {},
    	      langExtensions:  langExtensions,
    	      outputModifiers: outputModifiers,
    	      converter:       this,
    	      ghCodeBlocks:    [],
    	      metadata: {
    	        parsed: {},
    	        raw: '',
    	        format: ''
    	      }
    	    };

    	    // This lets us use ¨ trema as an escape char to avoid md5 hashes
    	    // The choice of character is arbitrary; anything that isn't
    	    // magic in Markdown will work.
    	    text = text.replace(/¨/g, '¨T');

    	    // Replace $ with ¨D
    	    // RegExp interprets $ as a special character
    	    // when it's in a replacement string
    	    text = text.replace(/\$/g, '¨D');

    	    // Standardize line endings
    	    text = text.replace(/\r\n/g, '\n'); // DOS to Unix
    	    text = text.replace(/\r/g, '\n'); // Mac to Unix

    	    // Stardardize line spaces
    	    text = text.replace(/\u00A0/g, '&nbsp;');

    	    if (options.smartIndentationFix) {
    	      text = rTrimInputText(text);
    	    }

    	    // Make sure text begins and ends with a couple of newlines:
    	    text = '\n\n' + text + '\n\n';

    	    // detab
    	    text = showdown.subParser('detab')(text, options, globals);

    	    /**
    	     * Strip any lines consisting only of spaces and tabs.
    	     * This makes subsequent regexs easier to write, because we can
    	     * match consecutive blank lines with /\n+/ instead of something
    	     * contorted like /[ \t]*\n+/
    	     */
    	    text = text.replace(/^[ \t]+$/mg, '');

    	    //run languageExtensions
    	    showdown.helper.forEach(langExtensions, function (ext) {
    	      text = showdown.subParser('runExtension')(ext, text, options, globals);
    	    });

    	    // run the sub parsers
    	    text = showdown.subParser('metadata')(text, options, globals);
    	    text = showdown.subParser('hashPreCodeTags')(text, options, globals);
    	    text = showdown.subParser('githubCodeBlocks')(text, options, globals);
    	    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
    	    text = showdown.subParser('hashCodeTags')(text, options, globals);
    	    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);
    	    text = showdown.subParser('blockGamut')(text, options, globals);
    	    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);
    	    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);

    	    // attacklab: Restore dollar signs
    	    text = text.replace(/¨D/g, '$$');

    	    // attacklab: Restore tremas
    	    text = text.replace(/¨T/g, '¨');

    	    // render a complete html document instead of a partial if the option is enabled
    	    text = showdown.subParser('completeHTMLDocument')(text, options, globals);

    	    // Run output modifiers
    	    showdown.helper.forEach(outputModifiers, function (ext) {
    	      text = showdown.subParser('runExtension')(ext, text, options, globals);
    	    });

    	    // update metadata
    	    metadata = globals.metadata;
    	    return text;
    	  };

    	  /**
    	   * Converts an HTML string into a markdown string
    	   * @param src
    	   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.
    	   * @returns {string}
    	   */
    	  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {

    	    // replace \r\n with \n
    	    src = src.replace(/\r\n/g, '\n');
    	    src = src.replace(/\r/g, '\n'); // old macs

    	    // due to an edge case, we need to find this: > <
    	    // to prevent removing of non silent white spaces
    	    // ex: <em>this is</em> <strong>sparta</strong>
    	    src = src.replace(/>[ \t]+</, '>¨NBSP;<');

    	    if (!HTMLParser) {
    	      if (window && window.document) {
    	        HTMLParser = window.document;
    	      } else {
    	        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');
    	      }
    	    }

    	    var doc = HTMLParser.createElement('div');
    	    doc.innerHTML = src;

    	    var globals = {
    	      preList: substitutePreCodeTags(doc)
    	    };

    	    // remove all newlines and collapse spaces
    	    clean(doc);

    	    // some stuff, like accidental reference links must now be escaped
    	    // TODO
    	    // doc.innerHTML = doc.innerHTML.replace(/\[[\S\t ]]/);

    	    var nodes = doc.childNodes,
    	        mdDoc = '';

    	    for (var i = 0; i < nodes.length; i++) {
    	      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);
    	    }

    	    function clean (node) {
    	      for (var n = 0; n < node.childNodes.length; ++n) {
    	        var child = node.childNodes[n];
    	        if (child.nodeType === 3) {
    	          if (!/\S/.test(child.nodeValue) && !/^[ ]+$/.test(child.nodeValue)) {
    	            node.removeChild(child);
    	            --n;
    	          } else {
    	            child.nodeValue = child.nodeValue.split('\n').join(' ');
    	            child.nodeValue = child.nodeValue.replace(/(\s)+/g, '$1');
    	          }
    	        } else if (child.nodeType === 1) {
    	          clean(child);
    	        }
    	      }
    	    }

    	    // find all pre tags and replace contents with placeholder
    	    // we need this so that we can remove all indentation from html
    	    // to ease up parsing
    	    function substitutePreCodeTags (doc) {

    	      var pres = doc.querySelectorAll('pre'),
    	          presPH = [];

    	      for (var i = 0; i < pres.length; ++i) {

    	        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {
    	          var content = pres[i].firstChild.innerHTML.trim(),
    	              language = pres[i].firstChild.getAttribute('data-language') || '';

    	          // if data-language attribute is not defined, then we look for class language-*
    	          if (language === '') {
    	            var classes = pres[i].firstChild.className.split(' ');
    	            for (var c = 0; c < classes.length; ++c) {
    	              var matches = classes[c].match(/^language-(.+)$/);
    	              if (matches !== null) {
    	                language = matches[1];
    	                break;
    	              }
    	            }
    	          }

    	          // unescape html entities in content
    	          content = showdown.helper.unescapeHTMLEntities(content);

    	          presPH.push(content);
    	          pres[i].outerHTML = '<precode language="' + language + '" precodenum="' + i.toString() + '"></precode>';
    	        } else {
    	          presPH.push(pres[i].innerHTML);
    	          pres[i].innerHTML = '';
    	          pres[i].setAttribute('prenum', i.toString());
    	        }
    	      }
    	      return presPH;
    	    }

    	    return mdDoc;
    	  };

    	  /**
    	   * Set an option of this Converter instance
    	   * @param {string} key
    	   * @param {*} value
    	   */
    	  this.setOption = function (key, value) {
    	    options[key] = value;
    	  };

    	  /**
    	   * Get the option of this Converter instance
    	   * @param {string} key
    	   * @returns {*}
    	   */
    	  this.getOption = function (key) {
    	    return options[key];
    	  };

    	  /**
    	   * Get the options of this Converter instance
    	   * @returns {{}}
    	   */
    	  this.getOptions = function () {
    	    return options;
    	  };

    	  /**
    	   * Add extension to THIS converter
    	   * @param {{}} extension
    	   * @param {string} [name=null]
    	   */
    	  this.addExtension = function (extension, name) {
    	    name = name || null;
    	    _parseExtension(extension, name);
    	  };

    	  /**
    	   * Use a global registered extension with THIS converter
    	   * @param {string} extensionName Name of the previously registered extension
    	   */
    	  this.useExtension = function (extensionName) {
    	    _parseExtension(extensionName);
    	  };

    	  /**
    	   * Set the flavor THIS converter should use
    	   * @param {string} name
    	   */
    	  this.setFlavor = function (name) {
    	    if (!flavor.hasOwnProperty(name)) {
    	      throw Error(name + ' flavor was not found');
    	    }
    	    var preset = flavor[name];
    	    setConvFlavor = name;
    	    for (var option in preset) {
    	      if (preset.hasOwnProperty(option)) {
    	        options[option] = preset[option];
    	      }
    	    }
    	  };

    	  /**
    	   * Get the currently set flavor of this converter
    	   * @returns {string}
    	   */
    	  this.getFlavor = function () {
    	    return setConvFlavor;
    	  };

    	  /**
    	   * Remove an extension from THIS converter.
    	   * Note: This is a costly operation. It's better to initialize a new converter
    	   * and specify the extensions you wish to use
    	   * @param {Array} extension
    	   */
    	  this.removeExtension = function (extension) {
    	    if (!showdown.helper.isArray(extension)) {
    	      extension = [extension];
    	    }
    	    for (var a = 0; a < extension.length; ++a) {
    	      var ext = extension[a];
    	      for (var i = 0; i < langExtensions.length; ++i) {
    	        if (langExtensions[i] === ext) {
    	          langExtensions.splice(i, 1);
    	        }
    	      }
    	      for (var ii = 0; ii < outputModifiers.length; ++ii) {
    	        if (outputModifiers[ii] === ext) {
    	          outputModifiers.splice(ii, 1);
    	        }
    	      }
    	    }
    	  };

    	  /**
    	   * Get all extension of THIS converter
    	   * @returns {{language: Array, output: Array}}
    	   */
    	  this.getAllExtensions = function () {
    	    return {
    	      language: langExtensions,
    	      output: outputModifiers
    	    };
    	  };

    	  /**
    	   * Get the metadata of the previously parsed document
    	   * @param raw
    	   * @returns {string|{}}
    	   */
    	  this.getMetadata = function (raw) {
    	    if (raw) {
    	      return metadata.raw;
    	    } else {
    	      return metadata.parsed;
    	    }
    	  };

    	  /**
    	   * Get the metadata format of the previously parsed document
    	   * @returns {string}
    	   */
    	  this.getMetadataFormat = function () {
    	    return metadata.format;
    	  };

    	  /**
    	   * Private: set a single key, value metadata pair
    	   * @param {string} key
    	   * @param {string} value
    	   */
    	  this._setMetadataPair = function (key, value) {
    	    metadata.parsed[key] = value;
    	  };

    	  /**
    	   * Private: set metadata format
    	   * @param {string} format
    	   */
    	  this._setMetadataFormat = function (format) {
    	    metadata.format = format;
    	  };

    	  /**
    	   * Private: set metadata raw text
    	   * @param {string} raw
    	   */
    	  this._setMetadataRaw = function (raw) {
    	    metadata.raw = raw;
    	  };
    	};

    	/**
    	 * Turn Markdown link shortcuts into XHTML <a> tags.
    	 */
    	showdown.subParser('anchors', function (text, options, globals) {

    	  text = globals.converter._dispatch('anchors.before', text, options, globals);

    	  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {
    	    if (showdown.helper.isUndefined(title)) {
    	      title = '';
    	    }
    	    linkId = linkId.toLowerCase();

    	    // Special case for explicit empty url
    	    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
    	      url = '';
    	    } else if (!url) {
    	      if (!linkId) {
    	        // lower-case and turn embedded newlines into spaces
    	        linkId = linkText.toLowerCase().replace(/ ?\n/g, ' ');
    	      }
    	      url = '#' + linkId;

    	      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {
    	        url = globals.gUrls[linkId];
    	        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {
    	          title = globals.gTitles[linkId];
    	        }
    	      } else {
    	        return wholeMatch;
    	      }
    	    }

    	    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance
    	    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);

    	    var result = '<a href="' + url + '"';

    	    if (title !== '' && title !== null) {
    	      title = title.replace(/"/g, '&quot;');
    	      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance
    	      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	      result += ' title="' + title + '"';
    	    }

    	    // optionLinksInNewWindow only applies
    	    // to external links. Hash links (#) open in same page
    	    if (options.openLinksInNewWindow && !/^#/.test(url)) {
    	      // escaped _
    	      result += ' rel="noopener noreferrer" target="¨E95Eblank"';
    	    }

    	    result += '>' + linkText + '</a>';

    	    return result;
    	  };

    	  // First, handle reference-style links: [link text] [id]
    	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);

    	  // Next, inline-style links: [link text](url "optional title")
    	  // cases with crazy urls like ./image/cat1).png
    	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    	    writeAnchorTag);

    	  // normal cases
    	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    	    writeAnchorTag);

    	  // handle reference-style shortcuts: [link text]
    	  // These must come last in case you've also got [link test][1]
    	  // or [link test](/foo)
    	  text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);

    	  // Lastly handle GithubMentions if option is enabled
    	  if (options.ghMentions) {
    	    text = text.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function (wm, st, escape, mentions, username) {
    	      if (escape === '\\') {
    	        return st + mentions;
    	      }

    	      //check if options.ghMentionsLink is a string
    	      if (!showdown.helper.isString(options.ghMentionsLink)) {
    	        throw new Error('ghMentionsLink option must be a string');
    	      }
    	      var lnk = options.ghMentionsLink.replace(/\{u}/g, username),
    	          target = '';
    	      if (options.openLinksInNewWindow) {
    	        target = ' rel="noopener noreferrer" target="¨E95Eblank"';
    	      }
    	      return st + '<a href="' + lnk + '"' + target + '>' + mentions + '</a>';
    	    });
    	  }

    	  text = globals.converter._dispatch('anchors.after', text, options, globals);
    	  return text;
    	});

    	// url allowed chars [a-z\d_.~:/?#[]@!$&'()*+,;=-]

    	var simpleURLRegex  = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,
    	    simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,
    	    delimUrlRegex   = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,
    	    simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,
    	    delimMailRegex  = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,

    	    replaceLink = function (options) {
    	      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {
    	        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	        var lnkTxt = link,
    	            append = '',
    	            target = '',
    	            lmc    = leadingMagicChars || '',
    	            tmc    = trailingMagicChars || '';
    	        if (/^www\./i.test(link)) {
    	          link = link.replace(/^www\./i, 'http://www.');
    	        }
    	        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
    	          append = trailingPunctuation;
    	        }
    	        if (options.openLinksInNewWindow) {
    	          target = ' rel="noopener noreferrer" target="¨E95Eblank"';
    	        }
    	        return lmc + '<a href="' + link + '"' + target + '>' + lnkTxt + '</a>' + append + tmc;
    	      };
    	    },

    	    replaceMail = function (options, globals) {
    	      return function (wholeMatch, b, mail) {
    	        var href = 'mailto:';
    	        b = b || '';
    	        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);
    	        if (options.encodeEmails) {
    	          href = showdown.helper.encodeEmailAddress(href + mail);
    	          mail = showdown.helper.encodeEmailAddress(mail);
    	        } else {
    	          href = href + mail;
    	        }
    	        return b + '<a href="' + href + '">' + mail + '</a>';
    	      };
    	    };

    	showdown.subParser('autoLinks', function (text, options, globals) {

    	  text = globals.converter._dispatch('autoLinks.before', text, options, globals);

    	  text = text.replace(delimUrlRegex, replaceLink(options));
    	  text = text.replace(delimMailRegex, replaceMail(options, globals));

    	  text = globals.converter._dispatch('autoLinks.after', text, options, globals);

    	  return text;
    	});

    	showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {

    	  if (!options.simplifiedAutoLink) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);

    	  if (options.excludeTrailingPunctuationFromURLs) {
    	    text = text.replace(simpleURLRegex2, replaceLink(options));
    	  } else {
    	    text = text.replace(simpleURLRegex, replaceLink(options));
    	  }
    	  text = text.replace(simpleMailRegex, replaceMail(options, globals));

    	  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * These are all the transformations that form block-level
    	 * tags like paragraphs, headers, and list items.
    	 */
    	showdown.subParser('blockGamut', function (text, options, globals) {

    	  text = globals.converter._dispatch('blockGamut.before', text, options, globals);

    	  // we parse blockquotes first so that we can have headings and hrs
    	  // inside blockquotes
    	  text = showdown.subParser('blockQuotes')(text, options, globals);
    	  text = showdown.subParser('headers')(text, options, globals);

    	  // Do Horizontal Rules:
    	  text = showdown.subParser('horizontalRule')(text, options, globals);

    	  text = showdown.subParser('lists')(text, options, globals);
    	  text = showdown.subParser('codeBlocks')(text, options, globals);
    	  text = showdown.subParser('tables')(text, options, globals);

    	  // We already ran _HashHTMLBlocks() before, in Markdown(), but that
    	  // was to escape raw HTML in the original Markdown source. This time,
    	  // we're escaping the markup we've just created, so that we don't wrap
    	  // <p> tags around block-level tags.
    	  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
    	  text = showdown.subParser('paragraphs')(text, options, globals);

    	  text = globals.converter._dispatch('blockGamut.after', text, options, globals);

    	  return text;
    	});

    	showdown.subParser('blockQuotes', function (text, options, globals) {

    	  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);

    	  // add a couple extra lines after the text and endtext mark
    	  text = text + '\n\n';

    	  var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;

    	  if (options.splitAdjacentBlockquotes) {
    	    rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
    	  }

    	  text = text.replace(rgx, function (bq) {
    	    // attacklab: hack around Konqueror 3.5.4 bug:
    	    // "----------bug".replace(/^-/g,"") == "bug"
    	    bq = bq.replace(/^[ \t]*>[ \t]?/gm, ''); // trim one level of quoting

    	    // attacklab: clean up hack
    	    bq = bq.replace(/¨0/g, '');

    	    bq = bq.replace(/^[ \t]+$/gm, ''); // trim whitespace-only lines
    	    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);
    	    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse

    	    bq = bq.replace(/(^|\n)/g, '$1  ');
    	    // These leading spaces screw with <pre> content, so we need to fix that:
    	    bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (wholeMatch, m1) {
    	      var pre = m1;
    	      // attacklab: hack around Konqueror 3.5.4 bug:
    	      pre = pre.replace(/^  /mg, '¨0');
    	      pre = pre.replace(/¨0/g, '');
    	      return pre;
    	    });

    	    return showdown.subParser('hashBlock')('<blockquote>\n' + bq + '\n</blockquote>', options, globals);
    	  });

    	  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Process Markdown `<pre><code>` blocks.
    	 */
    	showdown.subParser('codeBlocks', function (text, options, globals) {

    	  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);

    	  // sentinel workarounds for lack of \A and \Z, safari\khtml bug
    	  text += '¨0';

    	  var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
    	  text = text.replace(pattern, function (wholeMatch, m1, m2) {
    	    var codeblock = m1,
    	        nextChar = m2,
    	        end = '\n';

    	    codeblock = showdown.subParser('outdent')(codeblock, options, globals);
    	    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    	    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    	    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    	    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing newlines

    	    if (options.omitExtraWLInCodeBlocks) {
    	      end = '';
    	    }

    	    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';

    	    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;
    	  });

    	  // strip sentinel
    	  text = text.replace(/¨0/, '');

    	  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 *
    	 *   *  Backtick quotes are used for <code></code> spans.
    	 *
    	 *   *  You can use multiple backticks as the delimiters if you want to
    	 *     include literal backticks in the code span. So, this input:
    	 *
    	 *         Just type ``foo `bar` baz`` at the prompt.
    	 *
    	 *       Will translate to:
    	 *
    	 *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>
    	 *
    	 *    There's no arbitrary limit to the number of backticks you
    	 *    can use as delimters. If you need three consecutive backticks
    	 *    in your code, use four for delimiters, etc.
    	 *
    	 *  *  You can use spaces to get literal backticks at the edges:
    	 *
    	 *         ... type `` `bar` `` ...
    	 *
    	 *       Turns to:
    	 *
    	 *         ... type <code>`bar`</code> ...
    	 */
    	showdown.subParser('codeSpans', function (text, options, globals) {

    	  text = globals.converter._dispatch('codeSpans.before', text, options, globals);

    	  if (typeof (text) === 'undefined') {
    	    text = '';
    	  }
    	  text = text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
    	    function (wholeMatch, m1, m2, m3) {
    	      var c = m3;
    	      c = c.replace(/^([ \t]*)/g, '');	// leading whitespace
    	      c = c.replace(/[ \t]*$/g, '');	// trailing whitespace
    	      c = showdown.subParser('encodeCode')(c, options, globals);
    	      c = m1 + '<code>' + c + '</code>';
    	      c = showdown.subParser('hashHTMLSpans')(c, options, globals);
    	      return c;
    	    }
    	  );

    	  text = globals.converter._dispatch('codeSpans.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Create a full HTML document from the processed markdown
    	 */
    	showdown.subParser('completeHTMLDocument', function (text, options, globals) {

    	  if (!options.completeHTMLDocument) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);

    	  var doctype = 'html',
    	      doctypeParsed = '<!DOCTYPE HTML>\n',
    	      title = '',
    	      charset = '<meta charset="utf-8">\n',
    	      lang = '',
    	      metadata = '';

    	  if (typeof globals.metadata.parsed.doctype !== 'undefined') {
    	    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\n';
    	    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
    	    if (doctype === 'html' || doctype === 'html5') {
    	      charset = '<meta charset="utf-8">';
    	    }
    	  }

    	  for (var meta in globals.metadata.parsed) {
    	    if (globals.metadata.parsed.hasOwnProperty(meta)) {
    	      switch (meta.toLowerCase()) {
    	        case 'doctype':
    	          break;

    	        case 'title':
    	          title = '<title>' +  globals.metadata.parsed.title + '</title>\n';
    	          break;

    	        case 'charset':
    	          if (doctype === 'html' || doctype === 'html5') {
    	            charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
    	          } else {
    	            charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
    	          }
    	          break;

    	        case 'language':
    	        case 'lang':
    	          lang = ' lang="' + globals.metadata.parsed[meta] + '"';
    	          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
    	          break;

    	        default:
    	          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
    	      }
    	    }
    	  }

    	  text = doctypeParsed + '<html' + lang + '>\n<head>\n' + title + charset + metadata + '</head>\n<body>\n' + text.trim() + '\n</body>\n</html>';

    	  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Convert all tabs to spaces
    	 */
    	showdown.subParser('detab', function (text, options, globals) {
    	  text = globals.converter._dispatch('detab.before', text, options, globals);

    	  // expand first n-1 tabs
    	  text = text.replace(/\t(?=\t)/g, '    '); // g_tab_width

    	  // replace the nth with two sentinels
    	  text = text.replace(/\t/g, '¨A¨B');

    	  // use the sentinel to anchor our regex so it doesn't explode
    	  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {
    	    var leadingText = m1,
    	        numSpaces = 4 - leadingText.length % 4;  // g_tab_width

    	    // there *must* be a better way to do this:
    	    for (var i = 0; i < numSpaces; i++) {
    	      leadingText += ' ';
    	    }

    	    return leadingText;
    	  });

    	  // clean up sentinels
    	  text = text.replace(/¨A/g, '    ');  // g_tab_width
    	  text = text.replace(/¨B/g, '');

    	  text = globals.converter._dispatch('detab.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('ellipsis', function (text, options, globals) {

    	  if (!options.ellipsis) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('ellipsis.before', text, options, globals);

    	  text = text.replace(/\.\.\./g, '…');

    	  text = globals.converter._dispatch('ellipsis.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * Turn emoji codes into emojis
    	 *
    	 * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis
    	 */
    	showdown.subParser('emoji', function (text, options, globals) {

    	  if (!options.emoji) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('emoji.before', text, options, globals);

    	  var emojiRgx = /:([\S]+?):/g;

    	  text = text.replace(emojiRgx, function (wm, emojiCode) {
    	    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {
    	      return showdown.helper.emojis[emojiCode];
    	    }
    	    return wm;
    	  });

    	  text = globals.converter._dispatch('emoji.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * Smart processing for ampersands and angle brackets that need to be encoded.
    	 */
    	showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {
    	  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);

    	  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:
    	  // http://bumppo.net/projects/amputator/
    	  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, '&amp;');

    	  // Encode naked <'s
    	  text = text.replace(/<(?![a-z\/?$!])/gi, '&lt;');

    	  // Encode <
    	  text = text.replace(/</g, '&lt;');

    	  // Encode >
    	  text = text.replace(/>/g, '&gt;');

    	  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Returns the string, with after processing the following backslash escape sequences.
    	 *
    	 * attacklab: The polite way to do this is with the new escapeCharacters() function:
    	 *
    	 *    text = escapeCharacters(text,"\\",true);
    	 *    text = escapeCharacters(text,"`*_{}[]()>#+-.!",true);
    	 *
    	 * ...but we're sidestepping its use of the (slow) RegExp constructor
    	 * as an optimization for Firefox.  This function gets called a LOT.
    	 */
    	showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {
    	  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);

    	  text = text.replace(/\\(\\)/g, showdown.helper.escapeCharactersCallback);
    	  text = text.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g, showdown.helper.escapeCharactersCallback);

    	  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Encode/escape certain characters inside Markdown code runs.
    	 * The point is that in code, these characters are literals,
    	 * and lose their special Markdown meanings.
    	 */
    	showdown.subParser('encodeCode', function (text, options, globals) {

    	  text = globals.converter._dispatch('encodeCode.before', text, options, globals);

    	  // Encode all ampersands; HTML entities are not
    	  // entities within a Markdown code span.
    	  text = text
    	    .replace(/&/g, '&amp;')
    	  // Do the angle bracket song and dance:
    	    .replace(/</g, '&lt;')
    	    .replace(/>/g, '&gt;')
    	  // Now, escape characters that are magic in Markdown:
    	    .replace(/([*_{}\[\]\\=~-])/g, showdown.helper.escapeCharactersCallback);

    	  text = globals.converter._dispatch('encodeCode.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Within tags -- meaning between < and > -- encode [\ ` * _ ~ =] so they
    	 * don't conflict with their use in Markdown for code, italics and strong.
    	 */
    	showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {
    	  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);

    	  // Build a regex to find HTML tags.
    	  var tags     = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,
    	      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;

    	  text = text.replace(tags, function (wholeMatch) {
    	    return wholeMatch
    	      .replace(/(.)<\/?code>(?=.)/g, '$1`')
    	      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
    	  });

    	  text = text.replace(comments, function (wholeMatch) {
    	    return wholeMatch
    	      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
    	  });

    	  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Handle github codeblocks prior to running HashHTML so that
    	 * HTML contained within the codeblock gets escaped properly
    	 * Example:
    	 * ```ruby
    	 *     def hello_world(x)
    	 *       puts "Hello, #{x}"
    	 *     end
    	 * ```
    	 */
    	showdown.subParser('githubCodeBlocks', function (text, options, globals) {

    	  // early exit if option is not enabled
    	  if (!options.ghCodeBlocks) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);

    	  text += '¨0';

    	  text = text.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function (wholeMatch, delim, language, codeblock) {
    	    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\n';

    	    // First parse the github code block
    	    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    	    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    	    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    	    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing whitespace

    	    codeblock = '<pre><code' + (language ? ' class="' + language + ' language-' + language + '"' : '') + '>' + codeblock + end + '</code></pre>';

    	    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);

    	    // Since GHCodeblocks can be false positives, we need to
    	    // store the primitive text and the parsed text in a global var,
    	    // and then return a token
    	    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
    	  });

    	  // attacklab: strip sentinel
    	  text = text.replace(/¨0/, '');

    	  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);
    	});

    	showdown.subParser('hashBlock', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashBlock.before', text, options, globals);
    	  text = text.replace(/(^\n+|\n+$)/g, '');
    	  text = '\n\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\n\n';
    	  text = globals.converter._dispatch('hashBlock.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Hash and escape <code> elements that should not be parsed as markdown
    	 */
    	showdown.subParser('hashCodeTags', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);

    	  var repFunc = function (wholeMatch, match, left, right) {
    	    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    	    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';
    	  };

    	  // Hash naked <code>
    	  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\b[^>]*>', '</code>', 'gim');

    	  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('hashElement', function (text, options, globals) {

    	  return function (wholeMatch, m1) {
    	    var blockText = m1;

    	    // Undo double lines
    	    blockText = blockText.replace(/\n\n/g, '\n');
    	    blockText = blockText.replace(/^\n/, '');

    	    // strip trailing blank lines
    	    blockText = blockText.replace(/\n+$/g, '');

    	    // Replace the element text with a marker ("¨KxK" where x is its key)
    	    blockText = '\n\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\n\n';

    	    return blockText;
    	  };
    	});

    	showdown.subParser('hashHTMLBlocks', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);

    	  var blockTags = [
    	        'pre',
    	        'div',
    	        'h1',
    	        'h2',
    	        'h3',
    	        'h4',
    	        'h5',
    	        'h6',
    	        'blockquote',
    	        'table',
    	        'dl',
    	        'ol',
    	        'ul',
    	        'script',
    	        'noscript',
    	        'form',
    	        'fieldset',
    	        'iframe',
    	        'math',
    	        'style',
    	        'section',
    	        'header',
    	        'footer',
    	        'nav',
    	        'article',
    	        'aside',
    	        'address',
    	        'audio',
    	        'canvas',
    	        'figure',
    	        'hgroup',
    	        'output',
    	        'video',
    	        'p'
    	      ],
    	      repFunc = function (wholeMatch, match, left, right) {
    	        var txt = wholeMatch;
    	        // check if this html element is marked as markdown
    	        // if so, it's contents should be parsed as markdown
    	        if (left.search(/\bmarkdown\b/) !== -1) {
    	          txt = left + globals.converter.makeHtml(match) + right;
    	        }
    	        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
    	      };

    	  if (options.backslashEscapesHTMLTags) {
    	    // encode backslash escaped HTML tags
    	    text = text.replace(/\\<(\/?[^>]+?)>/g, function (wm, inside) {
    	      return '&lt;' + inside + '&gt;';
    	    });
    	  }

    	  // hash HTML Blocks
    	  for (var i = 0; i < blockTags.length; ++i) {

    	    var opTagPos,
    	        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\b[^>]*>)', 'im'),
    	        patLeft  = '<' + blockTags[i] + '\\b[^>]*>',
    	        patRight = '</' + blockTags[i] + '>';
    	    // 1. Look for the first position of the first opening HTML tag in the text
    	    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {

    	      // if the HTML tag is \ escaped, we need to escape it and break


    	      //2. Split the text in that position
    	      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),
    	          //3. Match recursively
    	          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');

    	      // prevent an infinite loop
    	      if (newSubText1 === subTexts[1]) {
    	        break;
    	      }
    	      text = subTexts[0].concat(newSubText1);
    	    }
    	  }
    	  // HR SPECIAL CASE
    	  text = text.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
    	    showdown.subParser('hashElement')(text, options, globals));

    	  // Special case for standalone HTML comments
    	  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {
    	    return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
    	  }, '^ {0,3}<!--', '-->', 'gm');

    	  // PHP and ASP-style processor instructions (<?...?> and <%...%>)
    	  text = text.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
    	    showdown.subParser('hashElement')(text, options, globals));

    	  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Hash span elements that should not be parsed as markdown
    	 */
    	showdown.subParser('hashHTMLSpans', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);

    	  function hashHTMLSpan (html) {
    	    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';
    	  }

    	  // Hash Self Closing tags
    	  text = text.replace(/<[^>]+?\/>/gi, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  // Hash tags without properties
    	  text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  // Hash tags with properties
    	  text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  // Hash self closing tags without />
    	  text = text.replace(/<[^>]+?>/gi, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  /*showdown.helper.matchRecursiveRegExp(text, '<code\\b[^>]*>', '</code>', 'gi');*/

    	  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Unhash HTML spans
    	 */
    	showdown.subParser('unhashHTMLSpans', function (text, options, globals) {
    	  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);

    	  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {
    	    var repText = globals.gHtmlSpans[i],
    	        // limiter to prevent infinite loop (assume 10 as limit for recurse)
    	        limit = 0;

    	    while (/¨C(\d+)C/.test(repText)) {
    	      var num = RegExp.$1;
    	      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);
    	      if (limit === 10) {
    	        console.error('maximum nesting of 10 spans reached!!!');
    	        break;
    	      }
    	      ++limit;
    	    }
    	    text = text.replace('¨C' + i + 'C', repText);
    	  }

    	  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Hash and escape <pre><code> elements that should not be parsed as markdown
    	 */
    	showdown.subParser('hashPreCodeTags', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);

    	  var repFunc = function (wholeMatch, match, left, right) {
    	    // encode html entities
    	    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    	    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
    	  };

    	  // Hash <pre><code>
    	  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>', '^ {0,3}</code>\\s*</pre>', 'gim');

    	  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('headers', function (text, options, globals) {

    	  text = globals.converter._dispatch('headers.before', text, options, globals);

    	  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),

    	      // Set text-style headers:
    	      //	Header 1
    	      //	========
    	      //
    	      //	Header 2
    	      //	--------
    	      //
    	      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm,
    	      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;

    	  text = text.replace(setextRegexH1, function (wholeMatch, m1) {

    	    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
    	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
    	        hLevel = headerLevelStart,
    	        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    	    return showdown.subParser('hashBlock')(hashBlock, options, globals);
    	  });

    	  text = text.replace(setextRegexH2, function (matchFound, m1) {
    	    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
    	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
    	        hLevel = headerLevelStart + 1,
    	        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    	    return showdown.subParser('hashBlock')(hashBlock, options, globals);
    	  });

    	  // atx-style headers:
    	  //  # Header 1
    	  //  ## Header 2
    	  //  ## Header 2 with closing hashes ##
    	  //  ...
    	  //  ###### Header 6
    	  //
    	  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;

    	  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {
    	    var hText = m2;
    	    if (options.customizedHeaderId) {
    	      hText = m2.replace(/\s?\{([^{]+?)}\s*$/, '');
    	    }

    	    var span = showdown.subParser('spanGamut')(hText, options, globals),
    	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m2) + '"',
    	        hLevel = headerLevelStart - 1 + m1.length,
    	        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';

    	    return showdown.subParser('hashBlock')(header, options, globals);
    	  });

    	  function headerId (m) {
    	    var title,
    	        prefix;

    	    // It is separate from other options to allow combining prefix and customized
    	    if (options.customizedHeaderId) {
    	      var match = m.match(/\{([^{]+?)}\s*$/);
    	      if (match && match[1]) {
    	        m = match[1];
    	      }
    	    }

    	    title = m;

    	    // Prefix id to prevent causing inadvertent pre-existing style matches.
    	    if (showdown.helper.isString(options.prefixHeaderId)) {
    	      prefix = options.prefixHeaderId;
    	    } else if (options.prefixHeaderId === true) {
    	      prefix = 'section-';
    	    } else {
    	      prefix = '';
    	    }

    	    if (!options.rawPrefixHeaderId) {
    	      title = prefix + title;
    	    }

    	    if (options.ghCompatibleHeaderId) {
    	      title = title
    	        .replace(/ /g, '-')
    	        // replace previously escaped chars (&, ¨ and $)
    	        .replace(/&amp;/g, '')
    	        .replace(/¨T/g, '')
    	        .replace(/¨D/g, '')
    	        // replace rest of the chars (&~$ are repeated as they might have been escaped)
    	        // borrowed from github's redcarpet (some they should produce similar results)
    	        .replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, '')
    	        .toLowerCase();
    	    } else if (options.rawHeaderId) {
    	      title = title
    	        .replace(/ /g, '-')
    	        // replace previously escaped chars (&, ¨ and $)
    	        .replace(/&amp;/g, '&')
    	        .replace(/¨T/g, '¨')
    	        .replace(/¨D/g, '$')
    	        // replace " and '
    	        .replace(/["']/g, '-')
    	        .toLowerCase();
    	    } else {
    	      title = title
    	        .replace(/[^\w]/g, '')
    	        .toLowerCase();
    	    }

    	    if (options.rawPrefixHeaderId) {
    	      title = prefix + title;
    	    }

    	    if (globals.hashLinkCounts[title]) {
    	      title = title + '-' + (globals.hashLinkCounts[title]++);
    	    } else {
    	      globals.hashLinkCounts[title] = 1;
    	    }
    	    return title;
    	  }

    	  text = globals.converter._dispatch('headers.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Turn Markdown link shortcuts into XHTML <a> tags.
    	 */
    	showdown.subParser('horizontalRule', function (text, options, globals) {
    	  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);

    	  var key = showdown.subParser('hashBlock')('<hr />', options, globals);
    	  text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key);
    	  text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key);
    	  text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key);

    	  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Turn Markdown image shortcuts into <img> tags.
    	 */
    	showdown.subParser('images', function (text, options, globals) {

    	  text = globals.converter._dispatch('images.before', text, options, globals);

    	  var inlineRegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
    	      crazyRegExp       = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,
    	      base64RegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
    	      referenceRegExp   = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,
    	      refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;

    	  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {
    	    url = url.replace(/\s/g, '');
    	    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);
    	  }

    	  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {

    	    var gUrls   = globals.gUrls,
    	        gTitles = globals.gTitles,
    	        gDims   = globals.gDimensions;

    	    linkId = linkId.toLowerCase();

    	    if (!title) {
    	      title = '';
    	    }
    	    // Special case for explicit empty url
    	    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
    	      url = '';

    	    } else if (url === '' || url === null) {
    	      if (linkId === '' || linkId === null) {
    	        // lower-case and turn embedded newlines into spaces
    	        linkId = altText.toLowerCase().replace(/ ?\n/g, ' ');
    	      }
    	      url = '#' + linkId;

    	      if (!showdown.helper.isUndefined(gUrls[linkId])) {
    	        url = gUrls[linkId];
    	        if (!showdown.helper.isUndefined(gTitles[linkId])) {
    	          title = gTitles[linkId];
    	        }
    	        if (!showdown.helper.isUndefined(gDims[linkId])) {
    	          width = gDims[linkId].width;
    	          height = gDims[linkId].height;
    	        }
    	      } else {
    	        return wholeMatch;
    	      }
    	    }

    	    altText = altText
    	      .replace(/"/g, '&quot;')
    	    //altText = showdown.helper.escapeCharacters(altText, '*_', false);
    	      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	    //url = showdown.helper.escapeCharacters(url, '*_', false);
    	    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	    var result = '<img src="' + url + '" alt="' + altText + '"';

    	    if (title && showdown.helper.isString(title)) {
    	      title = title
    	        .replace(/"/g, '&quot;')
    	      //title = showdown.helper.escapeCharacters(title, '*_', false);
    	        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	      result += ' title="' + title + '"';
    	    }

    	    if (width && height) {
    	      width  = (width === '*') ? 'auto' : width;
    	      height = (height === '*') ? 'auto' : height;

    	      result += ' width="' + width + '"';
    	      result += ' height="' + height + '"';
    	    }

    	    result += ' />';

    	    return result;
    	  }

    	  // First, handle reference-style labeled images: ![alt text][id]
    	  text = text.replace(referenceRegExp, writeImageTag);

    	  // Next, handle inline images:  ![alt text](url =<width>x<height> "optional title")

    	  // base64 encoded images
    	  text = text.replace(base64RegExp, writeImageTagBase64);

    	  // cases with crazy urls like ./image/cat1).png
    	  text = text.replace(crazyRegExp, writeImageTag);

    	  // normal cases
    	  text = text.replace(inlineRegExp, writeImageTag);

    	  // handle reference-style shortcuts: ![img text]
    	  text = text.replace(refShortcutRegExp, writeImageTag);

    	  text = globals.converter._dispatch('images.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('italicsAndBold', function (text, options, globals) {

    	  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);

    	  // it's faster to have 3 separate regexes for each case than have just one
    	  // because of backtracing, in some cases, it could lead to an exponential effect
    	  // called "catastrophic backtrace". Ominous!

    	  function parseInside (txt, left, right) {
    	    /*
    	    if (options.simplifiedAutoLink) {
    	      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    	    }
    	    */
    	    return left + txt + right;
    	  }

    	  // Parse underscores
    	  if (options.literalMidWordUnderscores) {
    	    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
    	      return parseInside (txt, '<strong><em>', '</em></strong>');
    	    });
    	    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
    	      return parseInside (txt, '<strong>', '</strong>');
    	    });
    	    text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function (wm, txt) {
    	      return parseInside (txt, '<em>', '</em>');
    	    });
    	  } else {
    	    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    	    });
    	    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    	    });
    	    text = text.replace(/_([^\s_][\s\S]*?)_/g, function (wm, m) {
    	      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)
    	      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    	    });
    	  }

    	  // Now parse asterisks
    	  if (options.literalMidWordAsterisks) {
    	    text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function (wm, lead, txt) {
    	      return parseInside (txt, lead + '<strong><em>', '</em></strong>');
    	    });
    	    text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function (wm, lead, txt) {
    	      return parseInside (txt, lead + '<strong>', '</strong>');
    	    });
    	    text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function (wm, lead, txt) {
    	      return parseInside (txt, lead + '<em>', '</em>');
    	    });
    	  } else {
    	    text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    	    });
    	    text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    	    });
    	    text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function (wm, m) {
    	      // !/^\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)
    	      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    	    });
    	  }


    	  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Form HTML ordered (numbered) and unordered (bulleted) lists.
    	 */
    	showdown.subParser('lists', function (text, options, globals) {

    	  /**
    	   * Process the contents of a single ordered or unordered list, splitting it
    	   * into individual list items.
    	   * @param {string} listStr
    	   * @param {boolean} trimTrailing
    	   * @returns {string}
    	   */
    	  function processListItems (listStr, trimTrailing) {
    	    // The $g_list_level global keeps track of when we're inside a list.
    	    // Each time we enter a list, we increment it; when we leave a list,
    	    // we decrement. If it's zero, we're not in a list anymore.
    	    //
    	    // We do this because when we're not inside a list, we want to treat
    	    // something like this:
    	    //
    	    //    I recommend upgrading to version
    	    //    8. Oops, now this line is treated
    	    //    as a sub-list.
    	    //
    	    // As a single paragraph, despite the fact that the second line starts
    	    // with a digit-period-space sequence.
    	    //
    	    // Whereas when we're inside a list (or sub-list), that line will be
    	    // treated as the start of a sub-list. What a kludge, huh? This is
    	    // an aspect of Markdown's syntax that's hard to parse perfectly
    	    // without resorting to mind-reading. Perhaps the solution is to
    	    // change the syntax rules such that sub-lists must start with a
    	    // starting cardinal number; e.g. "1." or "a.".
    	    globals.gListLevel++;

    	    // trim trailing blank lines:
    	    listStr = listStr.replace(/\n{2,}$/, '\n');

    	    // attacklab: add sentinel to emulate \z
    	    listStr += '¨0';

    	    var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,
    	        isParagraphed = (/\n[ \t]*\n(?!¨0)/.test(listStr));

    	    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,
    	    // which is a syntax breaking change
    	    // activating this option reverts to old behavior
    	    if (options.disableForced4SpacesIndentedSublists) {
    	      rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
    	    }

    	    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
    	      checked = (checked && checked.trim() !== '');

    	      var item = showdown.subParser('outdent')(m4, options, globals),
    	          bulletStyle = '';

    	      // Support for github tasklists
    	      if (taskbtn && options.tasklists) {
    	        bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
    	        item = item.replace(/^[ \t]*\[(x|X| )?]/m, function () {
    	          var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
    	          if (checked) {
    	            otp += ' checked';
    	          }
    	          otp += '>';
    	          return otp;
    	        });
    	      }

    	      // ISSUE #312
    	      // This input: - - - a
    	      // causes trouble to the parser, since it interprets it as:
    	      // <ul><li><li><li>a</li></li></li></ul>
    	      // instead of:
    	      // <ul><li>- - a</li></ul>
    	      // So, to prevent it, we will put a marker (¨A)in the beginning of the line
    	      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser
    	      item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function (wm2) {
    	        return '¨A' + wm2;
    	      });

    	      // m1 - Leading line or
    	      // Has a double return (multi paragraph) or
    	      // Has sublist
    	      if (m1 || (item.search(/\n{2,}/) > -1)) {
    	        item = showdown.subParser('githubCodeBlocks')(item, options, globals);
    	        item = showdown.subParser('blockGamut')(item, options, globals);
    	      } else {
    	        // Recursion for sub-lists:
    	        item = showdown.subParser('lists')(item, options, globals);
    	        item = item.replace(/\n$/, ''); // chomp(item)
    	        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);

    	        // Colapse double linebreaks
    	        item = item.replace(/\n\n+/g, '\n\n');
    	        if (isParagraphed) {
    	          item = showdown.subParser('paragraphs')(item, options, globals);
    	        } else {
    	          item = showdown.subParser('spanGamut')(item, options, globals);
    	        }
    	      }

    	      // now we need to remove the marker (¨A)
    	      item = item.replace('¨A', '');
    	      // we can finally wrap the line in list item tags
    	      item =  '<li' + bulletStyle + '>' + item + '</li>\n';

    	      return item;
    	    });

    	    // attacklab: strip sentinel
    	    listStr = listStr.replace(/¨0/g, '');

    	    globals.gListLevel--;

    	    if (trimTrailing) {
    	      listStr = listStr.replace(/\s+$/, '');
    	    }

    	    return listStr;
    	  }

    	  function styleStartNumber (list, listType) {
    	    // check if ol and starts by a number different than 1
    	    if (listType === 'ol') {
    	      var res = list.match(/^ *(\d+)\./);
    	      if (res && res[1] !== '1') {
    	        return ' start="' + res[1] + '"';
    	      }
    	    }
    	    return '';
    	  }

    	  /**
    	   * Check and parse consecutive lists (better fix for issue #142)
    	   * @param {string} list
    	   * @param {string} listType
    	   * @param {boolean} trimTrailing
    	   * @returns {string}
    	   */
    	  function parseConsecutiveLists (list, listType, trimTrailing) {
    	    // check if we caught 2 or more consecutive lists by mistake
    	    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa
    	    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm,
    	        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm,
    	        counterRxg = (listType === 'ul') ? olRgx : ulRgx,
    	        result = '';

    	    if (list.search(counterRxg) !== -1) {
    	      (function parseCL (txt) {
    	        var pos = txt.search(counterRxg),
    	            style = styleStartNumber(list, listType);
    	        if (pos !== -1) {
    	          // slice
    	          result += '\n\n<' + listType + style + '>\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\n';

    	          // invert counterType and listType
    	          listType = (listType === 'ul') ? 'ol' : 'ul';
    	          counterRxg = (listType === 'ul') ? olRgx : ulRgx;

    	          //recurse
    	          parseCL(txt.slice(pos));
    	        } else {
    	          result += '\n\n<' + listType + style + '>\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\n';
    	        }
    	      })(list);
    	    } else {
    	      var style = styleStartNumber(list, listType);
    	      result = '\n\n<' + listType + style + '>\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\n';
    	    }

    	    return result;
    	  }

    	  /** Start of list parsing **/
    	  text = globals.converter._dispatch('lists.before', text, options, globals);
    	  // add sentinel to hack around khtml/safari bug:
    	  // http://bugs.webkit.org/show_bug.cgi?id=11231
    	  text += '¨0';

    	  if (globals.gListLevel) {
    	    text = text.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
    	      function (wholeMatch, list, m2) {
    	        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
    	        return parseConsecutiveLists(list, listType, true);
    	      }
    	    );
    	  } else {
    	    text = text.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
    	      function (wholeMatch, m1, list, m3) {
    	        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
    	        return parseConsecutiveLists(list, listType, false);
    	      }
    	    );
    	  }

    	  // strip sentinel
    	  text = text.replace(/¨0/, '');
    	  text = globals.converter._dispatch('lists.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Parse metadata at the top of the document
    	 */
    	showdown.subParser('metadata', function (text, options, globals) {

    	  if (!options.metadata) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('metadata.before', text, options, globals);

    	  function parseMetadataContents (content) {
    	    // raw is raw so it's not changed in any way
    	    globals.metadata.raw = content;

    	    // escape chars forbidden in html attributes
    	    // double quotes
    	    content = content
    	      // ampersand first
    	      .replace(/&/g, '&amp;')
    	      // double quotes
    	      .replace(/"/g, '&quot;');

    	    content = content.replace(/\n {4}/g, ' ');
    	    content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function (wm, key, value) {
    	      globals.metadata.parsed[key] = value;
    	      return '';
    	    });
    	  }

    	  text = text.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function (wholematch, format, content) {
    	    parseMetadataContents(content);
    	    return '¨M';
    	  });

    	  text = text.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function (wholematch, format, content) {
    	    if (format) {
    	      globals.metadata.format = format;
    	    }
    	    parseMetadataContents(content);
    	    return '¨M';
    	  });

    	  text = text.replace(/¨M/g, '');

    	  text = globals.converter._dispatch('metadata.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Remove one level of line-leading tabs or spaces
    	 */
    	showdown.subParser('outdent', function (text, options, globals) {
    	  text = globals.converter._dispatch('outdent.before', text, options, globals);

    	  // attacklab: hack around Konqueror 3.5.4 bug:
    	  // "----------bug".replace(/^-/g,"") == "bug"
    	  text = text.replace(/^(\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width

    	  // attacklab: clean up hack
    	  text = text.replace(/¨0/g, '');

    	  text = globals.converter._dispatch('outdent.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 *
    	 */
    	showdown.subParser('paragraphs', function (text, options, globals) {

    	  text = globals.converter._dispatch('paragraphs.before', text, options, globals);
    	  // Strip leading and trailing lines:
    	  text = text.replace(/^\n+/g, '');
    	  text = text.replace(/\n+$/g, '');

    	  var grafs = text.split(/\n{2,}/g),
    	      grafsOut = [],
    	      end = grafs.length; // Wrap <p> tags

    	  for (var i = 0; i < end; i++) {
    	    var str = grafs[i];
    	    // if this is an HTML marker, copy it
    	    if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
    	      grafsOut.push(str);

    	    // test for presence of characters to prevent empty lines being parsed
    	    // as paragraphs (resulting in undesired extra empty paragraphs)
    	    } else if (str.search(/\S/) >= 0) {
    	      str = showdown.subParser('spanGamut')(str, options, globals);
    	      str = str.replace(/^([ \t]*)/g, '<p>');
    	      str += '</p>';
    	      grafsOut.push(str);
    	    }
    	  }

    	  /** Unhashify HTML blocks */
    	  end = grafsOut.length;
    	  for (i = 0; i < end; i++) {
    	    var blockText = '',
    	        grafsOutIt = grafsOut[i],
    	        codeFlag = false;
    	    // if this is a marker for an html block...
    	    // use RegExp.test instead of string.search because of QML bug
    	    while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
    	      var delim = RegExp.$1,
    	          num   = RegExp.$2;

    	      if (delim === 'K') {
    	        blockText = globals.gHtmlBlocks[num];
    	      } else {
    	        // we need to check if ghBlock is a false positive
    	        if (codeFlag) {
    	          // use encoded version of all text
    	          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);
    	        } else {
    	          blockText = globals.ghCodeBlocks[num].codeblock;
    	        }
    	      }
    	      blockText = blockText.replace(/\$/g, '$$$$'); // Escape any dollar signs

    	      grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
    	      // Check if grafsOutIt is a pre->code
    	      if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
    	        codeFlag = true;
    	      }
    	    }
    	    grafsOut[i] = grafsOutIt;
    	  }
    	  text = grafsOut.join('\n');
    	  // Strip leading and trailing lines:
    	  text = text.replace(/^\n+/g, '');
    	  text = text.replace(/\n+$/g, '');
    	  return globals.converter._dispatch('paragraphs.after', text, options, globals);
    	});

    	/**
    	 * Run extension
    	 */
    	showdown.subParser('runExtension', function (ext, text, options, globals) {

    	  if (ext.filter) {
    	    text = ext.filter(text, globals.converter, options);

    	  } else if (ext.regex) {
    	    // TODO remove this when old extension loading mechanism is deprecated
    	    var re = ext.regex;
    	    if (!(re instanceof RegExp)) {
    	      re = new RegExp(re, 'g');
    	    }
    	    text = text.replace(re, ext.replace);
    	  }

    	  return text;
    	});

    	/**
    	 * These are all the transformations that occur *within* block-level
    	 * tags like paragraphs, headers, and list items.
    	 */
    	showdown.subParser('spanGamut', function (text, options, globals) {

    	  text = globals.converter._dispatch('spanGamut.before', text, options, globals);
    	  text = showdown.subParser('codeSpans')(text, options, globals);
    	  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);
    	  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);

    	  // Process anchor and image tags. Images must come first,
    	  // because ![foo][f] looks like an anchor.
    	  text = showdown.subParser('images')(text, options, globals);
    	  text = showdown.subParser('anchors')(text, options, globals);

    	  // Make links out of things like `<http://example.com/>`
    	  // Must come after anchors, because you can use < and >
    	  // delimiters in inline links like [this](<url>).
    	  text = showdown.subParser('autoLinks')(text, options, globals);
    	  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);
    	  text = showdown.subParser('emoji')(text, options, globals);
    	  text = showdown.subParser('underline')(text, options, globals);
    	  text = showdown.subParser('italicsAndBold')(text, options, globals);
    	  text = showdown.subParser('strikethrough')(text, options, globals);
    	  text = showdown.subParser('ellipsis')(text, options, globals);

    	  // we need to hash HTML tags inside spans
    	  text = showdown.subParser('hashHTMLSpans')(text, options, globals);

    	  // now we encode amps and angles
    	  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);

    	  // Do hard breaks
    	  if (options.simpleLineBreaks) {
    	    // GFM style hard breaks
    	    // only add line breaks if the text does not contain a block (special case for lists)
    	    if (!/\n\n¨K/.test(text)) {
    	      text = text.replace(/\n+/g, '<br />\n');
    	    }
    	  } else {
    	    // Vanilla hard breaks
    	    text = text.replace(/  +\n/g, '<br />\n');
    	  }

    	  text = globals.converter._dispatch('spanGamut.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('strikethrough', function (text, options, globals) {

    	  function parseInside (txt) {
    	    if (options.simplifiedAutoLink) {
    	      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    	    }
    	    return '<del>' + txt + '</del>';
    	  }

    	  if (options.strikethrough) {
    	    text = globals.converter._dispatch('strikethrough.before', text, options, globals);
    	    text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });
    	    text = globals.converter._dispatch('strikethrough.after', text, options, globals);
    	  }

    	  return text;
    	});

    	/**
    	 * Strips link definitions from text, stores the URLs and titles in
    	 * hash references.
    	 * Link defs are in the form: ^[id]: url "optional title"
    	 */
    	showdown.subParser('stripLinkDefinitions', function (text, options, globals) {

    	  var regex       = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,
    	      base64Regex = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;

    	  // attacklab: sentinel workarounds for lack of \A and \Z, safari\khtml bug
    	  text += '¨0';

    	  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {

    	    // if there aren't two instances of linkId it must not be a reference link so back out
    	    linkId = linkId.toLowerCase();
    	    if (text.toLowerCase().split(linkId).length - 1 < 2) {
    	      return wholeMatch;
    	    }
    	    if (url.match(/^data:.+?\/.+?;base64,/)) {
    	      // remove newlines
    	      globals.gUrls[linkId] = url.replace(/\s/g, '');
    	    } else {
    	      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive
    	    }

    	    if (blankLines) {
    	      // Oops, found blank lines, so it's not a title.
    	      // Put back the parenthetical statement we stole.
    	      return blankLines + title;

    	    } else {
    	      if (title) {
    	        globals.gTitles[linkId] = title.replace(/"|'/g, '&quot;');
    	      }
    	      if (options.parseImgDimensions && width && height) {
    	        globals.gDimensions[linkId] = {
    	          width:  width,
    	          height: height
    	        };
    	      }
    	    }
    	    // Completely remove the definition from the text
    	    return '';
    	  };

    	  // first we try to find base64 link references
    	  text = text.replace(base64Regex, replaceFunc);

    	  text = text.replace(regex, replaceFunc);

    	  // attacklab: strip sentinel
    	  text = text.replace(/¨0/, '');

    	  return text;
    	});

    	showdown.subParser('tables', function (text, options, globals) {

    	  if (!options.tables) {
    	    return text;
    	  }

    	  var tableRgx       = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,
    	      //singeColTblRgx = /^ {0,3}\|.+\|\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n(?: {0,3}\|.+\|\n)+(?:\n\n|¨0)/gm;
    	      singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;

    	  function parseStyles (sLine) {
    	    if (/^:[ \t]*--*$/.test(sLine)) {
    	      return ' style="text-align:left;"';
    	    } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
    	      return ' style="text-align:right;"';
    	    } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
    	      return ' style="text-align:center;"';
    	    } else {
    	      return '';
    	    }
    	  }

    	  function parseHeaders (header, style) {
    	    var id = '';
    	    header = header.trim();
    	    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility
    	    if (options.tablesHeaderId || options.tableHeaderId) {
    	      id = ' id="' + header.replace(/ /g, '_').toLowerCase() + '"';
    	    }
    	    header = showdown.subParser('spanGamut')(header, options, globals);

    	    return '<th' + id + style + '>' + header + '</th>\n';
    	  }

    	  function parseCells (cell, style) {
    	    var subText = showdown.subParser('spanGamut')(cell, options, globals);
    	    return '<td' + style + '>' + subText + '</td>\n';
    	  }

    	  function buildTable (headers, cells) {
    	    var tb = '<table>\n<thead>\n<tr>\n',
    	        tblLgn = headers.length;

    	    for (var i = 0; i < tblLgn; ++i) {
    	      tb += headers[i];
    	    }
    	    tb += '</tr>\n</thead>\n<tbody>\n';

    	    for (i = 0; i < cells.length; ++i) {
    	      tb += '<tr>\n';
    	      for (var ii = 0; ii < tblLgn; ++ii) {
    	        tb += cells[i][ii];
    	      }
    	      tb += '</tr>\n';
    	    }
    	    tb += '</tbody>\n</table>\n';
    	    return tb;
    	  }

    	  function parseTable (rawTable) {
    	    var i, tableLines = rawTable.split('\n');

    	    for (i = 0; i < tableLines.length; ++i) {
    	      // strip wrong first and last column if wrapped tables are used
    	      if (/^ {0,3}\|/.test(tableLines[i])) {
    	        tableLines[i] = tableLines[i].replace(/^ {0,3}\|/, '');
    	      }
    	      if (/\|[ \t]*$/.test(tableLines[i])) {
    	        tableLines[i] = tableLines[i].replace(/\|[ \t]*$/, '');
    	      }
    	      // parse code spans first, but we only support one line code spans
    	      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);
    	    }

    	    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),
    	        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),
    	        rawCells = [],
    	        headers = [],
    	        styles = [],
    	        cells = [];

    	    tableLines.shift();
    	    tableLines.shift();

    	    for (i = 0; i < tableLines.length; ++i) {
    	      if (tableLines[i].trim() === '') {
    	        continue;
    	      }
    	      rawCells.push(
    	        tableLines[i]
    	          .split('|')
    	          .map(function (s) {
    	            return s.trim();
    	          })
    	      );
    	    }

    	    if (rawHeaders.length < rawStyles.length) {
    	      return rawTable;
    	    }

    	    for (i = 0; i < rawStyles.length; ++i) {
    	      styles.push(parseStyles(rawStyles[i]));
    	    }

    	    for (i = 0; i < rawHeaders.length; ++i) {
    	      if (showdown.helper.isUndefined(styles[i])) {
    	        styles[i] = '';
    	      }
    	      headers.push(parseHeaders(rawHeaders[i], styles[i]));
    	    }

    	    for (i = 0; i < rawCells.length; ++i) {
    	      var row = [];
    	      for (var ii = 0; ii < headers.length; ++ii) {
    	        if (showdown.helper.isUndefined(rawCells[i][ii])) ;
    	        row.push(parseCells(rawCells[i][ii], styles[ii]));
    	      }
    	      cells.push(row);
    	    }

    	    return buildTable(headers, cells);
    	  }

    	  text = globals.converter._dispatch('tables.before', text, options, globals);

    	  // find escaped pipe characters
    	  text = text.replace(/\\(\|)/g, showdown.helper.escapeCharactersCallback);

    	  // parse multi column tables
    	  text = text.replace(tableRgx, parseTable);

    	  // parse one column tables
    	  text = text.replace(singeColTblRgx, parseTable);

    	  text = globals.converter._dispatch('tables.after', text, options, globals);

    	  return text;
    	});

    	showdown.subParser('underline', function (text, options, globals) {

    	  if (!options.underline) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('underline.before', text, options, globals);

    	  if (options.literalMidWordUnderscores) {
    	    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
    	      return '<u>' + txt + '</u>';
    	    });
    	    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
    	      return '<u>' + txt + '</u>';
    	    });
    	  } else {
    	    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    	    });
    	    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    	    });
    	  }

    	  // escape remaining underscores to prevent them being parsed by italic and bold
    	  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);

    	  text = globals.converter._dispatch('underline.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * Swap back in all the special characters we've hidden.
    	 */
    	showdown.subParser('unescapeSpecialChars', function (text, options, globals) {
    	  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);

    	  text = text.replace(/¨E(\d+)E/g, function (wholeMatch, m1) {
    	    var charCodeToReplace = parseInt(m1);
    	    return String.fromCharCode(charCodeToReplace);
    	  });

    	  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('makeMarkdown.blockquote', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    var children = node.childNodes,
    	        childrenLength = children.length;

    	    for (var i = 0; i < childrenLength; ++i) {
    	      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);

    	      if (innerTxt === '') {
    	        continue;
    	      }
    	      txt += innerTxt;
    	    }
    	  }
    	  // cleanup
    	  txt = txt.trim();
    	  txt = '> ' + txt.split('\n').join('\n> ');
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {

    	  var lang = node.getAttribute('language'),
    	      num  = node.getAttribute('precodenum');
    	  return '```' + lang + '\n' + globals.preList[num] + '\n```';
    	});

    	showdown.subParser('makeMarkdown.codeSpan', function (node) {

    	  return '`' + node.innerHTML + '`';
    	});

    	showdown.subParser('makeMarkdown.emphasis', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    txt += '*';
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '*';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {

    	  var headerMark = new Array(headerLevel + 1).join('#'),
    	      txt = '';

    	  if (node.hasChildNodes()) {
    	    txt = headerMark + ' ';
    	    var children = node.childNodes,
    	        childrenLength = children.length;

    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.hr', function () {

    	  return '---';
    	});

    	showdown.subParser('makeMarkdown.image', function (node) {

    	  var txt = '';
    	  if (node.hasAttribute('src')) {
    	    txt += '![' + node.getAttribute('alt') + '](';
    	    txt += '<' + node.getAttribute('src') + '>';
    	    if (node.hasAttribute('width') && node.hasAttribute('height')) {
    	      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');
    	    }

    	    if (node.hasAttribute('title')) {
    	      txt += ' "' + node.getAttribute('title') + '"';
    	    }
    	    txt += ')';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.links', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes() && node.hasAttribute('href')) {
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    txt = '[';
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '](';
    	    txt += '<' + node.getAttribute('href') + '>';
    	    if (node.hasAttribute('title')) {
    	      txt += ' "' + node.getAttribute('title') + '"';
    	    }
    	    txt += ')';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.list', function (node, globals, type) {

    	  var txt = '';
    	  if (!node.hasChildNodes()) {
    	    return '';
    	  }
    	  var listItems       = node.childNodes,
    	      listItemsLenght = listItems.length,
    	      listNum = node.getAttribute('start') || 1;

    	  for (var i = 0; i < listItemsLenght; ++i) {
    	    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {
    	      continue;
    	    }

    	    // define the bullet to use in list
    	    var bullet = '';
    	    if (type === 'ol') {
    	      bullet = listNum.toString() + '. ';
    	    } else {
    	      bullet = '- ';
    	    }

    	    // parse list item
    	    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);
    	    ++listNum;
    	  }

    	  // add comment at the end to prevent consecutive lists to be parsed as one
    	  txt += '\n<!-- -->\n';
    	  return txt.trim();
    	});

    	showdown.subParser('makeMarkdown.listItem', function (node, globals) {

    	  var listItemTxt = '';

    	  var children = node.childNodes,
    	      childrenLenght = children.length;

    	  for (var i = 0; i < childrenLenght; ++i) {
    	    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	  }
    	  // if it's only one liner, we need to add a newline at the end
    	  if (!/\n$/.test(listItemTxt)) {
    	    listItemTxt += '\n';
    	  } else {
    	    // it's multiparagraph, so we need to indent
    	    listItemTxt = listItemTxt
    	      .split('\n')
    	      .join('\n    ')
    	      .replace(/^ {4}$/gm, '')
    	      .replace(/\n\n+/g, '\n\n');
    	  }

    	  return listItemTxt;
    	});



    	showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {

    	  spansOnly = spansOnly || false;

    	  var txt = '';

    	  // edge case of text without wrapper paragraph
    	  if (node.nodeType === 3) {
    	    return showdown.subParser('makeMarkdown.txt')(node, globals);
    	  }

    	  // HTML comment
    	  if (node.nodeType === 8) {
    	    return '<!--' + node.data + '-->\n\n';
    	  }

    	  // process only node elements
    	  if (node.nodeType !== 1) {
    	    return '';
    	  }

    	  var tagName = node.tagName.toLowerCase();

    	  switch (tagName) {

    	    //
    	    // BLOCKS
    	    //
    	    case 'h1':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\n\n'; }
    	      break;
    	    case 'h2':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\n\n'; }
    	      break;
    	    case 'h3':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\n\n'; }
    	      break;
    	    case 'h4':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\n\n'; }
    	      break;
    	    case 'h5':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\n\n'; }
    	      break;
    	    case 'h6':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\n\n'; }
    	      break;

    	    case 'p':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\n\n'; }
    	      break;

    	    case 'blockquote':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\n\n'; }
    	      break;

    	    case 'hr':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\n\n'; }
    	      break;

    	    case 'ol':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\n\n'; }
    	      break;

    	    case 'ul':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\n\n'; }
    	      break;

    	    case 'precode':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\n\n'; }
    	      break;

    	    case 'pre':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\n\n'; }
    	      break;

    	    case 'table':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\n\n'; }
    	      break;

    	    //
    	    // SPANS
    	    //
    	    case 'code':
    	      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);
    	      break;

    	    case 'em':
    	    case 'i':
    	      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);
    	      break;

    	    case 'strong':
    	    case 'b':
    	      txt = showdown.subParser('makeMarkdown.strong')(node, globals);
    	      break;

    	    case 'del':
    	      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);
    	      break;

    	    case 'a':
    	      txt = showdown.subParser('makeMarkdown.links')(node, globals);
    	      break;

    	    case 'img':
    	      txt = showdown.subParser('makeMarkdown.image')(node, globals);
    	      break;

    	    default:
    	      txt = node.outerHTML + '\n\n';
    	  }

    	  // common normalization
    	  // TODO eventually

    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.paragraph', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	  }

    	  // some text normalization
    	  txt = txt.trim();

    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.pre', function (node, globals) {

    	  var num  = node.getAttribute('prenum');
    	  return '<pre>' + globals.preList[num] + '</pre>';
    	});

    	showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    txt += '~~';
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '~~';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.strong', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    txt += '**';
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '**';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.table', function (node, globals) {

    	  var txt = '',
    	      tableArray = [[], []],
    	      headings   = node.querySelectorAll('thead>tr>th'),
    	      rows       = node.querySelectorAll('tbody>tr'),
    	      i, ii;
    	  for (i = 0; i < headings.length; ++i) {
    	    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),
    	        allign = '---';

    	    if (headings[i].hasAttribute('style')) {
    	      var style = headings[i].getAttribute('style').toLowerCase().replace(/\s/g, '');
    	      switch (style) {
    	        case 'text-align:left;':
    	          allign = ':---';
    	          break;
    	        case 'text-align:right;':
    	          allign = '---:';
    	          break;
    	        case 'text-align:center;':
    	          allign = ':---:';
    	          break;
    	      }
    	    }
    	    tableArray[0][i] = headContent.trim();
    	    tableArray[1][i] = allign;
    	  }

    	  for (i = 0; i < rows.length; ++i) {
    	    var r = tableArray.push([]) - 1,
    	        cols = rows[i].getElementsByTagName('td');

    	    for (ii = 0; ii < headings.length; ++ii) {
    	      var cellContent = ' ';
    	      if (typeof cols[ii] !== 'undefined') {
    	        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);
    	      }
    	      tableArray[r].push(cellContent);
    	    }
    	  }

    	  var cellSpacesCount = 3;
    	  for (i = 0; i < tableArray.length; ++i) {
    	    for (ii = 0; ii < tableArray[i].length; ++ii) {
    	      var strLen = tableArray[i][ii].length;
    	      if (strLen > cellSpacesCount) {
    	        cellSpacesCount = strLen;
    	      }
    	    }
    	  }

    	  for (i = 0; i < tableArray.length; ++i) {
    	    for (ii = 0; ii < tableArray[i].length; ++ii) {
    	      if (i === 1) {
    	        if (tableArray[i][ii].slice(-1) === ':') {
    	          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';
    	        } else {
    	          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');
    	        }
    	      } else {
    	        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);
    	      }
    	    }
    	    txt += '| ' + tableArray[i].join(' | ') + ' |\n';
    	  }

    	  return txt.trim();
    	});

    	showdown.subParser('makeMarkdown.tableCell', function (node, globals) {

    	  var txt = '';
    	  if (!node.hasChildNodes()) {
    	    return '';
    	  }
    	  var children = node.childNodes,
    	      childrenLength = children.length;

    	  for (var i = 0; i < childrenLength; ++i) {
    	    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);
    	  }
    	  return txt.trim();
    	});

    	showdown.subParser('makeMarkdown.txt', function (node) {

    	  var txt = node.nodeValue;

    	  // multiple spaces are collapsed
    	  txt = txt.replace(/ +/g, ' ');

    	  // replace the custom ¨NBSP; with a space
    	  txt = txt.replace(/¨NBSP;/g, ' ');

    	  // ", <, > and & should replace escaped html entities
    	  txt = showdown.helper.unescapeHTMLEntities(txt);

    	  // escape markdown magic characters
    	  // emphasis, strong and strikethrough - can appear everywhere
    	  // we also escape pipe (|) because of tables
    	  // and escape ` because of code blocks and spans
    	  txt = txt.replace(/([*_~|`])/g, '\\$1');

    	  // escape > because of blockquotes
    	  txt = txt.replace(/^(\s*)>/g, '\\$1>');

    	  // hash character, only troublesome at the beginning of a line because of headers
    	  txt = txt.replace(/^#/gm, '\\#');

    	  // horizontal rules
    	  txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, '$1\\$2$3');

    	  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer
    	  txt = txt.replace(/^( {0,3}\d+)\./gm, '$1\\.');

    	  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)
    	  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\$2');

    	  // images and links, ] followed by ( is problematic, so we escape it
    	  txt = txt.replace(/]([\s]*)\(/g, '\\]$1\\(');

    	  // reference URIs must also be escaped
    	  txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, '\\[$1]:');

    	  return txt;
    	});

    	var root = this;

    	// AMD Loader
    	if (module.exports) {
    	  module.exports = showdown;

    	// Regular Browser loader
    	} else {
    	  root.showdown = showdown;
    	}
    	}).call(commonjsGlobal);

    	
    } (showdown$1));

    var showdown = showdown$1.exports;

    const state = writable( 'emailit' );

    const account = writable( undefined );

    const email = writable( {
      to: '',
      subject: '',
      body: ''
    } );

    const emailEditor = writable( undefined );

    const commandLineEmail = writable( undefined );

    const showScripts = writable( false );

    const showTemplates = writable( false );

    /* src/components/EmailIt.svelte generated by Svelte v3.49.0 */
    const file$l = "src/components/EmailIt.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[96] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[96] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[101] = list[i];
    	return child_ctx;
    }

    // (571:2) {#if showNewAccount}
    function create_if_block_9$1(ctx) {
    	let div1;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let label2;
    	let t7;
    	let input2;
    	let t8;
    	let label3;
    	let t10;
    	let input3;
    	let t11;
    	let label4;
    	let t13;
    	let input4;
    	let t14;
    	let label5;
    	let t16;
    	let input5;
    	let t17;
    	let label6;
    	let t19;
    	let input6;
    	let t20;
    	let label7;
    	let t22;
    	let textarea0;
    	let t23;
    	let label8;
    	let t25;
    	let textarea1;
    	let t26;
    	let label9;
    	let t28;
    	let textarea2;
    	let t29;
    	let div0;
    	let button0;
    	let t30;
    	let t31;
    	let button1;
    	let t32;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			label0 = element("label");
    			label0.textContent = "Default:";
    			t1 = space$3();
    			input0 = element("input");
    			t2 = space$3();
    			label1 = element("label");
    			label1.textContent = "Name of Account:";
    			t4 = space$3();
    			input1 = element("input");
    			t5 = space$3();
    			label2 = element("label");
    			label2.textContent = "From Email:";
    			t7 = space$3();
    			input2 = element("input");
    			t8 = space$3();
    			label3 = element("label");
    			label3.textContent = "Address of SMPT Server:";
    			t10 = space$3();
    			input3 = element("input");
    			t11 = space$3();
    			label4 = element("label");
    			label4.textContent = "SMPT Server Port:";
    			t13 = space$3();
    			input4 = element("input");
    			t14 = space$3();
    			label5 = element("label");
    			label5.textContent = "User Name:";
    			t16 = space$3();
    			input5 = element("input");
    			t17 = space$3();
    			label6 = element("label");
    			label6.textContent = "Password:";
    			t19 = space$3();
    			input6 = element("input");
    			t20 = space$3();
    			label7 = element("label");
    			label7.textContent = "Signiture:";
    			t22 = space$3();
    			textarea0 = element("textarea");
    			t23 = space$3();
    			label8 = element("label");
    			label8.textContent = "Header HTML:";
    			t25 = space$3();
    			textarea1 = element("textarea");
    			t26 = space$3();
    			label9 = element("label");
    			label9.textContent = "Footer HTML:";
    			t28 = space$3();
    			textarea2 = element("textarea");
    			t29 = space$3();
    			div0 = element("div");
    			button0 = element("button");
    			t30 = text("Save");
    			t31 = space$3();
    			button1 = element("button");
    			t32 = text("Cancel");
    			attr_dev(label0, "for", "accountDefaultInput");
    			attr_dev(label0, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label0, file$l, 575, 6, 14303);
    			attr_dev(input0, "id", "accountDefaultInput");
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "class", "svelte-1fv5snm");
    			add_location(input0, file$l, 578, 6, 14399);
    			attr_dev(label1, "for", "accountNameInput");
    			attr_dev(label1, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label1, file$l, 583, 6, 14516);
    			attr_dev(input1, "id", "accountNameInput");
    			set_style(input1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input1, "class", "svelte-1fv5snm");
    			add_location(input1, file$l, 586, 6, 14617);
    			attr_dev(label2, "for", "accountFromInput");
    			attr_dev(label2, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label2, file$l, 591, 6, 14823);
    			attr_dev(input2, "id", "accountFromInput");
    			set_style(input2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input2, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input2, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input2, "class", "svelte-1fv5snm");
    			add_location(input2, file$l, 594, 6, 14919);
    			attr_dev(label3, "for", "accountSmptServerInput");
    			attr_dev(label3, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label3, file$l, 599, 6, 15125);
    			attr_dev(input3, "id", "accountSmptServerInput");
    			set_style(input3, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input3, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input3, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input3, "class", "svelte-1fv5snm");
    			add_location(input3, file$l, 602, 6, 15239);
    			attr_dev(label4, "for", "accountPortInput");
    			attr_dev(label4, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label4, file$l, 607, 6, 15457);
    			attr_dev(input4, "id", "accountPortInput");
    			set_style(input4, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input4, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input4, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input4, "class", "svelte-1fv5snm");
    			add_location(input4, file$l, 610, 6, 15559);
    			attr_dev(label5, "for", "accountUsernameInput");
    			attr_dev(label5, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label5, file$l, 615, 6, 15765);
    			attr_dev(input5, "id", "accountUsernameInput");
    			set_style(input5, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input5, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input5, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input5, "class", "svelte-1fv5snm");
    			add_location(input5, file$l, 618, 6, 15864);
    			attr_dev(label6, "for", "accountPasswordInput");
    			attr_dev(label6, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label6, file$l, 623, 6, 16078);
    			attr_dev(input6, "id", "accountPasswordInput");
    			set_style(input6, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input6, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input6, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input6, "class", "svelte-1fv5snm");
    			add_location(input6, file$l, 626, 6, 16176);
    			attr_dev(label7, "for", "accountSigInput");
    			attr_dev(label7, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label7, file$l, 631, 6, 16390);
    			attr_dev(textarea0, "id", "accountSigInput");
    			set_style(textarea0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(textarea0, "color", /*$theme*/ ctx[28].textColor);
    			set_style(textarea0, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(textarea0, "class", "svelte-1fv5snm");
    			add_location(textarea0, file$l, 632, 6, 16470);
    			attr_dev(label8, "for", "accountHeaderHTMLInput");
    			attr_dev(label8, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label8, file$l, 637, 6, 16677);
    			attr_dev(textarea1, "id", "accountHeaderHTMLInput");
    			set_style(textarea1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(textarea1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(textarea1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(textarea1, "class", "svelte-1fv5snm");
    			add_location(textarea1, file$l, 640, 6, 16780);
    			attr_dev(label9, "for", "accountFooterHTMLInput");
    			attr_dev(label9, "class", "newAccountLabel svelte-1fv5snm");
    			add_location(label9, file$l, 645, 6, 17001);
    			attr_dev(textarea2, "id", "accountFooterHTMLInput");
    			set_style(textarea2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(textarea2, "color", /*$theme*/ ctx[28].textColor);
    			set_style(textarea2, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(textarea2, "class", "svelte-1fv5snm");
    			add_location(textarea2, file$l, 648, 6, 17104);
    			attr_dev(button0, "id", "save");
    			set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button0, "class", "svelte-1fv5snm");
    			add_location(button0, file$l, 654, 8, 17387);
    			attr_dev(button1, "id", "cancel");
    			set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button1, "class", "svelte-1fv5snm");
    			add_location(button1, file$l, 661, 8, 17625);
    			attr_dev(div0, "id", "buttonrow");
    			set_style(div0, "grid-column", "1 / span 2");
    			attr_dev(div0, "class", "svelte-1fv5snm");
    			add_location(div0, file$l, 653, 6, 17325);
    			attr_dev(div1, "id", "newAccountDialog");
    			set_style(div1, "background-color", /*$theme*/ ctx[28].backgroundColor);
    			set_style(div1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(div1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(div1, "class", "svelte-1fv5snm");
    			add_location(div1, file$l, 571, 4, 14137);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, label0);
    			append_dev(div1, t1);
    			append_dev(div1, input0);
    			input0.checked = /*accountDefault*/ ctx[16];
    			append_dev(div1, t2);
    			append_dev(div1, label1);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			set_input_value(input1, /*accountName*/ ctx[8]);
    			append_dev(div1, t5);
    			append_dev(div1, label2);
    			append_dev(div1, t7);
    			append_dev(div1, input2);
    			set_input_value(input2, /*accountFrom*/ ctx[7]);
    			append_dev(div1, t8);
    			append_dev(div1, label3);
    			append_dev(div1, t10);
    			append_dev(div1, input3);
    			set_input_value(input3, /*accountSmptServer*/ ctx[10]);
    			append_dev(div1, t11);
    			append_dev(div1, label4);
    			append_dev(div1, t13);
    			append_dev(div1, input4);
    			set_input_value(input4, /*accountPort*/ ctx[12]);
    			append_dev(div1, t14);
    			append_dev(div1, label5);
    			append_dev(div1, t16);
    			append_dev(div1, input5);
    			set_input_value(input5, /*accountUsername*/ ctx[9]);
    			append_dev(div1, t17);
    			append_dev(div1, label6);
    			append_dev(div1, t19);
    			append_dev(div1, input6);
    			set_input_value(input6, /*accountPassword*/ ctx[11]);
    			append_dev(div1, t20);
    			append_dev(div1, label7);
    			append_dev(div1, t22);
    			append_dev(div1, textarea0);
    			set_input_value(textarea0, /*accountSig*/ ctx[13]);
    			append_dev(div1, t23);
    			append_dev(div1, label8);
    			append_dev(div1, t25);
    			append_dev(div1, textarea1);
    			set_input_value(textarea1, /*accountHeaderHTML*/ ctx[14]);
    			append_dev(div1, t26);
    			append_dev(div1, label9);
    			append_dev(div1, t28);
    			append_dev(div1, textarea2);
    			set_input_value(textarea2, /*accountFooterHTML*/ ctx[15]);
    			append_dev(div1, t29);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, t30);
    			append_dev(div0, t31);
    			append_dev(div0, button1);
    			append_dev(button1, t32);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[53]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[54]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[55]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[56]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[57]),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[58]),
    					listen_dev(input6, "input", /*input6_input_handler*/ ctx[59]),
    					listen_dev(textarea0, "input", /*textarea0_input_handler*/ ctx[60]),
    					listen_dev(textarea1, "input", /*textarea1_input_handler*/ ctx[61]),
    					listen_dev(textarea2, "input", /*textarea2_input_handler*/ ctx[62]),
    					listen_dev(button0, "click", /*saveNewAccount*/ ctx[43], false, false, false),
    					listen_dev(button1, "click", /*cancelNewAccount*/ ctx[45], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*accountDefault*/ 65536) {
    				input0.checked = /*accountDefault*/ ctx[16];
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountName*/ 256 && input1.value !== /*accountName*/ ctx[8]) {
    				set_input_value(input1, /*accountName*/ ctx[8]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input2, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input2, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountFrom*/ 128 && input2.value !== /*accountFrom*/ ctx[7]) {
    				set_input_value(input2, /*accountFrom*/ ctx[7]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input3, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input3, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input3, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountSmptServer*/ 1024 && input3.value !== /*accountSmptServer*/ ctx[10]) {
    				set_input_value(input3, /*accountSmptServer*/ ctx[10]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input4, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input4, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input4, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountPort*/ 4096 && input4.value !== /*accountPort*/ ctx[12]) {
    				set_input_value(input4, /*accountPort*/ ctx[12]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input5, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input5, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input5, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountUsername*/ 512 && input5.value !== /*accountUsername*/ ctx[9]) {
    				set_input_value(input5, /*accountUsername*/ ctx[9]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input6, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input6, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(input6, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountPassword*/ 2048 && input6.value !== /*accountPassword*/ ctx[11]) {
    				set_input_value(input6, /*accountPassword*/ ctx[11]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea0, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea0, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountSig*/ 8192) {
    				set_input_value(textarea0, /*accountSig*/ ctx[13]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountHeaderHTML*/ 16384) {
    				set_input_value(textarea1, /*accountHeaderHTML*/ ctx[14]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea2, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(textarea2, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*accountFooterHTML*/ 32768) {
    				set_input_value(textarea2, /*accountFooterHTML*/ ctx[15]);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div1, "background-color", /*$theme*/ ctx[28].backgroundColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(571:2) {#if showNewAccount}",
    		ctx
    	});

    	return block;
    }

    // (672:2) {#if showChangeAccount}
    function create_if_block_7$1(ctx) {
    	let div2;
    	let h1;
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let div1;
    	let button0;
    	let t4;
    	let t5;
    	let button1;
    	let t6;
    	let t7;
    	let button2;
    	let t8;
    	let t9;
    	let button3;
    	let t10;
    	let t11;
    	let button4;
    	let t12;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*$account*/ ctx[27] !== undefined) return create_if_block_8$1;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value_2 = /*accounts*/ ctx[3];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Email It - Change Account";
    			t1 = space$3();
    			if_block.c();
    			t2 = space$3();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space$3();
    			div1 = element("div");
    			button0 = element("button");
    			t4 = text("Save");
    			t5 = space$3();
    			button1 = element("button");
    			t6 = text("New");
    			t7 = space$3();
    			button2 = element("button");
    			t8 = text("Edit");
    			t9 = space$3();
    			button3 = element("button");
    			t10 = text("Cancel");
    			t11 = space$3();
    			button4 = element("button");
    			t12 = text("Delete");
    			attr_dev(h1, "class", "svelte-1fv5snm");
    			add_location(h1, file$l, 676, 6, 18084);
    			attr_dev(div0, "id", "AccountsList");
    			attr_dev(div0, "class", "svelte-1fv5snm");
    			add_location(div0, file$l, 682, 6, 18295);
    			attr_dev(button0, "id", "save");
    			set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button0, "class", "svelte-1fv5snm");
    			add_location(button0, file$l, 695, 8, 18698);
    			attr_dev(button1, "id", "new");
    			set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button1, "class", "svelte-1fv5snm");
    			add_location(button1, file$l, 702, 8, 18933);
    			attr_dev(button2, "id", "edit");
    			set_style(button2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button2, "class", "svelte-1fv5snm");
    			add_location(button2, file$l, 709, 8, 19165);
    			attr_dev(button3, "id", "cancel");
    			set_style(button3, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button3, "class", "svelte-1fv5snm");
    			add_location(button3, file$l, 716, 8, 19406);
    			attr_dev(button4, "id", "delete");
    			set_style(button4, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button4, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button4, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button4, "class", "svelte-1fv5snm");
    			add_location(button4, file$l, 723, 8, 19653);
    			attr_dev(div1, "id", "buttonrow");
    			attr_dev(div1, "class", "svelte-1fv5snm");
    			add_location(div1, file$l, 694, 6, 18669);
    			attr_dev(div2, "id", "accountsDiv");
    			set_style(div2, "background-color", /*$theme*/ ctx[28].backgroundColor);
    			set_style(div2, "color", /*$theme*/ ctx[28].textColor);
    			set_style(div2, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(div2, "class", "svelte-1fv5snm");
    			add_location(div2, file$l, 672, 4, 17923);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h1);
    			append_dev(div2, t1);
    			if_block.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, t4);
    			append_dev(div1, t5);
    			append_dev(div1, button1);
    			append_dev(button1, t6);
    			append_dev(div1, t7);
    			append_dev(div1, button2);
    			append_dev(button2, t8);
    			append_dev(div1, t9);
    			append_dev(div1, button3);
    			append_dev(button3, t10);
    			append_dev(div1, t11);
    			append_dev(div1, button4);
    			append_dev(button4, t12);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*saveAccount*/ ctx[35], false, false, false),
    					listen_dev(button1, "click", /*newAccount*/ ctx[36], false, false, false),
    					listen_dev(button2, "click", /*editAccountChange*/ ctx[46], false, false, false),
    					listen_dev(button3, "click", /*cancelAccountChange*/ ctx[37], false, false, false),
    					listen_dev(button4, "click", /*deleteAccount*/ ctx[44], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, t2);
    				}
    			}

    			if (dirty[0] & /*$theme, accounts*/ 268435464 | dirty[1] & /*changeActiveAccount*/ 128) {
    				each_value_2 = /*accounts*/ ctx[3];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button2, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button2, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button3, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button3, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button3, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button4, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button4, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button4, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div2, "background-color", /*$theme*/ ctx[28].backgroundColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div2, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div2, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(672:2) {#if showChangeAccount}",
    		ctx
    	});

    	return block;
    }

    // (680:6) {:else}
    function create_else_block_3(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Current Account: Please Create an Account";
    			attr_dev(h2, "class", "svelte-1fv5snm");
    			add_location(h2, file$l, 680, 8, 18226);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(680:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (678:6) {#if $account !== undefined}
    function create_if_block_8$1(ctx) {
    	let h2;
    	let t0;
    	let t1_value = /*$account*/ ctx[27].name + "";
    	let t1;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text("Current Account: ");
    			t1 = text(t1_value);
    			attr_dev(h2, "class", "svelte-1fv5snm");
    			add_location(h2, file$l, 678, 8, 18162);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			append_dev(h2, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$account*/ 134217728 && t1_value !== (t1_value = /*$account*/ ctx[27].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(678:6) {#if $account !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (684:8) {#each accounts as acc}
    function create_each_block_2$1(ctx) {
    	let button;
    	let t0_value = /*acc*/ ctx[101].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[63](/*acc*/ ctx[101]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space$3();
    			set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button, "class", "svelte-1fv5snm");
    			add_location(button, file$l, 684, 10, 18361);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*accounts*/ 8 && t0_value !== (t0_value = /*acc*/ ctx[101].name + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(684:8) {#each accounts as acc}",
    		ctx
    	});

    	return block;
    }

    // (762:6) {#if showEmailList && elist.length > 0}
    function create_if_block_6$2(ctx) {
    	let div;
    	let ul;
    	let each_value_1 = /*elist*/ ctx[20];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-1fv5snm");
    			add_location(ul, file$l, 769, 10, 21111);
    			attr_dev(div, "id", "elist");
    			set_style(div, "width", /*receiverDOM*/ ctx[26].offsetWidth + "px");
    			set_style(div, "left", cumulativeOffset(/*receiverDOM*/ ctx[26]).left + "px");
    			set_style(div, "top", cumulativeOffset(/*receiverDOM*/ ctx[26]).top + 40 + "px");
    			set_style(div, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(div, "color", /*$theme*/ ctx[28].textColor);
    			set_style(div, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(div, "class", "svelte-1fv5snm");
    			add_location(div, file$l, 762, 8, 20775);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*elist, receiverDOM*/ 68157440 | dirty[1] & /*addToInput*/ 1) {
    				each_value_1 = /*elist*/ ctx[20];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty[0] & /*receiverDOM*/ 67108864) {
    				set_style(div, "width", /*receiverDOM*/ ctx[26].offsetWidth + "px");
    			}

    			if (dirty[0] & /*receiverDOM*/ 67108864) {
    				set_style(div, "left", cumulativeOffset(/*receiverDOM*/ ctx[26]).left + "px");
    			}

    			if (dirty[0] & /*receiverDOM*/ 67108864) {
    				set_style(div, "top", cumulativeOffset(/*receiverDOM*/ ctx[26]).top + 40 + "px");
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(762:6) {#if showEmailList && elist.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (771:12) {#each elist as item}
    function create_each_block_1$2(ctx) {
    	let li;
    	let t0_value = /*item*/ ctx[96] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[71](/*item*/ ctx[96]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space$3();
    			attr_dev(li, "class", "svelte-1fv5snm");
    			add_location(li, file$l, 771, 14, 21164);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*elist*/ 1048576 && t0_value !== (t0_value = /*item*/ ctx[96] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(771:12) {#each elist as item}",
    		ctx
    	});

    	return block;
    }

    // (799:2) {:else}
    function create_else_block_2(ctx) {
    	let codemirror;
    	let current;

    	codemirror = new CodeMirror({
    			props: {
    				height: "330px",
    				width: "983px",
    				config: /*editorConfig*/ ctx[29],
    				initFinished: /*initFinished*/ ctx[18],
    				styling: "position: relative; margin-bottom: 20px; border: solid 1px transparent; border-radius: 20px; overflow: hidden;"
    			},
    			$$inline: true
    		});

    	codemirror.$on("textChange", /*textChange_handler*/ ctx[73]);
    	codemirror.$on("editorChange", /*editorChange_handler*/ ctx[74]);

    	const block = {
    		c: function create() {
    			create_component(codemirror.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(codemirror, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const codemirror_changes = {};
    			if (dirty[0] & /*initFinished*/ 262144) codemirror_changes.initFinished = /*initFinished*/ ctx[18];
    			codemirror.$set(codemirror_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(codemirror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(codemirror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(codemirror, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(799:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (795:2) {#if showPreview}
    function create_if_block_5$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "preview");
    			set_style(div, "border-color", /*$theme*/ ctx[28].textColor);
    			attr_dev(div, "class", "svelte-1fv5snm");
    			add_location(div, file$l, 795, 4, 21772);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = /*previewHTML*/ ctx[17];
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*previewHTML*/ 131072) div.innerHTML = /*previewHTML*/ ctx[17];
    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "border-color", /*$theme*/ ctx[28].textColor);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(795:2) {#if showPreview}",
    		ctx
    	});

    	return block;
    }

    // (829:4) {:else}
    function create_else_block_1(ctx) {
    	let button0;
    	let t0;
    	let t1;
    	let button1;
    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button0 = element("button");
    			t0 = text("Edit");
    			t1 = space$3();
    			button1 = element("button");
    			t2 = text("Send");
    			attr_dev(button0, "id", "edit");
    			set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button0, "class", "svelte-1fv5snm");
    			add_location(button0, file$l, 829, 6, 22793);
    			attr_dev(button1, "id", "send");
    			set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button1, "class", "svelte-1fv5snm");
    			add_location(button1, file$l, 836, 6, 23012);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button0, anchor);
    			append_dev(button0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*editEmail*/ ctx[40], false, false, false),
    					listen_dev(button1, "click", /*sendEmail*/ ctx[41], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(829:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (821:4) {#if emailState === "edit"}
    function create_if_block_4$3(ctx) {
    	let button;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("Preview");
    			attr_dev(button, "id", "showPreview");
    			set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button, "class", "svelte-1fv5snm");
    			add_location(button, file$l, 821, 6, 22548);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*createPreview*/ ctx[39], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(821:4) {#if emailState === \\\"edit\\\"}",
    		ctx
    	});

    	return block;
    }

    // (853:4) {:else}
    function create_else_block$7(ctx) {
    	let button;
    	let t_value = /*$account*/ ctx[27].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "id", "account");
    			set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button, "class", "svelte-1fv5snm");
    			add_location(button, file$l, 853, 6, 23525);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*changeAccount*/ ctx[34], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$account*/ 134217728 && t_value !== (t_value = /*$account*/ ctx[27].name + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(853:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (845:4) {#if $account === undefined}
    function create_if_block_3$4(ctx) {
    	let button;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("Create a New Account");
    			attr_dev(button, "id", "account");
    			set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button, "class", "svelte-1fv5snm");
    			add_location(button, file$l, 845, 6, 23274);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*newAccount*/ ctx[36], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(845:4) {#if $account === undefined}",
    		ctx
    	});

    	return block;
    }

    // (891:0) {#if showAlert}
    function create_if_block_1$7(ctx) {
    	let div;
    	let h1;
    	let t0;
    	let t1;
    	let p;
    	let t2;
    	let t3;
    	let t4;
    	let button;
    	let t5;
    	let mounted;
    	let dispose;
    	let if_block = /*badEmails*/ ctx[19].length > 0 && create_if_block_2$5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			t0 = text(/*alertTitle*/ ctx[21]);
    			t1 = space$3();
    			p = element("p");
    			t2 = text(/*alertMsg*/ ctx[22]);
    			t3 = space$3();
    			if (if_block) if_block.c();
    			t4 = space$3();
    			button = element("button");
    			t5 = text("Close");
    			attr_dev(h1, "class", "svelte-1fv5snm");
    			add_location(h1, file$l, 895, 4, 24779);
    			add_location(p, file$l, 896, 4, 24805);
    			attr_dev(button, "class", "alertbutton svelte-1fv5snm");
    			set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			set_style(button, "border-color", /*$theme*/ ctx[28].backgroundColor);
    			add_location(button, file$l, 904, 4, 24967);
    			attr_dev(div, "id", "alert");
    			set_style(div, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(div, "color", /*$theme*/ ctx[28].textColor);
    			set_style(div, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(div, "class", "svelte-1fv5snm");
    			add_location(div, file$l, 891, 2, 24634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(h1, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    			append_dev(div, t3);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t4);
    			append_dev(div, button);
    			append_dev(button, t5);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_2*/ ctx[75], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*alertTitle*/ 2097152) set_data_dev(t0, /*alertTitle*/ ctx[21]);
    			if (dirty[0] & /*alertMsg*/ 4194304) set_data_dev(t2, /*alertMsg*/ ctx[22]);

    			if (/*badEmails*/ ctx[19].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$5(ctx);
    					if_block.c();
    					if_block.m(div, t4);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(button, "border-color", /*$theme*/ ctx[28].backgroundColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 268435456) {
    				set_style(div, "border-color", /*$theme*/ ctx[28].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(891:0) {#if showAlert}",
    		ctx
    	});

    	return block;
    }

    // (898:4) {#if badEmails.length > 0}
    function create_if_block_2$5(ctx) {
    	let ul;
    	let each_value = /*badEmails*/ ctx[19];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-1fv5snm");
    			add_location(ul, file$l, 898, 6, 24860);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*badEmails*/ 524288) {
    				each_value = /*badEmails*/ ctx[19];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(898:4) {#if badEmails.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (900:8) {#each badEmails as item}
    function create_each_block$a(ctx) {
    	let li;
    	let t_value = /*item*/ ctx[96] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-1fv5snm");
    			add_location(li, file$l, 900, 10, 24909);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*badEmails*/ 524288 && t_value !== (t_value = /*item*/ ctx[96] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(900:8) {#each badEmails as item}",
    		ctx
    	});

    	return block;
    }

    // (917:0) {#if showAddressB}
    function create_if_block$f(ctx) {
    	let addressbook;
    	let updating_show;
    	let current;

    	function addressbook_show_binding(value) {
    		/*addressbook_show_binding*/ ctx[76](value);
    	}

    	let addressbook_props = {};

    	if (/*showAddressB*/ ctx[25] !== void 0) {
    		addressbook_props.show = /*showAddressB*/ ctx[25];
    	}

    	addressbook = new AddressBook({ props: addressbook_props, $$inline: true });
    	binding_callbacks.push(() => bind(addressbook, 'show', addressbook_show_binding));

    	const block = {
    		c: function create() {
    			create_component(addressbook.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(addressbook, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const addressbook_changes = {};

    			if (!updating_show && dirty[0] & /*showAddressB*/ 33554432) {
    				updating_show = true;
    				addressbook_changes.show = /*showAddressB*/ ctx[25];
    				add_flush_callback(() => updating_show = false);
    			}

    			addressbook.$set(addressbook_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(addressbook.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(addressbook.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(addressbook, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(917:0) {#if showAddressB}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div4;
    	let t0;
    	let t1;
    	let h1;
    	let t3;
    	let div2;
    	let div0;
    	let label0;
    	let t5;
    	let input0;
    	let t6;
    	let t7;
    	let div1;
    	let label1;
    	let t9;
    	let input1;
    	let t10;
    	let current_block_type_index;
    	let if_block3;
    	let t11;
    	let div3;
    	let button0;
    	let t12;
    	let t13;
    	let t14;
    	let t15;
    	let button1;
    	let t16;
    	let t17;
    	let button2;
    	let t18;
    	let t19;
    	let button3;
    	let t20;
    	let t21;
    	let button4;
    	let t22;
    	let t23;
    	let t24;
    	let if_block7_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*showNewAccount*/ ctx[5] && create_if_block_9$1(ctx);
    	let if_block1 = /*showChangeAccount*/ ctx[4] && create_if_block_7$1(ctx);
    	let if_block2 = /*showEmailList*/ ctx[24] && /*elist*/ ctx[20].length > 0 && create_if_block_6$2(ctx);
    	const if_block_creators = [create_if_block_5$3, create_else_block_2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*showPreview*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*emailState*/ ctx[2] === "edit") return create_if_block_4$3;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block4 = current_block_type(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*$account*/ ctx[27] === undefined) return create_if_block_3$4;
    		return create_else_block$7;
    	}

    	let current_block_type_1 = select_block_type_3(ctx);
    	let if_block5 = current_block_type_1(ctx);
    	let if_block6 = /*showAlert*/ ctx[23] && create_if_block_1$7(ctx);
    	let if_block7 = /*showAddressB*/ ctx[25] && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space$3();
    			if (if_block1) if_block1.c();
    			t1 = space$3();
    			h1 = element("h1");
    			h1.textContent = "Email It";
    			t3 = space$3();
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "To:";
    			t5 = space$3();
    			input0 = element("input");
    			t6 = space$3();
    			if (if_block2) if_block2.c();
    			t7 = space$3();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Subject:";
    			t9 = space$3();
    			input1 = element("input");
    			t10 = space$3();
    			if_block3.c();
    			t11 = space$3();
    			div3 = element("div");
    			button0 = element("button");
    			t12 = text("Notes");
    			t13 = space$3();
    			if_block4.c();
    			t14 = space$3();
    			if_block5.c();
    			t15 = space$3();
    			button1 = element("button");
    			t16 = text("Clear");
    			t17 = space$3();
    			button2 = element("button");
    			t18 = text("Templates");
    			t19 = space$3();
    			button3 = element("button");
    			t20 = text("Scripts");
    			t21 = space$3();
    			button4 = element("button");
    			t22 = text("Address Book");
    			t23 = space$3();
    			if (if_block6) if_block6.c();
    			t24 = space$3();
    			if (if_block7) if_block7.c();
    			if_block7_anchor = empty$1();
    			attr_dev(h1, "class", "svelte-1fv5snm");
    			add_location(h1, file$l, 733, 2, 19920);
    			attr_dev(label0, "for", "receiverInput");
    			attr_dev(label0, "class", "svelte-1fv5snm");
    			add_location(label0, file$l, 736, 6, 19992);
    			attr_dev(input0, "id", "receiverInput");
    			attr_dev(input0, "class", "receiverInput svelte-1fv5snm");
    			set_style(input0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input0, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input0, "border-color", /*$theme*/ ctx[28].borderColor);
    			add_location(input0, file$l, 737, 6, 20039);
    			attr_dev(div0, "class", "headerRow svelte-1fv5snm");
    			add_location(div0, file$l, 735, 4, 19962);
    			attr_dev(label1, "for", "subject");
    			attr_dev(label1, "class", "svelte-1fv5snm");
    			add_location(label1, file$l, 785, 6, 21463);
    			attr_dev(input1, "id", "subject");
    			set_style(input1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(input1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(input1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(input1, "class", "svelte-1fv5snm");
    			add_location(input1, file$l, 786, 6, 21509);
    			attr_dev(div1, "class", "headerRow svelte-1fv5snm");
    			add_location(div1, file$l, 784, 4, 21433);
    			attr_dev(div2, "id", "header");
    			attr_dev(div2, "class", "svelte-1fv5snm");
    			add_location(div2, file$l, 734, 2, 19940);
    			set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button0, "class", "svelte-1fv5snm");
    			add_location(button0, file$l, 814, 4, 22324);
    			attr_dev(button1, "id", "clear");
    			set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button1, "class", "svelte-1fv5snm");
    			add_location(button1, file$l, 861, 4, 23770);
    			set_style(button2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button2, "class", "svelte-1fv5snm");
    			add_location(button2, file$l, 868, 4, 23978);
    			set_style(button3, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button3, "class", "svelte-1fv5snm");
    			add_location(button3, file$l, 874, 4, 24179);
    			attr_dev(button4, "id", "addressBook");
    			set_style(button4, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			set_style(button4, "color", /*$theme*/ ctx[28].textColor);
    			set_style(button4, "border-color", /*$theme*/ ctx[28].borderColor);
    			attr_dev(button4, "class", "svelte-1fv5snm");
    			add_location(button4, file$l, 880, 4, 24377);
    			attr_dev(div3, "id", "buttonrow");
    			attr_dev(div3, "class", "svelte-1fv5snm");
    			add_location(div3, file$l, 813, 2, 22299);
    			attr_dev(div4, "id", "main");
    			set_style(div4, "background-color", /*$theme*/ ctx[28].backgroundColor);
    			set_style(div4, "font-family", /*$theme*/ ctx[28].font);
    			set_style(div4, "color", /*$theme*/ ctx[28].textColor);
    			set_style(div4, "font-size", /*$theme*/ ctx[28].fontSize);
    			attr_dev(div4, "class", "svelte-1fv5snm");
    			add_location(div4, file$l, 566, 0, 13952);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			if (if_block0) if_block0.m(div4, null);
    			append_dev(div4, t0);
    			if (if_block1) if_block1.m(div4, null);
    			append_dev(div4, t1);
    			append_dev(div4, h1);
    			append_dev(div4, t3);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t5);
    			append_dev(div0, input0);
    			set_input_value(input0, /*receiver*/ ctx[0]);
    			/*input0_binding*/ ctx[65](input0);
    			append_dev(div0, t6);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t9);
    			append_dev(div1, input1);
    			/*input1_binding*/ ctx[72](input1);
    			append_dev(div4, t10);
    			if_blocks[current_block_type_index].m(div4, null);
    			append_dev(div4, t11);
    			append_dev(div4, div3);
    			append_dev(div3, button0);
    			append_dev(button0, t12);
    			append_dev(div3, t13);
    			if_block4.m(div3, null);
    			append_dev(div3, t14);
    			if_block5.m(div3, null);
    			append_dev(div3, t15);
    			append_dev(div3, button1);
    			append_dev(button1, t16);
    			append_dev(div3, t17);
    			append_dev(div3, button2);
    			append_dev(button2, t18);
    			append_dev(div3, t19);
    			append_dev(div3, button3);
    			append_dev(button3, t20);
    			append_dev(div3, t21);
    			append_dev(div3, button4);
    			append_dev(button4, t22);
    			insert_dev(target, t23, anchor);
    			if (if_block6) if_block6.m(target, anchor);
    			insert_dev(target, t24, anchor);
    			if (if_block7) if_block7.m(target, anchor);
    			insert_dev(target, if_block7_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[64]),
    					listen_dev(input0, "blur", /*blur_handler*/ ctx[66], false, false, false),
    					listen_dev(input0, "focus", /*focus_handler*/ ctx[67], false, false, false),
    					listen_dev(input0, "keydown", /*keydown_handler*/ ctx[68], false, false, false),
    					listen_dev(input0, "keyup", /*keyup_handler*/ ctx[69], false, false, false),
    					listen_dev(input0, "change", /*change_handler*/ ctx[70], false, false, false),
    					listen_dev(input1, "blur", /*saveEmailState*/ ctx[48], false, false, false),
    					listen_dev(button0, "click", /*viewNotes*/ ctx[47], false, false, false),
    					listen_dev(button1, "click", /*clearEmail*/ ctx[42], false, false, false),
    					listen_dev(button2, "click", /*viewTemplateMenu*/ ctx[50], false, false, false),
    					listen_dev(button3, "click", /*viewScriptsMenu*/ ctx[49], false, false, false),
    					listen_dev(button4, "click", /*showAddressBook*/ ctx[52], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*showNewAccount*/ ctx[5]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_9$1(ctx);
    					if_block0.c();
    					if_block0.m(div4, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*showChangeAccount*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_7$1(ctx);
    					if_block1.c();
    					if_block1.m(div4, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(input0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(input0, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(input0, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (dirty[0] & /*receiver*/ 1 && input0.value !== /*receiver*/ ctx[0]) {
    				set_input_value(input0, /*receiver*/ ctx[0]);
    			}

    			if (/*showEmailList*/ ctx[24] && /*elist*/ ctx[20].length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_6$2(ctx);
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(input1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(input1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(input1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks[current_block_type_index];

    				if (!if_block3) {
    					if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block3.c();
    				} else {
    					if_block3.p(ctx, dirty);
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(div4, t11);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button0, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block4) {
    				if_block4.p(ctx, dirty);
    			} else {
    				if_block4.d(1);
    				if_block4 = current_block_type(ctx);

    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(div3, t14);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block5) {
    				if_block5.p(ctx, dirty);
    			} else {
    				if_block5.d(1);
    				if_block5 = current_block_type_1(ctx);

    				if (if_block5) {
    					if_block5.c();
    					if_block5.m(div3, t15);
    				}
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button1, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button2, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button2, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button2, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button3, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button3, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button3, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button4, "background-color", /*$theme*/ ctx[28].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button4, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(button4, "border-color", /*$theme*/ ctx[28].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(div4, "background-color", /*$theme*/ ctx[28].backgroundColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(div4, "font-family", /*$theme*/ ctx[28].font);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(div4, "color", /*$theme*/ ctx[28].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 268435456) {
    				set_style(div4, "font-size", /*$theme*/ ctx[28].fontSize);
    			}

    			if (/*showAlert*/ ctx[23]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_1$7(ctx);
    					if_block6.c();
    					if_block6.m(t24.parentNode, t24);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*showAddressB*/ ctx[25]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);

    					if (dirty[0] & /*showAddressB*/ 33554432) {
    						transition_in(if_block7, 1);
    					}
    				} else {
    					if_block7 = create_if_block$f(ctx);
    					if_block7.c();
    					transition_in(if_block7, 1);
    					if_block7.m(if_block7_anchor.parentNode, if_block7_anchor);
    				}
    			} else if (if_block7) {
    				group_outros();

    				transition_out(if_block7, 1, 1, () => {
    					if_block7 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block3);
    			transition_in(if_block7);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block3);
    			transition_out(if_block7);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			/*input0_binding*/ ctx[65](null);
    			if (if_block2) if_block2.d();
    			/*input1_binding*/ ctx[72](null);
    			if_blocks[current_block_type_index].d();
    			if_block4.d();
    			if_block5.d();
    			if (detaching) detach_dev(t23);
    			if (if_block6) if_block6.d(detaching);
    			if (detaching) detach_dev(t24);
    			if (if_block7) if_block7.d(detaching);
    			if (detaching) detach_dev(if_block7_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function cleanTags(msg) {
    	return msg.replace(/<hr>/gimu, "\n").replace(/<[/]*[^>]+>/gimu, "");
    }

    function validateSingle(email) {
    	if (email.includes("<")) {
    		//
    		// It's an email with a name infront. Get the email to check.
    		//
    		const nameRegexp = new RegExp(/^[^<]*\<([^\>]*)\>/);

    		const matches = email.match(nameRegexp);
    		email = matches[1];
    	}

    	//
    	// Check the email itself.
    	//
    	const emailRegexp = new RegExp(/^[a-zA-Z0-9][\-_\.\+\!\#\$\%\&\'\*\/\=\?\^\`\{\|]{0,1}([a-zA-Z0-9][\-_\.\+\!\#\$\%\&\'\*\/\=\?\^\`\{\|]{0,1})*[a-zA-Z0-9]@[a-zA-Z0-9][-\.]{0,1}([a-zA-Z][-\.]{0,1})*[a-zA-Z0-9]\.[a-zA-Z0-9]{1,}([\.\-]{0,1}[a-zA-Z]){0,}[a-zA-Z0-9]{0,}$/i);

    	return emailRegexp.test(email);
    }

    function saveNewAccountServer(acc) {
    	//
    	// This will save the new account to the server.
    	//
    	fetch("http://localhost:9978/api/emailit/accounts", {
    		method: "PUT",
    		headers: { "Content-type": "application/json" },
    		body: JSON.stringify(acc)
    	});
    }

    function deleteAccountServer(acc) {
    	//
    	// This will remove an account from the server.
    	//
    	fetch("http://localhost:9978/api/emailit/accounts", {
    		method: "DELETE",
    		headers: { "Content-type": "application/json" },
    		body: acc
    	});
    }

    function cumulativeOffset(element) {
    	var top = 0, left = 0;

    	do {
    		top += element.offsetTop || 0;
    		left += element.offsetLeft || 0;
    		element = element.offsetParent;
    	} while (element);

    	return { top, left };
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let $email;
    	let $showTemplates;
    	let $showScripts;
    	let $emailEditor;
    	let $account;
    	let $commandLineEmail;
    	let $theme;
    	validate_store(email, 'email');
    	component_subscribe($$self, email, $$value => $$invalidate(82, $email = $$value));
    	validate_store(showTemplates, 'showTemplates');
    	component_subscribe($$self, showTemplates, $$value => $$invalidate(83, $showTemplates = $$value));
    	validate_store(showScripts, 'showScripts');
    	component_subscribe($$self, showScripts, $$value => $$invalidate(84, $showScripts = $$value));
    	validate_store(emailEditor, 'emailEditor');
    	component_subscribe($$self, emailEditor, $$value => $$invalidate(85, $emailEditor = $$value));
    	validate_store(account, 'account');
    	component_subscribe($$self, account, $$value => $$invalidate(27, $account = $$value));
    	validate_store(commandLineEmail, 'commandLineEmail');
    	component_subscribe($$self, commandLineEmail, $$value => $$invalidate(86, $commandLineEmail = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(28, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EmailIt', slots, []);
    	let receiver = "";
    	let subject = "";
    	let emailState = "edit";
    	let accounts;
    	let showChangeAccount = false;
    	let showNewAccount = false;
    	let showPreview = false;
    	let origAccount;
    	let accountFrom = "";
    	let accountName = "";
    	let accountUsername = "";
    	let accountSmptServer = "";
    	let accountPassword = "";
    	let accountPort = "";
    	let accountSig = "";
    	let accountHeaderHTML = "";
    	let accountFooterHTML = "";
    	let accountDefault = false;
    	let previewHTML = "";
    	let bodyValue = "";
    	let oldState = "";
    	let starting = false;
    	let emails = [];

    	let editorConfig = {
    		language: "markdown",
    		lineNumbers: false,
    		lineWrapping: true,
    		lineHighlight: true
    	};

    	let initFinished = true;
    	let badEmails = [];
    	let elist = [];
    	let alertTitle = "";
    	let alertMsg = "";
    	let showAlert = false;
    	let showEmailList = false;
    	let showAddressB = false;
    	let receiverDOM;

    	onMount(() => {
    		getEmails();
    		getAccounts();
    		$$invalidate(2, emailState = "edit");
    		oldState = "edit";
    		$$invalidate(18, initFinished = true);
    	});

    	afterUpdate(() => {
    		if ($commandLineEmail !== undefined && $commandLineEmail !== "") {
    			$$invalidate(0, receiver = $commandLineEmail);
    			set_store_value(email, $email.to = $commandLineEmail, $email);
    			set_store_value(commandLineEmail, $commandLineEmail = undefined, $commandLineEmail);
    		}

    		if (starting) {
    			$$invalidate(0, receiver = $email.to);
    			var rec = document.getElementById("receiverInput");
    			rec.value = $email.to;
    			$$invalidate(1, subject.value = $email.subject, subject);
    			starting = false;
    			$emailEditor.setValue($email.body);
    		}

    		if ($emailEditor !== null) {
    			if (emailState === "edit" && oldState === "preview") {
    				$emailEditor.setValue(bodyValue);
    				oldState = "edit";
    			}
    		}
    	});

    	function generateEmailList(e) {
    		if (e !== undefined && (e.key === "Escape" || e.key === "Tab")) {
    			$$invalidate(24, showEmailList = false);
    			if (e.key !== "Tab") e.preventDefault();
    		} else {
    			var fullLine = receiver.toString().toLowerCase();
    			var currentPart = "";
    			var parts = fullLine.split(",");

    			if (parts.length > 1) {
    				currentPart = parts[parts.length - 1];
    				$$invalidate(20, elist = emails.filter(item => item.toString().toLowerCase().includes(currentPart.trim())));
    			} else {
    				$$invalidate(20, elist = emails.filter(item => item.toString().toLowerCase().includes(fullLine)));
    			}
    		}
    	}

    	function addToInput(newEmail) {
    		var parts = receiver.split(",");

    		if (parts.length > 1) {
    			$$invalidate(0, receiver = parts.slice(0, parts.length - 1).map(item => item.trim()).join(",") + ", " + newEmail);
    			$$invalidate(26, receiverDOM.selectionStart = receiver.length, receiverDOM);
    		} else {
    			$$invalidate(0, receiver = newEmail);
    		}
    	}

    	function editorChange(e) {
    		set_store_value(emailEditor, $emailEditor = e, $emailEditor);
    	}

    	function textChanged(textCursor) {
    		set_store_value(email, $email.body = textCursor.value, $email);
    		bodyValue = textCursor.value;
    	}

    	function getEmails(callback) {
    		//
    		// Get the emails from the server.
    		//
    		fetch("http://localhost:9978/api/emailit/emails", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			emails = data.emails.map(item => {
    				if (item.name === "") {
    					return item.email;
    				} else {
    					return `${item.name.trim()} <${item.email.trim()}>`;
    				}
    			});

    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function changeAccount() {
    		origAccount = $account;
    		$$invalidate(4, showChangeAccount = !showChangeAccount);
    	}

    	function saveAccount() {
    		if (emailState === "preview") {
    			makeHtml();
    		}

    		$$invalidate(4, showChangeAccount = false);
    	}

    	function clearFormData() {
    		$$invalidate(8, accountName = "");
    		$$invalidate(16, accountDefault = false);
    		$$invalidate(7, accountFrom = "");
    		$$invalidate(9, accountUsername = "");
    		$$invalidate(10, accountSmptServer = "");
    		$$invalidate(11, accountPassword = "");
    		$$invalidate(12, accountPort = "");
    		$$invalidate(13, accountSig = "");
    		$$invalidate(14, accountHeaderHTML = "");
    		$$invalidate(15, accountFooterHTML = "");
    	}

    	function newAccount() {
    		clearFormData();
    		$$invalidate(5, showNewAccount = true);
    	}

    	function cancelAccountChange() {
    		set_store_value(account, $account = origAccount, $account);

    		if (emailState === "edit") {
    			bodyValue = $emailEditor.getValue();
    		} else {
    			makeHtml();
    		}

    		$$invalidate(4, showChangeAccount = false);
    	}

    	function getAccounts(callback) {
    		//
    		// Get the accounts from the server.
    		//
    		fetch("http://localhost:9978/api/emailit/accounts", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(accs => {
    			$$invalidate(3, accounts = accs);

    			if (accounts.length > 0 && $account === undefined) {
    				set_store_value(account, $account = accounts.find(item => item.default), $account);
    			}

    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function changeActiveAccount(acc) {
    		//
    		// Set new account and create previews.
    		//
    		set_store_value(account, $account = acc, $account);

    		if (emailState === "edit") {
    			bodyValue = $emailEditor.getValue();
    		} else {
    			makeHtml();
    		}
    	}

    	function createPreview() {
    		var toAddress;

    		if (typeof $email.to !== "undefined") {
    			toAddress = $email.to;
    		} else {
    			var em = document.getElementById("receiverInput").value;
    			toAddress = em;
    		}

    		if (validate(toAddress)) {
    			//
    			// Keep a copy of the body value for when we exit preview mode.
    			//
    			bodyValue = $emailEditor.getValue();

    			//
    			// Set to preview and keep a copy of the new state.
    			//
    			$$invalidate(2, emailState = "preview");

    			oldState = emailState;

    			//
    			// Creat a preview of the email.
    			//
    			makeHtml();

    			//
    			// Show the preview.
    			//
    			$$invalidate(6, showPreview = true);
    		} else {
    			showInvalidEmails();
    		}
    	}

    	function makeHtml() {
    		var converter = new showdown.Converter({ extensions: [] });
    		converter.setOption("tables", true);
    		$$invalidate(17, previewHTML = converter.makeHtml(bodyValue + $account.signiture));

    		if (typeof $account.headerHTML !== "undefined") {
    			$$invalidate(17, previewHTML = $account.headerHTML + previewHTML + $account.footerHTML);
    		}
    	}

    	async function editEmail() {
    		$$invalidate(2, emailState = "edit");
    		$$invalidate(6, showPreview = false);
    	}

    	async function sendEmail() {
    		//
    		// This will tell the server to send the email.
    		//
    		var toAddress;

    		if (typeof $email.to !== "undefined") {
    			toAddress = $email.to;
    		} else {
    			var em = document.getElementById("receiverInput").value;
    			toAddress = em;
    		}

    		if (validate(toAddress)) {
    			addToEmails(toAddress);
    			var bodyText = bodyValue + cleanTags($account.signiture);
    			$$invalidate(6, showPreview = false);
    			$$invalidate(2, emailState = "edit");

    			fetch("http://localhost:9978/api/emailit/send", {
    				method: "PUT",
    				headers: { "Content-type": "application/json" },
    				body: JSON.stringify({
    					acc: $account,
    					to: toAddress,
    					from: $account.from,
    					subject: subject.value,
    					text: bodyText,
    					html: previewHTML
    				})
    			});
    		} else {
    			showInvalidEmails();
    		}
    	}

    	function showInvalidEmails() {
    		$$invalidate(21, alertTitle = "Invalid Emails");
    		$$invalidate(22, alertMsg = "Please fix these emails!");
    		$$invalidate(23, showAlert = true);
    	}

    	function validate(emailLine) {
    		var valid = true;
    		$$invalidate(19, badEmails = []);

    		emailLine.toString().split(",").forEach(item => {
    			const svalid = validateSingle(item.trim());

    			if (!svalid) {
    				valid = false;
    				badEmails.push(item);
    			}
    		});

    		return valid;
    	}

    	function addToEmails(emailLine) {
    		emailLine.toString().split(",").forEach(item => {
    			var email = item;
    			var name = "";

    			if (item.includes("<")) {
    				//
    				// It's an email with a name infront. Get the email to check.
    				//
    				const nameRegexp = new RegExp(/^([^<]*)\<([^\>]*)\>/);

    				const matches = item.match(nameRegexp);
    				name = matches[1];
    				email = matches[2];
    			}

    			addToEmailsSingle(name, email);
    		});
    	}

    	function addToEmailsSingle(name, email) {
    		email = email.trim();
    		name = name.trim();
    		emails = emails.filter(item => item.email !== email);
    		emails.push({ name, email });
    		emails = emails;

    		fetch("http://localhost:9978/api/emailit/addEmail", {
    			method: "PUT",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify({ name, email })
    		});
    	}

    	function cancelEmail() {
    		clearEmail();
    	} //
    	// TODO: hide the window.

    	//
    	function clearEmail() {
    		var rec = document.getElementById("receiverInput");
    		rec.value = "";
    		$$invalidate(0, receiver = "");
    		$$invalidate(1, subject.value = "", subject);
    		$emailEditor.setValue("");
    		bodyValue = "";
    		set_store_value(email, $email.to = "", $email);
    		set_store_value(email, $email.subject = "", $email);
    		set_store_value(email, $email.body = "", $email);
    		$$invalidate(6, showPreview = false);
    		$$invalidate(2, emailState = "edit");
    		oldState = "edit";
    	}

    	function saveNewAccount() {
    		var acc = {
    			name: accountName,
    			default: accountDefault,
    			from: accountFrom,
    			username: accountUsername,
    			smtpserver: accountSmptServer,
    			port: accountPort,
    			password: accountPassword,
    			signiture: accountSig,
    			headerHTML: accountHeaderHTML,
    			footerHTML: accountFooterHTML
    		};

    		saveNewAccountServer(acc);

    		//
    		// If this is to be the default account, make sure all the others
    		// are false.
    		//
    		if (accountDefault) {
    			$$invalidate(3, accounts = accounts.map(item => {
    				item.default = false;
    				return item;
    			}));
    		}

    		var orig = accounts.filter(item => item.name === acc.name);

    		if (orig.length > 0) {
    			$$invalidate(3, accounts = accounts.filter(item => item.name !== acc.name));
    			accounts.push(acc);
    		}

    		set_store_value(account, $account = acc, $account);
    		$$invalidate(3, accounts);
    		if (emailState === "preview") makeHtml();
    		clearFormData();
    		$$invalidate(5, showNewAccount = false);
    	}

    	function deleteAccount() {
    		var acc = $account;
    		$$invalidate(3, accounts = accounts.filter(item => item.name !== acc.name));

    		if (accounts.length > 0) {
    			set_store_value(account, $account = accounts[0], $account);
    			origAccount = accounts[0];
    			if (emailState === "preview") makeHtml();
    		} else {
    			$$invalidate(5, showNewAccount = false);
    			set_store_value(account, $account = undefined, $account);
    			origAccount = undefined;
    		}

    		deleteAccountServer(acc);
    	}

    	function cancelNewAccount() {
    		clearFormData();
    		$$invalidate(5, showNewAccount = false);
    	}

    	function editAccountChange() {
    		$$invalidate(8, accountName = $account.name);
    		$$invalidate(16, accountDefault = $account.default);
    		$$invalidate(7, accountFrom = $account.from);
    		$$invalidate(9, accountUsername = $account.username);
    		$$invalidate(10, accountSmptServer = $account.smtpserver);
    		$$invalidate(11, accountPassword = $account.password);
    		$$invalidate(12, accountPort = $account.port);
    		$$invalidate(13, accountSig = $account.signiture);
    		$$invalidate(14, accountHeaderHTML = $account.headerHTML);
    		$$invalidate(15, accountFooterHTML = $account.footerHTML);
    		$$invalidate(5, showNewAccount = true);
    	}

    	function viewNotes() {
    		saveEmailState();
    		state.set("notes");
    	}

    	function saveEmailState() {
    		if ($emailEditor !== null) {
    			var rec = document.getElementById("receiverInput");
    			set_store_value(email, $email.to = rec.value, $email);
    			set_store_value(email, $email.body = $emailEditor.getValue(), $email);
    			set_store_value(email, $email.subject = subject.value, $email);
    		}
    	}

    	function viewScriptsMenu() {
    		set_store_value(showScripts, $showScripts = !$showScripts, $showScripts);
    	}

    	function viewTemplateMenu() {
    		set_store_value(showTemplates, $showTemplates = !$showTemplates, $showTemplates);
    	}

    	function inputBlur() {
    		set_store_value(email, $email.to = receiver, $email);
    	}

    	function showAddressBook() {
    		$$invalidate(25, showAddressB = !showAddressB);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EmailIt> was created with unknown prop '${key}'`);
    	});

    	function input0_change_handler() {
    		accountDefault = this.checked;
    		$$invalidate(16, accountDefault);
    	}

    	function input1_input_handler() {
    		accountName = this.value;
    		$$invalidate(8, accountName);
    	}

    	function input2_input_handler() {
    		accountFrom = this.value;
    		$$invalidate(7, accountFrom);
    	}

    	function input3_input_handler() {
    		accountSmptServer = this.value;
    		$$invalidate(10, accountSmptServer);
    	}

    	function input4_input_handler() {
    		accountPort = this.value;
    		$$invalidate(12, accountPort);
    	}

    	function input5_input_handler() {
    		accountUsername = this.value;
    		$$invalidate(9, accountUsername);
    	}

    	function input6_input_handler() {
    		accountPassword = this.value;
    		$$invalidate(11, accountPassword);
    	}

    	function textarea0_input_handler() {
    		accountSig = this.value;
    		$$invalidate(13, accountSig);
    	}

    	function textarea1_input_handler() {
    		accountHeaderHTML = this.value;
    		$$invalidate(14, accountHeaderHTML);
    	}

    	function textarea2_input_handler() {
    		accountFooterHTML = this.value;
    		$$invalidate(15, accountFooterHTML);
    	}

    	const click_handler = acc => {
    		changeActiveAccount(acc);
    	};

    	function input0_input_handler() {
    		receiver = this.value;
    		$$invalidate(0, receiver);
    	}

    	function input0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			receiverDOM = $$value;
    			$$invalidate(26, receiverDOM);
    		});
    	}

    	const blur_handler = () => {
    		inputBlur();
    	};

    	const focus_handler = () => {
    		$$invalidate(24, showEmailList = true);
    		generateEmailList();
    		$$invalidate(26, receiverDOM.selectionStart = receiver.length, receiverDOM);
    	};

    	const keydown_handler = e => {
    		generateEmailList(e);
    	};

    	const keyup_handler = e => {
    		generateEmailList(e);
    	};

    	const change_handler = () => {
    		generateEmailList();
    	};

    	const click_handler_1 = item => {
    		addToInput(item);
    		receiverDOM.focus();
    	};

    	function input1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			subject = $$value;
    			$$invalidate(1, subject);
    		});
    	}

    	const textChange_handler = event => {
    		textChanged(event.detail.data);
    	};

    	const editorChange_handler = event => {
    		editorChange(event.detail.data);
    	};

    	const click_handler_2 = () => {
    		$$invalidate(23, showAlert = false);
    	};

    	function addressbook_show_binding(value) {
    		showAddressB = value;
    		$$invalidate(25, showAddressB);
    	}

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		onMount,
    		tick,
    		SimpleAutoComplete: SimpleAutocomplete,
    		CodeMirror,
    		AddressBook,
    		showdown,
    		theme,
    		state,
    		account,
    		email,
    		emailEditor,
    		commandLineEmail,
    		showScripts,
    		showTemplates,
    		receiver,
    		subject,
    		emailState,
    		accounts,
    		showChangeAccount,
    		showNewAccount,
    		showPreview,
    		origAccount,
    		accountFrom,
    		accountName,
    		accountUsername,
    		accountSmptServer,
    		accountPassword,
    		accountPort,
    		accountSig,
    		accountHeaderHTML,
    		accountFooterHTML,
    		accountDefault,
    		previewHTML,
    		bodyValue,
    		oldState,
    		starting,
    		emails,
    		editorConfig,
    		initFinished,
    		badEmails,
    		elist,
    		alertTitle,
    		alertMsg,
    		showAlert,
    		showEmailList,
    		showAddressB,
    		receiverDOM,
    		generateEmailList,
    		addToInput,
    		editorChange,
    		textChanged,
    		getEmails,
    		changeAccount,
    		saveAccount,
    		clearFormData,
    		newAccount,
    		cancelAccountChange,
    		getAccounts,
    		changeActiveAccount,
    		createPreview,
    		makeHtml,
    		editEmail,
    		cleanTags,
    		sendEmail,
    		showInvalidEmails,
    		validate,
    		validateSingle,
    		addToEmails,
    		addToEmailsSingle,
    		cancelEmail,
    		clearEmail,
    		saveNewAccount,
    		deleteAccount,
    		saveNewAccountServer,
    		deleteAccountServer,
    		cancelNewAccount,
    		editAccountChange,
    		viewNotes,
    		saveEmailState,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		cumulativeOffset,
    		inputBlur,
    		showAddressBook,
    		$email,
    		$showTemplates,
    		$showScripts,
    		$emailEditor,
    		$account,
    		$commandLineEmail,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('receiver' in $$props) $$invalidate(0, receiver = $$props.receiver);
    		if ('subject' in $$props) $$invalidate(1, subject = $$props.subject);
    		if ('emailState' in $$props) $$invalidate(2, emailState = $$props.emailState);
    		if ('accounts' in $$props) $$invalidate(3, accounts = $$props.accounts);
    		if ('showChangeAccount' in $$props) $$invalidate(4, showChangeAccount = $$props.showChangeAccount);
    		if ('showNewAccount' in $$props) $$invalidate(5, showNewAccount = $$props.showNewAccount);
    		if ('showPreview' in $$props) $$invalidate(6, showPreview = $$props.showPreview);
    		if ('origAccount' in $$props) origAccount = $$props.origAccount;
    		if ('accountFrom' in $$props) $$invalidate(7, accountFrom = $$props.accountFrom);
    		if ('accountName' in $$props) $$invalidate(8, accountName = $$props.accountName);
    		if ('accountUsername' in $$props) $$invalidate(9, accountUsername = $$props.accountUsername);
    		if ('accountSmptServer' in $$props) $$invalidate(10, accountSmptServer = $$props.accountSmptServer);
    		if ('accountPassword' in $$props) $$invalidate(11, accountPassword = $$props.accountPassword);
    		if ('accountPort' in $$props) $$invalidate(12, accountPort = $$props.accountPort);
    		if ('accountSig' in $$props) $$invalidate(13, accountSig = $$props.accountSig);
    		if ('accountHeaderHTML' in $$props) $$invalidate(14, accountHeaderHTML = $$props.accountHeaderHTML);
    		if ('accountFooterHTML' in $$props) $$invalidate(15, accountFooterHTML = $$props.accountFooterHTML);
    		if ('accountDefault' in $$props) $$invalidate(16, accountDefault = $$props.accountDefault);
    		if ('previewHTML' in $$props) $$invalidate(17, previewHTML = $$props.previewHTML);
    		if ('bodyValue' in $$props) bodyValue = $$props.bodyValue;
    		if ('oldState' in $$props) oldState = $$props.oldState;
    		if ('starting' in $$props) starting = $$props.starting;
    		if ('emails' in $$props) emails = $$props.emails;
    		if ('editorConfig' in $$props) $$invalidate(29, editorConfig = $$props.editorConfig);
    		if ('initFinished' in $$props) $$invalidate(18, initFinished = $$props.initFinished);
    		if ('badEmails' in $$props) $$invalidate(19, badEmails = $$props.badEmails);
    		if ('elist' in $$props) $$invalidate(20, elist = $$props.elist);
    		if ('alertTitle' in $$props) $$invalidate(21, alertTitle = $$props.alertTitle);
    		if ('alertMsg' in $$props) $$invalidate(22, alertMsg = $$props.alertMsg);
    		if ('showAlert' in $$props) $$invalidate(23, showAlert = $$props.showAlert);
    		if ('showEmailList' in $$props) $$invalidate(24, showEmailList = $$props.showEmailList);
    		if ('showAddressB' in $$props) $$invalidate(25, showAddressB = $$props.showAddressB);
    		if ('receiverDOM' in $$props) $$invalidate(26, receiverDOM = $$props.receiverDOM);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		receiver,
    		subject,
    		emailState,
    		accounts,
    		showChangeAccount,
    		showNewAccount,
    		showPreview,
    		accountFrom,
    		accountName,
    		accountUsername,
    		accountSmptServer,
    		accountPassword,
    		accountPort,
    		accountSig,
    		accountHeaderHTML,
    		accountFooterHTML,
    		accountDefault,
    		previewHTML,
    		initFinished,
    		badEmails,
    		elist,
    		alertTitle,
    		alertMsg,
    		showAlert,
    		showEmailList,
    		showAddressB,
    		receiverDOM,
    		$account,
    		$theme,
    		editorConfig,
    		generateEmailList,
    		addToInput,
    		editorChange,
    		textChanged,
    		changeAccount,
    		saveAccount,
    		newAccount,
    		cancelAccountChange,
    		changeActiveAccount,
    		createPreview,
    		editEmail,
    		sendEmail,
    		clearEmail,
    		saveNewAccount,
    		deleteAccount,
    		cancelNewAccount,
    		editAccountChange,
    		viewNotes,
    		saveEmailState,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		inputBlur,
    		showAddressBook,
    		input0_change_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		input5_input_handler,
    		input6_input_handler,
    		textarea0_input_handler,
    		textarea1_input_handler,
    		textarea2_input_handler,
    		click_handler,
    		input0_input_handler,
    		input0_binding,
    		blur_handler,
    		focus_handler,
    		keydown_handler,
    		keyup_handler,
    		change_handler,
    		click_handler_1,
    		input1_binding,
    		textChange_handler,
    		editorChange_handler,
    		click_handler_2,
    		addressbook_show_binding
    	];
    }

    class EmailIt extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {}, null, [-1, -1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EmailIt",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /*
     _       __      _ __
    | |     / /___ _(_) /____
    | | /| / / __ `/ / / ___/
    | |/ |/ / /_/ / / (__  )
    |__/|__/\__,_/_/_/____/
    The electron alternative for Go
    (c) Lea Anthony 2019-present
    */

    function BrowserOpenURL(url) {
        window.runtime.BrowserOpenURL(url);
    }

    /* src/components/ViewLog.svelte generated by Svelte v3.49.0 */
    const file$k = "src/components/ViewLog.svelte";

    // (84:2) {:else}
    function create_else_block$6(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "id", "logItems");
    			attr_dev(div, "class", "svelte-1p4g52i");
    			add_location(div, file$k, 84, 4, 1797);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = /*log*/ ctx[0];
    			/*div_binding*/ ctx[8](div);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*log*/ 1) div.innerHTML = /*log*/ ctx[0];		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[8](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(84:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (82:2) {#if typeof log === "undefined"}
    function create_if_block$e(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "No Logs";
    			add_location(p, file$k, 82, 4, 1768);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(82:2) {#if typeof log === \\\"undefined\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let button0;
    	let t1;
    	let t2;
    	let button1;
    	let t3;
    	let t4;
    	let button2;
    	let t5;
    	let t6;
    	let button3;
    	let t7;
    	let t8;
    	let button4;
    	let t9;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (typeof /*log*/ ctx[0] === "undefined") return create_if_block$e;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if_block.c();
    			t0 = space$3();
    			div0 = element("div");
    			button0 = element("button");
    			t1 = text("EmailIt");
    			t2 = space$3();
    			button1 = element("button");
    			t3 = text("Notes");
    			t4 = space$3();
    			button2 = element("button");
    			t5 = text("Script Terminal");
    			t6 = space$3();
    			button3 = element("button");
    			t7 = text("Node-Red");
    			t8 = space$3();
    			button4 = element("button");
    			t9 = text("Node-Red Dashboard");
    			set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button0, "class", "svelte-1p4g52i");
    			add_location(button0, file$k, 89, 4, 1900);
    			set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button1, "class", "svelte-1p4g52i");
    			add_location(button1, file$k, 95, 4, 2094);
    			set_style(button2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button2, "class", "svelte-1p4g52i");
    			add_location(button2, file$k, 101, 4, 2284);
    			set_style(button3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button3, "class", "svelte-1p4g52i");
    			add_location(button3, file$k, 107, 4, 2487);
    			set_style(button4, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button4, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button4, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button4, "class", "svelte-1p4g52i");
    			add_location(button4, file$k, 113, 4, 2682);
    			attr_dev(div0, "id", "buttonRow");
    			attr_dev(div0, "class", "svelte-1p4g52i");
    			add_location(div0, file$k, 88, 2, 1875);
    			attr_dev(div1, "id", "log");
    			set_style(div1, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			set_style(div1, "font-family", /*$theme*/ ctx[2].font);
    			set_style(div1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div1, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(div1, "class", "svelte-1p4g52i");
    			add_location(div1, file$k, 77, 0, 1572);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, button1);
    			append_dev(button1, t3);
    			append_dev(div0, t4);
    			append_dev(div0, button2);
    			append_dev(button2, t5);
    			append_dev(div0, t6);
    			append_dev(div0, button3);
    			append_dev(button3, t7);
    			append_dev(div0, t8);
    			append_dev(div0, button4);
    			append_dev(button4, t9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*viewEmailIt*/ ctx[3], false, false, false),
    					listen_dev(button1, "click", /*viewNotes*/ ctx[4], false, false, false),
    					listen_dev(button2, "click", /*viewTerminal*/ ctx[5], false, false, false),
    					listen_dev(button3, "click", /*viewNodeRed*/ ctx[6], false, false, false),
    					listen_dev(button4, "click", /*viewNodeRedDashboard*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div1, t0);
    				}
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button2, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button2, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button3, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button3, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button4, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button4, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button4, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "font-family", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "font-size", /*$theme*/ ctx[2].fontSize);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function dataToHtml(data) {
    	var result = "";
    	data.map(item => result += "<p>" + item.replaceAll(" ", "&nbsp;").replaceAll("\n", "<br />").replaceAll("\t", "&nbsp;&nbsp;") + "</p>");
    	return result;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $state;
    	let $theme;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(9, $state = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ViewLog', slots, []);
    	let log;
    	let logDiv;

    	onMount(() => {
    		getLog();
    	});

    	afterUpdate(() => {
    		//
    		// Keep the log scrolled to the bottom.
    		//
    		if (typeof logDiv !== "undefined") {
    			$$invalidate(1, logDiv.scrollTop = logDiv.scrollHeight, logDiv);
    		}
    	});

    	function getLog(callback) {
    		//
    		// Get the emails from the server.
    		//
    		fetch("http://localhost:9978/api/messages", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(dataArray => {
    			$$invalidate(0, log = dataToHtml(dataArray.data));
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function viewEmailIt() {
    		set_store_value(state, $state = "emailit", $state);
    	}

    	function viewNotes() {
    		set_store_value(state, $state = "notes", $state);
    	}

    	function viewTerminal() {
    		set_store_value(state, $state = "scriptterm", $state);
    	}

    	async function viewNodeRed() {
    		BrowserOpenURL("http://localhost:9978/red/admin");
    	}

    	async function viewNodeRedDashboard() {
    		BrowserOpenURL("http://localhost:9978/red/api/ui");
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ViewLog> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			logDiv = $$value;
    			$$invalidate(1, logDiv);
    		});
    	}

    	$$self.$capture_state = () => ({
    		onMount,
    		afterUpdate,
    		theme,
    		state,
    		BrowserOpenURL,
    		log,
    		logDiv,
    		getLog,
    		dataToHtml,
    		viewEmailIt,
    		viewNotes,
    		viewTerminal,
    		viewNodeRed,
    		viewNodeRedDashboard,
    		$state,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('log' in $$props) $$invalidate(0, log = $$props.log);
    		if ('logDiv' in $$props) $$invalidate(1, logDiv = $$props.logDiv);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		log,
    		logDiv,
    		$theme,
    		viewEmailIt,
    		viewNotes,
    		viewTerminal,
    		viewNodeRed,
    		viewNodeRedDashboard,
    		div_binding
    	];
    }

    class ViewLog extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ViewLog",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    const currentNote = writable( 0 );

    const storedText = writable( ['','','','','','','','','', ''] );

    const storedCursor = writable( ['','','','','','','','','', ''] );

    const noteEditor = writable( undefined );

    /* src/components/Notes.svelte generated by Svelte v3.49.0 */
    const file$j = "src/components/Notes.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i];
    	child_ctx[30] = i;
    	return child_ctx;
    }

    // (157:6) {#each $theme.buttons as button, key}
    function create_each_block$9(ctx) {
    	let div;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[16](/*key*/ ctx[30]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			attr_dev(div, "class", div_class_value = "noteButton " + (/*$currentNote*/ ctx[1] === /*$theme*/ ctx[2].buttons[/*key*/ ctx[30]].id
    			? 'selectedButton'
    			: '') + " svelte-yyde1d");

    			set_style(div, "background-color", /*$theme*/ ctx[2].buttons[/*key*/ ctx[30]].color);
    			add_location(div, file$j, 157, 8, 3575);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$currentNote, $theme*/ 6 && div_class_value !== (div_class_value = "noteButton " + (/*$currentNote*/ ctx[1] === /*$theme*/ ctx[2].buttons[/*key*/ ctx[30]].id
    			? 'selectedButton'
    			: '') + " svelte-yyde1d")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div, "background-color", /*$theme*/ ctx[2].buttons[/*key*/ ctx[30]].color);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(157:6) {#each $theme.buttons as button, key}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div3;
    	let div1;
    	let codemirror;
    	let t0;
    	let div0;
    	let t1;
    	let div2;
    	let button0;
    	let t2;
    	let t3;
    	let button1;
    	let t4;
    	let t5;
    	let button2;
    	let t6;
    	let t7;
    	let button3;
    	let t8;
    	let t9;
    	let button4;
    	let t10;
    	let t11;
    	let button5;
    	let t12;
    	let t13;
    	let button6;
    	let t14;
    	let current;
    	let mounted;
    	let dispose;

    	codemirror = new CodeMirror({
    			props: {
    				height: "500px",
    				width: "900px",
    				config: /*editorConfig*/ ctx[3],
    				initFinished: /*initFinished*/ ctx[0]
    			},
    			$$inline: true
    		});

    	codemirror.$on("textChange", /*textChange_handler*/ ctx[14]);
    	codemirror.$on("editorChange", /*editorChange_handler*/ ctx[15]);
    	let each_value = /*$theme*/ ctx[2].buttons;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			create_component(codemirror.$$.fragment);
    			t0 = space$3();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space$3();
    			div2 = element("div");
    			button0 = element("button");
    			t2 = text("EmailIt");
    			t3 = space$3();
    			button1 = element("button");
    			t4 = text("Logs");
    			t5 = space$3();
    			button2 = element("button");
    			t6 = text("Script Terminal");
    			t7 = space$3();
    			button3 = element("button");
    			t8 = text("Scripts");
    			t9 = space$3();
    			button4 = element("button");
    			t10 = text("Templates");
    			t11 = space$3();
    			button5 = element("button");
    			t12 = text("Edit Scripts");
    			t13 = space$3();
    			button6 = element("button");
    			t14 = text("Edit Templates");
    			attr_dev(div0, "id", "noteButtons");
    			attr_dev(div0, "class", "svelte-yyde1d");
    			add_location(div0, file$j, 155, 4, 3500);
    			attr_dev(div1, "id", "editorRow");
    			attr_dev(div1, "class", "svelte-yyde1d");
    			add_location(div1, file$j, 142, 2, 3193);
    			set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button0, "class", "svelte-yyde1d");
    			add_location(button0, file$j, 170, 4, 3904);
    			set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button1, "class", "svelte-yyde1d");
    			add_location(button1, file$j, 176, 4, 4098);
    			set_style(button2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button2, "class", "svelte-yyde1d");
    			add_location(button2, file$j, 182, 4, 4286);
    			set_style(button3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button3, "class", "svelte-yyde1d");
    			add_location(button3, file$j, 188, 4, 4491);
    			set_style(button4, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button4, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button4, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button4, "class", "svelte-yyde1d");
    			add_location(button4, file$j, 194, 4, 4689);
    			set_style(button5, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button5, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button5, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button5, "class", "svelte-yyde1d");
    			add_location(button5, file$j, 200, 4, 4890);
    			set_style(button6, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button6, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button6, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button6, "class", "svelte-yyde1d");
    			add_location(button6, file$j, 206, 4, 5089);
    			attr_dev(div2, "id", "buttonRow");
    			attr_dev(div2, "class", "svelte-yyde1d");
    			add_location(div2, file$j, 169, 2, 3879);
    			attr_dev(div3, "id", "notes");
    			set_style(div3, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			set_style(div3, "font-family", /*$theme*/ ctx[2].font);
    			set_style(div3, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div3, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(div3, "class", "svelte-yyde1d");
    			add_location(div3, file$j, 138, 0, 3032);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			mount_component(codemirror, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t2);
    			append_dev(div2, t3);
    			append_dev(div2, button1);
    			append_dev(button1, t4);
    			append_dev(div2, t5);
    			append_dev(div2, button2);
    			append_dev(button2, t6);
    			append_dev(div2, t7);
    			append_dev(div2, button3);
    			append_dev(button3, t8);
    			append_dev(div2, t9);
    			append_dev(div2, button4);
    			append_dev(button4, t10);
    			append_dev(div2, t11);
    			append_dev(div2, button5);
    			append_dev(button5, t12);
    			append_dev(div2, t13);
    			append_dev(div2, button6);
    			append_dev(button6, t14);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*viewEmailIt*/ ctx[7], false, false, false),
    					listen_dev(button1, "click", /*viewLogs*/ ctx[6], false, false, false),
    					listen_dev(button2, "click", /*viewScriptTerm*/ ctx[13], false, false, false),
    					listen_dev(button3, "click", /*viewScriptsMenu*/ ctx[9], false, false, false),
    					listen_dev(button4, "click", /*viewTemplateMenu*/ ctx[10], false, false, false),
    					listen_dev(button5, "click", /*viewScripts*/ ctx[12], false, false, false),
    					listen_dev(button6, "click", /*viewTemplates*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const codemirror_changes = {};
    			if (dirty & /*initFinished*/ 1) codemirror_changes.initFinished = /*initFinished*/ ctx[0];
    			codemirror.$set(codemirror_changes);

    			if (dirty & /*$currentNote, $theme, openNote*/ 262) {
    				each_value = /*$theme*/ ctx[2].buttons;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button0, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button1, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button2, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button2, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button3, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button3, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button4, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button4, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button4, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button5, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button5, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button5, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button6, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button6, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(button6, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div3, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div3, "font-family", /*$theme*/ ctx[2].font);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div3, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div3, "font-size", /*$theme*/ ctx[2].fontSize);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(codemirror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(codemirror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(codemirror);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $state;
    	let $showTemplates;
    	let $showScripts;
    	let $noteEditor;
    	let $currentNote;
    	let $storedCursor;
    	let $storedText;
    	let $theme;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(17, $state = $$value));
    	validate_store(showTemplates, 'showTemplates');
    	component_subscribe($$self, showTemplates, $$value => $$invalidate(18, $showTemplates = $$value));
    	validate_store(showScripts, 'showScripts');
    	component_subscribe($$self, showScripts, $$value => $$invalidate(19, $showScripts = $$value));
    	validate_store(noteEditor, 'noteEditor');
    	component_subscribe($$self, noteEditor, $$value => $$invalidate(20, $noteEditor = $$value));
    	validate_store(currentNote, 'currentNote');
    	component_subscribe($$self, currentNote, $$value => $$invalidate(1, $currentNote = $$value));
    	validate_store(storedCursor, 'storedCursor');
    	component_subscribe($$self, storedCursor, $$value => $$invalidate(21, $storedCursor = $$value));
    	validate_store(storedText, 'storedText');
    	component_subscribe($$self, storedText, $$value => $$invalidate(22, $storedText = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Notes', slots, []);

    	let editorConfig = {
    		language: "markdown",
    		lineNumbers: true,
    		lineWrapping: true,
    		lineHighlight: true
    	};

    	let initFinished = false;

    	onMount(() => {
    		//
    		// Load everything for working with the notes:
    		//
    		loadNotes();
    	});

    	function loadNotes() {
    		getNote(0);
    		getNote(1);
    		getNote(2);
    		getNote(3);
    		getNote(4);
    		getNote(5);
    		getNote(6);
    		getNote(7);
    		getNote(8);

    		getNote(9, async () => {
    			//
    			// When last note is loaded, setup for displaying the
    			// proper note.
    			//
    			$$invalidate(0, initFinished = true);

    			await tick();
    			openNote($currentNote);
    			focus();
    		});
    	}

    	function getNote(id, callback) {
    		fetch(`http://localhost:9978/api/note/${id}/w`, {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(storedText, $storedText[id] = data.note, $storedText);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function saveNote(id) {
    		var text = $storedText[id];

    		fetch(`http://localhost:9978/api/note/${id}/w`, {
    			method: "PUT",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify({ note: text })
    		});
    	}

    	function editorChange(e) {
    		set_store_value(noteEditor, $noteEditor = e, $noteEditor);
    	}

    	function textChanged(textCursor) {
    		set_store_value(storedText, $storedText[$currentNote] = textCursor.value, $storedText);
    		set_store_value(storedCursor, $storedCursor[$currentNote] = textCursor.cursor, $storedCursor);
    		saveNote($currentNote);
    	}

    	function focus() {
    		if ($noteEditor !== null) {
    			$noteEditor.focus();
    		}
    	}

    	function viewLogs() {
    		storeCurrentCursor();
    		set_store_value(state, $state = "viewlog", $state);
    	}

    	function viewEmailIt() {
    		storeCurrentCursor();
    		set_store_value(state, $state = "emailit", $state);
    	}

    	function storeCurrentCursor() {
    		set_store_value(storedCursor, $storedCursor[$currentNote] = $noteEditor.getCursor(), $storedCursor);
    	}

    	function openNote(id) {
    		set_store_value(currentNote, $currentNote = id, $currentNote);
    		$noteEditor.setValue($storedText[$currentNote]);
    		var cur = parseInt($storedCursor[$currentNote]);
    		if (!Number.isInteger(cur)) cur = 0;
    		$noteEditor.setCursor(cur);
    		focus();
    	}

    	function viewScriptsMenu() {
    		set_store_value(showScripts, $showScripts = !$showScripts, $showScripts);
    	}

    	function viewTemplateMenu() {
    		set_store_value(showTemplates, $showTemplates = !$showTemplates, $showTemplates);
    	}

    	function viewTemplates() {
    		set_store_value(state, $state = "templates", $state);
    	}

    	function viewScripts() {
    		set_store_value(state, $state = "scripts", $state);
    	}

    	function viewScriptTerm() {
    		set_store_value(state, $state = "scriptterm", $state);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Notes> was created with unknown prop '${key}'`);
    	});

    	const textChange_handler = event => {
    		textChanged(event.detail.data);
    	};

    	const editorChange_handler = event => {
    		editorChange(event.detail.data);
    	};

    	const click_handler = key => {
    		openNote(key);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		tick,
    		CodeMirror,
    		state,
    		theme,
    		currentNote,
    		storedText,
    		storedCursor,
    		noteEditor,
    		showScripts,
    		showTemplates,
    		editorConfig,
    		initFinished,
    		loadNotes,
    		getNote,
    		saveNote,
    		editorChange,
    		textChanged,
    		focus,
    		viewLogs,
    		viewEmailIt,
    		storeCurrentCursor,
    		openNote,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		viewTemplates,
    		viewScripts,
    		viewScriptTerm,
    		$state,
    		$showTemplates,
    		$showScripts,
    		$noteEditor,
    		$currentNote,
    		$storedCursor,
    		$storedText,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('editorConfig' in $$props) $$invalidate(3, editorConfig = $$props.editorConfig);
    		if ('initFinished' in $$props) $$invalidate(0, initFinished = $$props.initFinished);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		initFinished,
    		$currentNote,
    		$theme,
    		editorConfig,
    		editorChange,
    		textChanged,
    		viewLogs,
    		viewEmailIt,
    		openNote,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		viewTemplates,
    		viewScripts,
    		viewScriptTerm,
    		textChange_handler,
    		editorChange_handler,
    		click_handler
    	];
    }

    class Notes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notes",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    const scripts = writable( [] );

    const templateEditor = writable( undefined );

    const scriptEditor = writable( undefined );

    /* src/components/ScriptMenu.svelte generated by Svelte v3.49.0 */
    const file$i = "src/components/ScriptMenu.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	child_ctx[22] = i;
    	return child_ctx;
    }

    // (205:6) {#if typeof $scripts === "object"}
    function create_if_block$d(ctx) {
    	let each_1_anchor;
    	let each_value = /*list*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*cursor, $theme, runScript, list*/ 212) {
    				each_value = /*list*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(205:6) {#if typeof $scripts === \\\"object\\\"}",
    		ctx
    	});

    	return block;
    }

    // (206:8) {#each list as script, key}
    function create_each_block$8(ctx) {
    	let li;
    	let t0_value = /*script*/ ctx[20].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*script*/ ctx[20]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space$3();

    			set_style(li, "background-color", /*cursor*/ ctx[4] === /*key*/ ctx[22]
    			? /*$theme*/ ctx[6].Purple
    			: 'transparent');

    			attr_dev(li, "data-key", /*key*/ ctx[22]);
    			attr_dev(li, "class", "svelte-n0htir");
    			add_location(li, file$i, 206, 10, 5683);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*list*/ 4 && t0_value !== (t0_value = /*script*/ ctx[20].name + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*cursor, $theme*/ 80) {
    				set_style(li, "background-color", /*cursor*/ ctx[4] === /*key*/ ctx[22]
    				? /*$theme*/ ctx[6].Purple
    				: 'transparent');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(206:8) {#each list as script, key}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div1;
    	let input;
    	let t;
    	let div0;
    	let ul;
    	let mounted;
    	let dispose;
    	let if_block = typeof /*$scripts*/ ctx[5] === "object" && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			input = element("input");
    			t = space$3();
    			div0 = element("div");
    			ul = element("ul");
    			if (if_block) if_block.c();
    			attr_dev(input, "type", "text");
    			set_style(input, "background-color", /*$theme*/ ctx[6].textAreaColor);
    			set_style(input, "font-family", /*$theme*/ ctx[6].font);
    			set_style(input, "color", /*$theme*/ ctx[6].textColor);
    			set_style(input, "font-size", /*$theme*/ ctx[6].fontSize);
    			set_style(input, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			attr_dev(input, "class", "svelte-n0htir");
    			add_location(input, file$i, 195, 2, 5274);
    			attr_dev(ul, "class", "svelte-n0htir");
    			add_location(ul, file$i, 203, 4, 5591);
    			attr_dev(div0, "id", "list");
    			attr_dev(div0, "class", "svelte-n0htir");
    			add_location(div0, file$i, 202, 2, 5571);
    			attr_dev(div1, "id", "scriptmenu");
    			set_style(div1, "left", /*$showScripts*/ ctx[1] ? '10px' : '-900px');
    			set_style(div1, "background-color", /*$theme*/ ctx[6].backgroundColor);
    			set_style(div1, "font-family", /*$theme*/ ctx[6].font);
    			set_style(div1, "color", /*$theme*/ ctx[6].textColor);
    			set_style(div1, "font-size", /*$theme*/ ctx[6].fontSize);
    			set_style(div1, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			attr_dev(div1, "class", "svelte-n0htir");
    			add_location(div1, file$i, 189, 0, 5018);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, input);
    			set_input_value(input, /*searchIn*/ ctx[0]);
    			/*input_binding*/ ctx[10](input);
    			append_dev(div1, t);
    			append_dev(div1, div0);
    			append_dev(div0, ul);
    			if (if_block) if_block.m(ul, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[9]),
    					listen_dev(input, "keydown", /*keyDownProcessor*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "background-color", /*$theme*/ ctx[6].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "font-family", /*$theme*/ ctx[6].font);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "color", /*$theme*/ ctx[6].textColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "font-size", /*$theme*/ ctx[6].fontSize);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			}

    			if (dirty & /*searchIn*/ 1 && input.value !== /*searchIn*/ ctx[0]) {
    				set_input_value(input, /*searchIn*/ ctx[0]);
    			}

    			if (typeof /*$scripts*/ ctx[5] === "object") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					if_block.m(ul, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$showScripts*/ 2) {
    				set_style(div1, "left", /*$showScripts*/ ctx[1] ? '10px' : '-900px');
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "background-color", /*$theme*/ ctx[6].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "font-family", /*$theme*/ ctx[6].font);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "color", /*$theme*/ ctx[6].textColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "font-size", /*$theme*/ ctx[6].fontSize);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*input_binding*/ ctx[10](null);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $showScripts;
    	let $templateEditor;
    	let $state;
    	let $scriptEditor;
    	let $noteEditor;
    	let $emailEditor;
    	let $scripts;
    	let $theme;
    	validate_store(showScripts, 'showScripts');
    	component_subscribe($$self, showScripts, $$value => $$invalidate(1, $showScripts = $$value));
    	validate_store(templateEditor, 'templateEditor');
    	component_subscribe($$self, templateEditor, $$value => $$invalidate(13, $templateEditor = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(14, $state = $$value));
    	validate_store(scriptEditor, 'scriptEditor');
    	component_subscribe($$self, scriptEditor, $$value => $$invalidate(15, $scriptEditor = $$value));
    	validate_store(noteEditor, 'noteEditor');
    	component_subscribe($$self, noteEditor, $$value => $$invalidate(16, $noteEditor = $$value));
    	validate_store(emailEditor, 'emailEditor');
    	component_subscribe($$self, emailEditor, $$value => $$invalidate(17, $emailEditor = $$value));
    	validate_store(scripts, 'scripts');
    	component_subscribe($$self, scripts, $$value => $$invalidate(5, $scripts = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(6, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScriptMenu', slots, []);
    	let searchIn = "";
    	let list = [];
    	let searchInput;
    	let first = true;
    	let cursor = 0;

    	onMount(() => {
    		
    	});

    	function setDefaults(flag) {
    		if (flag) {
    			$$invalidate(4, cursor = 0);
    			$$invalidate(0, searchIn = "");
    			searchInput.focus();
    		}
    	}

    	afterUpdate(() => {
    		if ($showScripts && first) {
    			$$invalidate(2, list = searchScripts(searchIn));
    			first = false;
    			searchInput.focus();
    		}
    	});

    	function searchScripts(text) {
    		var tmp = [];

    		if (text === "" || text === undefined) {
    			tmp = $scripts;
    		} else {
    			text = text.toLowerCase();

    			tmp = $scripts.filter(item => {
    				if (item !== undefined && item !== null) {
    					return item.name.toLowerCase().includes(text);
    				}

    				return false;
    			});
    		}

    		tmp = tmp.sort((a, b) => a.name.toLowerCase() > b.name.toLowerCase());
    		return tmp;
    	}

    	function runScript(script) {
    		var text = "";
    		var selection = false;

    		if ($state === "emailit") {
    			//
    			// Get the text in the email body.
    			//
    			if ($emailEditor.somethingSelected()) {
    				selection = true;
    				text = $emailEditor.getSelection();
    			} else {
    				text = $emailEditor.getValue();
    			}
    		} else if ($state === "notes") {
    			//
    			// Get the text from the current note.
    			//
    			if ($noteEditor.somethingSelected()) {
    				selection = true;
    				text = $noteEditor.getSelection();
    			} else {
    				text = $noteEditor.getValue();
    			}
    		} else if ($state === "scripts") {
    			if ($scriptEditor.somethingSelected()) {
    				selection = true;
    				text = $scriptEditor.getSelection();
    			} else {
    				text = $scriptEditor.getValue();
    			}
    		} else if ($state === "templates") {
    			if ($templateEditor.somethingSelected()) {
    				selection = true;
    				text = $templateEditor.getSelection();
    			} else {
    				text = $templateEditor.getValue();
    			}
    		}

    		fetch("http://localhost:9978/api/script/run", {
    			method: "PUT",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify({ script: script.name, text })
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			if ($state === "emailit") {
    				//
    				// Paste the script in the body of the email.
    				//
    				if (selection) {
    					$emailEditor.replaceSelection(data.text);
    				} else {
    					if (script.insert) {
    						$emailEditor.insertAtCursor(data.text);
    					} else {
    						$emailEditor.setValue(data.text);
    					}
    				}

    				$emailEditor.focus();
    			} else if ($state === "notes") {
    				//
    				// Paste the script in the current note at the location.
    				//
    				if (selection) {
    					$noteEditor.replaceSelection(data.text);
    				} else {
    					if (script.insert) {
    						$noteEditor.insertAtCursor(data.text);
    					} else {
    						$noteEditor.setValue(data.text);
    					}
    				}

    				$noteEditor.focus();
    			} else if ($state === "scripts") {
    				if (selection) {
    					$scriptEditor.replaceSelection(data.text);
    				} else {
    					if (script.insert) {
    						$scriptEditor.insertAtCursor(data.text);
    					} else {
    						$scriptEditor.setValue(data.text);
    					}
    				}

    				$scriptEditor.focus();
    			} else if ($state === "templates") {
    				if (selection) {
    					$templateEditor.replaceSelection(data.text);
    				} else {
    					if (script.insert) {
    						$templateEditor.insertAtCursor(data.text);
    					} else {
    						$templateEditor.setValue(data.text);
    					}
    				}

    				$templateEditor.focus();
    			}

    			set_store_value(showScripts, $showScripts = false, $showScripts);
    			$$invalidate(0, searchIn = "");
    		});
    	}

    	function keyDownProcessor(e) {
    		switch (e.key) {
    			case "ArrowDown":
    				e.preventDefault();
    				$$invalidate(4, cursor += 1);
    				if (cursor >= list.length) $$invalidate(4, cursor = list.length - 1);
    				break;
    			case "ArrowUp":
    				e.preventDefault();
    				$$invalidate(4, cursor -= 1);
    				if (cursor < 0) $$invalidate(4, cursor = 0);
    				break;
    			case "Enter":
    				e.preventDefault();
    				runScript(list[cursor]);
    				break;
    			case "Escape":
    				set_store_value(showScripts, $showScripts = false, $showScripts);
    				break;
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScriptMenu> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		searchIn = this.value;
    		$$invalidate(0, searchIn);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			searchInput = $$value;
    			$$invalidate(3, searchInput);
    		});
    	}

    	const click_handler = script => {
    		runScript(script);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		afterUpdate,
    		scripts,
    		showScripts,
    		theme,
    		state,
    		noteEditor,
    		emailEditor,
    		templateEditor,
    		scriptEditor,
    		searchIn,
    		list,
    		searchInput,
    		first,
    		cursor,
    		setDefaults,
    		searchScripts,
    		runScript,
    		keyDownProcessor,
    		$showScripts,
    		$templateEditor,
    		$state,
    		$scriptEditor,
    		$noteEditor,
    		$emailEditor,
    		$scripts,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('searchIn' in $$props) $$invalidate(0, searchIn = $$props.searchIn);
    		if ('list' in $$props) $$invalidate(2, list = $$props.list);
    		if ('searchInput' in $$props) $$invalidate(3, searchInput = $$props.searchInput);
    		if ('first' in $$props) first = $$props.first;
    		if ('cursor' in $$props) $$invalidate(4, cursor = $$props.cursor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*searchIn*/ 1) {
    			$$invalidate(2, list = searchScripts(searchIn));
    		}

    		if ($$self.$$.dirty & /*$showScripts*/ 2) {
    			setDefaults($showScripts);
    		}
    	};

    	return [
    		searchIn,
    		$showScripts,
    		list,
    		searchInput,
    		cursor,
    		$scripts,
    		$theme,
    		runScript,
    		keyDownProcessor,
    		input_input_handler,
    		input_binding,
    		click_handler
    	];
    }

    class ScriptMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScriptMenu",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    const templates = writable( [] );

    /* src/components/TemplateMenu.svelte generated by Svelte v3.49.0 */
    const file$h = "src/components/TemplateMenu.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	child_ctx[22] = i;
    	return child_ctx;
    }

    // (189:6) {#if typeof $templates === "object"}
    function create_if_block$c(ctx) {
    	let each_1_anchor;
    	let each_value = /*list*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*cursor, $theme, runTemplate, list*/ 212) {
    				each_value = /*list*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(189:6) {#if typeof $templates === \\\"object\\\"}",
    		ctx
    	});

    	return block;
    }

    // (190:8) {#each list as template, key}
    function create_each_block$7(ctx) {
    	let li;
    	let t0_value = /*template*/ ctx[20] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*template*/ ctx[20]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space$3();

    			set_style(li, "background-color", /*cursor*/ ctx[4] === /*key*/ ctx[22]
    			? /*$theme*/ ctx[6].Purple
    			: 'transparent');

    			attr_dev(li, "data-key", /*key*/ ctx[22]);
    			attr_dev(li, "class", "svelte-wbzyyy");
    			add_location(li, file$h, 190, 10, 5202);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*list*/ 4 && t0_value !== (t0_value = /*template*/ ctx[20] + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*cursor, $theme*/ 80) {
    				set_style(li, "background-color", /*cursor*/ ctx[4] === /*key*/ ctx[22]
    				? /*$theme*/ ctx[6].Purple
    				: 'transparent');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(190:8) {#each list as template, key}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div1;
    	let input;
    	let t;
    	let div0;
    	let ul;
    	let mounted;
    	let dispose;
    	let if_block = typeof /*$templates*/ ctx[5] === "object" && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			input = element("input");
    			t = space$3();
    			div0 = element("div");
    			ul = element("ul");
    			if (if_block) if_block.c();
    			attr_dev(input, "type", "text");
    			set_style(input, "background-color", /*$theme*/ ctx[6].textAreaColor);
    			set_style(input, "font-family", /*$theme*/ ctx[6].font);
    			set_style(input, "color", /*$theme*/ ctx[6].textColor);
    			set_style(input, "font-size", /*$theme*/ ctx[6].fontSize);
    			set_style(input, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			attr_dev(input, "class", "svelte-wbzyyy");
    			add_location(input, file$h, 179, 2, 4791);
    			attr_dev(ul, "class", "svelte-wbzyyy");
    			add_location(ul, file$h, 187, 4, 5106);
    			attr_dev(div0, "id", "list");
    			attr_dev(div0, "class", "svelte-wbzyyy");
    			add_location(div0, file$h, 186, 2, 5086);
    			attr_dev(div1, "id", "templatemenu");
    			set_style(div1, "left", /*$showTemplates*/ ctx[1] ? '10px' : '-900px');
    			set_style(div1, "background-color", /*$theme*/ ctx[6].backgroundColor);
    			set_style(div1, "font-family", /*$theme*/ ctx[6].font);
    			set_style(div1, "color", /*$theme*/ ctx[6].textColor);
    			set_style(div1, "font-size", /*$theme*/ ctx[6].fontSize);
    			set_style(div1, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			attr_dev(div1, "class", "svelte-wbzyyy");
    			add_location(div1, file$h, 173, 0, 4531);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, input);
    			set_input_value(input, /*search*/ ctx[0]);
    			/*input_binding*/ ctx[10](input);
    			append_dev(div1, t);
    			append_dev(div1, div0);
    			append_dev(div0, ul);
    			if (if_block) if_block.m(ul, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[9]),
    					listen_dev(input, "keydown", /*keyDownProcessor*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "background-color", /*$theme*/ ctx[6].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "font-family", /*$theme*/ ctx[6].font);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "color", /*$theme*/ ctx[6].textColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "font-size", /*$theme*/ ctx[6].fontSize);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(input, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			}

    			if (dirty & /*search*/ 1 && input.value !== /*search*/ ctx[0]) {
    				set_input_value(input, /*search*/ ctx[0]);
    			}

    			if (typeof /*$templates*/ ctx[5] === "object") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					if_block.m(ul, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$showTemplates*/ 2) {
    				set_style(div1, "left", /*$showTemplates*/ ctx[1] ? '10px' : '-900px');
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "background-color", /*$theme*/ ctx[6].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "font-family", /*$theme*/ ctx[6].font);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "color", /*$theme*/ ctx[6].textColor);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "font-size", /*$theme*/ ctx[6].fontSize);
    			}

    			if (dirty & /*$theme*/ 64) {
    				set_style(div1, "border", "solid 3px " + /*$theme*/ ctx[6].borderColor);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*input_binding*/ ctx[10](null);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $showTemplates;
    	let $templateEditor;
    	let $state;
    	let $scriptEditor;
    	let $noteEditor;
    	let $emailEditor;
    	let $templates;
    	let $theme;
    	validate_store(showTemplates, 'showTemplates');
    	component_subscribe($$self, showTemplates, $$value => $$invalidate(1, $showTemplates = $$value));
    	validate_store(templateEditor, 'templateEditor');
    	component_subscribe($$self, templateEditor, $$value => $$invalidate(13, $templateEditor = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(14, $state = $$value));
    	validate_store(scriptEditor, 'scriptEditor');
    	component_subscribe($$self, scriptEditor, $$value => $$invalidate(15, $scriptEditor = $$value));
    	validate_store(noteEditor, 'noteEditor');
    	component_subscribe($$self, noteEditor, $$value => $$invalidate(16, $noteEditor = $$value));
    	validate_store(emailEditor, 'emailEditor');
    	component_subscribe($$self, emailEditor, $$value => $$invalidate(17, $emailEditor = $$value));
    	validate_store(templates, 'templates');
    	component_subscribe($$self, templates, $$value => $$invalidate(5, $templates = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(6, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TemplateMenu', slots, []);
    	let search = "";
    	let list = [];
    	let searchInput;
    	let first = true;
    	let cursor = 0;

    	onMount(() => {
    		
    	});

    	function setDefaults(flag) {
    		if (flag) {
    			$$invalidate(4, cursor = 0);
    			$$invalidate(0, search = "");
    			searchInput.focus();
    		}
    	}

    	afterUpdate(() => {
    		if ($showTemplates && first) {
    			$$invalidate(2, list = searchTempaltes(search));
    			first = false;
    			searchInput.focus();
    		}
    	});

    	function searchTempaltes(text) {
    		var tmp = [];

    		if (text === "" || text === undefined) {
    			tmp = $templates;
    		} else {
    			text = text.toLowerCase();

    			tmp = $templates.filter(item => {
    				if (item !== undefined && item !== null) {
    					return item.toLowerCase().includes(text);
    				}

    				return false;
    			});
    		}

    		tmp = tmp.sort((a, b) => a.toLowerCase() > b.toLowerCase());
    		return tmp;
    	}

    	function runTemplate(template) {
    		var text = "";
    		var selection = false;

    		if ($state === "emailit") {
    			//
    			// Get the text in the email body.
    			//
    			if ($emailEditor.somethingSelected()) {
    				selection = true;
    				text = $emailEditor.getSelection();
    			} else {
    				text = $emailEditor.getValue();
    			}
    		} else if ($state === "notes") {
    			//
    			// Get the text from the current note.
    			//
    			if ($noteEditor.somethingSelected()) {
    				selection = true;
    				text = $noteEditor.getSelection();
    			} else {
    				text = $noteEditor.getValue();
    			}
    		} else if ($state === "scripts") {
    			if ($scriptEditor.somethingSelected()) {
    				selection = true;
    				text = $scriptEditor.getSelection();
    			} else {
    				text = $scriptEditor.getValue();
    			}
    		} else if ($state === "templates") {
    			if ($templateEditor.somethingSelected()) {
    				selection = true;
    				text = $templateEditor.getSelection();
    			} else {
    				text = $templateEditor.getValue();
    			}
    		}

    		fetch("http://localhost:9978/api/template/run", {
    			method: "PUT",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify({ template, text })
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			if ($state === "emailit") {
    				//
    				// Paste the template in the body of the email.
    				//
    				if (selection) {
    					$emailEditor.replaceSelection(data.text);
    				} else {
    					$emailEditor.setValue(data.text);
    				}

    				$emailEditor.focus();
    			} else if ($state === "notes") {
    				//
    				// Paste the template in the current note at the location.
    				//
    				if (selection) {
    					$noteEditor.replaceSelection(data.text);
    				} else {
    					$noteEditor.setValue(data.text);
    				}

    				$noteEditor.focus();
    			} else if ($state === "scripts") {
    				if (selection) {
    					$scriptEditor.replaceSelection(data.text);
    				} else {
    					$scriptEditor.setValue(data.text);
    				}

    				$scriptEditor.focus();
    			} else if ($state === "templates") {
    				if (selection) {
    					$templateEditor.replaceSelection(data.text);
    				} else {
    					$templateEditor.setValue(data.text);
    				}

    				$templateEditor.focus();
    			}

    			set_store_value(showTemplates, $showTemplates = false, $showTemplates);
    			$$invalidate(0, search = "");
    		});
    	}

    	function keyDownProcessor(e) {
    		switch (e.key) {
    			case "ArrowDown":
    				e.preventDefault();
    				$$invalidate(4, cursor += 1);
    				if (cursor >= list.length) $$invalidate(4, cursor = list.length - 1);
    				break;
    			case "ArrowUp":
    				e.preventDefault();
    				$$invalidate(4, cursor -= 1);
    				if (cursor < 0) $$invalidate(4, cursor = 0);
    				break;
    			case "Enter":
    				e.preventDefault();
    				runTemplate(list[cursor]);
    				break;
    			case "Escape":
    				set_store_value(showTemplates, $showTemplates = false, $showTemplates);
    				break;
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TemplateMenu> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		search = this.value;
    		$$invalidate(0, search);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			searchInput = $$value;
    			$$invalidate(3, searchInput);
    		});
    	}

    	const click_handler = template => {
    		runTemplate(template);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		afterUpdate,
    		templates,
    		showTemplates,
    		theme,
    		state,
    		noteEditor,
    		emailEditor,
    		templateEditor,
    		scriptEditor,
    		search,
    		list,
    		searchInput,
    		first,
    		cursor,
    		setDefaults,
    		searchTempaltes,
    		runTemplate,
    		keyDownProcessor,
    		$showTemplates,
    		$templateEditor,
    		$state,
    		$scriptEditor,
    		$noteEditor,
    		$emailEditor,
    		$templates,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('search' in $$props) $$invalidate(0, search = $$props.search);
    		if ('list' in $$props) $$invalidate(2, list = $$props.list);
    		if ('searchInput' in $$props) $$invalidate(3, searchInput = $$props.searchInput);
    		if ('first' in $$props) first = $$props.first;
    		if ('cursor' in $$props) $$invalidate(4, cursor = $$props.cursor);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*search*/ 1) {
    			$$invalidate(2, list = searchTempaltes(search));
    		}

    		if ($$self.$$.dirty & /*$showTemplates*/ 2) {
    			setDefaults($showTemplates);
    		}
    	};

    	return [
    		search,
    		$showTemplates,
    		list,
    		searchInput,
    		cursor,
    		$templates,
    		$theme,
    		runTemplate,
    		keyDownProcessor,
    		input_input_handler,
    		input_binding,
    		click_handler
    	];
    }

    class TemplateMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TemplateMenu",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* src/components/SimpleAutoComplete.svelte generated by Svelte v3.49.0 */

    const { Object: Object_1$1, console: console_1$1 } = globals;
    const file$g = "src/components/SimpleAutoComplete.svelte";

    const get_no_results_slot_changes = dirty => ({
    	noResultsText: dirty[0] & /*noResultsText*/ 2048
    });

    const get_no_results_slot_context = ctx => ({ noResultsText: /*noResultsText*/ ctx[11] });

    const get_create_slot_changes = dirty => ({
    	createText: dirty[0] & /*createText*/ 8192
    });

    const get_create_slot_context = ctx => ({ createText: /*createText*/ ctx[13] });

    const get_loading_slot_changes = dirty => ({
    	loadingText: dirty[0] & /*loadingText*/ 4096
    });

    const get_loading_slot_context = ctx => ({ loadingText: /*loadingText*/ ctx[12] });

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[107] = list[i];
    	child_ctx[109] = i;
    	return child_ctx;
    }

    const get_item_slot_changes = dirty => ({
    	item: dirty[1] & /*filteredListItems*/ 1,
    	label: dirty[1] & /*filteredListItems*/ 1
    });

    const get_item_slot_context = ctx => ({
    	item: /*listItem*/ ctx[107].item,
    	label: /*listItem*/ ctx[107].highlighted
    	? /*listItem*/ ctx[107].highlighted.label
    	: /*listItem*/ ctx[107].label
    });

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[110] = list[i];
    	return child_ctx;
    }

    const get_tag_slot_changes = dirty => ({
    	label: dirty[0] & /*selectedItem*/ 2,
    	item: dirty[0] & /*selectedItem*/ 2
    });

    const get_tag_slot_context = ctx => ({
    	label: /*safeLabelFunction*/ ctx[35](/*tagItem*/ ctx[110]),
    	item: /*tagItem*/ ctx[110],
    	unselectItem: /*unselectItem*/ ctx[42]
    });

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[109] = list[i];
    	return child_ctx;
    }

    // (869:39) 
    function create_if_block_11(ctx) {
    	let each_1_anchor;
    	let each_value_2 = /*selectedItem*/ ctx[1];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*valueFunction, selectedItem*/ 18 | dirty[1] & /*safeLabelFunction*/ 16) {
    				each_value_2 = /*selectedItem*/ ctx[1];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(869:39) ",
    		ctx
    	});

    	return block;
    }

    // (867:4) {#if !multiple && value}
    function create_if_block_10(ctx) {
    	let option;
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(/*text*/ ctx[3]);
    			option.__value = /*value*/ ctx[2];
    			option.value = option.__value;
    			option.selected = true;
    			attr_dev(option, "class", "svelte-xmtx21");
    			add_location(option, file$g, 867, 6, 21268);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*text*/ 8) set_data_dev(t, /*text*/ ctx[3]);

    			if (dirty[0] & /*value, valueFunction, selectedItem*/ 22) {
    				prop_dev(option, "__value", /*value*/ ctx[2]);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(867:4) {#if !multiple && value}",
    		ctx
    	});

    	return block;
    }

    // (870:6) {#each selectedItem as i}
    function create_each_block_2(ctx) {
    	let option;
    	let t0_value = /*safeLabelFunction*/ ctx[35](/*i*/ ctx[109]) + "";
    	let t0;
    	let t1;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t0 = text(t0_value);
    			t1 = space$3();
    			option.__value = option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[109], true);
    			option.value = option.__value;
    			option.selected = true;
    			attr_dev(option, "class", "svelte-xmtx21");
    			add_location(option, file$g, 870, 8, 21389);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t0);
    			append_dev(option, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[35](/*i*/ ctx[109]) + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*valueFunction, selectedItem*/ 18 && option_value_value !== (option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[109], true))) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(870:6) {#each selectedItem as i}",
    		ctx
    	});

    	return block;
    }

    // (878:4) {#if multiple && selectedItem}
    function create_if_block_9(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*selectedItem*/ ctx[1];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedItem*/ 2 | dirty[1] & /*unselectItem, safeLabelFunction*/ 2064 | dirty[2] & /*$$scope*/ 2048) {
    				each_value_1 = /*selectedItem*/ ctx[1];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(878:4) {#if multiple && selectedItem}",
    		ctx
    	});

    	return block;
    }

    // (885:9)            
    function fallback_block_4(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*safeLabelFunction*/ ctx[35](/*tagItem*/ ctx[110]) + "";
    	let t0;
    	let t1;
    	let span1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[76](/*tagItem*/ ctx[110]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = space$3();
    			span1 = element("span");
    			t2 = space$3();
    			attr_dev(span0, "class", "tag svelte-xmtx21");
    			add_location(span0, file$g, 886, 12, 21822);
    			attr_dev(span1, "class", "tag is-delete svelte-xmtx21");
    			add_location(span1, file$g, 887, 12, 21888);
    			attr_dev(div, "class", "tags has-addons svelte-xmtx21");
    			add_location(div, file$g, 885, 10, 21780);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(div, t1);
    			append_dev(div, span1);
    			insert_dev(target, t2, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span1, "click", prevent_default(click_handler), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[35](/*tagItem*/ ctx[110]) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_4.name,
    		type: "fallback",
    		source: "(885:9)            ",
    		ctx
    	});

    	return block;
    }

    // (879:6) {#each selectedItem as tagItem}
    function create_each_block_1$1(ctx) {
    	let current;
    	const tag_slot_template = /*#slots*/ ctx[74].tag;
    	const tag_slot = create_slot(tag_slot_template, ctx, /*$$scope*/ ctx[73], get_tag_slot_context);
    	const tag_slot_or_fallback = tag_slot || fallback_block_4(ctx);

    	const block = {
    		c: function create() {
    			if (tag_slot_or_fallback) tag_slot_or_fallback.c();
    		},
    		m: function mount(target, anchor) {
    			if (tag_slot_or_fallback) {
    				tag_slot_or_fallback.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (tag_slot) {
    				if (tag_slot.p && (!current || dirty[0] & /*selectedItem*/ 2 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						tag_slot,
    						tag_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(tag_slot_template, /*$$scope*/ ctx[73], dirty, get_tag_slot_changes),
    						get_tag_slot_context
    					);
    				}
    			} else {
    				if (tag_slot_or_fallback && tag_slot_or_fallback.p && (!current || dirty[0] & /*selectedItem*/ 2)) {
    					tag_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tag_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tag_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (tag_slot_or_fallback) tag_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(879:6) {#each selectedItem as tagItem}",
    		ctx
    	});

    	return block;
    }

    // (916:4) {#if clearable}
    function create_if_block_8(ctx) {
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "✖";
    			attr_dev(span, "class", "autocomplete-clear-button svelte-xmtx21");
    			add_location(span, file$g, 916, 6, 22759);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*clear*/ ctx[46], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(916:4) {#if clearable}",
    		ctx
    	});

    	return block;
    }

    // (973:28) 
    function create_if_block_7(ctx) {
    	let div;
    	let current;
    	const no_results_slot_template = /*#slots*/ ctx[74]["no-results"];
    	const no_results_slot = create_slot(no_results_slot_template, ctx, /*$$scope*/ ctx[73], get_no_results_slot_context);
    	const no_results_slot_or_fallback = no_results_slot || fallback_block_3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (no_results_slot_or_fallback) no_results_slot_or_fallback.c();
    			attr_dev(div, "class", "autocomplete-list-item-no-results svelte-xmtx21");
    			add_location(div, file$g, 973, 6, 24817);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (no_results_slot_or_fallback) {
    				no_results_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (no_results_slot) {
    				if (no_results_slot.p && (!current || dirty[0] & /*noResultsText*/ 2048 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						no_results_slot,
    						no_results_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(no_results_slot_template, /*$$scope*/ ctx[73], dirty, get_no_results_slot_changes),
    						get_no_results_slot_context
    					);
    				}
    			} else {
    				if (no_results_slot_or_fallback && no_results_slot_or_fallback.p && (!current || dirty[0] & /*noResultsText*/ 2048)) {
    					no_results_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(no_results_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(no_results_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (no_results_slot_or_fallback) no_results_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(973:28) ",
    		ctx
    	});

    	return block;
    }

    // (969:21) 
    function create_if_block_6$1(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const create_slot_template = /*#slots*/ ctx[74].create;
    	const create_slot_1 = create_slot(create_slot_template, ctx, /*$$scope*/ ctx[73], get_create_slot_context);
    	const create_slot_or_fallback = create_slot_1 || fallback_block_2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (create_slot_or_fallback) create_slot_or_fallback.c();
    			attr_dev(div, "class", "autocomplete-list-item-create svelte-xmtx21");
    			add_location(div, file$g, 969, 6, 24642);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (create_slot_or_fallback) {
    				create_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*selectItem*/ ctx[36], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (create_slot_1) {
    				if (create_slot_1.p && (!current || dirty[0] & /*createText*/ 8192 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						create_slot_1,
    						create_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(create_slot_template, /*$$scope*/ ctx[73], dirty, get_create_slot_changes),
    						get_create_slot_context
    					);
    				}
    			} else {
    				if (create_slot_or_fallback && create_slot_or_fallback.p && (!current || dirty[0] & /*createText*/ 8192)) {
    					create_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(create_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(create_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (create_slot_or_fallback) create_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(969:21) ",
    		ctx
    	});

    	return block;
    }

    // (965:37) 
    function create_if_block_5$2(ctx) {
    	let div;
    	let current;
    	const loading_slot_template = /*#slots*/ ctx[74].loading;
    	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[73], get_loading_slot_context);
    	const loading_slot_or_fallback = loading_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (loading_slot_or_fallback) loading_slot_or_fallback.c();
    			attr_dev(div, "class", "autocomplete-list-item-loading svelte-xmtx21");
    			add_location(div, file$g, 965, 6, 24492);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (loading_slot_or_fallback) {
    				loading_slot_or_fallback.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (loading_slot) {
    				if (loading_slot.p && (!current || dirty[0] & /*loadingText*/ 4096 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						loading_slot,
    						loading_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[73], dirty, get_loading_slot_changes),
    						get_loading_slot_context
    					);
    				}
    			} else {
    				if (loading_slot_or_fallback && loading_slot_or_fallback.p && (!current || dirty[0] & /*loadingText*/ 4096)) {
    					loading_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loading_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loading_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (loading_slot_or_fallback) loading_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(965:37) ",
    		ctx
    	});

    	return block;
    }

    // (928:4) {#if filteredListItems && filteredListItems.length > 0}
    function create_if_block$b(ctx) {
    	let t;
    	let if_block_anchor;
    	let current;
    	let each_value = /*filteredListItems*/ ctx[31];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block = /*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[31].length > /*maxItemsToShowInList*/ ctx[5] && create_if_block_1$6(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space$3();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*highlightIndex, maxItemsToShowInList*/ 1073741856 | dirty[1] & /*isConfirmed, filteredListItems, onListItemClick*/ 131137 | dirty[2] & /*$$scope*/ 2048) {
    				each_value = /*filteredListItems*/ ctx[31];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t.parentNode, t);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (/*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[31].length > /*maxItemsToShowInList*/ ctx[5]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$6(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(928:4) {#if filteredListItems && filteredListItems.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (975:48) {noResultsText}
    function fallback_block_3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*noResultsText*/ ctx[11]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*noResultsText*/ 2048) set_data_dev(t, /*noResultsText*/ ctx[11]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_3.name,
    		type: "fallback",
    		source: "(975:48) {noResultsText}",
    		ctx
    	});

    	return block;
    }

    // (971:41) {createText}
    function fallback_block_2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*createText*/ ctx[13]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*createText*/ 8192) set_data_dev(t, /*createText*/ ctx[13]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_2.name,
    		type: "fallback",
    		source: "(971:41) {createText}",
    		ctx
    	});

    	return block;
    }

    // (967:43) {loadingText}
    function fallback_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*loadingText*/ ctx[12]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*loadingText*/ 4096) set_data_dev(t, /*loadingText*/ ctx[12]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(967:43) {loadingText}",
    		ctx
    	});

    	return block;
    }

    // (930:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}
    function create_if_block_2$4(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*listItem*/ ctx[107] && create_if_block_3$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*listItem*/ ctx[107]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[1] & /*filteredListItems*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(930:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}",
    		ctx
    	});

    	return block;
    }

    // (931:10) {#if listItem}
    function create_if_block_3$3(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const item_slot_template = /*#slots*/ ctx[74].item;
    	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[73], get_item_slot_context);
    	const item_slot_or_fallback = item_slot || fallback_block(ctx);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[79](/*listItem*/ ctx[107]);
    	}

    	function pointerenter_handler() {
    		return /*pointerenter_handler*/ ctx[80](/*i*/ ctx[109]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (item_slot_or_fallback) item_slot_or_fallback.c();

    			attr_dev(div, "class", div_class_value = "autocomplete-list-item " + (/*i*/ ctx[109] === /*highlightIndex*/ ctx[30]
    			? 'selected'
    			: '') + " svelte-xmtx21");

    			toggle_class(div, "confirmed", /*isConfirmed*/ ctx[48](/*listItem*/ ctx[107].item));
    			add_location(div, file$g, 931, 12, 23354);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (item_slot_or_fallback) {
    				item_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", click_handler_1, false, false, false),
    					listen_dev(div, "pointerenter", pointerenter_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (item_slot) {
    				if (item_slot.p && (!current || dirty[1] & /*filteredListItems*/ 1 | dirty[2] & /*$$scope*/ 2048)) {
    					update_slot_base(
    						item_slot,
    						item_slot_template,
    						ctx,
    						/*$$scope*/ ctx[73],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[73])
    						: get_slot_changes(item_slot_template, /*$$scope*/ ctx[73], dirty, get_item_slot_changes),
    						get_item_slot_context
    					);
    				}
    			} else {
    				if (item_slot_or_fallback && item_slot_or_fallback.p && (!current || dirty[1] & /*filteredListItems*/ 1)) {
    					item_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
    				}
    			}

    			if (!current || dirty[0] & /*highlightIndex*/ 1073741824 && div_class_value !== (div_class_value = "autocomplete-list-item " + (/*i*/ ctx[109] === /*highlightIndex*/ ctx[30]
    			? 'selected'
    			: '') + " svelte-xmtx21")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty[0] & /*highlightIndex*/ 1073741824 | dirty[1] & /*isConfirmed, filteredListItems*/ 131073) {
    				toggle_class(div, "confirmed", /*isConfirmed*/ ctx[48](/*listItem*/ ctx[107].item));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(item_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(item_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(931:10) {#if listItem}",
    		ctx
    	});

    	return block;
    }

    // (951:16) {:else}
    function create_else_block$5(ctx) {
    	let html_tag;
    	let raw_value = /*listItem*/ ctx[107].label + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag(false);
    			html_anchor = empty$1();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*filteredListItems*/ 1 && raw_value !== (raw_value = /*listItem*/ ctx[107].label + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(951:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (949:16) {#if listItem.highlighted}
    function create_if_block_4$2(ctx) {
    	let html_tag;
    	let raw_value = /*listItem*/ ctx[107].highlighted.label + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag(false);
    			html_anchor = empty$1();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[1] & /*filteredListItems*/ 1 && raw_value !== (raw_value = /*listItem*/ ctx[107].highlighted.label + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(949:16) {#if listItem.highlighted}",
    		ctx
    	});

    	return block;
    }

    // (948:15)                  
    function fallback_block(ctx) {
    	let if_block_anchor;

    	function select_block_type_2(ctx, dirty) {
    		if (/*listItem*/ ctx[107].highlighted) return create_if_block_4$2;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(948:15)                  ",
    		ctx
    	});

    	return block;
    }

    // (929:6) {#each filteredListItems as listItem, i}
    function create_each_block$6(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*listItem*/ ctx[107] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[109] < /*maxItemsToShowInList*/ ctx[5]) && create_if_block_2$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*listItem*/ ctx[107] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[109] < /*maxItemsToShowInList*/ ctx[5])) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*maxItemsToShowInList*/ 32 | dirty[1] & /*filteredListItems*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(929:6) {#each filteredListItems as listItem, i}",
    		ctx
    	});

    	return block;
    }

    // (960:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
    function create_if_block_1$6(ctx) {
    	let div;
    	let t0;
    	let t1_value = /*filteredListItems*/ ctx[31].length - /*maxItemsToShowInList*/ ctx[5] + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("...");
    			t1 = text(t1_value);
    			t2 = text(" results not shown");
    			attr_dev(div, "class", "autocomplete-list-item-no-results svelte-xmtx21");
    			add_location(div, file$g, 960, 8, 24292);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*maxItemsToShowInList*/ 32 | dirty[1] & /*filteredListItems*/ 1 && t1_value !== (t1_value = /*filteredListItems*/ ctx[31].length - /*maxItemsToShowInList*/ ctx[5] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(960:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let div2;
    	let select;
    	let t0;
    	let div0;
    	let t1;
    	let input_1;
    	let input_1_class_value;
    	let input_1_id_value;
    	let input_1_autocomplete_value;
    	let input_1_readonly_value;
    	let t2;
    	let t3;
    	let div1;
    	let current_block_type_index;
    	let if_block3;
    	let div1_class_value;
    	let div2_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (!/*multiple*/ ctx[6] && /*value*/ ctx[2]) return create_if_block_10;
    		if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) return create_if_block_11;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type && current_block_type(ctx);
    	let if_block1 = /*multiple*/ ctx[6] && /*selectedItem*/ ctx[1] && create_if_block_9(ctx);
    	let if_block2 = /*clearable*/ ctx[32] && create_if_block_8(ctx);
    	const if_block_creators = [create_if_block$b, create_if_block_5$2, create_if_block_6$1, create_if_block_7];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*filteredListItems*/ ctx[31] && /*filteredListItems*/ ctx[31].length > 0) return 0;
    		if (/*loading*/ ctx[29] && /*loadingText*/ ctx[12]) return 1;
    		if (/*create*/ ctx[7]) return 2;
    		if (/*noResultsText*/ ctx[11]) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			select = element("select");
    			if (if_block0) if_block0.c();
    			t0 = space$3();
    			div0 = element("div");
    			if (if_block1) if_block1.c();
    			t1 = space$3();
    			input_1 = element("input");
    			t2 = space$3();
    			if (if_block2) if_block2.c();
    			t3 = space$3();
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			attr_dev(select, "name", /*selectName*/ ctx[19]);
    			attr_dev(select, "id", /*selectId*/ ctx[20]);
    			attr_dev(select, "class", "svelte-xmtx21");
    			if (/*value*/ ctx[2] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[75].call(select));
    			add_location(select, file$g, 865, 2, 21162);
    			attr_dev(input_1, "type", "text");

    			attr_dev(input_1, "class", input_1_class_value = "" + ((/*inputClassName*/ ctx[16]
    			? /*inputClassName*/ ctx[16]
    			: '') + " input autocomplete-input" + " svelte-xmtx21"));

    			attr_dev(input_1, "id", input_1_id_value = /*inputId*/ ctx[17] ? /*inputId*/ ctx[17] : "");
    			attr_dev(input_1, "autocomplete", input_1_autocomplete_value = /*html5autocomplete*/ ctx[22] ? "on" : "off");
    			attr_dev(input_1, "placeholder", /*placeholder*/ ctx[14]);
    			attr_dev(input_1, "name", /*name*/ ctx[18]);
    			input_1.disabled = /*disabled*/ ctx[25];
    			attr_dev(input_1, "title", /*title*/ ctx[21]);
    			input_1.readOnly = input_1_readonly_value = /*readonly*/ ctx[23] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1];
    			set_style(input_1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			set_style(input_1, "color", /*theme*/ ctx[26].textColor);
    			set_style(input_1, "border-color", /*theme*/ ctx[26].borderColor);
    			add_location(input_1, file$g, 895, 4, 22076);
    			attr_dev(div0, "class", "input-container svelte-xmtx21");
    			add_location(div0, file$g, 876, 2, 21527);

    			attr_dev(div1, "class", div1_class_value = "" + ((/*dropdownClassName*/ ctx[24]
    			? /*dropdownClassName*/ ctx[24]
    			: '') + " autocomplete-list " + (/*showList*/ ctx[33] ? '' : 'hidden') + " is-fullwidth" + " svelte-xmtx21"));

    			set_style(div1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			set_style(div1, "color", /*theme*/ ctx[26].textColor);
    			set_style(div1, "border-color", /*theme*/ ctx[26].borderColor);
    			add_location(div1, file$g, 919, 2, 22853);

    			attr_dev(div2, "class", div2_class_value = "" + ((/*className*/ ctx[15] ? /*className*/ ctx[15] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
    			? 'hide-arrow'
    			: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[34] + " svelte-xmtx21"));

    			toggle_class(div2, "show-clear", /*clearable*/ ctx[32]);
    			toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[29]);
    			add_location(div2, file$g, 858, 0, 20901);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, select);
    			if (if_block0) if_block0.m(select, null);
    			select_option(select, /*value*/ ctx[2]);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			append_dev(div0, input_1);
    			/*input_1_binding*/ ctx[77](input_1);
    			set_input_value(input_1, /*text*/ ctx[3]);
    			append_dev(div0, t2);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div2, t3);
    			append_dev(div2, div1);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			/*div1_binding*/ ctx[81](div1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "click", /*onDocumentClick*/ ctx[38], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[75]),
    					action_destroyer(/*multipleAction*/ ctx[47].call(null, select)),
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[78]),
    					listen_dev(input_1, "input", /*onInput*/ ctx[41], false, false, false),
    					listen_dev(input_1, "focus", /*onFocusInternal*/ ctx[44], false, false, false),
    					listen_dev(input_1, "blur", /*onBlurInternal*/ ctx[45], false, false, false),
    					listen_dev(input_1, "keydown", /*onKeyDown*/ ctx[39], false, false, false),
    					listen_dev(input_1, "click", /*onInputClick*/ ctx[43], false, false, false),
    					listen_dev(input_1, "keypress", /*onKeyPress*/ ctx[40], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if (if_block0) if_block0.d(1);
    				if_block0 = current_block_type && current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(select, null);
    				}
    			}

    			if (!current || dirty[0] & /*selectName*/ 524288) {
    				attr_dev(select, "name", /*selectName*/ ctx[19]);
    			}

    			if (!current || dirty[0] & /*selectId*/ 1048576) {
    				attr_dev(select, "id", /*selectId*/ ctx[20]);
    			}

    			if (dirty[0] & /*value, valueFunction, selectedItem*/ 22) {
    				select_option(select, /*value*/ ctx[2]);
    			}

    			if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*multiple, selectedItem*/ 66) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*inputClassName*/ 65536 && input_1_class_value !== (input_1_class_value = "" + ((/*inputClassName*/ ctx[16]
    			? /*inputClassName*/ ctx[16]
    			: '') + " input autocomplete-input" + " svelte-xmtx21"))) {
    				attr_dev(input_1, "class", input_1_class_value);
    			}

    			if (!current || dirty[0] & /*inputId*/ 131072 && input_1_id_value !== (input_1_id_value = /*inputId*/ ctx[17] ? /*inputId*/ ctx[17] : "")) {
    				attr_dev(input_1, "id", input_1_id_value);
    			}

    			if (!current || dirty[0] & /*html5autocomplete*/ 4194304 && input_1_autocomplete_value !== (input_1_autocomplete_value = /*html5autocomplete*/ ctx[22] ? "on" : "off")) {
    				attr_dev(input_1, "autocomplete", input_1_autocomplete_value);
    			}

    			if (!current || dirty[0] & /*placeholder*/ 16384) {
    				attr_dev(input_1, "placeholder", /*placeholder*/ ctx[14]);
    			}

    			if (!current || dirty[0] & /*name*/ 262144) {
    				attr_dev(input_1, "name", /*name*/ ctx[18]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 33554432) {
    				prop_dev(input_1, "disabled", /*disabled*/ ctx[25]);
    			}

    			if (!current || dirty[0] & /*title*/ 2097152) {
    				attr_dev(input_1, "title", /*title*/ ctx[21]);
    			}

    			if (!current || dirty[0] & /*readonly, lock, selectedItem*/ 8388866 && input_1_readonly_value !== (input_1_readonly_value = /*readonly*/ ctx[23] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1])) {
    				prop_dev(input_1, "readOnly", input_1_readonly_value);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(input_1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(input_1, "color", /*theme*/ ctx[26].textColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(input_1, "border-color", /*theme*/ ctx[26].borderColor);
    			}

    			if (dirty[0] & /*text*/ 8 && input_1.value !== /*text*/ ctx[3]) {
    				set_input_value(input_1, /*text*/ ctx[3]);
    			}

    			if (/*clearable*/ ctx[32]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_8(ctx);
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block3) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block3 = if_blocks[current_block_type_index];

    					if (!if_block3) {
    						if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block3.c();
    					} else {
    						if_block3.p(ctx, dirty);
    					}

    					transition_in(if_block3, 1);
    					if_block3.m(div1, null);
    				} else {
    					if_block3 = null;
    				}
    			}

    			if (!current || dirty[0] & /*dropdownClassName*/ 16777216 | dirty[1] & /*showList*/ 4 && div1_class_value !== (div1_class_value = "" + ((/*dropdownClassName*/ ctx[24]
    			? /*dropdownClassName*/ ctx[24]
    			: '') + " autocomplete-list " + (/*showList*/ ctx[33] ? '' : 'hidden') + " is-fullwidth" + " svelte-xmtx21"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(div1, "background-color", /*theme*/ ctx[26].textAreaColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(div1, "color", /*theme*/ ctx[26].textColor);
    			}

    			if (!current || dirty[0] & /*theme*/ 67108864) {
    				set_style(div1, "border-color", /*theme*/ ctx[26].borderColor);
    			}

    			if (!current || dirty[0] & /*className, hideArrow, items, multiple*/ 33345 && div2_class_value !== (div2_class_value = "" + ((/*className*/ ctx[15] ? /*className*/ ctx[15] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
    			? 'hide-arrow'
    			: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[34] + " svelte-xmtx21"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (dirty[0] & /*className, hideArrow, items, multiple*/ 33345 | dirty[1] & /*clearable*/ 2) {
    				toggle_class(div2, "show-clear", /*clearable*/ ctx[32]);
    			}

    			if (dirty[0] & /*className, hideArrow, items, multiple, showLoadingIndicator, loading*/ 536905281) {
    				toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[29]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);

    			if (if_block0) {
    				if_block0.d();
    			}

    			if (if_block1) if_block1.d();
    			/*input_1_binding*/ ctx[77](null);
    			if (if_block2) if_block2.d();

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			/*div1_binding*/ ctx[81](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function safeStringFunction(theFunction, argument) {
    	if (typeof theFunction !== "function") {
    		console.error("Not a function: " + theFunction + ", argument: " + argument);
    	}

    	let originalResult;

    	try {
    		originalResult = theFunction(argument);
    	} catch(error) {
    		console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
    	}

    	let result = originalResult;

    	if (result === undefined || result === null) {
    		result = "";
    	}

    	if (typeof result !== "string") {
    		result = result.toString();
    	}

    	return result;
    }

    function numberOfMatches(listItem, searchWords) {
    	if (!listItem) {
    		return 0;
    	}

    	const itemKeywords = listItem.keywords;
    	let matches = 0;

    	searchWords.forEach(searchWord => {
    		if (itemKeywords.includes(searchWord)) {
    			matches++;
    		}
    	});

    	return matches;
    }

    function removeAccents(str) {
    	return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let showList;
    	let clearable;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimpleAutoComplete', slots, ['tag','item','loading','create','no-results']);
    	let { items = [] } = $$props;
    	let { searchFunction = false } = $$props;
    	let { labelFieldName = undefined } = $$props;
    	let { keywordsFieldName = labelFieldName } = $$props;
    	let { valueFieldName = undefined } = $$props;

    	let { labelFunction = function (item) {
    		if (item === undefined || item === null) {
    			return "";
    		}

    		return labelFieldName ? item[labelFieldName] : item;
    	} } = $$props;

    	let { keywordsFunction = function (item) {
    		if (item === undefined || item === null) {
    			return "";
    		}

    		return keywordsFieldName
    		? item[keywordsFieldName]
    		: labelFunction(item);
    	} } = $$props;

    	let { valueFunction = function (item, force_single = false) {
    		if (item === undefined || item === null) {
    			return item;
    		}

    		if (!multiple || force_single) {
    			return valueFieldName ? item[valueFieldName] : item;
    		} else {
    			return item.map(i => valueFieldName ? i[valueFieldName] : i);
    		}
    	} } = $$props;

    	let { keywordsCleanFunction = function (keywords) {
    		return keywords;
    	} } = $$props;

    	let { textCleanFunction = function (userEnteredText) {
    		return userEnteredText;
    	} } = $$props;

    	let { beforeChange = function (oldSelectedItem, newSelectedItem) {
    		return true;
    	} } = $$props;

    	let { onChange = function (newSelectedItem) {
    		
    	} } = $$props;

    	let { onFocus = function () {
    		
    	} } = $$props;

    	let { onBlur = function () {
    		
    	} } = $$props;

    	let { onCreate = function (text) {
    		if (debug) {
    			console.log("onCreate: " + text);
    		}
    	} } = $$props;

    	let { selectFirstIfEmpty = false } = $$props;
    	let { minCharactersToSearch = 1 } = $$props;
    	let { maxItemsToShowInList = 0 } = $$props;
    	let { multiple = false } = $$props;
    	let { create = false } = $$props;
    	let { ignoreAccents = true } = $$props;
    	let { matchAllKeywords = true } = $$props;
    	let { sortByMatchedKeywords = false } = $$props;
    	let { lock = false } = $$props;
    	let { delay = 0 } = $$props;
    	let { localFiltering = true } = $$props;
    	let { hideArrow = false } = $$props;
    	let { showClear = false } = $$props;
    	let { showLoadingIndicator = false } = $$props;
    	let { noResultsText = "No results found" } = $$props;
    	let { loadingText = "Loading results..." } = $$props;
    	let { createText = "Not found, add anyway?" } = $$props;
    	let { placeholder = undefined } = $$props;
    	let { className = undefined } = $$props;
    	let { inputClassName = undefined } = $$props;
    	let { inputId = undefined } = $$props;
    	let { name = undefined } = $$props;
    	let { selectName = undefined } = $$props;
    	let { selectId = undefined } = $$props;
    	let { title = undefined } = $$props;
    	let { html5autocomplete = undefined } = $$props;
    	let { readonly = undefined } = $$props;
    	let { dropdownClassName = undefined } = $$props;
    	let { disabled = false } = $$props;
    	let { debug = false } = $$props;
    	let { selectedItem = undefined } = $$props;
    	let { value = undefined } = $$props;
    	let { theme = undefined } = $$props;

    	// --- Internal State ----
    	const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

    	// HTML elements
    	let input;

    	let list;

    	// UI state
    	let opened = false;

    	let loading = false;
    	let highlightIndex = -1;
    	let { text } = $$props;
    	let filteredTextLength = 0;

    	// view model
    	let filteredListItems;

    	let listItems = [];

    	// requests/responses counters
    	let lastRequestId = 0;

    	let lastResponseId = 0;

    	// other state
    	let inputDelayTimeout;

    	// -- Reactivity --
    	function onSelectedItemChanged() {
    		$$invalidate(2, value = valueFunction(selectedItem));
    		$$invalidate(3, text = !multiple ? safeLabelFunction(selectedItem) : "");
    		onChange(selectedItem);
    	}

    	function safeLabelFunction(item) {
    		// console.log("labelFunction: " + labelFunction);
    		// console.log("safeLabelFunction, item: " + item);
    		return safeStringFunction(labelFunction, item);
    	}

    	function safeKeywordsFunction(item) {
    		// console.log("safeKeywordsFunction");
    		const keywords = safeStringFunction(keywordsFunction, item);

    		let result = safeStringFunction(keywordsCleanFunction, keywords);
    		result = result.toLowerCase().trim();

    		if (ignoreAccents) {
    			result = removeAccents(result);
    		}

    		if (debug) {
    			console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
    		}

    		return result;
    	}

    	function prepareListItems() {
    		let timerId;

    		if (debug) {
    			timerId = `Autocomplete prepare list ${inputId ? `(id: ${inputId})` : ""})`;
    			console.time(timerId);
    			console.log("Prepare items to search");
    			console.log("items: " + JSON.stringify(items));
    		}

    		if (!Array.isArray(items)) {
    			console.warn("Autocomplete items / search function did not return array but", items);
    			$$invalidate(0, items = []);
    		}

    		const length = items ? items.length : 0;
    		listItems = new Array(length);

    		if (length > 0) {
    			items.forEach((item, i) => {
    				const listItem = getListItem(item);

    				if (listItem == undefined) {
    					console.log("Undefined item for: ", item);
    				}

    				listItems[i] = listItem;
    			});
    		}

    		if (debug) {
    			console.log(listItems.length + " items to search");
    			console.timeEnd(timerId);
    		}
    	}

    	function getListItem(item) {
    		return {
    			// keywords representation of the item
    			keywords: safeKeywordsFunction(item),
    			// item label
    			label: safeLabelFunction(item),
    			// store reference to the origial item
    			item
    		};
    	}

    	function prepareUserEnteredText(userEnteredText) {
    		if (userEnteredText === undefined || userEnteredText === null) {
    			return "";
    		}

    		const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
    		$$invalidate(72, filteredTextLength = textFiltered.length);

    		if (minCharactersToSearch > 1) {
    			if (filteredTextLength < minCharactersToSearch) {
    				return "";
    			}
    		}

    		const cleanUserEnteredText = textCleanFunction(textFiltered);
    		const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();

    		if (debug) {
    			console.log("Change user entered text '" + userEnteredText + "' into '" + textFilteredLowerCase + "'");
    		}

    		return textFilteredLowerCase;
    	}

    	async function search() {
    		let timerId;

    		if (debug) {
    			timerId = `Autocomplete search ${inputId ? `(id: ${inputId})` : ""})`;
    			console.time(timerId);
    			console.log("Searching user entered text: '" + text + "'");
    		}

    		const textFiltered = prepareUserEnteredText(text);

    		if (textFiltered === "") {
    			if (searchFunction) {
    				// we will need to rerun the search
    				$$invalidate(0, items = []);

    				if (debug) {
    					console.log("User entered text is empty clear list of items");
    				}
    			} else {
    				$$invalidate(31, filteredListItems = listItems);

    				if (debug) {
    					console.log("User entered text is empty set the list of items to all items");
    				}
    			}

    			closeIfMinCharsToSearchReached();

    			if (debug) {
    				console.timeEnd(timerId);
    			}

    			return;
    		}

    		if (!searchFunction) {
    			processListItems(textFiltered);
    		} else // external search which provides items
    		{
    			lastRequestId = lastRequestId + 1;
    			const currentRequestId = lastRequestId;
    			$$invalidate(29, loading = true);

    			const AsyncGenerator = (async function* () {
    				
    			}).constructor;

    			// searchFunction is a generator
    			if (searchFunction instanceof AsyncGenerator) {
    				for await (const chunk of searchFunction(textFiltered)) {
    					// a chunk of an old response: throw it away
    					if (currentRequestId < lastResponseId) {
    						return false;
    					}

    					// a chunk for a new response: reset the item list
    					if (currentRequestId > lastResponseId) {
    						$$invalidate(0, items = []);
    					}

    					lastResponseId = currentRequestId;
    					$$invalidate(0, items = [...items, ...chunk]);
    					processListItems(textFiltered);
    				}
    			} else // searchFunction is a regular function
    			{
    				let result = await searchFunction(textFiltered);

    				// If a response to a newer request has been received
    				// while responses to this request were being loaded,
    				// then we can just throw away this outdated results.
    				if (currentRequestId < lastResponseId) {
    					return false;
    				}

    				lastResponseId = currentRequestId;
    				$$invalidate(0, items = result);
    				processListItems(textFiltered);
    			}

    			$$invalidate(29, loading = false);
    		}

    		if (debug) {
    			console.timeEnd(timerId);
    			console.log("Search found " + filteredListItems.length + " items");
    		}
    	}

    	function processListItems(textFiltered) {
    		prepareListItems();

    		// local search
    		let tempfilteredListItems;

    		if (localFiltering) {
    			var searchWords = textFiltered.split(" ");

    			if (ignoreAccents) {
    				searchWords = searchWords.map(word => removeAccents(word));
    			}

    			tempfilteredListItems = listItems.filter(listItem => {
    				var matches = numberOfMatches(listItem, searchWords);

    				if (matchAllKeywords) {
    					return matches >= searchWords.length;
    				} else {
    					return matches > 0;
    				}
    			});

    			if (sortByMatchedKeywords) {
    				tempfilteredListItems = tempfilteredListItems.sort((obj1, obj2) => {
    					return numberOfMatches(obj2, searchWords) - numberOfMatches(obj1, searchWords);
    				});
    			}
    		} else {
    			tempfilteredListItems = listItems;
    		}

    		const hlfilter = highlightFilter(textFiltered, ["label"]);
    		const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);
    		$$invalidate(31, filteredListItems = filteredListItemsHighlighted);
    		closeIfMinCharsToSearchReached();
    		return true;
    	}

    	// $: text, search();
    	function selectListItem(listItem) {
    		if (debug) {
    			console.log("selectListItem");
    		}

    		if ("undefined" === typeof listItem) {
    			// allow undefined items if create is enabled
    			if (create) {
    				onCreate(text);
    				return true;
    			}

    			if (debug) {
    				console.log(`listItem is undefined. Can not select.`);
    			}

    			return false;
    		}

    		const newSelectedItem = listItem.item;

    		if (beforeChange(selectedItem, newSelectedItem)) {
    			// simple selection
    			if (!multiple) {
    				$$invalidate(1, selectedItem = newSelectedItem);
    			} else // first selection of multiple ones
    			if (!selectedItem) {
    				$$invalidate(1, selectedItem = [newSelectedItem]);
    			} else // selecting something already selected => unselect it
    			if (selectedItem.includes(newSelectedItem)) {
    				$$invalidate(1, selectedItem = selectedItem.filter(i => i !== newSelectedItem));
    			} else // adds the element to the selection
    			{
    				$$invalidate(1, selectedItem = [...selectedItem, newSelectedItem]);
    			}
    		}

    		return true;
    	}

    	function selectItem() {
    		if (debug) {
    			console.log("selectItem");
    		}

    		const listItem = filteredListItems[highlightIndex];

    		if (selectListItem(listItem)) {
    			close();

    			if (multiple) {
    				input.focus();
    			}
    		}
    	}

    	function up() {
    		if (debug) {
    			console.log("up");
    		}

    		open();
    		if (highlightIndex > 0) $$invalidate(30, highlightIndex--, highlightIndex);
    		highlight();
    	}

    	function down() {
    		if (debug) {
    			console.log("down");
    		}

    		open();
    		if (highlightIndex < filteredListItems.length - 1) $$invalidate(30, highlightIndex++, highlightIndex);
    		highlight();
    	}

    	function highlight() {
    		if (debug) {
    			console.log("highlight");
    		}

    		const query = ".selected";

    		if (debug) {
    			console.log("Seaching DOM element: " + query + " in " + list);
    		}

    		const el = list && list.querySelector(query);

    		if (el) {
    			if (typeof el.scrollIntoViewIfNeeded === "function") {
    				if (debug) {
    					console.log("Scrolling selected item into view");
    				}

    				el.scrollIntoViewIfNeeded();
    			} else {
    				if (debug) {
    					console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
    				}
    			}
    		} else {
    			if (debug) {
    				console.warn("Selected item not found to scroll into view");
    			}
    		}
    	}

    	function onListItemClick(listItem) {
    		if (debug) {
    			console.log("onListItemClick");
    		}

    		if (selectListItem(listItem)) {
    			close();

    			if (multiple) {
    				input.focus();
    			}
    		}
    	}

    	function onDocumentClick(e) {
    		if (debug) {
    			console.log("onDocumentClick: " + JSON.stringify(e.target));
    		}

    		if (e.target.closest("." + uniqueId)) {
    			if (debug) {
    				console.log("onDocumentClick inside");
    			}

    			// resetListToAllItemsAndOpen();
    			highlight();
    		} else {
    			if (debug) {
    				console.log("onDocumentClick outside");
    			}

    			close();
    		}
    	}

    	function onKeyDown(e) {
    		if (debug) {
    			console.log("onKeyDown");
    		}

    		let key = e.key;
    		if (key === "Tab" && e.shiftKey) key = "ShiftTab";

    		const fnmap = {
    			Tab: opened ? down.bind(this) : null,
    			ShiftTab: opened ? up.bind(this) : null,
    			ArrowDown: down.bind(this),
    			Escape: onEsc.bind(this),
    			Backspace: multiple && selectedItem && selectedItem.length && !text
    			? onBackspace.bind(this)
    			: null
    		};

    		const fn = fnmap[key];

    		if (typeof fn === "function") {
    			e.preventDefault();
    			fn(e);
    		}
    	}

    	function onKeyPress(e) {
    		if (debug) {
    			console.log("onKeyPress");
    		}

    		if (e.key === "Enter" && opened) {
    			e.preventDefault();
    			onEnter();
    		}
    	}

    	function onEnter() {
    		selectItem();
    	}

    	function onInput(e) {
    		if (debug) {
    			console.log("onInput");
    		}

    		$$invalidate(3, text = e.target.value);

    		if (inputDelayTimeout) {
    			clearTimeout(inputDelayTimeout);
    		}

    		if (delay) {
    			inputDelayTimeout = setTimeout(processInput, delay);
    		} else {
    			processInput();
    		}
    	}

    	function unselectItem(tag) {
    		if (debug) {
    			console.log("unselectItem", tag);
    		}

    		$$invalidate(1, selectedItem = selectedItem.filter(i => i !== tag));
    		input.focus();
    	}

    	function processInput() {
    		if (search()) {
    			$$invalidate(30, highlightIndex = 0);
    			open();
    		}
    	}

    	function onInputClick() {
    		if (debug) {
    			console.log("onInputClick");
    		}

    		resetListToAllItemsAndOpen();
    	}

    	function onEsc(e) {
    		if (debug) {
    			console.log("onEsc");
    		}

    		//if (text) return clear();
    		e.stopPropagation();

    		if (opened) {
    			input.focus();
    			close();
    		}
    	}

    	function onBackspace(e) {
    		if (debug) {
    			console.log("onBackspace");
    		}

    		unselectItem(selectedItem[selectedItem.length - 1]);
    	}

    	function onFocusInternal() {
    		if (debug) {
    			console.log("onFocus");
    		}

    		onFocus();
    		resetListToAllItemsAndOpen();
    	}

    	function onBlurInternal() {
    		if (debug) {
    			console.log("onBlur");
    		}

    		onBlur();
    	}

    	function resetListToAllItemsAndOpen() {
    		if (debug) {
    			console.log("resetListToAllItemsAndOpen");
    		}

    		if (!text) {
    			$$invalidate(31, filteredListItems = listItems);
    		} else // When an async component is initialized, the item list
    		// must be loaded when the input is focused.
    		if (!listItems.length && selectedItem && searchFunction) {
    			search();
    		}

    		open();

    		// find selected item
    		if (selectedItem) {
    			if (debug) {
    				console.log("Searching currently selected item: " + JSON.stringify(selectedItem));
    			}

    			for (let i = 0; i < listItems.length; i++) {
    				const listItem = listItems[i];

    				if ("undefined" === typeof listItem) {
    					if (debug) {
    						console.log(`listItem ${i} is undefined. Skipping.`);
    					}

    					continue;
    				}

    				if (debug) {
    					console.log("Item " + i + ": " + JSON.stringify(listItem));
    				}

    				if (selectedItem == listItem.item) {
    					$$invalidate(30, highlightIndex = i);

    					if (debug) {
    						console.log("Found selected item: " + i + ": " + JSON.stringify(listItem));
    					}

    					highlight();
    					break;
    				}
    			}
    		}
    	}

    	function open() {
    		if (debug) {
    			console.log("open");
    		}

    		// check if the search text has more than the min chars required
    		if (isMinCharsToSearchReached()) {
    			return;
    		}

    		$$invalidate(71, opened = true);
    	}

    	function close() {
    		if (debug) {
    			console.log("close");
    		}

    		$$invalidate(71, opened = false);
    		$$invalidate(29, loading = false);

    		if (!text && selectFirstIfEmpty) {
    			highlightFilter = 0;
    			selectItem();
    		}
    	}

    	function isMinCharsToSearchReached() {
    		return minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch;
    	}

    	function closeIfMinCharsToSearchReached() {
    		if (isMinCharsToSearchReached()) {
    			close();
    		}
    	}

    	function clear() {
    		if (debug) {
    			console.log("clear");
    		}

    		$$invalidate(3, text = "");
    		$$invalidate(1, selectedItem = undefined);

    		setTimeout(() => {
    			input.focus();
    			close();
    		});
    	}

    	function highlightFilter(keywords, fields) {
    		keywords = keywords.split(/\s+/g);

    		return item => {
    			const newItem = Object.assign({ highlighted: {} }, item);

    			if (fields) {
    				fields.forEach(field => {
    					if (newItem[field] && !newItem.highlighted[field]) {
    						newItem.highlighted[field] = newItem[field];
    					}

    					if (newItem.highlighted[field]) {
    						keywords.forEach(keyword => {
    							const reg = new RegExp("(" + keyword + ")", "ig");
    							newItem.highlighted[field] = newItem.highlighted[field].replace(reg, "<b>$1</b>");
    						});
    					}
    				});
    			}

    			return newItem;
    		};
    	}

    	// workaround for
    	// ValidationError: 'multiple' attribute cannot be dynamic if select uses two-way binding
    	function multipleAction(node) {
    		node.multiple = multiple;
    	}

    	function isConfirmed(listItem) {
    		if (!selectedItem) {
    			return false;
    		}

    		if (multiple) {
    			return selectedItem.includes(listItem);
    		} else {
    			return listItem == selectedItem;
    		}
    	}

    	const writable_props = [
    		'items',
    		'searchFunction',
    		'labelFieldName',
    		'keywordsFieldName',
    		'valueFieldName',
    		'labelFunction',
    		'keywordsFunction',
    		'valueFunction',
    		'keywordsCleanFunction',
    		'textCleanFunction',
    		'beforeChange',
    		'onChange',
    		'onFocus',
    		'onBlur',
    		'onCreate',
    		'selectFirstIfEmpty',
    		'minCharactersToSearch',
    		'maxItemsToShowInList',
    		'multiple',
    		'create',
    		'ignoreAccents',
    		'matchAllKeywords',
    		'sortByMatchedKeywords',
    		'lock',
    		'delay',
    		'localFiltering',
    		'hideArrow',
    		'showClear',
    		'showLoadingIndicator',
    		'noResultsText',
    		'loadingText',
    		'createText',
    		'placeholder',
    		'className',
    		'inputClassName',
    		'inputId',
    		'name',
    		'selectName',
    		'selectId',
    		'title',
    		'html5autocomplete',
    		'readonly',
    		'dropdownClassName',
    		'disabled',
    		'debug',
    		'selectedItem',
    		'value',
    		'theme',
    		'text'
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<SimpleAutoComplete> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		value = select_value(this);
    		$$invalidate(2, value);
    		$$invalidate(4, valueFunction);
    		$$invalidate(1, selectedItem);
    	}

    	const click_handler = tagItem => {
    		unselectItem(tagItem);
    	};

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(27, input);
    		});
    	}

    	function input_1_input_handler() {
    		text = this.value;
    		$$invalidate(3, text);
    	}

    	const click_handler_1 = listItem => onListItemClick(listItem);

    	const pointerenter_handler = i => {
    		$$invalidate(30, highlightIndex = i);
    	};

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			list = $$value;
    			$$invalidate(28, list);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('searchFunction' in $$props) $$invalidate(49, searchFunction = $$props.searchFunction);
    		if ('labelFieldName' in $$props) $$invalidate(50, labelFieldName = $$props.labelFieldName);
    		if ('keywordsFieldName' in $$props) $$invalidate(51, keywordsFieldName = $$props.keywordsFieldName);
    		if ('valueFieldName' in $$props) $$invalidate(52, valueFieldName = $$props.valueFieldName);
    		if ('labelFunction' in $$props) $$invalidate(53, labelFunction = $$props.labelFunction);
    		if ('keywordsFunction' in $$props) $$invalidate(54, keywordsFunction = $$props.keywordsFunction);
    		if ('valueFunction' in $$props) $$invalidate(4, valueFunction = $$props.valueFunction);
    		if ('keywordsCleanFunction' in $$props) $$invalidate(55, keywordsCleanFunction = $$props.keywordsCleanFunction);
    		if ('textCleanFunction' in $$props) $$invalidate(56, textCleanFunction = $$props.textCleanFunction);
    		if ('beforeChange' in $$props) $$invalidate(57, beforeChange = $$props.beforeChange);
    		if ('onChange' in $$props) $$invalidate(58, onChange = $$props.onChange);
    		if ('onFocus' in $$props) $$invalidate(59, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(60, onBlur = $$props.onBlur);
    		if ('onCreate' in $$props) $$invalidate(61, onCreate = $$props.onCreate);
    		if ('selectFirstIfEmpty' in $$props) $$invalidate(62, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
    		if ('minCharactersToSearch' in $$props) $$invalidate(63, minCharactersToSearch = $$props.minCharactersToSearch);
    		if ('maxItemsToShowInList' in $$props) $$invalidate(5, maxItemsToShowInList = $$props.maxItemsToShowInList);
    		if ('multiple' in $$props) $$invalidate(6, multiple = $$props.multiple);
    		if ('create' in $$props) $$invalidate(7, create = $$props.create);
    		if ('ignoreAccents' in $$props) $$invalidate(64, ignoreAccents = $$props.ignoreAccents);
    		if ('matchAllKeywords' in $$props) $$invalidate(65, matchAllKeywords = $$props.matchAllKeywords);
    		if ('sortByMatchedKeywords' in $$props) $$invalidate(66, sortByMatchedKeywords = $$props.sortByMatchedKeywords);
    		if ('lock' in $$props) $$invalidate(8, lock = $$props.lock);
    		if ('delay' in $$props) $$invalidate(67, delay = $$props.delay);
    		if ('localFiltering' in $$props) $$invalidate(68, localFiltering = $$props.localFiltering);
    		if ('hideArrow' in $$props) $$invalidate(9, hideArrow = $$props.hideArrow);
    		if ('showClear' in $$props) $$invalidate(69, showClear = $$props.showClear);
    		if ('showLoadingIndicator' in $$props) $$invalidate(10, showLoadingIndicator = $$props.showLoadingIndicator);
    		if ('noResultsText' in $$props) $$invalidate(11, noResultsText = $$props.noResultsText);
    		if ('loadingText' in $$props) $$invalidate(12, loadingText = $$props.loadingText);
    		if ('createText' in $$props) $$invalidate(13, createText = $$props.createText);
    		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$props.placeholder);
    		if ('className' in $$props) $$invalidate(15, className = $$props.className);
    		if ('inputClassName' in $$props) $$invalidate(16, inputClassName = $$props.inputClassName);
    		if ('inputId' in $$props) $$invalidate(17, inputId = $$props.inputId);
    		if ('name' in $$props) $$invalidate(18, name = $$props.name);
    		if ('selectName' in $$props) $$invalidate(19, selectName = $$props.selectName);
    		if ('selectId' in $$props) $$invalidate(20, selectId = $$props.selectId);
    		if ('title' in $$props) $$invalidate(21, title = $$props.title);
    		if ('html5autocomplete' in $$props) $$invalidate(22, html5autocomplete = $$props.html5autocomplete);
    		if ('readonly' in $$props) $$invalidate(23, readonly = $$props.readonly);
    		if ('dropdownClassName' in $$props) $$invalidate(24, dropdownClassName = $$props.dropdownClassName);
    		if ('disabled' in $$props) $$invalidate(25, disabled = $$props.disabled);
    		if ('debug' in $$props) $$invalidate(70, debug = $$props.debug);
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('theme' in $$props) $$invalidate(26, theme = $$props.theme);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('$$scope' in $$props) $$invalidate(73, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		items,
    		searchFunction,
    		labelFieldName,
    		keywordsFieldName,
    		valueFieldName,
    		labelFunction,
    		keywordsFunction,
    		valueFunction,
    		keywordsCleanFunction,
    		textCleanFunction,
    		beforeChange,
    		onChange,
    		onFocus,
    		onBlur,
    		onCreate,
    		selectFirstIfEmpty,
    		minCharactersToSearch,
    		maxItemsToShowInList,
    		multiple,
    		create,
    		ignoreAccents,
    		matchAllKeywords,
    		sortByMatchedKeywords,
    		lock,
    		delay,
    		localFiltering,
    		hideArrow,
    		showClear,
    		showLoadingIndicator,
    		noResultsText,
    		loadingText,
    		createText,
    		placeholder,
    		className,
    		inputClassName,
    		inputId,
    		name,
    		selectName,
    		selectId,
    		title,
    		html5autocomplete,
    		readonly,
    		dropdownClassName,
    		disabled,
    		debug,
    		selectedItem,
    		value,
    		theme,
    		uniqueId,
    		input,
    		list,
    		opened,
    		loading,
    		highlightIndex,
    		text,
    		filteredTextLength,
    		filteredListItems,
    		listItems,
    		lastRequestId,
    		lastResponseId,
    		inputDelayTimeout,
    		onSelectedItemChanged,
    		safeStringFunction,
    		safeLabelFunction,
    		safeKeywordsFunction,
    		prepareListItems,
    		getListItem,
    		prepareUserEnteredText,
    		numberOfMatches,
    		search,
    		processListItems,
    		selectListItem,
    		selectItem,
    		up,
    		down,
    		highlight,
    		onListItemClick,
    		onDocumentClick,
    		onKeyDown,
    		onKeyPress,
    		onEnter,
    		onInput,
    		unselectItem,
    		processInput,
    		onInputClick,
    		onEsc,
    		onBackspace,
    		onFocusInternal,
    		onBlurInternal,
    		resetListToAllItemsAndOpen,
    		open,
    		close,
    		isMinCharsToSearchReached,
    		closeIfMinCharsToSearchReached,
    		clear,
    		highlightFilter,
    		removeAccents,
    		multipleAction,
    		isConfirmed,
    		clearable,
    		showList
    	});

    	$$self.$inject_state = $$props => {
    		if ('items' in $$props) $$invalidate(0, items = $$props.items);
    		if ('searchFunction' in $$props) $$invalidate(49, searchFunction = $$props.searchFunction);
    		if ('labelFieldName' in $$props) $$invalidate(50, labelFieldName = $$props.labelFieldName);
    		if ('keywordsFieldName' in $$props) $$invalidate(51, keywordsFieldName = $$props.keywordsFieldName);
    		if ('valueFieldName' in $$props) $$invalidate(52, valueFieldName = $$props.valueFieldName);
    		if ('labelFunction' in $$props) $$invalidate(53, labelFunction = $$props.labelFunction);
    		if ('keywordsFunction' in $$props) $$invalidate(54, keywordsFunction = $$props.keywordsFunction);
    		if ('valueFunction' in $$props) $$invalidate(4, valueFunction = $$props.valueFunction);
    		if ('keywordsCleanFunction' in $$props) $$invalidate(55, keywordsCleanFunction = $$props.keywordsCleanFunction);
    		if ('textCleanFunction' in $$props) $$invalidate(56, textCleanFunction = $$props.textCleanFunction);
    		if ('beforeChange' in $$props) $$invalidate(57, beforeChange = $$props.beforeChange);
    		if ('onChange' in $$props) $$invalidate(58, onChange = $$props.onChange);
    		if ('onFocus' in $$props) $$invalidate(59, onFocus = $$props.onFocus);
    		if ('onBlur' in $$props) $$invalidate(60, onBlur = $$props.onBlur);
    		if ('onCreate' in $$props) $$invalidate(61, onCreate = $$props.onCreate);
    		if ('selectFirstIfEmpty' in $$props) $$invalidate(62, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
    		if ('minCharactersToSearch' in $$props) $$invalidate(63, minCharactersToSearch = $$props.minCharactersToSearch);
    		if ('maxItemsToShowInList' in $$props) $$invalidate(5, maxItemsToShowInList = $$props.maxItemsToShowInList);
    		if ('multiple' in $$props) $$invalidate(6, multiple = $$props.multiple);
    		if ('create' in $$props) $$invalidate(7, create = $$props.create);
    		if ('ignoreAccents' in $$props) $$invalidate(64, ignoreAccents = $$props.ignoreAccents);
    		if ('matchAllKeywords' in $$props) $$invalidate(65, matchAllKeywords = $$props.matchAllKeywords);
    		if ('sortByMatchedKeywords' in $$props) $$invalidate(66, sortByMatchedKeywords = $$props.sortByMatchedKeywords);
    		if ('lock' in $$props) $$invalidate(8, lock = $$props.lock);
    		if ('delay' in $$props) $$invalidate(67, delay = $$props.delay);
    		if ('localFiltering' in $$props) $$invalidate(68, localFiltering = $$props.localFiltering);
    		if ('hideArrow' in $$props) $$invalidate(9, hideArrow = $$props.hideArrow);
    		if ('showClear' in $$props) $$invalidate(69, showClear = $$props.showClear);
    		if ('showLoadingIndicator' in $$props) $$invalidate(10, showLoadingIndicator = $$props.showLoadingIndicator);
    		if ('noResultsText' in $$props) $$invalidate(11, noResultsText = $$props.noResultsText);
    		if ('loadingText' in $$props) $$invalidate(12, loadingText = $$props.loadingText);
    		if ('createText' in $$props) $$invalidate(13, createText = $$props.createText);
    		if ('placeholder' in $$props) $$invalidate(14, placeholder = $$props.placeholder);
    		if ('className' in $$props) $$invalidate(15, className = $$props.className);
    		if ('inputClassName' in $$props) $$invalidate(16, inputClassName = $$props.inputClassName);
    		if ('inputId' in $$props) $$invalidate(17, inputId = $$props.inputId);
    		if ('name' in $$props) $$invalidate(18, name = $$props.name);
    		if ('selectName' in $$props) $$invalidate(19, selectName = $$props.selectName);
    		if ('selectId' in $$props) $$invalidate(20, selectId = $$props.selectId);
    		if ('title' in $$props) $$invalidate(21, title = $$props.title);
    		if ('html5autocomplete' in $$props) $$invalidate(22, html5autocomplete = $$props.html5autocomplete);
    		if ('readonly' in $$props) $$invalidate(23, readonly = $$props.readonly);
    		if ('dropdownClassName' in $$props) $$invalidate(24, dropdownClassName = $$props.dropdownClassName);
    		if ('disabled' in $$props) $$invalidate(25, disabled = $$props.disabled);
    		if ('debug' in $$props) $$invalidate(70, debug = $$props.debug);
    		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
    		if ('value' in $$props) $$invalidate(2, value = $$props.value);
    		if ('theme' in $$props) $$invalidate(26, theme = $$props.theme);
    		if ('input' in $$props) $$invalidate(27, input = $$props.input);
    		if ('list' in $$props) $$invalidate(28, list = $$props.list);
    		if ('opened' in $$props) $$invalidate(71, opened = $$props.opened);
    		if ('loading' in $$props) $$invalidate(29, loading = $$props.loading);
    		if ('highlightIndex' in $$props) $$invalidate(30, highlightIndex = $$props.highlightIndex);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('filteredTextLength' in $$props) $$invalidate(72, filteredTextLength = $$props.filteredTextLength);
    		if ('filteredListItems' in $$props) $$invalidate(31, filteredListItems = $$props.filteredListItems);
    		if ('listItems' in $$props) listItems = $$props.listItems;
    		if ('lastRequestId' in $$props) lastRequestId = $$props.lastRequestId;
    		if ('lastResponseId' in $$props) lastResponseId = $$props.lastResponseId;
    		if ('inputDelayTimeout' in $$props) inputDelayTimeout = $$props.inputDelayTimeout;
    		if ('clearable' in $$props) $$invalidate(32, clearable = $$props.clearable);
    		if ('showList' in $$props) $$invalidate(33, showList = $$props.showList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*selectedItem*/ 2) {
    			(onSelectedItemChanged());
    		}

    		if ($$self.$$.dirty[0] & /*items*/ 1 | $$self.$$.dirty[2] & /*opened, filteredTextLength*/ 1536) {
    			$$invalidate(33, showList = opened && (items && items.length > 0 || filteredTextLength > 0));
    		}

    		if ($$self.$$.dirty[0] & /*lock, multiple, selectedItem*/ 322 | $$self.$$.dirty[2] & /*showClear*/ 128) {
    			$$invalidate(32, clearable = showClear || (lock || multiple) && selectedItem);
    		}

    		if ($$self.$$.dirty[0] & /*items*/ 1) {
    			(prepareListItems());
    		}
    	};

    	return [
    		items,
    		selectedItem,
    		value,
    		text,
    		valueFunction,
    		maxItemsToShowInList,
    		multiple,
    		create,
    		lock,
    		hideArrow,
    		showLoadingIndicator,
    		noResultsText,
    		loadingText,
    		createText,
    		placeholder,
    		className,
    		inputClassName,
    		inputId,
    		name,
    		selectName,
    		selectId,
    		title,
    		html5autocomplete,
    		readonly,
    		dropdownClassName,
    		disabled,
    		theme,
    		input,
    		list,
    		loading,
    		highlightIndex,
    		filteredListItems,
    		clearable,
    		showList,
    		uniqueId,
    		safeLabelFunction,
    		selectItem,
    		onListItemClick,
    		onDocumentClick,
    		onKeyDown,
    		onKeyPress,
    		onInput,
    		unselectItem,
    		onInputClick,
    		onFocusInternal,
    		onBlurInternal,
    		clear,
    		multipleAction,
    		isConfirmed,
    		searchFunction,
    		labelFieldName,
    		keywordsFieldName,
    		valueFieldName,
    		labelFunction,
    		keywordsFunction,
    		keywordsCleanFunction,
    		textCleanFunction,
    		beforeChange,
    		onChange,
    		onFocus,
    		onBlur,
    		onCreate,
    		selectFirstIfEmpty,
    		minCharactersToSearch,
    		ignoreAccents,
    		matchAllKeywords,
    		sortByMatchedKeywords,
    		delay,
    		localFiltering,
    		showClear,
    		debug,
    		opened,
    		filteredTextLength,
    		$$scope,
    		slots,
    		select_change_handler,
    		click_handler,
    		input_1_binding,
    		input_1_input_handler,
    		click_handler_1,
    		pointerenter_handler,
    		div1_binding
    	];
    }

    class SimpleAutoComplete extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$g,
    			create_fragment$g,
    			safe_not_equal,
    			{
    				items: 0,
    				searchFunction: 49,
    				labelFieldName: 50,
    				keywordsFieldName: 51,
    				valueFieldName: 52,
    				labelFunction: 53,
    				keywordsFunction: 54,
    				valueFunction: 4,
    				keywordsCleanFunction: 55,
    				textCleanFunction: 56,
    				beforeChange: 57,
    				onChange: 58,
    				onFocus: 59,
    				onBlur: 60,
    				onCreate: 61,
    				selectFirstIfEmpty: 62,
    				minCharactersToSearch: 63,
    				maxItemsToShowInList: 5,
    				multiple: 6,
    				create: 7,
    				ignoreAccents: 64,
    				matchAllKeywords: 65,
    				sortByMatchedKeywords: 66,
    				lock: 8,
    				delay: 67,
    				localFiltering: 68,
    				hideArrow: 9,
    				showClear: 69,
    				showLoadingIndicator: 10,
    				noResultsText: 11,
    				loadingText: 12,
    				createText: 13,
    				placeholder: 14,
    				className: 15,
    				inputClassName: 16,
    				inputId: 17,
    				name: 18,
    				selectName: 19,
    				selectId: 20,
    				title: 21,
    				html5autocomplete: 22,
    				readonly: 23,
    				dropdownClassName: 24,
    				disabled: 25,
    				debug: 70,
    				selectedItem: 1,
    				value: 2,
    				theme: 26,
    				text: 3
    			},
    			null,
    			[-1, -1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimpleAutoComplete",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*text*/ ctx[3] === undefined && !('text' in props)) {
    			console_1$1.warn("<SimpleAutoComplete> was created without expected prop 'text'");
    		}
    	}

    	get items() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set items(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchFunction() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchFunction(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFieldName() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFieldName(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywordsFieldName() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywordsFieldName(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valueFieldName() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valueFieldName(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelFunction() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelFunction(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywordsFunction() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywordsFunction(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valueFunction() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valueFunction(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get keywordsCleanFunction() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set keywordsCleanFunction(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textCleanFunction() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textCleanFunction(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get beforeChange() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set beforeChange(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onChange() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onChange(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onFocus() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onFocus(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onBlur() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onBlur(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCreate() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCreate(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectFirstIfEmpty() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectFirstIfEmpty(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get minCharactersToSearch() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set minCharactersToSearch(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxItemsToShowInList() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxItemsToShowInList(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get create() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set create(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ignoreAccents() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ignoreAccents(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get matchAllKeywords() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set matchAllKeywords(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sortByMatchedKeywords() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sortByMatchedKeywords(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lock() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lock(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get delay() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set delay(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get localFiltering() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set localFiltering(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideArrow() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideArrow(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showClear() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showClear(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showLoadingIndicator() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showLoadingIndicator(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noResultsText() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noResultsText(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get loadingText() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set loadingText(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get createText() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set createText(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputClassName() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputClassName(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inputId() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inputId(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectName() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectName(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectId() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectId(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get html5autocomplete() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set html5autocomplete(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dropdownClassName() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dropdownClassName(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get debug() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set debug(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedItem() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedItem(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get theme() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set theme(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<SimpleAutoComplete>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<SimpleAutoComplete>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const termscripts = writable([]);

    /* src/components/ScriptsEditor.svelte generated by Svelte v3.49.0 */
    const file$f = "src/components/ScriptsEditor.svelte";

    function create_fragment$f(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let label0;
    	let t1;
    	let simpleautocomplete;
    	let updating_selectedItem;
    	let t2;
    	let label1;
    	let t4;
    	let input0;
    	let t5;
    	let div1;
    	let label2;
    	let t7;
    	let input1;
    	let t8;
    	let label3;
    	let t10;
    	let input2;
    	let t11;
    	let codemirror;
    	let t12;
    	let div3;
    	let button0;
    	let t13;
    	let t14;
    	let button1;
    	let t15;
    	let t16;
    	let button2;
    	let t17;
    	let t18;
    	let button3;
    	let t19;
    	let t20;
    	let button4;
    	let t21;
    	let t22;
    	let button5;
    	let t23;
    	let current;
    	let mounted;
    	let dispose;

    	function simpleautocomplete_selectedItem_binding(value) {
    		/*simpleautocomplete_selectedItem_binding*/ ctx[21](value);
    	}

    	let simpleautocomplete_props = {
    		inputId: "scriptName",
    		items: /*list*/ ctx[7],
    		inputClassName: "scriptInput",
    		className: "scriptDiv",
    		create: "true",
    		theme: /*$theme*/ ctx[9],
    		onChange: /*changeName*/ ctx[19],
    		onCreate: /*func*/ ctx[20]
    	};

    	if (/*scriptSel*/ ctx[2] !== void 0) {
    		simpleautocomplete_props.selectedItem = /*scriptSel*/ ctx[2];
    	}

    	simpleautocomplete = new SimpleAutoComplete({
    			props: simpleautocomplete_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(simpleautocomplete, 'selectedItem', simpleautocomplete_selectedItem_binding));

    	codemirror = new CodeMirror({
    			props: {
    				height: "380px",
    				width: "980px",
    				config: /*editorConfig*/ ctx[10],
    				initFinished: /*initFinished*/ ctx[0]
    			},
    			$$inline: true
    		});

    	codemirror.$on("textChange", /*textChange_handler*/ ctx[25]);
    	codemirror.$on("editorChange", /*editorChange_handler*/ ctx[26]);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Name:";
    			t1 = space$3();
    			create_component(simpleautocomplete.$$.fragment);
    			t2 = space$3();
    			label1 = element("label");
    			label1.textContent = "Insert?";
    			t4 = space$3();
    			input0 = element("input");
    			t5 = space$3();
    			div1 = element("div");
    			label2 = element("label");
    			label2.textContent = "Description:";
    			t7 = space$3();
    			input1 = element("input");
    			t8 = space$3();
    			label3 = element("label");
    			label3.textContent = "Terminal Script?";
    			t10 = space$3();
    			input2 = element("input");
    			t11 = space$3();
    			create_component(codemirror.$$.fragment);
    			t12 = space$3();
    			div3 = element("div");
    			button0 = element("button");
    			t13 = text("Save Script");
    			t14 = space$3();
    			button1 = element("button");
    			t15 = text("Delete Script");
    			t16 = space$3();
    			button2 = element("button");
    			t17 = text("Notes");
    			t18 = space$3();
    			button3 = element("button");
    			t19 = text("Script Terminal");
    			t20 = space$3();
    			button4 = element("button");
    			t21 = text("Scripts Menu");
    			t22 = space$3();
    			button5 = element("button");
    			t23 = text("Templates Menu");
    			attr_dev(label0, "for", "scriptName");
    			attr_dev(label0, "class", "svelte-j1x0bs");
    			add_location(label0, file$f, 207, 6, 5218);
    			attr_dev(label1, "id", "insertChkLab");
    			attr_dev(label1, "for", "insertChk");
    			attr_dev(label1, "class", "svelte-j1x0bs");
    			add_location(label1, file$f, 226, 6, 5763);
    			attr_dev(input0, "id", "insertChk");
    			attr_dev(input0, "name", "insertChk");
    			attr_dev(input0, "type", "checkbox");
    			set_style(input0, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(input0, "color", /*$theme*/ ctx[9].textColor);
    			set_style(input0, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(input0, "class", "svelte-j1x0bs");
    			add_location(input0, file$f, 227, 6, 5828);
    			attr_dev(div0, "class", "headerRow svelte-j1x0bs");
    			add_location(div0, file$f, 206, 4, 5188);
    			attr_dev(label2, "for", "description");
    			attr_dev(label2, "class", "svelte-j1x0bs");
    			add_location(label2, file$f, 236, 6, 6112);
    			attr_dev(input1, "id", "description");
    			set_style(input1, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(input1, "color", /*$theme*/ ctx[9].textColor);
    			set_style(input1, "border-color", /*$theme*/ ctx[9].borderColor);
    			set_style(input1, "font-size", /*$theme*/ ctx[9].fontSize);
    			attr_dev(input1, "class", "svelte-j1x0bs");
    			add_location(input1, file$f, 237, 6, 6166);
    			attr_dev(label3, "id", "termScriptLab");
    			attr_dev(label3, "for", "termScriptChk");
    			attr_dev(label3, "class", "svelte-j1x0bs");
    			add_location(label3, file$f, 242, 6, 6396);
    			attr_dev(input2, "id", "termScriptChk");
    			attr_dev(input2, "name", "termScriptChk");
    			attr_dev(input2, "type", "checkbox");
    			set_style(input2, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(input2, "color", /*$theme*/ ctx[9].textColor);
    			set_style(input2, "border-color", /*$theme*/ ctx[9].borderColor);
    			set_style(input2, "font-size", /*$theme*/ ctx[9].fontSize);
    			attr_dev(input2, "class", "svelte-j1x0bs");
    			add_location(input2, file$f, 243, 6, 6475);
    			attr_dev(div1, "class", "headerRow svelte-j1x0bs");
    			add_location(div1, file$f, 235, 4, 6082);
    			attr_dev(div2, "id", "header");
    			attr_dev(div2, "class", "svelte-j1x0bs");
    			add_location(div2, file$f, 205, 2, 5166);
    			set_style(button0, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[9].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(button0, "class", "svelte-j1x0bs");
    			add_location(button0, file$f, 265, 4, 7060);
    			set_style(button1, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[9].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(button1, "class", "svelte-j1x0bs");
    			add_location(button1, file$f, 271, 4, 7257);
    			set_style(button2, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[9].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(button2, "class", "svelte-j1x0bs");
    			add_location(button2, file$f, 277, 4, 7458);
    			set_style(button3, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[9].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(button3, "class", "svelte-j1x0bs");
    			add_location(button3, file$f, 283, 4, 7648);
    			set_style(button4, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(button4, "color", /*$theme*/ ctx[9].textColor);
    			set_style(button4, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(button4, "class", "svelte-j1x0bs");
    			add_location(button4, file$f, 289, 4, 7853);
    			set_style(button5, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			set_style(button5, "color", /*$theme*/ ctx[9].textColor);
    			set_style(button5, "border-color", /*$theme*/ ctx[9].borderColor);
    			attr_dev(button5, "class", "svelte-j1x0bs");
    			add_location(button5, file$f, 295, 4, 8056);
    			attr_dev(div3, "id", "buttonRow");
    			attr_dev(div3, "class", "svelte-j1x0bs");
    			add_location(div3, file$f, 264, 2, 7035);
    			attr_dev(div4, "id", "scripts");
    			set_style(div4, "background-color", /*$theme*/ ctx[9].backgroundColor);
    			set_style(div4, "font-family", /*$theme*/ ctx[9].font);
    			set_style(div4, "color", /*$theme*/ ctx[9].textColor);
    			set_style(div4, "font-size", /*$theme*/ ctx[9].fontSize);
    			attr_dev(div4, "class", "svelte-j1x0bs");
    			add_location(div4, file$f, 201, 0, 5003);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			mount_component(simpleautocomplete, div0, null);
    			append_dev(div0, t2);
    			append_dev(div0, label1);
    			append_dev(div0, t4);
    			append_dev(div0, input0);
    			input0.checked = /*insert*/ ctx[5];
    			append_dev(div2, t5);
    			append_dev(div2, div1);
    			append_dev(div1, label2);
    			append_dev(div1, t7);
    			append_dev(div1, input1);
    			set_input_value(input1, /*description*/ ctx[4]);
    			append_dev(div1, t8);
    			append_dev(div1, label3);
    			append_dev(div1, t10);
    			append_dev(div1, input2);
    			input2.checked = /*termscript*/ ctx[6];
    			append_dev(div4, t11);
    			mount_component(codemirror, div4, null);
    			append_dev(div4, t12);
    			append_dev(div4, div3);
    			append_dev(div3, button0);
    			append_dev(button0, t13);
    			append_dev(div3, t14);
    			append_dev(div3, button1);
    			append_dev(button1, t15);
    			append_dev(div3, t16);
    			append_dev(div3, button2);
    			append_dev(button2, t17);
    			append_dev(div3, t18);
    			append_dev(div3, button3);
    			append_dev(button3, t19);
    			append_dev(div3, t20);
    			append_dev(div3, button4);
    			append_dev(button4, t21);
    			append_dev(div3, t22);
    			append_dev(div3, button5);
    			append_dev(button5, t23);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[22]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[23]),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[24]),
    					listen_dev(button0, "click", /*saveScript*/ ctx[11], false, false, false),
    					listen_dev(button1, "click", /*deleteScript*/ ctx[12], false, false, false),
    					listen_dev(button2, "click", /*viewNotes*/ ctx[15], false, false, false),
    					listen_dev(button3, "click", /*viewScriptTerm*/ ctx[18], false, false, false),
    					listen_dev(button4, "click", /*viewScriptsMenu*/ ctx[16], false, false, false),
    					listen_dev(button5, "click", /*viewTemplateMenu*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const simpleautocomplete_changes = {};
    			if (dirty[0] & /*list*/ 128) simpleautocomplete_changes.items = /*list*/ ctx[7];
    			if (dirty[0] & /*$theme*/ 512) simpleautocomplete_changes.theme = /*$theme*/ ctx[9];
    			if (dirty[0] & /*scriptName, description, script, $scriptEditor*/ 282) simpleautocomplete_changes.onCreate = /*func*/ ctx[20];

    			if (!updating_selectedItem && dirty[0] & /*scriptSel*/ 4) {
    				updating_selectedItem = true;
    				simpleautocomplete_changes.selectedItem = /*scriptSel*/ ctx[2];
    				add_flush_callback(() => updating_selectedItem = false);
    			}

    			simpleautocomplete.$set(simpleautocomplete_changes);

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input0, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input0, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input0, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (dirty[0] & /*insert*/ 32) {
    				input0.checked = /*insert*/ ctx[5];
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input1, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input1, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input1, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input1, "font-size", /*$theme*/ ctx[9].fontSize);
    			}

    			if (dirty[0] & /*description*/ 16 && input1.value !== /*description*/ ctx[4]) {
    				set_input_value(input1, /*description*/ ctx[4]);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input2, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input2, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input2, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(input2, "font-size", /*$theme*/ ctx[9].fontSize);
    			}

    			if (dirty[0] & /*termscript*/ 64) {
    				input2.checked = /*termscript*/ ctx[6];
    			}

    			const codemirror_changes = {};
    			if (dirty[0] & /*initFinished*/ 1) codemirror_changes.initFinished = /*initFinished*/ ctx[0];
    			codemirror.$set(codemirror_changes);

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button0, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button0, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button0, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button1, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button1, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button1, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button2, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button2, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button2, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button3, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button3, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button3, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button4, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button4, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button4, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button5, "background-color", /*$theme*/ ctx[9].textAreaColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button5, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(button5, "border-color", /*$theme*/ ctx[9].borderColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(div4, "background-color", /*$theme*/ ctx[9].backgroundColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(div4, "font-family", /*$theme*/ ctx[9].font);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(div4, "color", /*$theme*/ ctx[9].textColor);
    			}

    			if (!current || dirty[0] & /*$theme*/ 512) {
    				set_style(div4, "font-size", /*$theme*/ ctx[9].fontSize);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(simpleautocomplete.$$.fragment, local);
    			transition_in(codemirror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simpleautocomplete.$$.fragment, local);
    			transition_out(codemirror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(simpleautocomplete);
    			destroy_component(codemirror);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let $state;
    	let $showTemplates;
    	let $showScripts;
    	let $scriptEditor;
    	let $termscripts;
    	let $scripts;
    	let $theme;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(27, $state = $$value));
    	validate_store(showTemplates, 'showTemplates');
    	component_subscribe($$self, showTemplates, $$value => $$invalidate(28, $showTemplates = $$value));
    	validate_store(showScripts, 'showScripts');
    	component_subscribe($$self, showScripts, $$value => $$invalidate(29, $showScripts = $$value));
    	validate_store(scriptEditor, 'scriptEditor');
    	component_subscribe($$self, scriptEditor, $$value => $$invalidate(8, $scriptEditor = $$value));
    	validate_store(termscripts, 'termscripts');
    	component_subscribe($$self, termscripts, $$value => $$invalidate(30, $termscripts = $$value));
    	validate_store(scripts, 'scripts');
    	component_subscribe($$self, scripts, $$value => $$invalidate(31, $scripts = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(9, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScriptsEditor', slots, []);

    	let editorConfig = {
    		language: "javascript",
    		lineNumbers: true,
    		lineWrapping: true,
    		lineHighlight: true
    	};

    	let initFinished = false;
    	let script;
    	let scriptSel = "";
    	let scriptName = "";
    	let description = "";
    	let insert = false;
    	let termscript = false;
    	let list;

    	onMount(() => {
    		//
    		// Load everything for working with the scripts
    		//
    		getUserScripts(() => {
    			
    		});

    		$$invalidate(0, initFinished = true);
    	});

    	function getUserScripts(callback) {
    		fetch("http://localhost:9978/api/scripts/user", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			$$invalidate(7, list = data.scripts.sort());
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function getScript(name, callback) {
    		if (name !== undefined && name !== "") {
    			fetch(`http://localhost:9978/api/scripts/${name}`, {
    				method: "GET",
    				headers: { "Content-type": "application/json" }
    			}).then(resp => {
    				return resp.json();
    			}).then(data => {
    				$$invalidate(3, scriptName = data.script.name);
    				$$invalidate(1, script = data.script.script);
    				$$invalidate(4, description = data.script.description);
    				$$invalidate(5, insert = data.script.insert == "true" ? true : false);

    				if (typeof data.script.termscript === "undefined") {
    					$$invalidate(6, termscript = false);
    				} else {
    					$$invalidate(6, termscript = data.script.termscript);
    				}

    				$scriptEditor.setValue(script);
    				if (typeof callback !== "undefined") callback();
    			});
    		}
    	}

    	function saveScript() {
    		if (scriptName !== undefined && scriptName !== "") {
    			fetch(`http://localhost:9978/api/scripts/${scriptName}`, {
    				method: "PUT",
    				headers: { "Content-type": "application/json" },
    				body: JSON.stringify({
    					script: {
    						name: scriptName,
    						insert,
    						description,
    						script,
    						termscript,
    						help: description
    					}
    				})
    			}).then(() => {
    				$$invalidate(2, scriptSel = "");
    				$$invalidate(3, scriptName = "");
    				$$invalidate(5, insert = false);
    				$$invalidate(4, description = "");
    				$$invalidate(1, script = "");
    				$$invalidate(6, termscript = false);
    				$scriptEditor.setValue(script);
    				getScriptsList();
    				getUserScripts();
    				getTermScriptsList();
    			});
    		}
    	}

    	function getScriptsList(callback) {
    		fetch("http://localhost:9978/api/scripts/list", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(scripts, $scripts = data.data, $scripts);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function getTermScriptsList(callback) {
    		fetch("http://localhost:9978/api/scripts/term/list", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(termscripts, $termscripts = data.data, $termscripts);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function deleteScript() {
    		if (scriptName !== undefined && scriptName !== "") {
    			fetch(`http://localhost:9978/api/scripts/${scriptName}`, {
    				method: "DELETE",
    				headers: { "Content-type": "application/json" }
    			}).then(() => {
    				$$invalidate(3, scriptName = "");
    				$$invalidate(2, scriptSel = "");
    				$$invalidate(5, insert = true);
    				$$invalidate(4, description = "");
    				$$invalidate(1, script = "");
    				$scriptEditor.setValue(script);
    				getScriptsList();
    				getUserScripts();
    				getTermScriptsList();
    			});
    		}
    	}

    	function editorChange(e) {
    		set_store_value(scriptEditor, $scriptEditor = e, $scriptEditor);
    	}

    	function textChanged(textCursor) {
    		$$invalidate(1, script = textCursor.value);
    	}

    	function focus() {
    		if ($scriptEditor !== null) {
    			$scriptEditor.focus();
    		}
    	}

    	function viewNotes() {
    		set_store_value(state, $state = "notes", $state);
    	}

    	function viewScriptsMenu() {
    		set_store_value(showScripts, $showScripts = !$showScripts, $showScripts);
    	}

    	function viewTemplateMenu() {
    		set_store_value(showTemplates, $showTemplates = !$showTemplates, $showTemplates);
    	}

    	function viewScriptTerm() {
    		set_store_value(state, $state = "scriptterm", $state);
    	}

    	function changeName(newName) {
    		if (newName !== undefined && newName !== "") {
    			$$invalidate(3, scriptName = newName);
    			getScript(scriptName);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScriptsEditor> was created with unknown prop '${key}'`);
    	});

    	const func = name => {
    		if (name !== undefined && name !== "") {
    			$$invalidate(3, scriptName = name);
    			$$invalidate(4, description = "");
    			$$invalidate(1, script = "");
    			$scriptEditor.setValue(script);
    		}
    	};

    	function simpleautocomplete_selectedItem_binding(value) {
    		scriptSel = value;
    		$$invalidate(2, scriptSel);
    	}

    	function input0_change_handler() {
    		insert = this.checked;
    		$$invalidate(5, insert);
    	}

    	function input1_input_handler() {
    		description = this.value;
    		$$invalidate(4, description);
    	}

    	function input2_change_handler() {
    		termscript = this.checked;
    		$$invalidate(6, termscript);
    	}

    	const textChange_handler = event => {
    		textChanged(event.detail.data);
    	};

    	const editorChange_handler = event => {
    		editorChange(event.detail.data);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		CodeMirror,
    		SimpleAutoComplete,
    		state,
    		theme,
    		showScripts,
    		showTemplates,
    		scriptEditor,
    		scripts,
    		termscripts,
    		editorConfig,
    		initFinished,
    		script,
    		scriptSel,
    		scriptName,
    		description,
    		insert,
    		termscript,
    		list,
    		getUserScripts,
    		getScript,
    		saveScript,
    		getScriptsList,
    		getTermScriptsList,
    		deleteScript,
    		editorChange,
    		textChanged,
    		focus,
    		viewNotes,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		viewScriptTerm,
    		changeName,
    		$state,
    		$showTemplates,
    		$showScripts,
    		$scriptEditor,
    		$termscripts,
    		$scripts,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('editorConfig' in $$props) $$invalidate(10, editorConfig = $$props.editorConfig);
    		if ('initFinished' in $$props) $$invalidate(0, initFinished = $$props.initFinished);
    		if ('script' in $$props) $$invalidate(1, script = $$props.script);
    		if ('scriptSel' in $$props) $$invalidate(2, scriptSel = $$props.scriptSel);
    		if ('scriptName' in $$props) $$invalidate(3, scriptName = $$props.scriptName);
    		if ('description' in $$props) $$invalidate(4, description = $$props.description);
    		if ('insert' in $$props) $$invalidate(5, insert = $$props.insert);
    		if ('termscript' in $$props) $$invalidate(6, termscript = $$props.termscript);
    		if ('list' in $$props) $$invalidate(7, list = $$props.list);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		initFinished,
    		script,
    		scriptSel,
    		scriptName,
    		description,
    		insert,
    		termscript,
    		list,
    		$scriptEditor,
    		$theme,
    		editorConfig,
    		saveScript,
    		deleteScript,
    		editorChange,
    		textChanged,
    		viewNotes,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		viewScriptTerm,
    		changeName,
    		func,
    		simpleautocomplete_selectedItem_binding,
    		input0_change_handler,
    		input1_input_handler,
    		input2_change_handler,
    		textChange_handler,
    		editorChange_handler
    	];
    }

    class ScriptsEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScriptsEditor",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src/components/TemplatesEditor.svelte generated by Svelte v3.49.0 */
    const file$e = "src/components/TemplatesEditor.svelte";

    // (219:4) {#if templateName !== "Defaults"}
    function create_if_block$a(ctx) {
    	let button;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("Delete Template");
    			set_style(button, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[7].textColor);
    			set_style(button, "border-color", /*$theme*/ ctx[7].borderColor);
    			attr_dev(button, "class", "svelte-2ihs3u");
    			add_location(button, file$e, 219, 6, 5690);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*deleteTemplate*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 128) {
    				set_style(button, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 128) {
    				set_style(button, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (dirty & /*$theme*/ 128) {
    				set_style(button, "border-color", /*$theme*/ ctx[7].borderColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(219:4) {#if templateName !== \\\"Defaults\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let label0;
    	let t1;
    	let simpleautocomplete;
    	let updating_selectedItem;
    	let t2;
    	let div1;
    	let label1;
    	let t4;
    	let input;
    	let t5;
    	let codemirror;
    	let t6;
    	let div3;
    	let button0;
    	let t7;
    	let t8;
    	let t9;
    	let button1;
    	let t10;
    	let t11;
    	let button2;
    	let t12;
    	let t13;
    	let button3;
    	let t14;
    	let current;
    	let mounted;
    	let dispose;

    	function simpleautocomplete_selectedItem_binding(value) {
    		/*simpleautocomplete_selectedItem_binding*/ ctx[18](value);
    	}

    	let simpleautocomplete_props = {
    		inputId: "templateName",
    		items: /*list*/ ctx[5],
    		inputClassName: "templateInput",
    		className: "templateDiv",
    		create: "true",
    		theme: /*$theme*/ ctx[7],
    		onChange: /*nameChange*/ ctx[16],
    		onCreate: /*func*/ ctx[17]
    	};

    	if (/*templateSel*/ ctx[4] !== void 0) {
    		simpleautocomplete_props.selectedItem = /*templateSel*/ ctx[4];
    	}

    	simpleautocomplete = new SimpleAutoComplete({
    			props: simpleautocomplete_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(simpleautocomplete, 'selectedItem', simpleautocomplete_selectedItem_binding));

    	codemirror = new CodeMirror({
    			props: {
    				height: "375px",
    				width: "980px",
    				config: /*editorConfig*/ ctx[8],
    				initFinished: /*initFinished*/ ctx[0]
    			},
    			$$inline: true
    		});

    	codemirror.$on("textChange", /*textChange_handler*/ ctx[20]);
    	codemirror.$on("editorChange", /*editorChange_handler*/ ctx[21]);
    	let if_block = /*templateName*/ ctx[3] !== "Defaults" && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Name:";
    			t1 = space$3();
    			create_component(simpleautocomplete.$$.fragment);
    			t2 = space$3();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Description:";
    			t4 = space$3();
    			input = element("input");
    			t5 = space$3();
    			create_component(codemirror.$$.fragment);
    			t6 = space$3();
    			div3 = element("div");
    			button0 = element("button");
    			t7 = text("Save Template");
    			t8 = space$3();
    			if (if_block) if_block.c();
    			t9 = space$3();
    			button1 = element("button");
    			t10 = text("Notes");
    			t11 = space$3();
    			button2 = element("button");
    			t12 = text("Scripts Menu");
    			t13 = space$3();
    			button3 = element("button");
    			t14 = text("Templates Menu");
    			attr_dev(label0, "for", "templateName");
    			attr_dev(label0, "class", "svelte-2ihs3u");
    			add_location(label0, file$e, 170, 6, 4292);
    			attr_dev(div0, "class", "headerRow svelte-2ihs3u");
    			add_location(div0, file$e, 169, 4, 4262);
    			attr_dev(label1, "for", "description");
    			attr_dev(label1, "class", "svelte-2ihs3u");
    			add_location(label1, file$e, 191, 6, 4887);
    			attr_dev(input, "id", "description");
    			set_style(input, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			set_style(input, "color", /*$theme*/ ctx[7].textColor);
    			set_style(input, "border-color", /*$theme*/ ctx[7].borderColor);
    			attr_dev(input, "class", "svelte-2ihs3u");
    			add_location(input, file$e, 192, 6, 4941);
    			attr_dev(div1, "class", "headerRow svelte-2ihs3u");
    			add_location(div1, file$e, 190, 4, 4857);
    			attr_dev(div2, "id", "header");
    			attr_dev(div2, "class", "svelte-2ihs3u");
    			add_location(div2, file$e, 168, 2, 4240);
    			set_style(button0, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[7].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[7].borderColor);
    			attr_dev(button0, "class", "svelte-2ihs3u");
    			add_location(button0, file$e, 212, 4, 5449);
    			set_style(button1, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[7].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[7].borderColor);
    			attr_dev(button1, "class", "svelte-2ihs3u");
    			add_location(button1, file$e, 226, 4, 5915);
    			set_style(button2, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[7].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[7].borderColor);
    			attr_dev(button2, "class", "svelte-2ihs3u");
    			add_location(button2, file$e, 232, 4, 6105);
    			set_style(button3, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[7].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[7].borderColor);
    			attr_dev(button3, "class", "svelte-2ihs3u");
    			add_location(button3, file$e, 238, 4, 6308);
    			attr_dev(div3, "id", "buttonRow");
    			attr_dev(div3, "class", "svelte-2ihs3u");
    			add_location(div3, file$e, 211, 2, 5424);
    			attr_dev(div4, "id", "templates");
    			set_style(div4, "background-color", /*$theme*/ ctx[7].backgroundColor);
    			set_style(div4, "font-family", /*$theme*/ ctx[7].font);
    			set_style(div4, "color", /*$theme*/ ctx[7].textColor);
    			set_style(div4, "font-size", /*$theme*/ ctx[7].fontSize);
    			attr_dev(div4, "class", "svelte-2ihs3u");
    			add_location(div4, file$e, 164, 0, 4075);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			mount_component(simpleautocomplete, div0, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t4);
    			append_dev(div1, input);
    			set_input_value(input, /*templateDescription*/ ctx[2]);
    			append_dev(div4, t5);
    			mount_component(codemirror, div4, null);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, button0);
    			append_dev(button0, t7);
    			append_dev(div3, t8);
    			if (if_block) if_block.m(div3, null);
    			append_dev(div3, t9);
    			append_dev(div3, button1);
    			append_dev(button1, t10);
    			append_dev(div3, t11);
    			append_dev(div3, button2);
    			append_dev(button2, t12);
    			append_dev(div3, t13);
    			append_dev(div3, button3);
    			append_dev(button3, t14);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[19]),
    					listen_dev(button0, "click", /*saveTemplate*/ ctx[9], false, false, false),
    					listen_dev(button1, "click", /*viewNotes*/ ctx[13], false, false, false),
    					listen_dev(button2, "click", /*viewScriptsMenu*/ ctx[14], false, false, false),
    					listen_dev(button3, "click", /*viewTemplateMenu*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const simpleautocomplete_changes = {};
    			if (dirty & /*list*/ 32) simpleautocomplete_changes.items = /*list*/ ctx[5];
    			if (dirty & /*$theme*/ 128) simpleautocomplete_changes.theme = /*$theme*/ ctx[7];
    			if (dirty & /*templateName, templateDescription, template, $templateEditor*/ 78) simpleautocomplete_changes.onCreate = /*func*/ ctx[17];

    			if (!updating_selectedItem && dirty & /*templateSel*/ 16) {
    				updating_selectedItem = true;
    				simpleautocomplete_changes.selectedItem = /*templateSel*/ ctx[4];
    				add_flush_callback(() => updating_selectedItem = false);
    			}

    			simpleautocomplete.$set(simpleautocomplete_changes);

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(input, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(input, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(input, "border-color", /*$theme*/ ctx[7].borderColor);
    			}

    			if (dirty & /*templateDescription*/ 4 && input.value !== /*templateDescription*/ ctx[2]) {
    				set_input_value(input, /*templateDescription*/ ctx[2]);
    			}

    			const codemirror_changes = {};
    			if (dirty & /*initFinished*/ 1) codemirror_changes.initFinished = /*initFinished*/ ctx[0];
    			codemirror.$set(codemirror_changes);

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button0, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button0, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button0, "border-color", /*$theme*/ ctx[7].borderColor);
    			}

    			if (/*templateName*/ ctx[3] !== "Defaults") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					if_block.m(div3, t9);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button1, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button1, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button1, "border-color", /*$theme*/ ctx[7].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button2, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button2, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button2, "border-color", /*$theme*/ ctx[7].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button3, "background-color", /*$theme*/ ctx[7].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button3, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(button3, "border-color", /*$theme*/ ctx[7].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(div4, "background-color", /*$theme*/ ctx[7].backgroundColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(div4, "font-family", /*$theme*/ ctx[7].font);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(div4, "color", /*$theme*/ ctx[7].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 128) {
    				set_style(div4, "font-size", /*$theme*/ ctx[7].fontSize);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(simpleautocomplete.$$.fragment, local);
    			transition_in(codemirror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simpleautocomplete.$$.fragment, local);
    			transition_out(codemirror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(simpleautocomplete);
    			destroy_component(codemirror);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let $showTemplates;
    	let $showScripts;
    	let $state;
    	let $templateEditor;
    	let $templates;
    	let $theme;
    	validate_store(showTemplates, 'showTemplates');
    	component_subscribe($$self, showTemplates, $$value => $$invalidate(22, $showTemplates = $$value));
    	validate_store(showScripts, 'showScripts');
    	component_subscribe($$self, showScripts, $$value => $$invalidate(23, $showScripts = $$value));
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(24, $state = $$value));
    	validate_store(templateEditor, 'templateEditor');
    	component_subscribe($$self, templateEditor, $$value => $$invalidate(6, $templateEditor = $$value));
    	validate_store(templates, 'templates');
    	component_subscribe($$self, templates, $$value => $$invalidate(25, $templates = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(7, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TemplatesEditor', slots, []);

    	let editorConfig = {
    		language: "javascript",
    		lineNumbers: true,
    		lineWrapping: true,
    		lineHighlight: true
    	};

    	let initFinished = false;
    	let template = "";
    	let templateDescription = "";
    	let templateName = "";
    	let templateSel;
    	let list;

    	onMount(() => {
    		//
    		// Load everything for working with the notes:
    		//
    		getUserTemplates(() => {
    			$$invalidate(0, initFinished = true);
    		});
    	});

    	function getUserTemplates(callback) {
    		fetch("http://localhost:9978/api/template/user", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			$$invalidate(5, list = data.templates.sort());
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function getTemplate(name, callback) {
    		if (name !== undefined && name !== "") {
    			fetch(`http://localhost:9978/api/template/${name}`, {
    				method: "GET",
    				headers: { "Content-type": "application/json" }
    			}).then(resp => {
    				return resp.json();
    			}).then(data => {
    				$$invalidate(1, template = data.text.template);
    				$templateEditor.setValue(template);
    				$$invalidate(2, templateDescription = data.text.description);
    				if (typeof callback !== "undefined") callback();
    			});
    		}
    	}

    	function saveTemplate() {
    		if (templateName !== undefined && templateName !== "") {
    			fetch(`http://localhost:9978/api/template/${templateName}`, {
    				method: "PUT",
    				headers: { "Content-type": "application/json" },
    				body: JSON.stringify({
    					template: {
    						name: templateName,
    						description: templateDescription,
    						template
    					}
    				})
    			}).then(() => {
    				$$invalidate(1, template = "");
    				$$invalidate(3, templateName = "");
    				$$invalidate(2, templateDescription = "");
    				$$invalidate(4, templateSel = "");
    				$templateEditor.setValue(template);
    				getTemplatesList();
    				getUserTemplates();
    			});
    		}
    	}

    	function getTemplatesList(callback) {
    		fetch("http://localhost:9978/api/template/list", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(templates, $templates = data.templates, $templates);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function deleteTemplate() {
    		if (templateName !== undefined && templateName !== "") {
    			fetch(`http://localhost:9978/api/template/${templateName}`, {
    				method: "DELETE",
    				headers: { "Content-type": "application/json" }
    			}).then(() => {
    				$$invalidate(1, template = "");
    				$$invalidate(3, templateName = "");
    				$$invalidate(2, templateDescription = "");
    				$$invalidate(4, templateSel = "");
    				$templateEditor.setValue(template);
    				getTemplatesList();
    				getUserTemplates();
    			});
    		}
    	}

    	function editorChange(e) {
    		set_store_value(templateEditor, $templateEditor = e, $templateEditor);
    	}

    	function textChanged(textCursor) {
    		$$invalidate(1, template = textCursor.value);
    	}

    	function focus() {
    		if ($templateEditor !== null) {
    			$templateEditor.focus();
    		}
    	}

    	function viewNotes() {
    		set_store_value(state, $state = "notes", $state);
    	}

    	function viewScriptsMenu() {
    		set_store_value(showScripts, $showScripts = !$showScripts, $showScripts);
    	}

    	function viewTemplateMenu() {
    		set_store_value(showTemplates, $showTemplates = !$showTemplates, $showTemplates);
    	}

    	function nameChange(newname) {
    		if (newname !== undefined) {
    			$$invalidate(3, templateName = newname);
    			getTemplate(templateName);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TemplatesEditor> was created with unknown prop '${key}'`);
    	});

    	const func = name => {
    		if (name !== undefined) {
    			$$invalidate(3, templateName = name);
    			$$invalidate(2, templateDescription = "");
    			$$invalidate(1, template = "");
    			$templateEditor.setValue(template);
    		}
    	};

    	function simpleautocomplete_selectedItem_binding(value) {
    		templateSel = value;
    		$$invalidate(4, templateSel);
    	}

    	function input_input_handler() {
    		templateDescription = this.value;
    		$$invalidate(2, templateDescription);
    	}

    	const textChange_handler = event => {
    		textChanged(event.detail.data);
    	};

    	const editorChange_handler = event => {
    		editorChange(event.detail.data);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		tick,
    		CodeMirror,
    		SimpleAutoComplete,
    		state,
    		theme,
    		showScripts,
    		showTemplates,
    		templates,
    		templateEditor,
    		editorConfig,
    		initFinished,
    		template,
    		templateDescription,
    		templateName,
    		templateSel,
    		list,
    		getUserTemplates,
    		getTemplate,
    		saveTemplate,
    		getTemplatesList,
    		deleteTemplate,
    		editorChange,
    		textChanged,
    		focus,
    		viewNotes,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		nameChange,
    		$showTemplates,
    		$showScripts,
    		$state,
    		$templateEditor,
    		$templates,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('editorConfig' in $$props) $$invalidate(8, editorConfig = $$props.editorConfig);
    		if ('initFinished' in $$props) $$invalidate(0, initFinished = $$props.initFinished);
    		if ('template' in $$props) $$invalidate(1, template = $$props.template);
    		if ('templateDescription' in $$props) $$invalidate(2, templateDescription = $$props.templateDescription);
    		if ('templateName' in $$props) $$invalidate(3, templateName = $$props.templateName);
    		if ('templateSel' in $$props) $$invalidate(4, templateSel = $$props.templateSel);
    		if ('list' in $$props) $$invalidate(5, list = $$props.list);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		initFinished,
    		template,
    		templateDescription,
    		templateName,
    		templateSel,
    		list,
    		$templateEditor,
    		$theme,
    		editorConfig,
    		saveTemplate,
    		deleteTemplate,
    		editorChange,
    		textChanged,
    		viewNotes,
    		viewScriptsMenu,
    		viewTemplateMenu,
    		nameChange,
    		func,
    		simpleautocomplete_selectedItem_binding,
    		input_input_handler,
    		textChange_handler,
    		editorChange_handler
    	];
    }

    class TemplatesEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TemplatesEditor",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    /* src/components/PrefNodeRed.svelte generated by Svelte v3.49.0 */
    const file$d = "src/components/PrefNodeRed.svelte";

    function create_fragment$d(ctx) {
    	let div2;
    	let div0;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let div1;
    	let label1;
    	let t4;
    	let input1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Auto Launch Node-Red?";
    			t1 = space$3();
    			input0 = element("input");
    			t2 = space$3();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Dashboard configured?";
    			t4 = space$3();
    			input1 = element("input");
    			attr_dev(label0, "class", "styleLabel svelte-n1ihpd");
    			add_location(label0, file$d, 2, 4, 44);
    			attr_dev(input0, "class", "PrefCheck svelte-n1ihpd");
    			attr_dev(input0, "type", "checkbox");
    			add_location(input0, file$d, 3, 4, 104);
    			attr_dev(div0, "class", "labelRadialHolder svelte-n1ihpd");
    			add_location(div0, file$d, 1, 2, 8);
    			attr_dev(label1, "class", "styleLabel svelte-n1ihpd");
    			add_location(label1, file$d, 10, 4, 307);
    			attr_dev(input1, "class", "PrefCheck svelte-n1ihpd");
    			attr_dev(input1, "type", "checkbox");
    			add_location(input1, file$d, 11, 4, 367);
    			attr_dev(div1, "class", "labelRadialHolder svelte-n1ihpd");
    			add_location(div1, file$d, 9, 2, 271);
    			add_location(div2, file$d, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			input0.checked = /*preferences*/ ctx[0].REDAuto;
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			input1.checked = /*preferences*/ ctx[0].REDDashboard;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[2]),
    					listen_dev(input0, "change", /*change_handler*/ ctx[3], false, false, false),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[4]),
    					listen_dev(input1, "change", /*change_handler_1*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*preferences*/ 1) {
    				input0.checked = /*preferences*/ ctx[0].REDAuto;
    			}

    			if (dirty & /*preferences*/ 1) {
    				input1.checked = /*preferences*/ ctx[0].REDDashboard;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PrefNodeRed', slots, []);
    	const dispatch = createEventDispatcher();
    	var preferences = { REDAuto: true, REDDashboard: true };

    	function fire(name, data) {
    		dispatch(name, { data });
    	}

    	function changeFire() {
    		fire('changeTodos', {
    			auto: preferences.REDAuto,
    			dashboard: preferences.REDDashboard
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PrefNodeRed> was created with unknown prop '${key}'`);
    	});

    	function input0_change_handler() {
    		preferences.REDAuto = this.checked;
    		$$invalidate(0, preferences);
    	}

    	const change_handler = () => {
    		changeFire();
    	};

    	function input1_change_handler() {
    		preferences.REDDashboard = this.checked;
    		$$invalidate(0, preferences);
    	}

    	const change_handler_1 = () => {
    		changeFire();
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		dispatch,
    		preferences,
    		fire,
    		changeFire
    	});

    	$$self.$inject_state = $$props => {
    		if ('preferences' in $$props) $$invalidate(0, preferences = $$props.preferences);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		preferences,
    		changeFire,
    		input0_change_handler,
    		change_handler,
    		input1_change_handler,
    		change_handler_1
    	];
    }

    class PrefNodeRed extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PrefNodeRed",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src/components/GenPrefs.svelte generated by Svelte v3.49.0 */
    const file$c = "src/components/GenPrefs.svelte";

    function create_fragment$c(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			set_style(div, "background-color", /*$theme*/ ctx[0].backgroundColor);
    			add_location(div, file$c, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$theme*/ 1) {
    				set_style(div, "background-color", /*$theme*/ ctx[0].backgroundColor);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(0, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('GenPrefs', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<GenPrefs> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ theme, $theme });
    	return [$theme];
    }

    class GenPrefs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GenPrefs",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /**
     * @category  html5 widgets
     * @package   Kelly
     * @author    Rubchuk Vladimir <torrenttvi@gmail.com>
     * @copyright 2015-2017 Rubchuk Vladimir
     * @license   GPLv3
     * @version   1.19
     *
     * Usage example :
     *
     *   new KellyColorPicker({place : 'color-picker'});
     *
     * ToDo :
     * 
     * Add switch color in colorsavers button (analog of X button in Photoshop)
     *
     **/

    /**
     * Create color picker
     * @param {Array} cfg
     * @returns {KellyColorPicker}
     */

    function KellyColorPicker(cfg) {
        var PI = Math.PI;

        var svFig; // current method SV figure object

        var changeCursor = true;

        var svCursor = new Object;
        svCursor.radius = 4;

        var canvas = false;
        var ctx = false;

        var method = 'quad';
        var alpha = false;          // is alpha slider enabled
        var drag = false;
        var cursorAnimReady = true; // sets by requestAnimationFrame to limit FPS on events like mousemove etc. when draging 

        var events = new Array();
        var userEvents = new Array();

        var canvasHelper = document.createElement("canvas");
        var canvasHelperCtx = false; // used if needed to copy image data throw ctx.drawImage for save alpha channel
        var rendered = false;        // is colorpicker rendered (without side alpha bar and cursors, rendered image stores in canvasHelperData
        var canvasHelperData = null; // rendered interface without cursors and without alpha slider [wheelBlockSize x wheelBlockSize]

        var input = false;

        // used by updateInput() function if not overloaded by user event
        var inputColor = true;     // update input color according to picker
        var inputFormat = 'mixed'; // text format of colorpicker color displayed in input element | values : mixed | hex | rgba

        var popup = new Object;    // popup block for input
        popup.tag = false;         // Dom element if popup is enabled
        popup.margin = 6;          // margin from input in pixels

        // container, or canvas element
        var place = false;
        var handler = this;

        var basePadding = 2;

        var padding;
        var wheelBlockSize = 200;
        var center;

        // current color
        var hsv;
        var rgb;
        var hex = '#000000';
        var a = 1;

        var resizeWith = false;
        var resizeSide = false;

        var colorSavers = new Array();

        var styleSwitch = false; // change method from square to triangle
        var svFigsPool = new Array(); // if we have button for switch method, better store already created figure object to buffer

        // style switch from triange to quad and backwards
        function initStyleSwitch() {

            styleSwitch = new Object;
            styleSwitch.size;
            styleSwitch.sizePercentage = 10;
            styleSwitch.position;
            styleSwitch.paddingY = 4;
            styleSwitch.paddingX = 4;
            styleSwitch.imageData = new Array();
            styleSwitch.lineWidth = 2;
            styleSwitch.color = '#c1ebf5';

            styleSwitch.updateSize = function () {
                this.size = parseInt(wheelBlockSize - (wheelBlockSize / 100) * (100 - this.sizePercentage));

                if (this.size < 16)
                    this.size = 16;

                this.position = {x: this.paddingX, y: this.paddingY};
            };

            styleSwitch.draw = function () {

                if (this.imageData[method]) {
                    ctx.putImageData(this.imageData[method], this.position.x, this.position.y);
                    return;
                }

                var rgb = hexToRgb(this.color);

                canvasHelper.width = this.size;
                canvasHelper.height = this.size;

                canvasHelperCtx.clearRect(0, 0, this.size, this.size);
                canvasHelperCtx.beginPath();

                var switchFig = 'triangle';
                if (method == 'triangle')
                    switchFig = 'quad';

                canvasHelperCtx.beginPath();

                if (this.size < 35) {
                    var circleRadiusMain = canvasHelper.width / 2;
                    var circleRadius = circleRadiusMain;
                } else {

                    var circleRadiusMain = (canvasHelper.width / 2) - this.lineWidth;

                    canvasHelperCtx.arc(this.size / 2, this.size / 2, circleRadiusMain, 0, PI * 2);
                    canvasHelperCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
                    canvasHelperCtx.lineWidth = this.lineWidth;
                    canvasHelperCtx.stroke();

                    var circleRadius = circleRadiusMain - 6;
                    canvasHelperCtx.closePath();
                    canvasHelperCtx.beginPath();
                    canvasHelperCtx.arc(this.size / 2, this.size / 2, circleRadius, 0, PI * 2);
                    canvasHelperCtx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
                    canvasHelperCtx.lineWidth = this.lineWidth;
                    canvasHelperCtx.stroke();
                    canvasHelperCtx.closePath();
                }

                canvasHelperCtx.beginPath();
                var svmSize;

                if (switchFig == 'quad') {
                    var workDiametr = (circleRadius * 2) - 4; // may be some paddings here
                    svmSize = Math.floor(workDiametr / Math.sqrt(2));
                    var padding = (this.size - svmSize) / 2;
                    var svmPos = {x: padding + svmSize, y: padding + svmSize / 2}; // start middle point
                    svmPos.y = svmPos.y - (svmSize / 2);
                    canvasHelperCtx.moveTo(svmPos.x, svmPos.y); // right top
                    canvasHelperCtx.lineTo(svmPos.x - svmSize, svmPos.y);  // left tp
                    canvasHelperCtx.lineTo(svmPos.x - svmSize, svmPos.y + svmSize); // left bottom
                    canvasHelperCtx.lineTo(svmPos.x, svmPos.y + svmSize); // right bottom

                } else {
                    svmSize = Math.floor((2 * circleRadius - 4) * Math.sin(toRadians(60))); // side size
                    var svmPos = {x: circleRadius * 2 + (circleRadiusMain - circleRadius), y: this.size / 2}; // start middle point
                    var h = ((Math.sqrt(3) / 2) * svmSize);
                    canvasHelperCtx.moveTo(svmPos.x, svmPos.y);
                    canvasHelperCtx.lineTo(svmPos.x - h, svmPos.y - (svmSize / 2)); // top 
                    canvasHelperCtx.lineTo(svmPos.x - h, svmPos.y + (svmSize / 2)); // bottom
                    canvasHelperCtx.lineTo(svmPos.x, svmPos.y);
                }

                canvasHelperCtx.lineTo(svmPos.x, svmPos.y);


                canvasHelperCtx.fillStyle = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1)';
                canvasHelperCtx.fill();
                canvasHelperCtx.lineWidth = this.lineWidth;
                canvasHelperCtx.strokeStyle = 'rgba(0, 0, 0, 0.6)';
                canvasHelperCtx.stroke();
                canvasHelperCtx.closePath();


                this.imageData[method] = canvasHelperCtx.getImageData(0, 0, canvasHelper.width, canvasHelper.width);
                ctx.drawImage(canvasHelper, this.position.x, this.position.y);

            };

            styleSwitch.isDotIn = function (dot) {
                if (
                        dot.x >= this.position.x && dot.x <= this.position.x + this.size &&
                        dot.y >= this.position.y && dot.y <= this.position.y + this.size
                        ) {
                    return true;
                }

                //if (Math.pow(this.position.x - dot.x, 2) + Math.pow(this.position.y - dot.y, 2) < Math.pow(this.outerRadius, 2)) {
                //	return true;
                //}			

                return false;
            };
        }

        // triangle colorsavers for left and right side
        function initColorSaver(align, selected, color) {

            if (!selected)
                selected = false;
            else
                selected = true;

            var colorSaver = new Object;
            colorSaver.width; // size of side of triangle
            colorSaver.widthPercentage = 22;

            colorSaver.imageData = null; // last rendered colorsaver image
            colorSaver.align = align;
            colorSaver.selected = selected; // current color
            colorSaver.color = '#ffffff'; // hex color
            colorSaver.position; // top point of triangle
            colorSaver.paddingY = -4;
            colorSaver.paddingX = 4;
            colorSaver.lineWidth = 1;
            colorSaver.selectSize = 4;

            if (align == 'right') {
                colorSaver.paddingX = colorSaver.paddingX * -1;
            }

            if (colorSaver.selected) {
                colorSaver.color = hex;
            }

            if (color) {
                colorSaver.color = color;
            }

            colorSaver.updateSize = function () {
                this.width = parseInt(wheelBlockSize - (wheelBlockSize / 100) * (100 - this.widthPercentage));

                // start render point in global canvas coords
                if (this.align == 'left') {
                    this.position = {x: 0, y: wheelBlockSize - this.width};
                } else if (this.align == 'right') {
                    this.position = {x: wheelBlockSize - this.width, y: wheelBlockSize - this.width};
                }
            };

            // calc triangle area (same method as for triangle sv figure)
            colorSaver.calcS = function (p) {
                return Math.abs((p[1].x - p[0].x) * (p[2].y - p[0].y) - (p[2].x - p[0].x) * (p[1].y - p[0].y)) / 2;
            };

            colorSaver.isDotIn = function (dot) {

                var path = new Array();

                if (this.align == 'left') {
                    path[0] = {x: this.position.x, y: this.position.y}; // top 
                    path[1] = {x: this.position.x, y: this.position.y + this.width}; // bottom left
                    path[2] = {x: this.position.x + this.width, y: this.position.y + this.width}; // bottom right
                } else {
                    path[0] = {x: this.position.x + this.width, y: this.position.y}; // top 
                    path[1] = {x: path[0].x, y: path[0].y + this.width}; // bottom right
                    path[2] = {x: path[0].x - this.width, y: this.position.y + this.width}; // bottom left				
                }

                for (var i = 0; i <= path.length - 1; ++i)
                {
                    path[i].x += this.paddingX;
                    path[i].y += this.paddingY;
                }

                var selfS = this.calcS(path);

                var t = [
                    {x: path[0].x, y: path[0].y},
                    {x: path[1].x, y: path[1].y},
                    {x: dot.x, y: dot.y}
                ];

                var s = this.calcS(t);
                t[1] = {x: path[2].x, y: path[2].y};
                s += this.calcS(t);
                t[0] = {x: path[1].x, y: path[1].y};
                s += this.calcS(t);

                if (Math.ceil(s) == Math.ceil(selfS))
                    return true;
                else
                    return false;
            };

            colorSaver.draw = function () {

                canvasHelper.width = this.width;
                canvasHelper.height = this.width;

                canvasHelperCtx.clearRect(0, 0, this.width, this.width);
                canvasHelperCtx.beginPath();

                if (this.align == 'left') {
                    canvasHelperCtx.moveTo(this.lineWidth / 2, this.width - this.lineWidth);
                    canvasHelperCtx.lineTo(this.width, this.width - this.lineWidth);
                    canvasHelperCtx.lineTo(this.lineWidth, this.lineWidth);
                    canvasHelperCtx.lineTo(this.lineWidth, this.width - this.lineWidth);
                }

                if (this.align == 'right') {
                    canvasHelperCtx.moveTo(this.lineWidth / 2, this.width - this.lineWidth);
                    canvasHelperCtx.lineTo(this.width - this.lineWidth, this.width - this.lineWidth);
                    canvasHelperCtx.lineTo(this.width - this.lineWidth, this.lineWidth);
                    canvasHelperCtx.lineTo(this.lineWidth, this.width - this.lineWidth);
                }

                if (this.selected) {

                    // start draw addition inner figure

                    canvasHelperCtx.fillStyle = 'rgba(255,255,255, 1)';
                    canvasHelperCtx.fill();

                    canvasHelperCtx.strokeStyle = 'rgba(0, 0, 0, 1)';
                    canvasHelperCtx.stroke();
                    canvasHelperCtx.closePath();
                    canvasHelperCtx.beginPath();

                    canvasHelperCtx.lineWidth = this.lineWidth;

                    if (this.align == 'left') {
                        canvasHelperCtx.moveTo(this.selectSize, this.width - this.selectSize);
                        canvasHelperCtx.lineTo(this.width - this.selectSize * 2, this.width - this.selectSize);
                        canvasHelperCtx.lineTo(this.selectSize, this.selectSize * 2);
                        canvasHelperCtx.lineTo(this.selectSize, this.width - this.selectSize);
                    }

                    if (this.align == 'right') {

                        canvasHelperCtx.moveTo(this.selectSize * 2, this.width - this.selectSize);
                        canvasHelperCtx.lineTo(this.width - this.selectSize, this.width - this.selectSize);
                        canvasHelperCtx.lineTo(this.width - this.selectSize, this.selectSize * 2);
                        canvasHelperCtx.lineTo(this.selectSize * 2, this.width - this.selectSize);
                    }
                }

                var rgb = hexToRgb(this.color);
                canvasHelperCtx.fillStyle = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1)';
                canvasHelperCtx.fill();
                canvasHelperCtx.strokeStyle = 'rgba(0, 0, 0, 1)';
                canvasHelperCtx.stroke();

                this.imageData = canvasHelperCtx.getImageData(0, 0, this.width, this.width);
                ctx.drawImage(canvasHelper, this.position.x + this.paddingX, this.position.y + this.paddingY);

            };

            var colorSaverKey = colorSavers.length;
            colorSavers[colorSaverKey] = colorSaver;
        }

        var wheel = new Object;
        wheel.width = 18;
        wheel.imageData = null; // rendered wheel image data
        wheel.innerRadius;
        wheel.startAngle = 0; // 150
        wheel.outerRadius;
        wheel.outerStrokeStyle = 'rgba(0,0,0,0.2)';
        wheel.innerStrokeStyle = 'rgba(0,0,0,0.2)';
        wheel.pos; // updates in updateSize() | center point; wheel cursor \ hsv quad \ hsv triangle positioned relative that point
        wheel.draw = function () {

            // put rendered data

            if (this.imageData) {
                ctx.putImageData(this.imageData, 0, 0);
            } else {
                var hAngle = this.startAngle;
                for (var angle = 0; angle <= 360; angle++) {

                    var startAngle = toRadians(angle - 2);
                    var endAngle = toRadians(angle);

                    ctx.beginPath();
                    ctx.moveTo(center, center);
                    ctx.arc(center, center, this.outerRadius, startAngle, endAngle, false);
                    ctx.closePath();

                    var targetRgb = hsvToRgb(hAngle / 360, 1, 1);
                    ctx.fillStyle = 'rgb(' + targetRgb.r + ', ' + targetRgb.g + ', ' + targetRgb.b + ')';
                    //ctx.fillStyle = 'hsl('+hAngle+', 100%, 50%)';
                    ctx.fill();

                    hAngle++;
                    if (hAngle >= 360)
                        hAngle = 0;
                }

                ctx.globalCompositeOperation = "destination-out"; // cut out color wheel inside by circle next
                ctx.beginPath();
                ctx.arc(center, center, this.innerRadius, 0, PI * 2);

                ctx.fill();

                ctx.globalCompositeOperation = "source-over";
                ctx.strokeStyle = this.innerStrokeStyle; // 'rgba(0,0,0,0.2)';
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.closePath();

                // wheel border
                ctx.beginPath();
                ctx.arc(center, center, this.outerRadius, 0, PI * 2);
                ctx.strokeStyle = this.outerStrokeStyle;
                ctx.lineWidth = 2;
                ctx.stroke();
                ctx.closePath();

                this.imageData = ctx.getImageData(0, 0, wheelBlockSize, wheelBlockSize);
            }

        };

        wheel.isDotIn = function (dot) {
            // is dot in circle
            if (Math.pow(this.pos.x - dot.x, 2) + Math.pow(this.pos.y - dot.y, 2) < Math.pow(this.outerRadius, 2)) {
                if (Math.pow(this.pos.x - dot.x, 2) + Math.pow(this.pos.y - dot.y, 2) > Math.pow(this.innerRadius, 2)) {
                    return true;
                }
            }
            return false;
        };

        var wheelCursor = new Object;
        wheelCursor.lineWeight = 2;
        wheelCursor.height = 4;
        wheelCursor.paddingX = 2; // padding from sides of wheel
        wheelCursor.path; // rotatePath2 --- поворот по старой функции, в фигуре не приплюсован центр

        var alphaSlider = new Object;
        alphaSlider.width = 18;
        alphaSlider.padding = 4;
        alphaSlider.outerStrokeStyle = 'rgba(0,0,0,0.2)';
        alphaSlider.innerStrokeStyle = 'rgba(0,0,0,0.2)';
        alphaSlider.height;
        alphaSlider.pos; // left top corner position
        alphaSlider.updateSize = function () {
            this.pos = {x: wheelBlockSize + alphaSlider.padding, y: alphaSlider.padding};
            this.height = wheelBlockSize - alphaSlider.padding * 2;
        };

        alphaSlider.draw = function () {
            var alphaGrd = ctx.createLinearGradient(0, 0, 0, this.height);
                    
            var aRgb = hsvToRgb(hsv.h, 1, 1);
            
            alphaGrd.addColorStop(0, 'rgba(' + aRgb.r + ',' + aRgb.g + ',' + aRgb.b + ',1)');
            alphaGrd.addColorStop(1, 'rgba(' + aRgb.r + ',' + aRgb.g + ',' + aRgb.b + ',0)');

            ctx.beginPath();
            ctx.rect(this.pos.x, this.pos.y, this.width, this.height);
            ctx.fillStyle = "white";
            ctx.fill();
            ctx.fillStyle = alphaGrd;
            ctx.fill();

            ctx.strokeStyle = 'rgba(0,0,0, 0.2)';
            ctx.lineWidth = 2;

            ctx.stroke();
            ctx.closePath();
        };

        alphaSlider.dotToAlpha = function (dot) {
            return 1 - Math.abs(this.pos.y - dot.y) / this.height;
        };

        alphaSlider.alphaToDot = function (alpha) {
            return {
                x: 0,
                y: this.height - (this.height * alpha)
            };
        };

        alphaSlider.limitDotPosition = function (dot) {
            var y = dot.y;

            if (y < this.pos.y) {
                y = this.pos.y;
            }

            if (y > this.pos.y + this.height) {
                y = this.pos.y + this.height;
            }

            return {x: this.pos.x, y: y};
        };

        alphaSlider.isDotIn = function (dot) {
            if (dot.x < this.pos.x ||
                    dot.x > this.pos.x + alphaSlider.width ||
                    dot.y < this.pos.y ||
                    dot.y > this.pos.y + this.height) {
                return false;
            }
            return true;
        };

        // svCursorMouse - для устройств с мышкой, генератор указателя в зависимости от активной области
        // todo on very very small sv when set by hex, cursor may be go out of bounds
        var svCursorMouse = new Object;

        svCursorMouse.svCursorData = null;
        svCursorMouse.stCursor = null; // cursor before replace
        svCursorMouse.curType = 0; // if > 0 cursor switched by KellyColorPicker to custom
        svCursorMouse.size = 16;
        svCursorMouse.cEl = document.body;

        svCursorMouse.initSvCursor = function () {
            if (!canvas)
                return false;

            this.curType = 1;

            if (!this.stCursor) {
                
                this.stCursor = window.getComputedStyle(this.cEl).cursor;            
                    
                if (!this.stCursor) {
                    this.stCursor = 'auto';
                }
            }        

            if (this.svCursorData) {
                this.cEl.style.cursor = this.svCursorData;
                return true;
            }

            if (!canvasHelper)
                return false;

            // create canvas on 2 pixels bigger for Opera that cut image 
            var canvasSize = this.size + 2;

            canvasHelper.width = canvasSize;
            canvasHelper.height = canvasSize;

            canvasHelperCtx.clearRect(0, 0, this.size, this.size);
            canvasHelperCtx.strokeStyle = 'rgba(255, 255, 255, 1)';

            canvasHelperCtx.beginPath();
            canvasHelperCtx.lineWidth = 2;
            canvasHelperCtx.arc(canvasSize / 2, canvasSize / 2, this.size / 2, 0, PI * 2);

            canvasHelperCtx.stroke();
            canvasHelperCtx.closePath();

            var offset = canvasSize; //if (input.value.indexOf(curImageData) !== -1)
            var curImageData = canvasHelper.toDataURL();

            this.svCursorData = 'url(' + curImageData + ') ' + offset / 2 + ' ' + offset / 2 + ', auto';

            if (!this.svCursorData)
                return false;

            this.cEl.style.cursor = this.svCursorData;
            if (this.cEl.style.cursor.indexOf(curImageData) === -1) { // for autist IE (Edge also), that not support data-uri for cursor -_-
                this.svCursorData = 'crosshair';
                this.cEl.style.cursor = 'crosshair';
            }
            return true;
        };

        svCursorMouse.initStandartCursor = function () {
            if (!this.stCursor)
                return;
            
            svCursorMouse.curType = 0;
            this.cEl.style.cursor = this.stCursor;
        };

        svCursorMouse.updateCursor = function (newDot) {
            if (!changeCursor)
                return;

            if (KellyColorPicker.cursorLock)
                return;

            if (svFig.isDotIn(newDot)) {
                svCursorMouse.initSvCursor();
            } else {
                svCursorMouse.initStandartCursor();
            }
        };

        // updateinput

        function constructor(cfg) {
            var criticalError = '', placeName = '';

            // save non-camelased old style options compatibility

            if (cfg.alpha_slider !== undefined) {
                cfg.alphaSlider = cfg.alpha_slider;
            }

            if (cfg.input_color !== undefined) {
                cfg.inputColor = cfg.input_color;
            }

            if (cfg.input_format !== undefined) {
                cfg.inputFormat = cfg.input_format;
            }

            // config apply

            if (cfg.input && typeof cfg.input !== 'object') {
                cfg.input = document.getElementById(cfg.input);
                input = cfg.input;
                // if (!cfg.input) log += '| "input" (' + inputName + ') not not found';
            } else if (typeof cfg.input === 'object') {
                input = cfg.input;
            }

            if (cfg.changeCursor !== undefined) {
                changeCursor = cfg.changeCursor;
            }

            if (cfg.alpha !== undefined) {
                a = cfg.alpha;
            }

            if (cfg.alphaSlider !== undefined) {
                alpha = cfg.alphaSlider;
            }

            if (cfg.inputColor !== undefined) {
                inputColor = cfg.inputColor;
            }

            if (cfg.inputFormat !== undefined) {
                inputFormat = cfg.inputFormat;
            }

            if (cfg.userEvents)
                userEvents = cfg.userEvents;

            if (cfg.place && typeof cfg.place !== 'object') {
                placeName = cfg.place;
                cfg.place = document.getElementById(cfg.place);
            }

            if (cfg.place) {
                place = cfg.place;
            } else if (input) {

                popup.tag = document.createElement('div');
                popup.tag.className = "popup-kelly-color";

                if (!cfg.popupClass) {

                    popup.tag.className = "popup-kelly-color";

                    popup.tag.style.position = 'absolute';
                    popup.tag.style.bottom = '0px';
                    popup.tag.style.left = '0px';
                    popup.tag.style.display = 'none';
                    popup.tag.style.backgroundColor = '#e1e1e1';
                    popup.tag.style.border = "1px solid #bfbfbf";
                    popup.tag.style.boxShadow = "7px 7px 14px -3px rgba(0,0,0,0.24)";
                    popup.tag.style.borderTopLeftRadius = '4px';
                    popup.tag.style.borderTopRightRadius = '4px';
                    popup.tag.style.borderBottomLeftRadius = '4px';
                    popup.tag.style.borderBottomRightRadius = '4px';
                    popup.tag.style.padding = "12px";
                    popup.tag.style.boxSizing = "content-box";

                } else {
                    popup.tag.className = cfg.popupClass;
                }

                place = popup.tag;

                var body = document.getElementsByTagName('body')[0];
                body.appendChild(popup.tag);

                addEventListner(input, "click", function (e) {
                    return handler.popUpShow(e);
                }, 'popup_');

            } // attach directly to input by popup
            else
                criticalError += '| "place" (' + placeName + ') not not found';

            // hex default #000000
            var colorData = false;

            if (cfg.color) {
                colorData = readColorData(cfg.color);
            } else if (input && input.value) {
                colorData = readColorData(input.value);
            }

            if (colorData) {
                hex = colorData.h;
                if (alpha)
                    a = colorData.a;
            }

            //if (hex.charAt(0) == '#') hex = hex.slice(1);
            //if (hex.length == 3) hex = hex + hex;
            //if (hex.length !== 6) hex = '#000000';

            if (cfg.method && (cfg.method == 'triangle' || cfg.method == 'quad'))
                method = cfg.method;

            if (!initCanvas()) {
                criticalError += ' | cant init canvas context';
            }
            
            // size of elments init 
            
            if (cfg.resizeWith) {

                if (typeof cfg.resizeWith !== 'object' && typeof cfg.resizeWith !== 'boolean')
                    cfg.resizeWith = document.getElementById(cfg.resizeWith);
                
                if (cfg.resizeWith === true) {
                    resizeWith = canvas;
                } else {
                    resizeWith = cfg.resizeWith;
                }
                
                if (cfg.resizeSide)
                    resizeSide = cfg.resizeSide;                
                    
                if (resizeWith) {
                    var newSize = getSizeByElement(resizeWith);
                    if (newSize)
                        cfg.size = getSizeByElement(resizeWith);
                    
                    addEventListner(window, "resize", function (e) {
                        return handler.syncSize(e);
                    }, 'canvas_');
                }
            }
                    
            if (cfg.size && cfg.size > 0) {
                wheelBlockSize = cfg.size;
            }
            
            // size init end
            
            if (criticalError) {
                if (typeof console !== 'undefined')
                    console.log('KellyColorPicker : ' + criticalError);
                return;
            }

            if (method == 'quad')
                svFig = getSvFigureQuad();
            if (method == 'triangle')
                svFig = getSvFigureTriangle();

            if (input) {
                var inputEdit = function (e) {
                    var e = e || window.event;
                    if (!e.target) {
                        e.target = e.srcElement;
                    }
                    handler.setColorByHex(e.target.value, true);
                };

                addEventListner(input, "click", inputEdit, 'input_edit_');
                addEventListner(input, "change", inputEdit, 'input_edit_');
                addEventListner(input, "keyup", inputEdit, 'input_edit_');
                addEventListner(input, "keypress", inputEdit, 'input_edit_');
            }

            if (cfg.colorSaver) {
                initColorSaver('left', true);
                initColorSaver('right');
            }

            if (cfg.methodSwitch) {
                initStyleSwitch();
            }

            enableEvents();

            updateSize();
            handler.setColorByHex(false); // update color info and first draw
        }

        // may be zero in some cases / check before applay

        function getSizeByElement(el) {

            var sizeInfo = el.getBoundingClientRect();
            var size = 0;
            var sizeReduse = 0;
            if (alpha) {
                sizeReduse = alphaSlider.width + alphaSlider.padding * 2;
            }
            
            if (el === canvas) {
                     if (sizeInfo.width <= sizeInfo.height)
                    size = sizeInfo.height;
                else if (sizeInfo.height < sizeInfo.width)
                    size = sizeInfo.width; 
            } else {
            
                if (resizeSide) {
                        if (resizeSide == 'height')
                        size = sizeInfo.height;
                    else if (resizeSide == 'width')
                        size = sizeInfo.width;
                } else {
                         if (sizeInfo.width > sizeInfo.height)
                        size = sizeInfo.height;
                    else if (sizeInfo.height >= sizeInfo.width)
                        size = sizeInfo.width;
                }
            }
            
            size = parseInt(size);
            
            if (alpha) {

                size -= sizeReduse;
            }

            if (size <= 0) {
                return false;
            }

            return size;
        }

        // Read color value from string cString in rgb \ rgba \ hex format 
        // falseOnFail = false - return default color #000000 on fail

        function readColorData(cString, falseOnFail) {
            var alpha = 1;
            var h = false;

            cString = cString.trim(cString);
            if (cString.length <= 7) { // hex color
                if (cString.charAt(0) == '#')
                    cString = cString.slice(1);

                if (cString.length == 3)
                    h = cString + cString;
                else if (cString.length == 6)
                    h = cString;

                //if (h && !h.match(/^#([0-9A-F]){3}$|^#([0-9A-F]){6}$/img)) h = false;			

            } else if (cString.substring(0, 3) == 'rgb') {
                var rgba = cString.split(",");

                if (rgba.length >= 3 && rgba.length <= 4) {
                    rgba[0] = rgba[0].replace("rgba(", "");
                    rgba[0] = rgba[0].replace("rgb(", "");

                    var rgb = {r: parseInt(rgba[0]), g: parseInt(rgba[1]), b: parseInt(rgba[2])};

                    if (rgb.r <= 255 && rgb.g <= 255 && rgb.b <= 255) {

                        h = rgbToHex(rgb);

                        if (rgba.length == 4) {
                            alpha = parseFloat(rgba[3]);
                            if (!alpha || alpha < 0)
                                alpha = 0;
                            if (alpha > 1)
                                alpha = 1;
                        }
                    }
                }
            }

            if (h === false && falseOnFail)
                return false;
            if (h === false)
                h = '000000';

            if (h.charAt(0) != '#')
                h = '#' + h;
            return {h: h, a: alpha};
        }

        function getSvFigureQuad() {

            if (svFigsPool['quad'])
                return svFigsPool['quad'];

            var quad = new Object;
            quad.size;
            quad.padding = 2;
            quad.path; // крайние точки фигуры на координатной плоскости
            quad.imageData = null; // rendered quad image data
            // перезаписывается существующий, чтобы не вызывать утечек памяти, обнуляя прошлый
            // тк UInt8ClampedArray генерируемый createImageData стандартными способами не
            // во всех браузерах выгружается сразу

            quad.dotToSv = function (dot) {
                return {
                    s: Math.abs(this.path[3].x - dot.x) / this.size,
                    v: Math.abs(this.path[3].y - dot.y) / this.size
                };
            };

            quad.svToDot = function (sv) {
                var quadX = this.path[0].x;
                var quadY = this.path[0].y;

                var svError = 0.02;
                if (wheelBlockSize < 150) {
                    svError = 0.07;
                } else if (wheelBlockSize < 100) {
                    svError = 0.16;
                }

                for (var y = 0; y < this.size; y++) {
                    for (var x = 0; x < this.size; x++) {
                        var dot = {x: x + quadX, y: y + quadY};
                        var targetSv = this.dotToSv(dot);
                        var es = Math.abs(targetSv.s - sv.s), ev = Math.abs(targetSv.v - sv.v);

                        if (es < svError && ev < svError) {
                            return dot;
                        }
                    }
                }

                return {x: 0, y: 0};
            };

            quad.limitDotPosition = function (dot) {
                var x = dot.x;
                var y = dot.y;

                if (x < this.path[0].x) {
                    x = this.path[0].x;
                }

                if (x > this.path[0].x + this.size) {
                    x = this.path[0].x + this.size;
                }

                if (y < this.path[0].y) {
                    y = this.path[0].y;
                }

                if (y > this.path[0].y + this.size) {
                    y = this.path[0].y + this.size;
                }

                return {x: x, y: y};
            };

            quad.draw = function () {
                if (!this.imageData)
                    this.imageData = ctx.createImageData(this.size, this.size);
                var i = 0;

                var quadX = this.path[0].x;
                var quadY = this.path[0].y;

                for (var y = 0; y < this.size; y++) {
                    for (var x = 0; x < this.size; x++) {
                        var dot = {x: x + quadX, y: y + quadY};

                        var sv = this.dotToSv(dot);
                        var targetRgb = hsvToRgb(hsv.h, sv.s, sv.v);
                        this.imageData.data[i + 0] = targetRgb.r;
                        this.imageData.data[i + 1] = targetRgb.g;
                        this.imageData.data[i + 2] = targetRgb.b;
                        this.imageData.data[i + 3] = 255;
                        i += 4;
                    }
                }

                ctx.putImageData(this.imageData, quadX, quadY);

                ctx.beginPath();
                ctx.strokeStyle = 'rgba(0,0,0, 0.2)';
                ctx.lineWidth = 2;
                for (var i = 0; i <= this.path.length - 1; ++i)
                {
                    if (i == 0)
                        ctx.moveTo(this.path[i].x, this.path[i].y);
                    else
                        ctx.lineTo(this.path[i].x, this.path[i].y);
                }

                ctx.stroke();

                ctx.closePath();
            };

            quad.updateSize = function () {
                var workD = (wheel.innerRadius * 2) - wheelCursor.paddingX * 2 - this.padding * 2;

                // исходя из формулы диагонали квадрата, узнаем длинну стороны на основании доступного диаметра
                this.size = Math.floor(workD / Math.sqrt(2));

                this.path = new Array();

                // находим верхнюю левую точку и от нее задаем остальные координаты
                this.path[0] = {x: -1 * (this.size / 2), y: -1 * (this.size / 2)};
                this.path[1] = {x: this.path[0].x + this.size, y: this.path[0].y};
                this.path[2] = {x: this.path[1].x, y: this.path[1].y + this.size};
                this.path[3] = {x: this.path[2].x - this.size, y: this.path[2].y};
                this.path[4] = {x: this.path[0].x, y: this.path[0].y};

                for (var i = 0; i <= this.path.length - 1; ++i) {
                    this.path[i].x += wheel.pos.x;
                    this.path[i].y += wheel.pos.y;
                }
            };

            quad.isDotIn = function (dot) {
                if (dot.x < this.path[0].x ||
                        dot.x > this.path[0].x + this.size ||
                        dot.y < this.path[0].y ||
                        dot.y > this.path[0].y + this.size) {
                    return false;
                }
                return true;
            };

            svFigsPool['quad'] = quad;
            return quad;
        }

        function getSvFigureTriangle() {

            if (svFigsPool['triangle'])
                return svFigsPool['triangle'];

            var triangle = new Object;
            triangle.size; // сторона равностороннего треугольника
            triangle.padding = 2;
            triangle.path;
            triangle.imageData = null; // rendered triangle image data
            triangle.followWheel = true;
            triangle.s;
            triangle.sOnTop = false;
            triangle.outerRadius;

            triangle.limitDotPosition = function (dot) {
                var x = dot.x;
                var y = dot.y;
                var maxX = this.path[0].x;
                var minX = this.path[2].x;
                var finalX = x;
                var finalY = y;

                finalX = Math.min(Math.max(minX, finalX), maxX);
                var slope = ((this.path[0].y - this.path[1].y) / (this.path[0].x - this.path[1].x));
                var minY = Math.ceil((this.path[1].y + (slope * (finalX - this.path[1].x))));
                slope = ((this.path[0].y - this.path[2].y) / (this.path[0].x - this.path[2].x));
                var maxY = Math.floor((this.path[2].y + (slope * (finalX - this.path[2].x))));

                if (x < minX) {
                    ((wheel.pos.y - y) / (wheel.pos.x - x));
                    finalY = y;
                }

                finalY = Math.min(Math.max(minY, finalY), maxY);
                return {x: finalX, y: finalY};
            };

            triangle.svToDot = function (sv) {
                var svError = 0.02;
                if (wheelBlockSize < 150) {
                    svError = 0.07;
                } else if (wheelBlockSize < 100) {
                    svError = 0.16;
                }

                for (var y = 0; y < this.size; y++) {
                    for (var x = 0; x < this.size; x++) {
                        var dot = {x: this.path[1].x + x, y: this.path[1].y + y};
                        if (svFig.isDotIn(dot)) {
                            var targetSv = this.dotToSv(dot);
                            var es = Math.abs(targetSv.s - sv.s), ev = Math.abs(targetSv.v - sv.v);

                            if (es < svError && ev < svError) {
                                return dot;
                            }
                        }
                    }
                }

                return {
                    x: 0,
                    y: 0
                };
            };

            triangle.draw = function () {
                // no buffer

                if (!this.imageData)
                    this.imageData = canvasHelperCtx.createImageData(this.size, this.size);

                canvasHelper.width = this.size;
                canvasHelper.height = this.size;

                var trX = this.path[1].x;
                var trY = this.path[1].y;
                var i = 0;
                for (var y = 0; y < this.size; y++) {
                    for (var x = 0; x < this.size; x++) {
                        var dot = {x: this.path[1].x + x, y: this.path[1].y + y};
                        if (!svFig.isDotIn(dot)) {
                            this.imageData.data[i + 0] = 0;
                            this.imageData.data[i + 1] = 0;
                            this.imageData.data[i + 2] = 0;
                            this.imageData.data[i + 3] = 0;
                        } else {
                            var sv = this.dotToSv(dot);
                            var targetRgb = hsvToRgb(hsv.h, sv.s, sv.v);

                            this.imageData.data[i + 0] = targetRgb.r;
                            this.imageData.data[i + 1] = targetRgb.g;
                            this.imageData.data[i + 2] = targetRgb.b;
                            this.imageData.data[i + 3] = 255;
                        }

                        i += 4;
                    }
                }

                canvasHelperCtx.putImageData(this.imageData, 0, 0);
                ctx.drawImage(canvasHelper, trX, trY); // draw with save overlaps transparent things , not direct putImageData that rewrite all pixels

                ctx.beginPath();
                ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';
                ctx.lineWidth = 2;
                var trianglePath = this.path; //rotatePath(triangle.path, hsv.h * 360);
                for (var i = 0; i <= trianglePath.length - 1; ++i)
                {
                    if (i == 0)
                        ctx.moveTo(trianglePath[i].x, trianglePath[i].y);
                    else
                        ctx.lineTo(trianglePath[i].x, trianglePath[i].y);
                }

                ctx.stroke();
                ctx.closePath();
            };

            triangle.calcS = function (p) {
                return Math.abs((p[1].x - p[0].x) * (p[2].y - p[0].y) - (p[2].x - p[0].x) * (p[1].y - p[0].y)) / 2;
            };

            triangle.dotToSv = function (dot) {
                var p = getP({x: dot.x, y: dot.y}, this.vol);
                var len = getLen(p, this.vol[0]);

                // dirty tricks? replace output to interpolation and lerp in future
                if (len < 1)
                    len = Math.floor(len);
                if (len > this.h - 1)
                    len = this.h;

                var vol = len / (this.h);

                var angle = Math.abs(getAngle(dot, this.sSide));
                if (angle < 30)
                    angle = 30;
                angle -= 30;
                angle = 60 - angle;
                angle = angle / 60; // - saturation from one angle

                return {s: angle, v: vol};
            };

            triangle.isDotIn = function (dot) {
                var t = [
                    {x: this.path[0].x, y: this.path[0].y},
                    {x: this.path[1].x, y: this.path[1].y},
                    {x: dot.x, y: dot.y}
                ];

                var s = this.calcS(t);
                t[1] = {x: this.path[2].x, y: this.path[2].y};
                s += this.calcS(t);
                t[0] = {x: this.path[1].x, y: this.path[1].y};
                s += this.calcS(t);

                if (Math.ceil(s) == Math.ceil(this.s))
                    return true;
                else
                    return false;
            };

            triangle.updateSize = function () {
                // из формулы высоты равностороннего треугольника
                this.outerRadius = wheel.innerRadius - wheelCursor.paddingX - this.padding;
                // из теоремы синусов треугольника
                this.size = Math.floor((2 * this.outerRadius) * Math.sin(toRadians(60)));

                var h = ((Math.sqrt(3) / 2) * this.size);
                this.h = ((Math.sqrt(3) / 2) * this.size);

                this.path = new Array();
                this.path[0] = {x: this.outerRadius, y: 0}; // middle point - h
                this.path[1] = {x: this.path[0].x - h, y: -1 * (this.size / 2)}; // upper - s
                this.path[2] = {x: this.path[1].x, y: this.size / 2}; // bottom - v
                this.path[3] = {x: this.path[0].x, y: this.path[0].y}; // to begin

                for (var i = 0; i <= this.path.length - 1; ++i) {
                    this.path[i].x += wheel.pos.x;
                    this.path[i].y += wheel.pos.y;
                }

                this.vol = new Array();


                this.s = this.calcS(this.path);
                if (this.sOnTop) {
                    var middle = getMiddlePoint(this.path[0], this.path[2]);

                    this.vol[0] = {x: this.path[1].x, y: this.path[1].y};
                    this.vol[1] = {x: middle.x, y: middle.y};

                    this.sSide = this.path[1];
                } else {
                    var middle = getMiddlePoint(this.path[0], this.path[1]);

                    this.vol[0] = {x: this.path[2].x, y: this.path[2].y};
                    this.vol[1] = {x: middle.x, y: middle.y};

                    this.sSide = this.path[2];
                }
            };

            svFigsPool['triangle'] = triangle;
            return triangle;
        }

        // prefix - for multiple event functions for one object
        function addEventListner(object, event, callback, prefix) {
            if (typeof object !== 'object') {
                object = document.getElementById(object);
            }

            if (!object)
                return false;
            if (!prefix)
                prefix = '';

            events[prefix + event] = callback;

            if (!object.addEventListener) {
                object.attachEvent('on' + event, events[prefix + event]);
            } else {
                object.addEventListener(event, events[prefix + event]);
            }

            return true;
        }

        function removeEventListener(object, event, prefix) {
            if (typeof object !== 'object') {
                object = document.getElementById(object);
            }

            // console.log('remove :  : ' + Object.keys(events).length);
            if (!object)
                return false;
            if (!prefix)
                prefix = '';

            if (!events[prefix + event])
                return false;

            if (!object.removeEventListener) {
                object.detachEvent('on' + event, events[prefix + event]);
            } else {
                object.removeEventListener(event, events[prefix + event]);
            }

            events[prefix + event] = null;
            return true;
        }

        // [converters]
        // Read more about HSV color model :
        // https://ru.wikipedia.org/wiki/HSV_%28%F6%E2%E5%F2%EE%E2%E0%FF_%EC%EE%E4%E5%EB%FC%29
        // source of converter hsv functions
        // http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c

        function hsvToRgb(h, s, v) {
            var r, g, b, i, f, p, q, t;

            if (h && s === undefined && v === undefined) {
                s = h.s, v = h.v, h = h.h;
            }

            i = Math.floor(h * 6);
            f = h * 6 - i;
            p = v * (1 - s);
            q = v * (1 - f * s);
            t = v * (1 - (1 - f) * s);

            switch (i % 6) {
                case 0:
                    r = v, g = t, b = p;
                    break;
                case 1:
                    r = q, g = v, b = p;
                    break;
                case 2:
                    r = p, g = v, b = t;
                    break;
                case 3:
                    r = p, g = q, b = v;
                    break;
                case 4:
                    r = t, g = p, b = v;
                    break;
                case 5:
                    r = v, g = p, b = q;
                    break;
            }

            return {
                r: Math.floor(r * 255),
                g: Math.floor(g * 255),
                b: Math.floor(b * 255)
            };
        }

        function rgbToHsv(r, g, b) {
            if (r && g === undefined && b === undefined) {
                g = r.g, b = r.b, r = r.r;
            }

            r = r / 255, g = g / 255, b = b / 255;
            var max = Math.max(r, g, b), min = Math.min(r, g, b);
            var h, s, v = max;

            var d = max - min;
            s = max == 0 ? 0 : d / max;

            if (max == min) {
                h = 0; // achromatic
            } else {
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }

            return {h: h, s: s, v: v};
        }

        function hexToRgb(hex) {
            var dec = parseInt(hex.charAt(0) == '#' ? hex.slice(1) : hex, 16);
            return {r: dec >> 16, g: dec >> 8 & 255, b: dec & 255};
        }

        function rgbToHex(color) {
            var componentToHex = function (c) {
                var hex = c.toString(16);
                return hex.length === 1 ? "0" + hex : hex;
            };

            return "#" + componentToHex(color.r) + componentToHex(color.g) + componentToHex(color.b);
        }

        function toRadians(i) {
            return i * (PI / 180);
        }

        // [converters - end]

        function getLen(point1, point2) {
            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));
        }

        function getMiddlePoint(point1, point2) {
            return {x: (point1.x + point2.x) / 2, y: (point1.y + point2.y) / 2};
        }

        // перпендикуляр от точки

        function getP(point1, line1) {
            var l = (line1[0].x - line1[1].x) * (line1[0].x - line1[1].x) + (line1[0].y - line1[1].y) * (line1[0].y - line1[1].y);
            var pr = (point1.x - line1[0].x) * (line1[1].x - line1[0].x) + (point1.y - line1[0].y) * (line1[1].y - line1[0].y);
            var pt = true;
            var cf = pr / l;

            if (cf < 0) {
                cf = 0;
                pt = false;
            }
            if (cf > 1) {
                cf = 1;
                pt = false;
            }

            return {
                x: line1[0].x + cf * (line1[1].x - line1[0].x),
                y: line1[0].y + cf * (line1[1].y - line1[0].y),
                pt: pt
            };
        }

        // translate360 = true  270
        //            180 --- from.x.y --- 0
        //                      90

        function getAngle(point, from, translate360) {
            if (!from)
                from = {x: 0, y: 0};

            var distX = point.x - from.x;
            var distY = point.y - from.y;

            var a = Math.atan2(distY, distX) * 180 / (PI);
            if (translate360 && a < 0)
                a = 360 + a;

            return a;
        }

        // поворот фигуры относительно точки
        function rotatePath2(points, angle) {
            angle = toRadians(angle);
            var newPoints = new Array();

            for (var i = 0; i <= points.length - 1; ++i)
            {
                newPoints[i] = {
                    x: points[i].x * Math.cos(angle) - points[i].y * Math.sin(angle),
                    y: points[i].x * Math.sin(angle) + points[i].y * Math.cos(angle)
                };
            }

            return newPoints;
        }

        function updateSize() {
            padding = basePadding + wheelCursor.paddingX;

            rendered = false;
            wheel.imageData = null;

            center = wheelBlockSize / 2;
            wheel.pos = {x: center, y: center};

            wheel.outerRadius = center - padding;
            wheel.innerRadius = wheel.outerRadius - wheel.width;

            // объект относительно начала координат
            wheelCursor.path = [
                {x: wheel.innerRadius - wheelCursor.paddingX, y: wheelCursor.height * -1},
                {x: wheel.outerRadius + wheelCursor.paddingX, y: wheelCursor.height * -1},
                {x: wheel.outerRadius + wheelCursor.paddingX, y: wheelCursor.height},
                {x: wheel.innerRadius - wheelCursor.paddingX, y: wheelCursor.height},
                {x: wheel.innerRadius - wheelCursor.paddingX, y: wheelCursor.height * -1}
            ];

            var width = wheelBlockSize;
            if (alpha)
                width += alphaSlider.width + alphaSlider.padding * 2;

            if (place.tagName != 'CANVAS') {
                place.style.width = width + 'px';
                place.style.height = wheelBlockSize + 'px';
            }

            canvas.width = width;
            canvas.height = wheelBlockSize;
            
            if (resizeWith != canvas) {
                canvas.style.width = width + 'px';
                canvas.style.height = wheelBlockSize + 'px';
            }

            for (var i = 0; i <= colorSavers.length - 1; ++i)
            {
                colorSavers[i].updateSize();
            }

            if (styleSwitch) {

                styleSwitch.imageData['triangle'] = null;
                styleSwitch.imageData['quad'] = null;

                styleSwitch.updateSize();
            }

            svFig.updateSize();
            if (alpha)
                alphaSlider.updateSize();
        }

        // updates input after color changes (manualEnter = true if value entered from input, not from widget)
        // if manualEnter = true - save original text in input, else set input value in configurated format
        // if user event 'updateinput' is setted and return false - prevent default updateInput behavior

        function updateInput(manualEnter) {
            if (!input)
                return;

            if (userEvents["updateinput"]) {
                var callback = userEvents["updateinput"];
                if (!callback(handler, input, manualEnter))
                    return;
            }

            var rgba = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + a.toFixed(2) + ')';

            if (!manualEnter) {
                if (a < 1 && inputFormat === 'mixed') {
                    input.value = rgba;
                } else {
                    if (inputFormat === 'hex' || inputFormat === 'mixed')
                        input.value = hex;
                    else
                        input.value = rgba;
                }
            }

            if (inputColor) {
                if (hsv.v < 0.5) {
                    input.style.color = "#FFF";
                } else {
                    input.style.color = "#000";
                }

                input.style.background = rgba;
            }
        }

        function initCanvas() {
            if (!place)
                return false;
            if (place.tagName != 'CANVAS') {
                canvas = document.createElement('CANVAS');
                place.appendChild(canvas);
            } else {
                canvas = place;
            }

            // code for IE browsers
            if (typeof window.G_vmlCanvasManager != 'undefined') {
                canvas = window.G_vmlCanvasManager.initElement(canvas);
                canvasHelper = window.G_vmlCanvasManager.initElement(canvasHelper);
            }

            if (!!(canvas.getContext && canvas.getContext('2d'))) {
                ctx = canvas.getContext("2d");
                canvasHelperCtx = canvasHelper.getContext("2d");
                return true;
            } else
                return false;
        }

        // temp events until wait mouse click or touch
        function enableEvents() {
            addEventListner(canvas, "mousedown", function (e) {
                handler.mouseDownEvent(e);
            }, 'wait_action_');
            addEventListner(canvas, "touchstart", function (e) {
                handler.mouseDownEvent(e);
            }, 'wait_action_');
            addEventListner(canvas, "mouseout", function (e) {
                handler.mouseOutEvent(e);
            }, 'wait_action_');
            addEventListner(window, "touchmove", function (e) {
                handler.touchMoveEvent(e);
            }, 'wait_action_');
            addEventListner(canvas, "mousemove", function (e) {
                handler.mouseMoveRest(e);
            }, 'wait_action_');
        }

        // mouse detect canvas events

        function disableEvents() {
            removeEventListener(canvas, "mousedown", 'wait_action_');
            removeEventListener(canvas, "touchstart", 'wait_action_');
            removeEventListener(canvas, "mouseout", 'wait_action_');
            removeEventListener(window, "touchmove", 'wait_action_');
            removeEventListener(canvas, "mousemove", 'wait_action_');
        }

        function getEventDot(e) {
                
            e = e || window.event;
            var x, y;
            var scrollX = document.body.scrollLeft + document.documentElement.scrollLeft;
            var scrollY = document.body.scrollTop + document.documentElement.scrollTop;

            if (e.type == 'touchend') {
            
                x = e.changedTouches[0].clientX + scrollX;
                y = e.changedTouches[0].clientY + scrollY;
                
            } else if (e.type == 'touchmove' || e.touches) {
            
                x = e.touches[0].clientX + scrollX;
                y = e.touches[0].clientY + scrollY;
                
            } else {
                // e.pageX e.pageY e.x e.y bad for cross-browser
                x = e.clientX + scrollX;
                y = e.clientY + scrollY;
            }

            // set point to local coordinates
            
            var rect = canvas.getBoundingClientRect();
            x -= rect.left + scrollX;
            y -= rect.top + scrollY;

            return {x: x, y: y};
        }

        function selectColorSaver(key) {

            // disable current selection
            var previouseSelect = false;
            for (var i = 0; i <= colorSavers.length - 1; ++i)
            {
                if (colorSavers[i].selected)
                    previouseSelect = i;
                colorSavers[i].selected = false;
            }

            // select new 
            var select = false;
            for (var i = 0; i <= colorSavers.length - 1; ++i)
            {
                if (i == key) {
                    colorSavers[i].selected = true;
                    handler.setColorByHex(colorSavers[i].color);
                    select = true;
                    break;
                }
            }

            if (select && userEvents["selectcolorsaver"]) {
                var callback = userEvents["selectcolorsaver"];
                callback(handler, colorSavers[key]);
            }

            if (!select && previouseSelect !== false) {
                colorSavers[previouseSelect].selected = true;
            }

            return select;
        }

        function updateColorSavers() {

            for (var i = 0; i <= colorSavers.length - 1; ++i)
            {
                if (colorSavers[i].selected)
                    colorSavers[i].color = hex;
            }

        }

        function drawColorSavers() {
            if (colorSavers.length) {
                for (var i = 0; i <= colorSavers.length - 1; ++i)
                {
                    colorSavers[i].draw();
                }
            }
        }

        // вывод интерфейса без курсоров
        // поддерживается буферизация todo добавить буферизацию color saver элементов
        // вынести буфер альфа слайдера отдельно от колеса и sv блока

        function drawColorPicker() {
            if (!ctx)
                return false;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // put buffered data
            if (rendered) {
                ctx.putImageData(canvasHelperData, 0, 0);
                drawColorSavers();
                return true;
            }

            // форма кольца может измениться только при изменении размеров виджета
            wheel.draw();
            svFig.draw();

            if (alpha)
                alphaSlider.draw();

            drawColorSavers();
            if (styleSwitch)
                styleSwitch.draw();

            // поместить текущее отрисованное изображение кольца + sv селектора в буфер
            // notice :
            // при перемещении курсора кольца сохранять буфер все изображение бессмысленно - sv блок постоянно обновляется, поэтому
            // сохраняем уже на событии выхода из процесса перемещения

            if (!drag) {
                //wheelBlockSize
                canvasHelperData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                rendered = true;
            }
            return true;
        }

        function draw() {
            if (!drawColorPicker()) {
                return false;
            }

            var curAngle = hsv.h * 360 - wheel.startAngle;

            // cursors

            if (alpha) {
                ctx.beginPath();
                var cursorHeight = 2;
                var cursorPaddingX = 2;
                var pointY = alphaSlider.height * (1 - a);
                ctx.rect(alphaSlider.pos.x - cursorPaddingX, alphaSlider.padding + pointY - cursorHeight / 2, alphaSlider.width + cursorPaddingX * 2, cursorHeight);
                ctx.strokeStyle = 'rgba(0,0,0, 0.8)';
                ctx.lineWidth = 2;

                ctx.stroke();
                ctx.closePath();
            }

            ctx.beginPath();

            var wheelCursorPath = rotatePath2(wheelCursor.path, curAngle, {x: wheel.pos.x, y: wheel.pos.y});
            for (var i = 0; i <= wheelCursorPath.length - 1; ++i)
            {
                wheelCursorPath[i].x += wheel.pos.x;
                wheelCursorPath[i].y += wheel.pos.y;
                if (i == 0)
                    ctx.moveTo(wheelCursorPath[i].x, wheelCursorPath[i].y);
                else
                    ctx.lineTo(wheelCursorPath[i].x, wheelCursorPath[i].y);
            }

            ctx.strokeStyle = 'rgba(0,0,0,0.8)';
            ctx.lineWidth = wheelCursor.lineWeight;
            ctx.stroke();
            ctx.closePath();

            // sv cursor
            if (hsv.v > 0.5 && hsv.s < 0.5)
                ctx.strokeStyle = 'rgba(0, 0, 0, 1)';
            else
                ctx.strokeStyle = 'rgba(255, 255, 255, 1)';
            //ctx.strokeStyle='rgba(255,255, 255, 1)';

            //document.getElementById('test3').value = 'h' + hsv.h.toFixed(2) + ' s'  + hsv.s.toFixed(2) + ' v'  + hsv.v.toFixed(2)

            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.arc(hsv.x, hsv.y, svCursor.radius, 0, PI * 2);


            ctx.stroke();
            ctx.closePath();

            return false;
        }

        this.popUpClose = function (e) {
            if (popup.tag === false)
                return;

            if (e) {
                // todo check when select color and then unpress button out of bounds
                if (e.target == input || e.target == canvas)
                    return false;
                if (e.target == popup.tag)
                    return false;
            }

            popup.tag.style.display = 'none';
            if (KellyColorPicker.activePopUp == handler)
                KellyColorPicker.activePopUp = false;
        };

        // if 'popupshow' user event is setted and return false - prevent show popup default behavior

        this.popUpShow = function (e) {
            if (popup.tag === false)
                return;

            if (userEvents["popupshow"]) {
                var callback = userEvents["popupshow"];
                if (!callback(handler, e))
                    return;
            }

            // include once 
            if (!KellyColorPicker.popupEventsInclude) {
                addEventListner(document, "click", function (e) {
                    if (KellyColorPicker.activePopUp)
                        return KellyColorPicker.activePopUp.popUpClose(e);
                    else
                        return false;
                }, 'popup_close_');
                addEventListner(window, "resize", function (e) {
                    if (KellyColorPicker.activePopUp)
                        return KellyColorPicker.activePopUp.popUpShow(e);
                }, 'popup_resize_');
                KellyColorPicker.popupEventsInclude = true;
            }

            if (KellyColorPicker.activePopUp) {
                KellyColorPicker.activePopUp.popUpClose(false);
            }

            var topMargin = handler.getCanvas().width;

            var alpha = handler.getAlphaFig();
            if (alpha) {
                topMargin -= alpha.width + alpha.padding;
            }
            
            var popupStyle = window.getComputedStyle(popup.tag);
            
            var paddingPopup = parseInt(popupStyle.paddingBottom) + parseInt(popupStyle.paddingTop);
            if (paddingPopup <= 0) {
                paddingPopup = 0;
            }

            var viewportOffset = input.getBoundingClientRect();
            var top = viewportOffset.top + (window.scrollY || window.pageYOffset || document.body.scrollTop) - paddingPopup;
            var left = viewportOffset.left + (window.scrollX || window.pageXOffset || document.body.scrollLeft);

            popup.tag.style.top = (top - topMargin - popup.margin) + 'px';
            popup.tag.style.left = left + 'px';
            popup.tag.style.display = 'block';

            KellyColorPicker.activePopUp = handler;
            return false;
        };

        this.setHueByDot = function (dot) {
            var angle = getAngle(dot, wheel.pos) + wheel.startAngle;
            if (angle < 0)
                angle = 360 + angle;

            hsv.h = angle / 360;

            rgb = hsvToRgb(hsv.h, hsv.s, hsv.v);
            hex = rgbToHex(rgb);

            updateColorSavers();

            if (userEvents["change"]) {
                var callback = userEvents["change"];
                callback(handler);
            }

            updateInput();

            rendered = false;
            draw();
        };

        this.setColorForColorSaver = function (cString, align) {
            var colorData = readColorData(cString, true);
            if (!colorData)
                return;

            var colorSaver = handler.getColorSaver(align);
            if (colorSaver.selected) {
                this.setColorByHex(cString, false);
            } else {
                colorSaver.color = colorData.h;
                draw();
            }

            return true;
        };
        
        this.setColor = function(inputColor, manualEnter) {
            
            // synonym, since setColorByHex already accept color in different formats, not only in hex
            
            handler.setColorByHex(inputColor, manualEnter);
            
        }; 

        // update color with redraw canvas and update input hex value
        // now support rgba \ rgb string format input

        this.setColorByHex = function (inputHex, manualEnter) {

            if (!manualEnter)
                manualEnter = false;
            var inputAlpha = a;

            if (inputHex !== false) {

                if (!inputHex || !inputHex.length)
                    return;

                var colorData = readColorData(inputHex, true);
                if (!colorData)
                    return;

                inputHex = colorData.h;
                if (alpha)
                    inputAlpha = colorData.a;

            } else
                inputHex = hex;

            if (alpha && inputHex == hex && rendered && inputAlpha != a) {
                a = inputAlpha;

                draw(); // slider always redraws in current even if part of canvas buffered
                return;
            }

            if (hex && inputHex == hex && rendered)
                return;

            // set and redraw all

            a = inputAlpha;
            rgb = hexToRgb(inputHex);
            hex = inputHex;
            hsv = rgbToHsv(rgb);

            var dot = svFig.svToDot(hsv);
            hsv.x = dot.x;
            hsv.y = dot.y;

            rendered = false;
            updateColorSavers();
            draw();

            if (userEvents["change"]) {
                var callback = userEvents["change"];
                callback(handler);
            }

            updateInput(manualEnter);
        };

        this.setAlphaByDot = function (dot) {
            a = alphaSlider.dotToAlpha(dot);

            if (userEvents["change"]) {
                var callback = userEvents["change"];
                callback(handler);
            }

            updateInput();
            draw();
        };

        this.setAlpha = function (alpha) {
            a = alpha;
            updateInput();
            draw();
        };

        this.setColorByDot = function (dot) {
            var sv = svFig.dotToSv(dot);

            hsv.s = sv.s;
            hsv.v = sv.v;
            hsv.x = dot.x;
            hsv.y = dot.y;

            if (hsv.s > 1)
                hsv.s = 1;
            if (hsv.s < 0)
                hsv.s = 0;
            if (hsv.v > 1)
                hsv.v = 1;
            if (hsv.v < 0)
                hsv.v = 0;

            rgb = hsvToRgb(hsv.h, hsv.s, hsv.v);
            hex = rgbToHex(rgb);

            updateColorSavers();

            if (userEvents["change"]) {
                var callback = userEvents["change"];
                callback(handler);
            }

            updateInput();
            draw();
        };

        this.mouseOutEvent = function (e) {
            if (svCursorMouse.curType > 0 && !KellyColorPicker.cursorLock) {
                svCursorMouse.initStandartCursor();
            }
        };

        // перемещение указателя по canvas в режиме покоя
        this.mouseMoveRest = function (e) {
            if (drag)
                return;

            if (!cursorAnimReady) {
                return;
            }

            cursorAnimReady = false;
            var newDot = getEventDot(e);
            svCursorMouse.updateCursor(newDot);
            requestAnimationFrame(function () {
                cursorAnimReady = true;
            });

            if (userEvents["mousemoverest"]) {
                var callback = userEvents["mousemoverest"];
                callback(e, handler, newDot);
            }
        };

        // to prevent scroll by touches while change color
        // в FireFox под андройд есть "фича" которая скрывает или раскрывает тулбар адресной строки при движении пальцем
        // отключить её можно только через опцию about:config browser.chrome.dynamictoolbar

        this.touchMoveEvent = function (e) {
            if (drag) { // todo check number of touches to ignore zoom action
                event.preventDefault();
            }
        };

        // маршрутизатор событий нажатий на элементы
        this.mouseDownEvent = function (event) {
            event.preventDefault();

            var move, up = false;
            var newDot = getEventDot(event);
            // console.log('mouseDownEvent : cur : ' + newDot.x + ' | ' + newDot.y);

            if (wheel.isDotIn(newDot)) {
                drag = 'wheel';
                handler.setHueByDot(newDot);

                move = function (e) {
                    handler.wheelMouseMove(e, newDot);
                };
                up = function (e) {
                    KellyColorPicker.cursorLock = false;
                    handler.wheelMouseUp(e, newDot);
                };

            } else if (svFig.isDotIn(newDot)) {
                drag = 'sv';
                handler.setColorByDot(newDot);

                move = function (e) {
                    handler.svMouseMove(e, newDot);
                };
                up = function (e) {
                    KellyColorPicker.cursorLock = false;
                    handler.svMouseUp(e, newDot);
                };
            } else if (alpha && alphaSlider.isDotIn(newDot)) {
                drag = 'alpha';
                handler.setAlphaByDot(newDot);

                move = function (e) {
                    handler.alphaMouseMove(e, newDot);
                };
                up = function (e) {
                    KellyColorPicker.cursorLock = false;
                    handler.alphaMouseUp(e, newDot);
                };
            } else if (styleSwitch && styleSwitch.isDotIn(newDot)) {
                handler.setMethod();
            } else if (colorSavers.length) { // here all items with post check of dot in

                for (var i = 0; i <= colorSavers.length - 1; ++i)
                {
                    if (colorSavers[i].isDotIn(newDot)) {
                        selectColorSaver(i);
                        break;
                    }
                }
            }

            if (move && up) {
                disableEvents();
                KellyColorPicker.cursorLock = handler;
                addEventListner(document, "mouseup", up, 'action_process_');
                addEventListner(document, "mousemove", move, 'action_process_');
                addEventListner(document, "touchend", up, 'action_process_');
                addEventListner(document, "touchmove", move, 'action_process_');
            }
        };

        this.wheelMouseMove = function (event, dot) {
            event.preventDefault();

            if (!drag)
                return;

            if (!cursorAnimReady) {
                return;
            }
            cursorAnimReady = false;
            var newDot = getEventDot(event);

            // console.log('wheelMouseMove : start : ' + dot.x + ' | ' + dot.y + ' cur : ' + newDot.x + ' | ' + newDot.y);
            requestAnimationFrame(function () {
                cursorAnimReady = true;
            });
            //setTimeout(function() {cursorAnimReady = true;}, 1000/30);

            handler.setHueByDot(newDot);

            if (userEvents["mousemoveh"]) {
                var callback = userEvents["mousemoveh"];
                callback(event, handler, newDot);
            }
        };

        this.wheelMouseUp = function (event, dot) {
            event.preventDefault();
            if (!drag)
                return;
            //console.log('wheelMouseUp : start : ' + dot.x + ' | ' + dot.y);

            removeEventListener(document, "mouseup", 'action_process_');
            removeEventListener(document, "mousemove", 'action_process_');
            removeEventListener(document, "touchend", 'action_process_');
            removeEventListener(document, "touchmove", 'action_process_');

            enableEvents();
            drag = false;

            rendered = false;
            draw();

            var newDot = getEventDot(event);
            svCursorMouse.updateCursor(newDot);

            if (userEvents["mouseuph"]) {
                var callback = userEvents["mouseuph"];
                callback(event, handler, newDot);
            }
        };

        this.alphaMouseMove = function (event, dot) {
            event.preventDefault();
            if (!drag)
                return;

            if (!cursorAnimReady) {
                return;
            }

            cursorAnimReady = false;
            var newDot = getEventDot(event);

            // console.log('svMouseMove : start : ' + dot.x + ' | ' + dot.y + ' cur : ' + newDot.x + ' | ' + newDot.y);

            newDot = alphaSlider.limitDotPosition(newDot);

            requestAnimationFrame(function () {
                cursorAnimReady = true;
            });
            //setTimeout(function() {cursorAnimReady = true;}, 1000/30);

            handler.setAlphaByDot(newDot);

            if (userEvents["mousemovealpha"]) {
                var callback = userEvents["mousemovealpha"];
                callback(event, handler, newDot);
            }
        };

        this.alphaMouseUp = function (event, dot) {
            event.preventDefault();
            if (!drag)
                return;

            removeEventListener(document, "mouseup", 'action_process_');
            removeEventListener(document, "mousemove", 'action_process_');
            removeEventListener(document, "touchend", 'action_process_');
            removeEventListener(document, "touchmove", 'action_process_');

            enableEvents();
            drag = false;

            var newDot = getEventDot(event);
            svCursorMouse.updateCursor(newDot);

            if (userEvents["mouseupalpha"]) {
                var callback = userEvents["mouseupalpha"];
                callback(event, handler, newDot);
            }
        };

        this.svMouseMove = function (event, dot) {
            event.preventDefault();
            if (!drag)
                return;

            if (!cursorAnimReady) {
                return;
            }

            cursorAnimReady = false;
            var newDot = getEventDot(event);

            // console.log('svMouseMove : start : ' + dot.x + ' | ' + dot.y + ' cur : ' + newDot.x + ' | ' + newDot.y);

            newDot = svFig.limitDotPosition(newDot);

            requestAnimationFrame(function () {
                cursorAnimReady = true;
            });
            //setTimeout(function() {cursorAnimReady = true;}, 1000/30);

            handler.setColorByDot(newDot);

            if (userEvents["mousemovesv"]) {
                var callback = userEvents["mousemovesv"];
                callback(event, handler, newDot);
            }
        };

        this.svMouseUp = function (event, dot) {
            event.preventDefault();
            if (!drag)
                return;

            // console.log('svMouseUp : start : ' + dot.x + ' | ' + dot.y);

            removeEventListener(document, "mouseup", 'action_process_');
            removeEventListener(document, "mousemove", 'action_process_');
            removeEventListener(document, "touchend", 'action_process_');
            removeEventListener(document, "touchmove", 'action_process_');

            enableEvents();
            drag = false;

            var newDot = getEventDot(event);
            svCursorMouse.updateCursor(newDot);
            
            // todo 
            // split cached data for sv + h wheel and slider, so we can redraw alpha slider without performanse lost in svMouseMove
            
            if (alpha) {
                rendered = false;
                draw();
            }
            
            if (userEvents["mouseupsv"]) {
                var callback = userEvents["mouseupsv"];
                callback(event, handler, newDot);
            }
        };

        this.addUserEvent = function (event, callback) {
            userEvents[event] = callback;
            return true;
        };

        this.removeUserEvent = function (event) {
            if (!userEvents[event])
                return false;
            userEvents[event] = null;
            return true;
        };

        // для кастомизации отображения элементов виджета

        this.getCanvas = function () {
            if (!ctx)
                return false;
            return canvas;
        };

        this.getCtx = function () {
            if (!ctx)
                return false;
            return ctx;
        };

        this.getInput = function () {
            return input;
        };
        this.getSvFig = function () {
            return svFig;
        };
        this.getSvFigCursor = function () {
            return svCursor;
        };

        this.getWheel = function () {
            return wheel;
        };
        this.getWheelCursor = function () {
            return wheelCursor;
        };

        this.getCurColorHsv = function () {
            return hsv;
        };
        this.getCurColorRgb = function () {
            return rgb;
        };
        this.getCurColorHex = function () {
            return hex;
        };
        this.getCurColorRgba = function () {
            return {r: rgb.r, g: rgb.g, b: rgb.b, a: a};
        };
        this.getCurAlpha = function () {
            return a;
        };
        this.getAlphaFig = function () {
            if (alpha)
                return alphaSlider;
            else
                return false;
        };

        this.getPopup = function () {
            return popup;
        };
        this.getSize = function () {
            return wheelBlockSize;
        };

        // if align not setted get selected
        this.getColorSaver = function (align) {
            for (var i = 0; i <= colorSavers.length - 1; ++i)
            {
                if ((!align && colorSavers[i].selected) || colorSavers[i].align == align) {
                    colorSavers[i].rgb = hexToRgb(colorSavers[i].color);
                    colorSavers[i].hsv = rgbToHsv(colorSavers[i].rgb.r, colorSavers[i].rgb.g, colorSavers[i].rgb.b);
                    return colorSavers[i];
                }
            }
        };

        this.setColorSaver = function (align) {

            if (!align)
                return false;

            for (var i = 0; i <= colorSavers.length - 1; ++i)
            {
                if (colorSavers[i].align == align) {
                    selectColorSaver(i);
                    return colorSavers[i];
                }
            }
        };

        this.updateView = function (dropBuffer) {
            if (!ctx)
                return false;

            if (dropBuffer) {
                wheel.imageData = null;
                svFig.imageData = null;
                canvasHelperData = null;
            }

            rendered = false;
            updateSize();
            draw();
            return true;
        };

        // resize canvas, with all data \ full refresh view
        // if size same as current and refresh variable setted to true - refresh current view anyway
        // othervise exit with return true

        this.resize = function (size, refresh) {
            if (!ctx)
                return false;
            if (size == wheelBlockSize && !refresh)
                return true;

            rendered = false;
            wheel.imageData = null;
            svFig.imageData = null;
            canvasHelperData = null;
            wheelBlockSize = size;
            updateSize();

            handler.setColorByHex(false);
            return false;
        };

        this.syncSize = function (e) {

            if (!resizeWith)
                return false;

            var newSize = getSizeByElement(resizeWith);
            if (newSize)
                handler.resize(newSize);
            return false;
        };

        this.setMethod = function (newMethod) {
            if (!newMethod) {
                newMethod = 'triangle';
                if (method == 'triangle')
                    newMethod = 'quad';
            }

            if (newMethod == method)
                return false;
            if (method != 'quad' && method != 'triangle')
                return false;

            method = newMethod;

            if (method == 'quad')
                svFig = getSvFigureQuad();
            if (method == 'triangle')
                svFig = getSvFigureTriangle();

            handler.resize(wheelBlockSize, true);

            if (userEvents["setmethod"]) {
                var callback = userEvents["setmethod"];
                callback(handler, method);
            }

            return true;
        };

        // restore color of input ? 

        this.destroy = function () {
            if (!handler) {
                return false;
            }

            if (svCursorMouse.curType > 0) {
                KellyColorPicker.cursorLock = false;
                svCursorMouse.initStandartCursor();
            }

            if (drag) {
                removeEventListener(document, "mouseup", 'action_process_');
                removeEventListener(document, "mousemove", 'action_process_');
                removeEventListener(document, "touchend", 'action_process_');
                removeEventListener(document, "touchmove", 'action_process_');

                drag = false;
            }

            if (popup.tag) {
                removeEventListener(input, "click", "popup_");
            }

            if (input) {
                removeEventListener(input, "click", 'input_edit_');
                removeEventListener(input, "change", 'input_edit_');
                removeEventListener(input, "keyup", 'input_edit_');
                removeEventListener(input, "keypress", 'input_edit_');
            }

            // remove popup close and resize events if this picker include them erlier
            if (KellyColorPicker.popupEventsInclude && events['popup_close_click']) {
                if (KellyColorPicker.activePopUp)
                    KellyColorPicker.activePopUp.popUpClose(false);

                removeEventListener(document, "click", 'popup_close_');
                removeEventListener(window, "resize", 'popup_resize_');

                KellyColorPicker.popupEventsInclude = false;
            }

            wheel.imageData = null;
            svFig.imageData = null;
            canvasHelperData = null;
            canvasHelper = null;

            if (place && place.parentNode) {
                place.parentNode.removeChild(place);
            }

            if (resizeWith) {
                removeEventListener(window, "resize", 'canvas_');
            }

            disableEvents(); // remove canvas events		

            // debug test for check is all events removed 
            // for (var key in events) {
            // 	console.log('key : ' +  key + ' data ' + events[key]);
            // }

            handler = null;
        };

        constructor(cfg);
    }

    /* static methods */

    /**
     * Тригер для объектов KellyColorPicker, чтобы не сбрасывали стиль курсора при наведении если уже идет выбор цвета
     * Notice : при выходе курсора за границы текущего canvas, событие неизвестного объекта всегда может сбросить изображение курсора
     */

    KellyColorPicker.cursorLock = false; // можно указывать handler объекта
    KellyColorPicker.activePopUp = false;
    KellyColorPicker.popupEventsInclude = false; // include events for document and window once for all elements

    KellyColorPicker.attachToInputByClass = function (className, cfg) {

        var colorPickers = new Array();
        var inputs = document.getElementsByClassName(className);


        for (var i = 0; i < inputs.length; i++) {

            if (cfg)
                cfg.input = inputs[i];
            else
                cfg = {input: inputs[i], size: 150};

            colorPickers.push(new KellyColorPicker(cfg));
        }

        return colorPickers;
    };

    /* src/components/ColorPicker.svelte generated by Svelte v3.49.0 */
    const file$b = "src/components/ColorPicker.svelte";

    // (1:0) {#if show}
    function create_if_block$9(ctx) {
    	let div;
    	let p;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let canvas_1;
    	let br;
    	let t4;
    	let input_1;
    	let t5;
    	let button0;
    	let t6;
    	let t7;
    	let button1;
    	let t8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			t0 = text("The color for ");
    			t1 = text(/*explainText*/ ctx[2]);
    			t2 = text(":");
    			t3 = space$3();
    			canvas_1 = element("canvas");
    			br = element("br");
    			t4 = space$3();
    			input_1 = element("input");
    			t5 = space$3();
    			button0 = element("button");
    			t6 = text("Select");
    			t7 = space$3();
    			button1 = element("button");
    			t8 = text("Quit");
    			add_location(p, file$b, 5, 8, 205);
    			attr_dev(canvas_1, "id", "picker");
    			add_location(canvas_1, file$b, 6, 8, 249);
    			add_location(br, file$b, 6, 59, 300);
    			attr_dev(input_1, "id", "color");
    			input_1.value = /*color*/ ctx[0];
    			add_location(input_1, file$b, 7, 8, 313);
    			set_style(button0, "background-color", /*$theme*/ ctx[5].textAreaColor);
    			set_style(button0, "font-family", /*$theme*/ ctx[5].font);
    			set_style(button0, "color", /*$theme*/ ctx[5].textColor);
    			set_style(button0, "font-size", /*$theme*/ ctx[5].fontSize);
    			attr_dev(button0, "class", "svelte-6rjn91");
    			add_location(button0, file$b, 13, 8, 482);
    			set_style(button1, "background-color", /*$theme*/ ctx[5].textAreaColor);
    			set_style(button1, "font-family", /*$theme*/ ctx[5].font);
    			set_style(button1, "color", /*$theme*/ ctx[5].textColor);
    			set_style(button1, "font-size", /*$theme*/ ctx[5].fontSize);
    			attr_dev(button1, "class", "svelte-6rjn91");
    			add_location(button1, file$b, 19, 8, 743);
    			attr_dev(div, "id", "colorPicker");
    			set_style(div, "background-color", /*$theme*/ ctx[5].backgroundColor);
    			set_style(div, "font-family", /*$theme*/ ctx[5].font);
    			set_style(div, "color", /*$theme*/ ctx[5].textColor);
    			set_style(div, "font-size", /*$theme*/ ctx[5].fontSize);
    			attr_dev(div, "class", "svelte-6rjn91");
    			add_location(div, file$b, 1, 4, 15);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(div, t3);
    			append_dev(div, canvas_1);
    			/*canvas_1_binding*/ ctx[11](canvas_1);
    			append_dev(div, br);
    			append_dev(div, t4);
    			append_dev(div, input_1);
    			/*input_1_binding*/ ctx[12](input_1);
    			append_dev(div, t5);
    			append_dev(div, button0);
    			append_dev(button0, t6);
    			append_dev(div, t7);
    			append_dev(div, button1);
    			append_dev(button1, t8);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input_1, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
    					listen_dev(button0, "click", /*click_handler*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*explainText*/ 4) set_data_dev(t1, /*explainText*/ ctx[2]);

    			if (dirty & /*color*/ 1 && input_1.value !== /*color*/ ctx[0]) {
    				prop_dev(input_1, "value", /*color*/ ctx[0]);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button0, "background-color", /*$theme*/ ctx[5].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button0, "font-family", /*$theme*/ ctx[5].font);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button0, "color", /*$theme*/ ctx[5].textColor);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button0, "font-size", /*$theme*/ ctx[5].fontSize);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button1, "background-color", /*$theme*/ ctx[5].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button1, "font-family", /*$theme*/ ctx[5].font);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button1, "color", /*$theme*/ ctx[5].textColor);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(button1, "font-size", /*$theme*/ ctx[5].fontSize);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(div, "background-color", /*$theme*/ ctx[5].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(div, "font-family", /*$theme*/ ctx[5].font);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(div, "color", /*$theme*/ ctx[5].textColor);
    			}

    			if (dirty & /*$theme*/ 32) {
    				set_style(div, "font-size", /*$theme*/ ctx[5].fontSize);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*canvas_1_binding*/ ctx[11](null);
    			/*input_1_binding*/ ctx[12](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(1:0) {#if show}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let if_block_anchor;
    	let if_block = /*show*/ ctx[1] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*show*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(5, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ColorPicker', slots, []);
    	let { color = "" } = $$props;
    	let { id = 0 } = $$props;
    	let { show = false } = $$props;
    	let { item = 'circle' } = $$props;
    	let { explainText = '' } = $$props;
    	let canvas;
    	let input;
    	let picker = {};
    	const dispatch = createEventDispatcher();

    	afterUpdate(() => {
    		if (show) {
    			picker = new KellyColorPicker({
    					place: canvas,
    					input,
    					colorSaver: true,
    					methodSwitch: true
    				});
    		}
    	});

    	function fire(name, data) {
    		dispatch(name, { data });
    	}

    	function quitColorPicker() {
    		fire('quitColorPicker', {});
    	}

    	function saveColor() {
    		document.body.style.cursor = 'default';
    		fire('colorChanged', { color: input.value, id });
    	}

    	function processKey(event) {
    		if (event.key === 'Enter') {
    			event.preventDefault();
    			event.stopPropagation();
    			saveColor();
    		}
    	}

    	const writable_props = ['color', 'id', 'show', 'item', 'explainText'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ColorPicker> was created with unknown prop '${key}'`);
    	});

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			canvas = $$value;
    			$$invalidate(3, canvas);
    		});
    	}

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(4, input);
    		});
    	}

    	const keyup_handler = event => {
    		processKey(event);
    	};

    	const click_handler = event => {
    		saveColor();
    	};

    	const click_handler_1 = event => {
    		quitColorPicker();
    	};

    	$$self.$$set = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('id' in $$props) $$invalidate(9, id = $$props.id);
    		if ('show' in $$props) $$invalidate(1, show = $$props.show);
    		if ('item' in $$props) $$invalidate(10, item = $$props.item);
    		if ('explainText' in $$props) $$invalidate(2, explainText = $$props.explainText);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		afterUpdate,
    		KellyColorPicker,
    		theme,
    		color,
    		id,
    		show,
    		item,
    		explainText,
    		canvas,
    		input,
    		picker,
    		dispatch,
    		fire,
    		quitColorPicker,
    		saveColor,
    		processKey,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('color' in $$props) $$invalidate(0, color = $$props.color);
    		if ('id' in $$props) $$invalidate(9, id = $$props.id);
    		if ('show' in $$props) $$invalidate(1, show = $$props.show);
    		if ('item' in $$props) $$invalidate(10, item = $$props.item);
    		if ('explainText' in $$props) $$invalidate(2, explainText = $$props.explainText);
    		if ('canvas' in $$props) $$invalidate(3, canvas = $$props.canvas);
    		if ('input' in $$props) $$invalidate(4, input = $$props.input);
    		if ('picker' in $$props) picker = $$props.picker;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		color,
    		show,
    		explainText,
    		canvas,
    		input,
    		$theme,
    		quitColorPicker,
    		saveColor,
    		processKey,
    		id,
    		item,
    		canvas_1_binding,
    		input_1_binding,
    		keyup_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class ColorPicker extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			color: 0,
    			id: 9,
    			show: 1,
    			item: 10,
    			explainText: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ColorPicker",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get color() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get show() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get item() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get explainText() {
    		throw new Error("<ColorPicker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set explainText(value) {
    		throw new Error("<ColorPicker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ThemePrefs.svelte generated by Svelte v3.49.0 */

    const { console: console_1 } = globals;
    const file$a = "src/components/ThemePrefs.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[40] = list[i];
    	child_ctx[42] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[43] = list[i];
    	return child_ctx;
    }

    // (198:2) {:else}
    function create_else_block$4(ctx) {
    	let select;
    	let option;
    	let t1;
    	let button0;
    	let t2;
    	let t3;
    	let button1;
    	let t4;
    	let mounted;
    	let dispose;
    	let if_block = /*themeList*/ ctx[7] !== undefined && create_if_block_2$3(ctx);

    	const block = {
    		c: function create() {
    			select = element("select");
    			if (if_block) if_block.c();
    			option = element("option");
    			option.textContent = "New";
    			t1 = space$3();
    			button0 = element("button");
    			t2 = text("Update Theme");
    			t3 = space$3();
    			button1 = element("button");
    			t4 = text("Delete Theme");
    			option.__value = "New";
    			option.value = option.__value;
    			add_location(option, file$a, 211, 6, 4811);
    			attr_dev(select, "class", "prefSelector svelte-1igofh5");
    			set_style(select, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			set_style(select, "color", /*$theme*/ ctx[8].textColor);
    			if (/*style*/ ctx[5] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[17].call(select));
    			add_location(select, file$a, 198, 4, 4446);
    			set_style(button0, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			set_style(button0, "font-family", /*$theme*/ ctx[8].font);
    			set_style(button0, "color", /*$theme*/ ctx[8].textColor);
    			set_style(button0, "font-size", /*$theme*/ ctx[8].fontSize);
    			attr_dev(button0, "class", "svelte-1igofh5");
    			add_location(button0, file$a, 213, 4, 4862);
    			set_style(button1, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			set_style(button1, "font-family", /*$theme*/ ctx[8].font);
    			set_style(button1, "color", /*$theme*/ ctx[8].textColor);
    			set_style(button1, "font-size", /*$theme*/ ctx[8].fontSize);
    			attr_dev(button1, "class", "svelte-1igofh5");
    			add_location(button1, file$a, 219, 4, 5083);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);
    			if (if_block) if_block.m(select, null);
    			append_dev(select, option);
    			select_option(select, /*style*/ ctx[5]);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button0, anchor);
    			append_dev(button0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, button1, anchor);
    			append_dev(button1, t4);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[17]),
    					listen_dev(select, "change", /*change_handler_1*/ ctx[18], false, false, false),
    					listen_dev(button0, "click", /*updateTheme*/ ctx[13], false, false, false),
    					listen_dev(button1, "click", /*deleteStyle*/ ctx[14], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*themeList*/ ctx[7] !== undefined) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$3(ctx);
    					if_block.c();
    					if_block.m(select, option);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(select, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(select, "color", /*$theme*/ ctx[8].textColor);
    			}

    			if (dirty[0] & /*style, themeList*/ 160) {
    				select_option(select, /*style*/ ctx[5]);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button0, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button0, "font-family", /*$theme*/ ctx[8].font);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button0, "color", /*$theme*/ ctx[8].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button0, "font-size", /*$theme*/ ctx[8].fontSize);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button1, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button1, "font-family", /*$theme*/ ctx[8].font);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button1, "color", /*$theme*/ ctx[8].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button1, "font-size", /*$theme*/ ctx[8].fontSize);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			if (if_block) if_block.d();
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(button1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(198:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (183:2) {#if keepNewInput}
    function create_if_block_1$5(ctx) {
    	let input;
    	let t0;
    	let button;
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space$3();
    			button = element("button");
    			t1 = text("Save New");
    			attr_dev(input, "class", "prefInput svelte-1igofh5");
    			set_style(input, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			set_style(input, "color", /*$theme*/ ctx[8].textColor);
    			add_location(input, file$a, 183, 4, 4005);
    			set_style(button, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			set_style(button, "font-family", /*$theme*/ ctx[8].font);
    			set_style(button, "color", /*$theme*/ ctx[8].textColor);
    			set_style(button, "font-size", /*$theme*/ ctx[8].fontSize);
    			attr_dev(button, "class", "svelte-1igofh5");
    			add_location(button, file$a, 191, 4, 4218);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*style*/ ctx[5]);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[15]),
    					listen_dev(input, "change", /*change_handler*/ ctx[16], false, false, false),
    					listen_dev(button, "click", /*saveNewTheme*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(input, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(input, "color", /*$theme*/ ctx[8].textColor);
    			}

    			if (dirty[0] & /*style, themeList*/ 160 && input.value !== /*style*/ ctx[5]) {
    				set_input_value(input, /*style*/ ctx[5]);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button, "font-family", /*$theme*/ ctx[8].font);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button, "color", /*$theme*/ ctx[8].textColor);
    			}

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(button, "font-size", /*$theme*/ ctx[8].fontSize);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(183:2) {#if keepNewInput}",
    		ctx
    	});

    	return block;
    }

    // (207:6) {#if themeList !== undefined}
    function create_if_block_2$3(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*themeList*/ ctx[7];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*themeList*/ 128) {
    				each_value_1 = /*themeList*/ ctx[7];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(207:6) {#if themeList !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (208:8) {#each themeList as item}
    function create_each_block_1(ctx) {
    	let option;
    	let t_value = /*item*/ ctx[43] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*item*/ ctx[43];
    			option.value = option.__value;
    			add_location(option, file$a, 208, 10, 4740);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*themeList*/ 128 && t_value !== (t_value = /*item*/ ctx[43] + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*themeList*/ 128 && option_value_value !== (option_value_value = /*item*/ ctx[43])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(208:8) {#each themeList as item}",
    		ctx
    	});

    	return block;
    }

    // (230:2) {#each $theme.buttons as button, key}
    function create_each_block$5(ctx) {
    	let div1;
    	let label0;
    	let t0;
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let label1;
    	let t4_value = /*button*/ ctx[40].color + "";
    	let t4;
    	let t5;
    	let mounted;
    	let dispose;

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[19](/*button*/ ctx[40], ...args);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			label0 = element("label");
    			t0 = text("#");
    			t1 = text(/*key*/ ctx[42]);
    			t2 = space$3();
    			div0 = element("div");
    			t3 = space$3();
    			label1 = element("label");
    			t4 = text(t4_value);
    			t5 = space$3();
    			attr_dev(label0, "class", "circlePickerLabel svelte-1igofh5");
    			add_location(label0, file$a, 231, 6, 5451);
    			attr_dev(div0, "class", "circlePicker svelte-1igofh5");
    			set_style(div0, "background-color", /*button*/ ctx[40].color);
    			add_location(div0, file$a, 232, 6, 5505);
    			attr_dev(label1, "class", "circlePickerLabel svelte-1igofh5");
    			add_location(label1, file$a, 239, 6, 5677);
    			attr_dev(div1, "class", "circlePickerWrap svelte-1igofh5");
    			add_location(div1, file$a, 230, 4, 5414);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, label0);
    			append_dev(label0, t0);
    			append_dev(label0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div1, t3);
    			append_dev(div1, label1);
    			append_dev(label1, t4);
    			append_dev(div1, t5);

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$theme*/ 256) {
    				set_style(div0, "background-color", /*button*/ ctx[40].color);
    			}

    			if (dirty[0] & /*$theme*/ 256 && t4_value !== (t4_value = /*button*/ ctx[40].color + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(230:2) {#each $theme.buttons as button, key}",
    		ctx
    	});

    	return block;
    }

    // (451:0) {#if $theme !== undefined}
    function create_if_block$8(ctx) {
    	let colorpicker;
    	let current;

    	colorpicker = new ColorPicker({
    			props: {
    				item: /*pickerType*/ ctx[4],
    				explainText: /*explanation*/ ctx[6],
    				color: /*colorchange*/ ctx[0],
    				id: /*colorID*/ ctx[1],
    				show: /*showPicker*/ ctx[2]
    			},
    			$$inline: true
    		});

    	colorpicker.$on("colorChanged", /*colorChanged_handler*/ ctx[37]);
    	colorpicker.$on("quitColorPicker", /*quitColorPicker_handler*/ ctx[38]);

    	const block = {
    		c: function create() {
    			create_component(colorpicker.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(colorpicker, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const colorpicker_changes = {};
    			if (dirty[0] & /*pickerType*/ 16) colorpicker_changes.item = /*pickerType*/ ctx[4];
    			if (dirty[0] & /*explanation*/ 64) colorpicker_changes.explainText = /*explanation*/ ctx[6];
    			if (dirty[0] & /*colorchange*/ 1) colorpicker_changes.color = /*colorchange*/ ctx[0];
    			if (dirty[0] & /*colorID*/ 2) colorpicker_changes.id = /*colorID*/ ctx[1];
    			if (dirty[0] & /*showPicker*/ 4) colorpicker_changes.show = /*showPicker*/ ctx[2];
    			colorpicker.$set(colorpicker_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(colorpicker.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(colorpicker.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(colorpicker, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(451:0) {#if $theme !== undefined}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div0;
    	let label0;
    	let t1;
    	let t2;
    	let h30;
    	let t4;
    	let div1;
    	let t5;
    	let h31;
    	let t7;
    	let div19;
    	let label1;
    	let t9;
    	let div2;
    	let t10;
    	let label2;
    	let t11_value = /*$theme*/ ctx[8].textAreaColor + "";
    	let t11;
    	let t12;
    	let label3;
    	let t14;
    	let div3;
    	let t15;
    	let label4;
    	let t16_value = /*$theme*/ ctx[8].backgroundColor + "";
    	let t16;
    	let t17;
    	let label5;
    	let t19;
    	let div4;
    	let t20;
    	let label6;
    	let t21_value = /*$theme*/ ctx[8].textColor + "";
    	let t21;
    	let t22;
    	let label7;
    	let t24;
    	let div5;
    	let t25;
    	let label8;
    	let t26_value = /*$theme*/ ctx[8].borderColor + "";
    	let t26;
    	let t27;
    	let label9;
    	let t29;
    	let div6;
    	let t30;
    	let label10;
    	let t31_value = /*$theme*/ ctx[8].functionColor + "";
    	let t31;
    	let t32;
    	let label11;
    	let t34;
    	let div7;
    	let t35;
    	let label12;
    	let t36_value = /*$theme*/ ctx[8].stringColor + "";
    	let t36;
    	let t37;
    	let label13;
    	let t39;
    	let div8;
    	let t40;
    	let label14;
    	let t41_value = /*$theme*/ ctx[8].constantColor + "";
    	let t41;
    	let t42;
    	let label15;
    	let t44;
    	let div9;
    	let t45;
    	let label16;
    	let t46_value = /*$theme*/ ctx[8].keywordColor + "";
    	let t46;
    	let t47;
    	let label17;
    	let t49;
    	let div10;
    	let t50;
    	let label18;
    	let t51_value = /*$theme*/ ctx[8].highlightBackgroundColor + "";
    	let t51;
    	let t52;
    	let label19;
    	let t54;
    	let div11;
    	let t55;
    	let label20;
    	let t56_value = /*$theme*/ ctx[8].selectionColor + "";
    	let t56;
    	let t57;
    	let label21;
    	let t59;
    	let div12;
    	let t60;
    	let label22;
    	let t61_value = /*$theme*/ ctx[8].Cyan + "";
    	let t61;
    	let t62;
    	let label23;
    	let t64;
    	let div13;
    	let t65;
    	let label24;
    	let t66_value = /*$theme*/ ctx[8].Green + "";
    	let t66;
    	let t67;
    	let label25;
    	let t69;
    	let div14;
    	let t70;
    	let label26;
    	let t71_value = /*$theme*/ ctx[8].Orange + "";
    	let t71;
    	let t72;
    	let label27;
    	let t74;
    	let div15;
    	let t75;
    	let label28;
    	let t76_value = /*$theme*/ ctx[8].Pink + "";
    	let t76;
    	let t77;
    	let label29;
    	let t79;
    	let div16;
    	let t80;
    	let label30;
    	let t81_value = /*$theme*/ ctx[8].Purple + "";
    	let t81;
    	let t82;
    	let label31;
    	let t84;
    	let div17;
    	let t85;
    	let label32;
    	let t86_value = /*$theme*/ ctx[8].Red + "";
    	let t86;
    	let t87;
    	let label33;
    	let t89;
    	let div18;
    	let t90;
    	let label34;
    	let t91_value = /*$theme*/ ctx[8].Yellow + "";
    	let t91;
    	let t92;
    	let if_block1_anchor;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*keepNewInput*/ ctx[3]) return create_if_block_1$5;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let each_value = /*$theme*/ ctx[8].buttons;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	let if_block1 = /*$theme*/ ctx[8] !== undefined && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Name of theme:";
    			t1 = space$3();
    			if_block0.c();
    			t2 = space$3();
    			h30 = element("h3");
    			h30.textContent = "Circle Colors";
    			t4 = space$3();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space$3();
    			h31 = element("h3");
    			h31.textContent = "Various Other Colors";
    			t7 = space$3();
    			div19 = element("div");
    			label1 = element("label");
    			label1.textContent = "textAreaColor";
    			t9 = space$3();
    			div2 = element("div");
    			t10 = space$3();
    			label2 = element("label");
    			t11 = text(t11_value);
    			t12 = space$3();
    			label3 = element("label");
    			label3.textContent = "backgroundColor";
    			t14 = space$3();
    			div3 = element("div");
    			t15 = space$3();
    			label4 = element("label");
    			t16 = text(t16_value);
    			t17 = space$3();
    			label5 = element("label");
    			label5.textContent = "textColor";
    			t19 = space$3();
    			div4 = element("div");
    			t20 = space$3();
    			label6 = element("label");
    			t21 = text(t21_value);
    			t22 = space$3();
    			label7 = element("label");
    			label7.textContent = "borderColor";
    			t24 = space$3();
    			div5 = element("div");
    			t25 = space$3();
    			label8 = element("label");
    			t26 = text(t26_value);
    			t27 = space$3();
    			label9 = element("label");
    			label9.textContent = "functionColor";
    			t29 = space$3();
    			div6 = element("div");
    			t30 = space$3();
    			label10 = element("label");
    			t31 = text(t31_value);
    			t32 = space$3();
    			label11 = element("label");
    			label11.textContent = "stringColor";
    			t34 = space$3();
    			div7 = element("div");
    			t35 = space$3();
    			label12 = element("label");
    			t36 = text(t36_value);
    			t37 = space$3();
    			label13 = element("label");
    			label13.textContent = "constantColor";
    			t39 = space$3();
    			div8 = element("div");
    			t40 = space$3();
    			label14 = element("label");
    			t41 = text(t41_value);
    			t42 = space$3();
    			label15 = element("label");
    			label15.textContent = "keywordColor";
    			t44 = space$3();
    			div9 = element("div");
    			t45 = space$3();
    			label16 = element("label");
    			t46 = text(t46_value);
    			t47 = space$3();
    			label17 = element("label");
    			label17.textContent = "highlightBackgroundColor";
    			t49 = space$3();
    			div10 = element("div");
    			t50 = space$3();
    			label18 = element("label");
    			t51 = text(t51_value);
    			t52 = space$3();
    			label19 = element("label");
    			label19.textContent = "selectionColor";
    			t54 = space$3();
    			div11 = element("div");
    			t55 = space$3();
    			label20 = element("label");
    			t56 = text(t56_value);
    			t57 = space$3();
    			label21 = element("label");
    			label21.textContent = "Cyan";
    			t59 = space$3();
    			div12 = element("div");
    			t60 = space$3();
    			label22 = element("label");
    			t61 = text(t61_value);
    			t62 = space$3();
    			label23 = element("label");
    			label23.textContent = "Green";
    			t64 = space$3();
    			div13 = element("div");
    			t65 = space$3();
    			label24 = element("label");
    			t66 = text(t66_value);
    			t67 = space$3();
    			label25 = element("label");
    			label25.textContent = "Orange";
    			t69 = space$3();
    			div14 = element("div");
    			t70 = space$3();
    			label26 = element("label");
    			t71 = text(t71_value);
    			t72 = space$3();
    			label27 = element("label");
    			label27.textContent = "Pink";
    			t74 = space$3();
    			div15 = element("div");
    			t75 = space$3();
    			label28 = element("label");
    			t76 = text(t76_value);
    			t77 = space$3();
    			label29 = element("label");
    			label29.textContent = "Purple";
    			t79 = space$3();
    			div16 = element("div");
    			t80 = space$3();
    			label30 = element("label");
    			t81 = text(t81_value);
    			t82 = space$3();
    			label31 = element("label");
    			label31.textContent = "Red";
    			t84 = space$3();
    			div17 = element("div");
    			t85 = space$3();
    			label32 = element("label");
    			t86 = text(t86_value);
    			t87 = space$3();
    			label33 = element("label");
    			label33.textContent = "Yellow";
    			t89 = space$3();
    			div18 = element("div");
    			t90 = space$3();
    			label34 = element("label");
    			t91 = text(t91_value);
    			t92 = space$3();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$1();
    			add_location(label0, file$a, 181, 2, 3949);
    			attr_dev(div0, "id", "themeName");
    			attr_dev(div0, "class", "svelte-1igofh5");
    			add_location(div0, file$a, 180, 0, 3926);
    			add_location(h30, file$a, 227, 0, 5315);
    			attr_dev(div1, "class", "circlePickersWrap svelte-1igofh5");
    			add_location(div1, file$a, 228, 0, 5338);
    			add_location(h31, file$a, 243, 0, 5761);
    			attr_dev(label1, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label1, file$a, 245, 2, 5826);
    			attr_dev(div2, "class", "circlePicker svelte-1igofh5");
    			set_style(div2, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			add_location(div2, file$a, 246, 2, 5887);
    			attr_dev(label2, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label2, file$a, 256, 2, 6108);
    			attr_dev(label3, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label3, file$a, 257, 2, 6176);
    			attr_dev(div3, "class", "circlePicker svelte-1igofh5");
    			set_style(div3, "background-color", /*$theme*/ ctx[8].backgroundColor);
    			add_location(div3, file$a, 258, 2, 6239);
    			attr_dev(label4, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label4, file$a, 268, 2, 6466);
    			attr_dev(label5, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label5, file$a, 269, 2, 6536);
    			attr_dev(div4, "class", "circlePicker svelte-1igofh5");
    			set_style(div4, "background-color", /*$theme*/ ctx[8].textColor);
    			add_location(div4, file$a, 270, 2, 6593);
    			attr_dev(label6, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label6, file$a, 280, 2, 6802);
    			attr_dev(label7, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label7, file$a, 281, 2, 6866);
    			attr_dev(div5, "class", "circlePicker svelte-1igofh5");
    			set_style(div5, "background-color", /*$theme*/ ctx[8].borderColor);
    			add_location(div5, file$a, 282, 2, 6925);
    			attr_dev(label8, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label8, file$a, 292, 2, 7140);
    			attr_dev(label9, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label9, file$a, 293, 2, 7206);
    			attr_dev(div6, "class", "circlePicker svelte-1igofh5");
    			set_style(div6, "background-color", /*$theme*/ ctx[8].functionColor);
    			add_location(div6, file$a, 294, 2, 7267);
    			attr_dev(label10, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label10, file$a, 304, 2, 7488);
    			attr_dev(label11, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label11, file$a, 305, 2, 7556);
    			attr_dev(div7, "class", "circlePicker svelte-1igofh5");
    			set_style(div7, "background-color", /*$theme*/ ctx[8].stringColor);
    			add_location(div7, file$a, 306, 2, 7615);
    			attr_dev(label12, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label12, file$a, 316, 2, 7830);
    			attr_dev(label13, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label13, file$a, 317, 2, 7896);
    			attr_dev(div8, "class", "circlePicker svelte-1igofh5");
    			set_style(div8, "background-color", /*$theme*/ ctx[8].constantColor);
    			add_location(div8, file$a, 318, 2, 7957);
    			attr_dev(label14, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label14, file$a, 328, 2, 8178);
    			attr_dev(label15, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label15, file$a, 329, 2, 8246);
    			attr_dev(div9, "class", "circlePicker svelte-1igofh5");
    			set_style(div9, "background-color", /*$theme*/ ctx[8].keywordColor);
    			add_location(div9, file$a, 330, 2, 8306);
    			attr_dev(label16, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label16, file$a, 340, 2, 8524);
    			attr_dev(label17, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label17, file$a, 341, 2, 8591);
    			attr_dev(div10, "class", "circlePicker svelte-1igofh5");
    			set_style(div10, "background-color", /*$theme*/ ctx[8].highlightBackgroundColor);
    			add_location(div10, file$a, 342, 2, 8663);
    			attr_dev(label18, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label18, file$a, 352, 2, 8917);
    			attr_dev(label19, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label19, file$a, 353, 2, 8996);
    			attr_dev(div11, "class", "circlePicker svelte-1igofh5");
    			set_style(div11, "background-color", /*$theme*/ ctx[8].selectionColor);
    			add_location(div11, file$a, 354, 2, 9058);
    			attr_dev(label20, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label20, file$a, 364, 2, 9282);
    			attr_dev(label21, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label21, file$a, 365, 2, 9351);
    			attr_dev(div12, "class", "circlePicker svelte-1igofh5");
    			set_style(div12, "background-color", /*$theme*/ ctx[8].Cyan);
    			add_location(div12, file$a, 366, 2, 9403);
    			attr_dev(label22, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label22, file$a, 376, 2, 9597);
    			attr_dev(label23, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label23, file$a, 377, 2, 9656);
    			attr_dev(div13, "class", "circlePicker svelte-1igofh5");
    			set_style(div13, "background-color", /*$theme*/ ctx[8].Green);
    			add_location(div13, file$a, 378, 2, 9709);
    			attr_dev(label24, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label24, file$a, 388, 2, 9906);
    			attr_dev(label25, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label25, file$a, 389, 2, 9966);
    			attr_dev(div14, "class", "circlePicker svelte-1igofh5");
    			set_style(div14, "background-color", /*$theme*/ ctx[8].Orange);
    			add_location(div14, file$a, 390, 2, 10020);
    			attr_dev(label26, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label26, file$a, 400, 2, 10220);
    			attr_dev(label27, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label27, file$a, 401, 2, 10281);
    			attr_dev(div15, "class", "circlePicker svelte-1igofh5");
    			set_style(div15, "background-color", /*$theme*/ ctx[8].Pink);
    			add_location(div15, file$a, 402, 2, 10333);
    			attr_dev(label28, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label28, file$a, 412, 2, 10527);
    			attr_dev(label29, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label29, file$a, 413, 2, 10586);
    			attr_dev(div16, "class", "circlePicker svelte-1igofh5");
    			set_style(div16, "background-color", /*$theme*/ ctx[8].Purple);
    			add_location(div16, file$a, 414, 2, 10640);
    			attr_dev(label30, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label30, file$a, 424, 2, 10840);
    			attr_dev(label31, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label31, file$a, 425, 2, 10901);
    			attr_dev(div17, "class", "circlePicker svelte-1igofh5");
    			set_style(div17, "background-color", /*$theme*/ ctx[8].Red);
    			add_location(div17, file$a, 426, 2, 10952);
    			attr_dev(label32, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label32, file$a, 436, 2, 11143);
    			attr_dev(label33, "class", "variousPickerLabel1 svelte-1igofh5");
    			add_location(label33, file$a, 437, 2, 11201);
    			attr_dev(div18, "class", "circlePicker svelte-1igofh5");
    			set_style(div18, "background-color", /*$theme*/ ctx[8].Yellow);
    			add_location(div18, file$a, 438, 2, 11255);
    			attr_dev(label34, "class", "variousPickerLabel2 svelte-1igofh5");
    			add_location(label34, file$a, 448, 2, 11455);
    			attr_dev(div19, "id", "variousOtherColorsDiv");
    			attr_dev(div19, "class", "svelte-1igofh5");
    			add_location(div19, file$a, 244, 0, 5791);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			if_block0.m(div0, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div1, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			insert_dev(target, t5, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div19, anchor);
    			append_dev(div19, label1);
    			append_dev(div19, t9);
    			append_dev(div19, div2);
    			append_dev(div19, t10);
    			append_dev(div19, label2);
    			append_dev(label2, t11);
    			append_dev(div19, t12);
    			append_dev(div19, label3);
    			append_dev(div19, t14);
    			append_dev(div19, div3);
    			append_dev(div19, t15);
    			append_dev(div19, label4);
    			append_dev(label4, t16);
    			append_dev(div19, t17);
    			append_dev(div19, label5);
    			append_dev(div19, t19);
    			append_dev(div19, div4);
    			append_dev(div19, t20);
    			append_dev(div19, label6);
    			append_dev(label6, t21);
    			append_dev(div19, t22);
    			append_dev(div19, label7);
    			append_dev(div19, t24);
    			append_dev(div19, div5);
    			append_dev(div19, t25);
    			append_dev(div19, label8);
    			append_dev(label8, t26);
    			append_dev(div19, t27);
    			append_dev(div19, label9);
    			append_dev(div19, t29);
    			append_dev(div19, div6);
    			append_dev(div19, t30);
    			append_dev(div19, label10);
    			append_dev(label10, t31);
    			append_dev(div19, t32);
    			append_dev(div19, label11);
    			append_dev(div19, t34);
    			append_dev(div19, div7);
    			append_dev(div19, t35);
    			append_dev(div19, label12);
    			append_dev(label12, t36);
    			append_dev(div19, t37);
    			append_dev(div19, label13);
    			append_dev(div19, t39);
    			append_dev(div19, div8);
    			append_dev(div19, t40);
    			append_dev(div19, label14);
    			append_dev(label14, t41);
    			append_dev(div19, t42);
    			append_dev(div19, label15);
    			append_dev(div19, t44);
    			append_dev(div19, div9);
    			append_dev(div19, t45);
    			append_dev(div19, label16);
    			append_dev(label16, t46);
    			append_dev(div19, t47);
    			append_dev(div19, label17);
    			append_dev(div19, t49);
    			append_dev(div19, div10);
    			append_dev(div19, t50);
    			append_dev(div19, label18);
    			append_dev(label18, t51);
    			append_dev(div19, t52);
    			append_dev(div19, label19);
    			append_dev(div19, t54);
    			append_dev(div19, div11);
    			append_dev(div19, t55);
    			append_dev(div19, label20);
    			append_dev(label20, t56);
    			append_dev(div19, t57);
    			append_dev(div19, label21);
    			append_dev(div19, t59);
    			append_dev(div19, div12);
    			append_dev(div19, t60);
    			append_dev(div19, label22);
    			append_dev(label22, t61);
    			append_dev(div19, t62);
    			append_dev(div19, label23);
    			append_dev(div19, t64);
    			append_dev(div19, div13);
    			append_dev(div19, t65);
    			append_dev(div19, label24);
    			append_dev(label24, t66);
    			append_dev(div19, t67);
    			append_dev(div19, label25);
    			append_dev(div19, t69);
    			append_dev(div19, div14);
    			append_dev(div19, t70);
    			append_dev(div19, label26);
    			append_dev(label26, t71);
    			append_dev(div19, t72);
    			append_dev(div19, label27);
    			append_dev(div19, t74);
    			append_dev(div19, div15);
    			append_dev(div19, t75);
    			append_dev(div19, label28);
    			append_dev(label28, t76);
    			append_dev(div19, t77);
    			append_dev(div19, label29);
    			append_dev(div19, t79);
    			append_dev(div19, div16);
    			append_dev(div19, t80);
    			append_dev(div19, label30);
    			append_dev(label30, t81);
    			append_dev(div19, t82);
    			append_dev(div19, label31);
    			append_dev(div19, t84);
    			append_dev(div19, div17);
    			append_dev(div19, t85);
    			append_dev(div19, label32);
    			append_dev(label32, t86);
    			append_dev(div19, t87);
    			append_dev(div19, label33);
    			append_dev(div19, t89);
    			append_dev(div19, div18);
    			append_dev(div19, t90);
    			append_dev(div19, label34);
    			append_dev(label34, t91);
    			insert_dev(target, t92, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div2, "click", /*click_handler_1*/ ctx[20], false, false, false),
    					listen_dev(div3, "click", /*click_handler_2*/ ctx[21], false, false, false),
    					listen_dev(div4, "click", /*click_handler_3*/ ctx[22], false, false, false),
    					listen_dev(div5, "click", /*click_handler_4*/ ctx[23], false, false, false),
    					listen_dev(div6, "click", /*click_handler_5*/ ctx[24], false, false, false),
    					listen_dev(div7, "click", /*click_handler_6*/ ctx[25], false, false, false),
    					listen_dev(div8, "click", /*click_handler_7*/ ctx[26], false, false, false),
    					listen_dev(div9, "click", /*click_handler_8*/ ctx[27], false, false, false),
    					listen_dev(div10, "click", /*click_handler_9*/ ctx[28], false, false, false),
    					listen_dev(div11, "click", /*click_handler_10*/ ctx[29], false, false, false),
    					listen_dev(div12, "click", /*click_handler_11*/ ctx[30], false, false, false),
    					listen_dev(div13, "click", /*click_handler_12*/ ctx[31], false, false, false),
    					listen_dev(div14, "click", /*click_handler_13*/ ctx[32], false, false, false),
    					listen_dev(div15, "click", /*click_handler_14*/ ctx[33], false, false, false),
    					listen_dev(div16, "click", /*click_handler_15*/ ctx[34], false, false, false),
    					listen_dev(div17, "click", /*click_handler_16*/ ctx[35], false, false, false),
    					listen_dev(div18, "click", /*click_handler_17*/ ctx[36], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*$theme, changeColor*/ 2304) {
    				each_value = /*$theme*/ ctx[8].buttons;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div2, "background-color", /*$theme*/ ctx[8].textAreaColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t11_value !== (t11_value = /*$theme*/ ctx[8].textAreaColor + "")) set_data_dev(t11, t11_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div3, "background-color", /*$theme*/ ctx[8].backgroundColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t16_value !== (t16_value = /*$theme*/ ctx[8].backgroundColor + "")) set_data_dev(t16, t16_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div4, "background-color", /*$theme*/ ctx[8].textColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t21_value !== (t21_value = /*$theme*/ ctx[8].textColor + "")) set_data_dev(t21, t21_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div5, "background-color", /*$theme*/ ctx[8].borderColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t26_value !== (t26_value = /*$theme*/ ctx[8].borderColor + "")) set_data_dev(t26, t26_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div6, "background-color", /*$theme*/ ctx[8].functionColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t31_value !== (t31_value = /*$theme*/ ctx[8].functionColor + "")) set_data_dev(t31, t31_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div7, "background-color", /*$theme*/ ctx[8].stringColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t36_value !== (t36_value = /*$theme*/ ctx[8].stringColor + "")) set_data_dev(t36, t36_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div8, "background-color", /*$theme*/ ctx[8].constantColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t41_value !== (t41_value = /*$theme*/ ctx[8].constantColor + "")) set_data_dev(t41, t41_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div9, "background-color", /*$theme*/ ctx[8].keywordColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t46_value !== (t46_value = /*$theme*/ ctx[8].keywordColor + "")) set_data_dev(t46, t46_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div10, "background-color", /*$theme*/ ctx[8].highlightBackgroundColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t51_value !== (t51_value = /*$theme*/ ctx[8].highlightBackgroundColor + "")) set_data_dev(t51, t51_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div11, "background-color", /*$theme*/ ctx[8].selectionColor);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t56_value !== (t56_value = /*$theme*/ ctx[8].selectionColor + "")) set_data_dev(t56, t56_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div12, "background-color", /*$theme*/ ctx[8].Cyan);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t61_value !== (t61_value = /*$theme*/ ctx[8].Cyan + "")) set_data_dev(t61, t61_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div13, "background-color", /*$theme*/ ctx[8].Green);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t66_value !== (t66_value = /*$theme*/ ctx[8].Green + "")) set_data_dev(t66, t66_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div14, "background-color", /*$theme*/ ctx[8].Orange);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t71_value !== (t71_value = /*$theme*/ ctx[8].Orange + "")) set_data_dev(t71, t71_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div15, "background-color", /*$theme*/ ctx[8].Pink);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t76_value !== (t76_value = /*$theme*/ ctx[8].Pink + "")) set_data_dev(t76, t76_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div16, "background-color", /*$theme*/ ctx[8].Purple);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t81_value !== (t81_value = /*$theme*/ ctx[8].Purple + "")) set_data_dev(t81, t81_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div17, "background-color", /*$theme*/ ctx[8].Red);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t86_value !== (t86_value = /*$theme*/ ctx[8].Red + "")) set_data_dev(t86, t86_value);

    			if (!current || dirty[0] & /*$theme*/ 256) {
    				set_style(div18, "background-color", /*$theme*/ ctx[8].Yellow);
    			}

    			if ((!current || dirty[0] & /*$theme*/ 256) && t91_value !== (t91_value = /*$theme*/ ctx[8].Yellow + "")) set_data_dev(t91, t91_value);

    			if (/*$theme*/ ctx[8] !== undefined) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*$theme*/ 256) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$8(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if_block0.d();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div19);
    			if (detaching) detach_dev(t92);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    async function getStyle(nm) {
    	let resp = await fetch(`http://localhost:9978/api/theme/${nm}`, {
    		method: "GET",
    		headers: { "Content-type": "application/json" }
    	});

    	let result = await resp.json();
    	result.theme.name = nm;
    	return result.theme;
    }

    async function getStyleList() {
    	let resp = await fetch(`http://localhost:9978/api/theme/list`, {
    		method: "GET",
    		headers: { "Content-type": "application/json" }
    	});

    	let result = await resp.json();
    	return result.themes;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(8, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ThemePrefs', slots, []);
    	let colorchange = "";
    	let colorID = 0;
    	let showPicker = false;
    	let buttonColor = false;
    	let keepNewInput = false;
    	let pickerType = "";
    	let style = "Default";
    	let explanation;
    	let themeList;

    	onMount(async () => {
    		$$invalidate(7, themeList = await getStyleList());
    	});

    	async function styleSelectorChange() {
    		if (style === "New") {
    			$$invalidate(3, keepNewInput = true);
    			set_store_value(theme, $theme.name = style, $theme);
    		} else {
    			set_store_value(theme, $theme = await getStyle(style), $theme);
    			set_store_value(theme, $theme.name = style, $theme);
    		}
    	}

    	function setColor(id, color) {
    		if (buttonColor) {
    			set_store_value(theme, $theme.buttons[id].color = color, $theme);
    		} else {
    			switch (id) {
    				case "textAreaColor":
    					set_store_value(theme, $theme.textAreaColor = color, $theme);
    					break;
    				case "backgroundColor":
    					set_store_value(theme, $theme.backgroundColor = color, $theme);
    					break;
    				case "textColor":
    					set_store_value(theme, $theme.textColor = color, $theme);
    					break;
    				case "borderColor":
    					set_store_value(theme, $theme.borderColor = color, $theme);
    					break;
    				case "Cyan":
    					set_store_value(theme, $theme.Cyan = color, $theme);
    					break;
    				case "Green":
    					set_store_value(theme, $theme.Green = color, $theme);
    					break;
    				case "Orange":
    					set_store_value(theme, $theme.Orange = color, $theme);
    					break;
    				case "Pink":
    					set_store_value(theme, $theme.Pink = color, $theme);
    					break;
    				case "Purple":
    					set_store_value(theme, $theme.Purple = color, $theme);
    					break;
    				case "Red":
    					set_store_value(theme, $theme.Red = color, $theme);
    					break;
    				case "Yellow":
    					set_store_value(theme, $theme.Yellow = color, $theme);
    					break;
    				case "functionColor":
    					set_store_value(theme, $theme.functionColor = color, $theme);
    					break;
    				case "stringColor":
    					set_store_value(theme, $theme.stringColor = color, $theme);
    					break;
    				case "constantColor":
    					set_store_value(theme, $theme.constantColor = color, $theme);
    					break;
    				case "keywordColor":
    					set_store_value(theme, $theme.keywordColor = color, $theme);
    					break;
    				case "highlightBackgroundColor":
    					set_store_value(theme, $theme.highlightBackgroundColor = color, $theme);
    					break;
    				case "selectionColor":
    					set_store_value(theme, $theme.selectionColor = color, $theme);
    					break;
    				default:
    					console.log("Invalid id.");
    					break;
    			}
    		}

    		$$invalidate(2, showPicker = false);
    		buttonColor = false;
    	}

    	function changeColor(button) {
    		$$invalidate(0, colorchange = button.color);
    		$$invalidate(1, colorID = button.id);
    		$$invalidate(2, showPicker = true);

    		if (isNaN(colorID)) {
    			buttonColor = false;
    			$$invalidate(4, pickerType = colorID);
    			$$invalidate(6, explanation = `${colorID}`);
    		} else {
    			buttonColor = true;
    			$$invalidate(4, pickerType = "Circle");
    			$$invalidate(6, explanation = `#${colorID} Circle`);
    		}
    	}

    	function saveNewTheme() {
    		$$invalidate(3, keepNewInput = false);
    		updateTheme();
    	}

    	async function updateTheme() {
    		set_store_value(theme, $theme.name = style, $theme);

    		await fetch(`http://localhost:9978/api/theme/${style}`, {
    			method: "PUT",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify($theme)
    		});

    		$$invalidate(7, themeList = await getStyleList());
    	}

    	async function deleteStyle() {
    		await fetch(`http://localhost:9978/api/theme/${style}`, {
    			method: "DELETE",
    			headers: { "Content-type": "application/json" },
    			body: JSON.stringify($theme)
    		});

    		$$invalidate(7, themeList = await getStyleList());
    		$$invalidate(5, style = "Default");
    		set_store_value(theme, $theme = await getStyle(style), $theme);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<ThemePrefs> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		style = this.value;
    		$$invalidate(5, style);
    		$$invalidate(7, themeList);
    	}

    	const change_handler = () => {
    		$$invalidate(3, keepNewInput = true);
    	};

    	function select_change_handler() {
    		style = select_value(this);
    		$$invalidate(5, style);
    		$$invalidate(7, themeList);
    	}

    	const change_handler_1 = () => {
    		styleSelectorChange();
    	};

    	const click_handler = (button, event) => {
    		changeColor(button);
    	};

    	const click_handler_1 = event => {
    		changeColor({
    			id: "textAreaColor",
    			color: $theme.textAreaColor
    		});
    	};

    	const click_handler_2 = event => {
    		changeColor({
    			id: "backgroundColor",
    			color: $theme.backgroundColor
    		});
    	};

    	const click_handler_3 = event => {
    		changeColor({ id: "textColor", color: $theme.textColor });
    	};

    	const click_handler_4 = event => {
    		changeColor({
    			id: "borderColor",
    			color: $theme.borderColor
    		});
    	};

    	const click_handler_5 = event => {
    		changeColor({
    			id: "functionColor",
    			color: $theme.functionColor
    		});
    	};

    	const click_handler_6 = event => {
    		changeColor({
    			id: "stringColor",
    			color: $theme.stringColor
    		});
    	};

    	const click_handler_7 = event => {
    		changeColor({
    			id: "constantColor",
    			color: $theme.constantColor
    		});
    	};

    	const click_handler_8 = event => {
    		changeColor({
    			id: "keywordColor",
    			color: $theme.keywordColor
    		});
    	};

    	const click_handler_9 = event => {
    		changeColor({
    			id: "highlightBackgroundColor",
    			color: $theme.highlightBackgroundColor
    		});
    	};

    	const click_handler_10 = event => {
    		changeColor({
    			id: "selectionColor",
    			color: $theme.selectionColor
    		});
    	};

    	const click_handler_11 = event => {
    		changeColor({ id: "Cyan", color: $theme.Cyan });
    	};

    	const click_handler_12 = event => {
    		changeColor({ id: "Green", color: $theme.Green });
    	};

    	const click_handler_13 = event => {
    		changeColor({ id: "Orange", color: $theme.Orange });
    	};

    	const click_handler_14 = event => {
    		changeColor({ id: "Pink", color: $theme.Pink });
    	};

    	const click_handler_15 = event => {
    		changeColor({ id: "Purple", color: $theme.Purple });
    	};

    	const click_handler_16 = event => {
    		changeColor({ id: "Red", color: $theme.Red });
    	};

    	const click_handler_17 = event => {
    		changeColor({ id: "Yellow", color: $theme.Yellow });
    	};

    	const colorChanged_handler = event => {
    		setColor(event.detail.data.id, event.detail.data.color);
    	};

    	const quitColorPicker_handler = event => {
    		$$invalidate(2, showPicker = false);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		ColorPicker,
    		theme,
    		colorchange,
    		colorID,
    		showPicker,
    		buttonColor,
    		keepNewInput,
    		pickerType,
    		style,
    		explanation,
    		themeList,
    		styleSelectorChange,
    		getStyle,
    		getStyleList,
    		setColor,
    		changeColor,
    		saveNewTheme,
    		updateTheme,
    		deleteStyle,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('colorchange' in $$props) $$invalidate(0, colorchange = $$props.colorchange);
    		if ('colorID' in $$props) $$invalidate(1, colorID = $$props.colorID);
    		if ('showPicker' in $$props) $$invalidate(2, showPicker = $$props.showPicker);
    		if ('buttonColor' in $$props) buttonColor = $$props.buttonColor;
    		if ('keepNewInput' in $$props) $$invalidate(3, keepNewInput = $$props.keepNewInput);
    		if ('pickerType' in $$props) $$invalidate(4, pickerType = $$props.pickerType);
    		if ('style' in $$props) $$invalidate(5, style = $$props.style);
    		if ('explanation' in $$props) $$invalidate(6, explanation = $$props.explanation);
    		if ('themeList' in $$props) $$invalidate(7, themeList = $$props.themeList);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		colorchange,
    		colorID,
    		showPicker,
    		keepNewInput,
    		pickerType,
    		style,
    		explanation,
    		themeList,
    		$theme,
    		styleSelectorChange,
    		setColor,
    		changeColor,
    		saveNewTheme,
    		updateTheme,
    		deleteStyle,
    		input_input_handler,
    		change_handler,
    		select_change_handler,
    		change_handler_1,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		click_handler_11,
    		click_handler_12,
    		click_handler_13,
    		click_handler_14,
    		click_handler_15,
    		click_handler_16,
    		click_handler_17,
    		colorChanged_handler,
    		quitColorPicker_handler
    	];
    }

    class ThemePrefs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ThemePrefs",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/components/ExtScriptList.svelte generated by Svelte v3.49.0 */
    const file$9 = "src/components/ExtScriptList.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (51:4) {#each scripts as script}
    function create_each_block$4(ctx) {
    	let li;
    	let span;
    	let t0_value = /*script*/ ctx[6] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*script*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space$3();
    			attr_dev(span, "class", "scriptName svelte-xv3rwd");
    			add_location(span, file$9, 52, 8, 1028);
    			add_location(li, file$9, 51, 6, 1015);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, span);
    			append_dev(span, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*scripts*/ 1 && t0_value !== (t0_value = /*script*/ ctx[6] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(51:4) {#each scripts as script}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div1;
    	let h2;
    	let t1;
    	let ol;
    	let t2;
    	let div0;
    	let button;
    	let t3;
    	let mounted;
    	let dispose;
    	let each_value = /*scripts*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "External Scripts";
    			t1 = space$3();
    			ol = element("ol");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space$3();
    			div0 = element("div");
    			button = element("button");
    			t3 = text("New Script");
    			attr_dev(h2, "class", "svelte-xv3rwd");
    			add_location(h2, file$9, 48, 2, 946);
    			attr_dev(ol, "class", "svelte-xv3rwd");
    			add_location(ol, file$9, 49, 2, 974);
    			attr_dev(button, "id", "new");
    			attr_dev(button, "class", "buttonStyle svelte-xv3rwd");
    			attr_dev(button, "type", "button");
    			set_style(button, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[1].textColor);
    			set_style(button, "font-name", /*$theme*/ ctx[1].font);
    			set_style(button, "font-size", /*$theme*/ ctx[1].fontSize);
    			add_location(button, file$9, 62, 4, 1220);
    			attr_dev(div0, "id", "buttonRow");
    			attr_dev(div0, "class", "svelte-xv3rwd");
    			add_location(div0, file$9, 61, 2, 1195);
    			attr_dev(div1, "id", "scriptlist");
    			attr_dev(div1, "class", "svelte-xv3rwd");
    			add_location(div1, file$9, 47, 0, 922);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, ol);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ol, null);
    			}

    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, t3);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*addNew*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*openScript, scripts*/ 5) {
    				each_value = /*scripts*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ol, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$theme*/ 2) {
    				set_style(button, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 2) {
    				set_style(button, "color", /*$theme*/ ctx[1].textColor);
    			}

    			if (dirty & /*$theme*/ 2) {
    				set_style(button, "font-name", /*$theme*/ ctx[1].font);
    			}

    			if (dirty & /*$theme*/ 2) {
    				set_style(button, "font-size", /*$theme*/ ctx[1].fontSize);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    async function listExtScripts() {
    	//
    	// Get the list of external scripts from the server.
    	//
    	let resp = await fetch("http://localhost:9978/api/scripts/ext/list", {
    		headers: { "Content-type": "application/json" }
    	});

    	let scrpt = await resp.json();
    	return scrpt;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(1, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExtScriptList', slots, []);
    	let scripts = [];
    	const dispatch = createEventDispatcher();

    	onMount(async () => {
    		//
    		// Get the list of external scripts from the server.
    		//
    		$$invalidate(0, scripts = await listExtScripts());
    	});

    	function openScript(snm) {
    		dispatch("changeView", { view: "script", config: { script: snm } });
    	}

    	function addNew() {
    		dispatch("changeView", {
    			view: "script",
    			config: { script: "new" }
    		});
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExtScriptList> was created with unknown prop '${key}'`);
    	});

    	const click_handler = script => {
    		openScript(script);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onMount,
    		theme,
    		scripts,
    		dispatch,
    		listExtScripts,
    		openScript,
    		addNew,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('scripts' in $$props) $$invalidate(0, scripts = $$props.scripts);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [scripts, $theme, openScript, addNew, click_handler];
    }

    class ExtScriptList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExtScriptList",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src/components/ExtScript.svelte generated by Svelte v3.49.0 */
    const file$8 = "src/components/ExtScript.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    // (110:2) {#if typeof script !== "undefined" && typeof envs !== "undefined"}
    function create_if_block$7(ctx) {
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let label1;
    	let t4;
    	let input1;
    	let t5;
    	let label2;
    	let t7;
    	let input2;
    	let t8;
    	let label3;
    	let t10;
    	let input3;
    	let t11;
    	let label4;
    	let t13;
    	let input4;
    	let t14;
    	let label5;
    	let t16;
    	let select;
    	let t17;
    	let label6;
    	let t19;
    	let input5;
    	let mounted;
    	let dispose;
    	let each_value = /*envs*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			label0 = element("label");
    			label0.textContent = "Name of Script";
    			t1 = space$3();
    			input0 = element("input");
    			t2 = space$3();
    			label1 = element("label");
    			label1.textContent = "Description";
    			t4 = space$3();
    			input1 = element("input");
    			t5 = space$3();
    			label2 = element("label");
    			label2.textContent = "Help";
    			t7 = space$3();
    			input2 = element("input");
    			t8 = space$3();
    			label3 = element("label");
    			label3.textContent = "What is the name of the Script file?";
    			t10 = space$3();
    			input3 = element("input");
    			t11 = space$3();
    			label4 = element("label");
    			label4.textContent = "What is the directory for the script?";
    			t13 = space$3();
    			input4 = element("input");
    			t14 = space$3();
    			label5 = element("label");
    			label5.textContent = "What is the environment for the script?";
    			t16 = space$3();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t17 = space$3();
    			label6 = element("label");
    			label6.textContent = "Terminal Script?";
    			t19 = space$3();
    			input5 = element("input");
    			attr_dev(label0, "id", "scriptNameLab");
    			attr_dev(label0, "for", "scriptName");
    			attr_dev(label0, "class", "svelte-npefic");
    			add_location(label0, file$8, 110, 4, 2665);
    			attr_dev(input0, "id", "scriptName");
    			attr_dev(input0, "name", "scriptName");
    			set_style(input0, "border-radius", "5px");
    			set_style(input0, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(input0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(input0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(input0, "font-name", /*$theme*/ ctx[2].font);
    			set_style(input0, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(input0, file$8, 111, 4, 2737);
    			attr_dev(label1, "id", "scriptDesLab");
    			attr_dev(label1, "for", "scriptDes");
    			attr_dev(label1, "class", "svelte-npefic");
    			add_location(label1, file$8, 118, 4, 3057);
    			attr_dev(input1, "id", "scriptDes");
    			attr_dev(input1, "name", "scriptDes");
    			set_style(input1, "border-radius", "5px");
    			set_style(input1, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(input1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(input1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(input1, "font-name", /*$theme*/ ctx[2].font);
    			set_style(input1, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(input1, file$8, 119, 4, 3122);
    			attr_dev(label2, "id", "helpLab");
    			attr_dev(label2, "for", "help");
    			attr_dev(label2, "class", "svelte-npefic");
    			add_location(label2, file$8, 126, 4, 3447);
    			attr_dev(input2, "id", "help");
    			attr_dev(input2, "name", "help");
    			set_style(input2, "border-radius", "5px");
    			set_style(input2, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(input2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(input2, "color", /*$theme*/ ctx[2].textColor);
    			set_style(input2, "font-name", /*$theme*/ ctx[2].font);
    			set_style(input2, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(input2, file$8, 127, 4, 3495);
    			attr_dev(label3, "id", "scriptScript");
    			attr_dev(label3, "for", "scriptScript");
    			attr_dev(label3, "class", "svelte-npefic");
    			add_location(label3, file$8, 134, 4, 3803);
    			attr_dev(input3, "id", "scriptScript");
    			attr_dev(input3, "name", "scriptScript");
    			set_style(input3, "border-radius", "5px");
    			set_style(input3, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(input3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(input3, "color", /*$theme*/ ctx[2].textColor);
    			set_style(input3, "font-name", /*$theme*/ ctx[2].font);
    			set_style(input3, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(input3, file$8, 137, 4, 3908);
    			attr_dev(label4, "id", "scriptPath");
    			attr_dev(label4, "for", "scriptPath");
    			attr_dev(label4, "class", "svelte-npefic");
    			add_location(label4, file$8, 144, 4, 4234);
    			attr_dev(input4, "id", "scriptPath");
    			attr_dev(input4, "name", "scriptPath");
    			set_style(input4, "border-radius", "5px");
    			set_style(input4, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(input4, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(input4, "color", /*$theme*/ ctx[2].textColor);
    			set_style(input4, "font-name", /*$theme*/ ctx[2].font);
    			set_style(input4, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(input4, file$8, 147, 4, 4336);
    			attr_dev(label5, "id", "scriptEnv");
    			attr_dev(label5, "for", "scriptEnv");
    			attr_dev(label5, "class", "svelte-npefic");
    			add_location(label5, file$8, 154, 4, 4656);
    			attr_dev(select, "id", "scriptEnv");
    			attr_dev(select, "name", "scriptEnv");
    			set_style(select, "border-radius", "5px");
    			set_style(select, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(select, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(select, "color", /*$theme*/ ctx[2].textColor);
    			set_style(select, "font-name", /*$theme*/ ctx[2].font);
    			set_style(select, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(select, "class", "svelte-npefic");
    			if (/*script*/ ctx[0].env === void 0) add_render_callback(() => /*select_change_handler*/ ctx[12].call(select));
    			add_location(select, file$8, 157, 4, 4758);
    			attr_dev(label6, "id", "termScriptLab");
    			attr_dev(label6, "for", "termScriptChk");
    			attr_dev(label6, "class", "svelte-npefic");
    			add_location(label6, file$8, 168, 4, 5172);
    			attr_dev(input5, "id", "termScriptChk");
    			attr_dev(input5, "name", "termScriptChk");
    			attr_dev(input5, "type", "checkbox");
    			add_location(input5, file$8, 169, 4, 5249);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, input0, anchor);
    			set_input_value(input0, /*script*/ ctx[0].name);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, label1, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, input1, anchor);
    			set_input_value(input1, /*script*/ ctx[0].description);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, label2, anchor);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, input2, anchor);
    			set_input_value(input2, /*script*/ ctx[0].help);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, label3, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, input3, anchor);
    			set_input_value(input3, /*script*/ ctx[0].script);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, label4, anchor);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, input4, anchor);
    			set_input_value(input4, /*script*/ ctx[0].path);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, label5, anchor);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, select, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*script*/ ctx[0].env);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, label6, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, input5, anchor);
    			set_input_value(input5, /*script*/ ctx[0].termscript);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "blur", /*changeScript*/ ctx[3], false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[7]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[8]),
    					listen_dev(input1, "blur", /*changeScript*/ ctx[3], false, false, false),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[9]),
    					listen_dev(input2, "blur", /*changeScript*/ ctx[3], false, false, false),
    					listen_dev(input3, "blur", /*changeScript*/ ctx[3], false, false, false),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[10]),
    					listen_dev(input4, "blur", /*changeScript*/ ctx[3], false, false, false),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[11]),
    					listen_dev(select, "blur", /*changeScript*/ ctx[3], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[12]),
    					listen_dev(input5, "change", /*input5_change_handler*/ ctx[13])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 4) {
    				set_style(input0, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input0, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input0, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*script, envs*/ 3 && input0.value !== /*script*/ ctx[0].name) {
    				set_input_value(input0, /*script*/ ctx[0].name);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input1, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input1, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input1, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*script, envs*/ 3 && input1.value !== /*script*/ ctx[0].description) {
    				set_input_value(input1, /*script*/ ctx[0].description);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input2, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input2, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input2, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input2, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*script, envs*/ 3 && input2.value !== /*script*/ ctx[0].help) {
    				set_input_value(input2, /*script*/ ctx[0].help);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input3, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input3, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input3, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input3, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*script, envs*/ 3 && input3.value !== /*script*/ ctx[0].script) {
    				set_input_value(input3, /*script*/ ctx[0].script);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input4, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input4, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input4, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input4, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(input4, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*script, envs*/ 3 && input4.value !== /*script*/ ctx[0].path) {
    				set_input_value(input4, /*script*/ ctx[0].path);
    			}

    			if (dirty & /*envs*/ 2) {
    				each_value = /*envs*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(select, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(select, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(select, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(select, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(select, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*script, envs*/ 3) {
    				select_option(select, /*script*/ ctx[0].env);
    			}

    			if (dirty & /*script, envs*/ 3) {
    				set_input_value(input5, /*script*/ ctx[0].termscript);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(label1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(input1);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(label2);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(input2);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(label3);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(input3);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(label4);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(input4);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(label5);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(select);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(label6);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(input5);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(110:2) {#if typeof script !== \\\"undefined\\\" && typeof envs !== \\\"undefined\\\"}",
    		ctx
    	});

    	return block;
    }

    // (165:6) {#each envs as env}
    function create_each_block$3(ctx) {
    	let option;
    	let t_value = /*env*/ ctx[16] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*env*/ ctx[16];
    			option.value = option.__value;
    			add_location(option, file$8, 165, 8, 5105);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*envs*/ 2 && t_value !== (t_value = /*env*/ ctx[16] + "")) set_data_dev(t, t_value);

    			if (dirty & /*envs*/ 2 && option_value_value !== (option_value_value = /*env*/ ctx[16])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(165:6) {#each envs as env}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let button0;
    	let t1;
    	let t2;
    	let button1;
    	let t3;
    	let mounted;
    	let dispose;
    	let if_block = typeof /*script*/ ctx[0] !== "undefined" && typeof /*envs*/ ctx[1] !== "undefined" && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			if (if_block) if_block.c();
    			t0 = space$3();
    			div1 = element("div");
    			button0 = element("button");
    			t1 = text("Return");
    			t2 = space$3();
    			button1 = element("button");
    			t3 = text("Delete");
    			attr_dev(div0, "id", "script");
    			set_style(div0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div0, "font-name", /*$theme*/ ctx[2].font);
    			set_style(div0, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(div0, "class", "svelte-npefic");
    			add_location(div0, file$8, 105, 0, 2478);
    			attr_dev(button0, "class", "buttonStyle svelte-npefic");
    			attr_dev(button0, "type", "button");
    			set_style(button0, "border-radius", "5px");
    			set_style(button0, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button0, "font-name", /*$theme*/ ctx[2].font);
    			set_style(button0, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(button0, file$8, 178, 2, 5412);
    			attr_dev(button1, "class", "buttonStyle svelte-npefic");
    			attr_dev(button1, "type", "button");
    			set_style(button1, "border-radius", "5px");
    			set_style(button1, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button1, "font-name", /*$theme*/ ctx[2].font);
    			set_style(button1, "font-size", /*$theme*/ ctx[2].fontSize);
    			add_location(button1, file$8, 189, 2, 5752);
    			attr_dev(div1, "id", "buttonRow");
    			attr_dev(div1, "class", "svelte-npefic");
    			add_location(div1, file$8, 177, 0, 5389);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			if (if_block) if_block.m(div0, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button0);
    			append_dev(button0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, button1);
    			append_dev(button1, t3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*deleteScript*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (typeof /*script*/ ctx[0] !== "undefined" && typeof /*envs*/ ctx[1] !== "undefined") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div0, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div0, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "border-color", "$" + /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "font-size", /*$theme*/ ctx[2].fontSize);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (if_block) if_block.d();
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    async function getExtScript(name) {
    	//
    	// Get the named external script and return it.
    	//
    	let resp = await fetch(`http://localhost:9978/api/scripts/ext/${name}`, {
    		headers: { "Content-type": "application/json" }
    	});

    	let scpt = await resp.json();
    	return scpt;
    }

    async function getEnvNames() {
    	//
    	// Get the list of environments from the server.
    	//
    	let resp = await fetch(`http://localhost:9978/api/scripts/env/list`, {
    		headers: { "Content-type": "application/json" }
    	});

    	let scpt = await resp.json();
    	return scpt;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExtScript', slots, []);
    	let { config } = $$props;
    	let script;
    	let envs;
    	const dispatch = createEventDispatcher();

    	onMount(async () => {
    		//
    		// Get the list of external scripts from the server.
    		//
    		// extScripts {
    		//    name         - User given name for the script
    		//    script       - File name of the script
    		//    path         - directory of the script
    		//    env          - name of the environment
    		//    description  - A description of what the script does.
    		//    help         - A help message for the script
    		//    termscript   - True if it's a termianl script. Otherwise, it's false.
    		// }
    		//
    		if (config.script !== "new") {
    			$$invalidate(0, script = await getExtScript(config.script));
    		} else {
    			$$invalidate(0, script = {
    				name: "new",
    				script: "",
    				path: "",
    				env: "",
    				termscript: false,
    				description: "",
    				help: ""
    			});
    		}

    		$$invalidate(1, envs = await getEnvNames());
    	});

    	async function changeScript() {
    		if (script.name !== "" && script.name !== null && script.name !== "new") {
    			//
    			// Add/Update the script
    			//
    			await fetch(`http://localhost:9978/api/scripts/ext/${script.name}`, {
    				method: "PUT",
    				headers: { "Content-type": "application/json" },
    				body: JSON.stringify(script)
    			});
    		}
    	}

    	async function deleteScript() {
    		//
    		// Remove the script
    		//
    		await fetch(`http://localhost:9978/api/scripts/ext/${script.name}`, {
    			method: "DELETE",
    			headers: { "Content-type": "application/json" }
    		});

    		tick();
    		goback();
    	}

    	function goback() {
    		dispatch("changeView", { view: "lists", config: {} });
    	}

    	const writable_props = ['config'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExtScript> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		script.name = this.value;
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	function input1_input_handler() {
    		script.description = this.value;
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	function input2_input_handler() {
    		script.help = this.value;
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	function input3_input_handler() {
    		script.script = this.value;
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	function input4_input_handler() {
    		script.path = this.value;
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	function select_change_handler() {
    		script.env = select_value(this);
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	function input5_change_handler() {
    		script.termscript = this.value;
    		$$invalidate(0, script);
    		$$invalidate(1, envs);
    	}

    	const click_handler = () => {
    		changeScript();
    		goback();
    	};

    	$$self.$$set = $$props => {
    		if ('config' in $$props) $$invalidate(6, config = $$props.config);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onMount,
    		tick,
    		theme,
    		config,
    		script,
    		envs,
    		dispatch,
    		getExtScript,
    		getEnvNames,
    		changeScript,
    		deleteScript,
    		goback,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('config' in $$props) $$invalidate(6, config = $$props.config);
    		if ('script' in $$props) $$invalidate(0, script = $$props.script);
    		if ('envs' in $$props) $$invalidate(1, envs = $$props.envs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		script,
    		envs,
    		$theme,
    		changeScript,
    		deleteScript,
    		goback,
    		config,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		select_change_handler,
    		input5_change_handler,
    		click_handler
    	];
    }

    class ExtScript extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { config: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExtScript",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*config*/ ctx[6] === undefined && !('config' in props)) {
    			console.warn("<ExtScript> was created without expected prop 'config'");
    		}
    	}

    	get config() {
    		throw new Error("<ExtScript>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<ExtScript>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ExtScriptEditor.svelte generated by Svelte v3.49.0 */
    const file$7 = "src/components/ExtScriptEditor.svelte";

    // (23:30) 
    function create_if_block_1$4(ctx) {
    	let extscript;
    	let current;

    	extscript = new ExtScript({
    			props: { config: /*config*/ ctx[1] },
    			$$inline: true
    		});

    	extscript.$on("changeView", /*changeView*/ ctx[3]);

    	const block = {
    		c: function create() {
    			create_component(extscript.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(extscript, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const extscript_changes = {};
    			if (dirty & /*config*/ 2) extscript_changes.config = /*config*/ ctx[1];
    			extscript.$set(extscript_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(extscript.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(extscript.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(extscript, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(23:30) ",
    		ctx
    	});

    	return block;
    }

    // (19:2) {#if view === "lists"}
    function create_if_block$6(ctx) {
    	let div;
    	let extscriptlist;
    	let current;
    	extscriptlist = new ExtScriptList({ $$inline: true });
    	extscriptlist.$on("changeView", /*changeView*/ ctx[3]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(extscriptlist.$$.fragment);
    			attr_dev(div, "id", "listviews");
    			attr_dev(div, "class", "svelte-10ddyhx");
    			add_location(div, file$7, 19, 4, 452);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(extscriptlist, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(extscriptlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(extscriptlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(extscriptlist);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(19:2) {#if view === \\\"lists\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$6, create_if_block_1$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*view*/ ctx[0] === "lists") return 0;
    		if (/*view*/ ctx[0] === "script") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "id", "ExtScriptEditor");
    			set_style(div, "color", /*$theme*/ ctx[2].textcolor);
    			set_style(div, "background-color", /*$theme*/ ctx[2].appBackground);
    			attr_dev(div, "class", "svelte-10ddyhx");
    			add_location(div, file$7, 14, 0, 314);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div, "color", /*$theme*/ ctx[2].textcolor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div, "background-color", /*$theme*/ ctx[2].appBackground);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExtScriptEditor', slots, []);
    	let view = "lists";
    	let config = {};

    	function changeView(newView) {
    		$$invalidate(0, view = newView.detail.view);
    		$$invalidate(1, config = newView.detail.config);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExtScriptEditor> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ExtScriptList,
    		ExtScript,
    		theme,
    		view,
    		config,
    		changeView,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('view' in $$props) $$invalidate(0, view = $$props.view);
    		if ('config' in $$props) $$invalidate(1, config = $$props.config);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [view, config, $theme, changeView];
    }

    class ExtScriptEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExtScriptEditor",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src/components/EnvList.svelte generated by Svelte v3.49.0 */
    const file$6 = "src/components/EnvList.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (88:4) {#each envs as env}
    function create_each_block$2(ctx) {
    	let li;
    	let span;
    	let t0_value = /*env*/ ctx[9] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*env*/ ctx[9]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space$3();
    			attr_dev(span, "class", "envName svelte-1xg0rtz");
    			add_location(span, file$6, 89, 8, 1760);
    			add_location(li, file$6, 88, 6, 1747);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, span);
    			append_dev(span, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*envs*/ 1 && t0_value !== (t0_value = /*env*/ ctx[9] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(88:4) {#each envs as env}",
    		ctx
    	});

    	return block;
    }

    // (109:4) {#if createDefault}
    function create_if_block$5(ctx) {
    	let button;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text("Create Default");
    			attr_dev(button, "id", "default");
    			attr_dev(button, "class", "buttonStyle svelte-1xg0rtz");
    			set_style(button, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button, "font-name", /*$theme*/ ctx[2].font);
    			set_style(button, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(button, "type", "button");
    			add_location(button, file$6, 109, 6, 2244);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*createDefaultEnv*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "font-size", /*$theme*/ ctx[2].fontSize);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(109:4) {#if createDefault}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div1;
    	let h2;
    	let t1;
    	let ol;
    	let t2;
    	let div0;
    	let button;
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;
    	let each_value = /*envs*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	let if_block = /*createDefault*/ ctx[1] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Environments";
    			t1 = space$3();
    			ol = element("ol");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space$3();
    			div0 = element("div");
    			button = element("button");
    			t3 = text("New Environment");
    			t4 = space$3();
    			if (if_block) if_block.c();
    			attr_dev(h2, "class", "svelte-1xg0rtz");
    			add_location(h2, file$6, 85, 2, 1688);
    			attr_dev(ol, "class", "svelte-1xg0rtz");
    			add_location(ol, file$6, 86, 2, 1712);
    			attr_dev(button, "id", "new");
    			attr_dev(button, "class", "buttonStyle svelte-1xg0rtz");
    			set_style(button, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button, "font-name", /*$theme*/ ctx[2].font);
    			set_style(button, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(button, "type", "button");
    			add_location(button, file$6, 99, 4, 1940);
    			attr_dev(div0, "id", "buttonRow");
    			attr_dev(div0, "class", "svelte-1xg0rtz");
    			add_location(div0, file$6, 98, 2, 1915);
    			attr_dev(div1, "id", "envlist");
    			attr_dev(div1, "class", "svelte-1xg0rtz");
    			add_location(div1, file$6, 84, 0, 1667);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h2);
    			append_dev(div1, t1);
    			append_dev(div1, ol);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ol, null);
    			}

    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, t3);
    			append_dev(div0, t4);
    			if (if_block) if_block.m(div0, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*addNew*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*openEnv, envs*/ 17) {
    				each_value = /*envs*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ol, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "font-name", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button, "font-size", /*$theme*/ ctx[2].fontSize);
    			}

    			if (/*createDefault*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    async function addEnv$1(env) {
    	//
    	// Add the new environment.
    	//
    	await fetch(`http://localhost:9978/api/scripts/env/${env.name}`, { method: "PUT", body: JSON.stringify(env) });
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EnvList', slots, []);
    	let envs = [];
    	let createDefault = false;
    	const dispatch = createEventDispatcher();

    	onMount(async () => {
    		//
    		// Get the list of environments from the server.
    		//
    		await getEnvList();

    		//
    		// See if the default has been created or not.
    		//
    		var def = envs.filter(item => {
    			return item == "Default";
    		});

    		if (Array.isArray(def) && def.length === 0) {
    			$$invalidate(1, createDefault = true);
    		}
    	});

    	async function getEnvList() {
    		//
    		// Get the list of environment names from the server.
    		//
    		var resp = await fetch("http://localhost:9978/api/scripts/env/list");

    		$$invalidate(0, envs = await resp.json());
    	}

    	async function addNew() {
    		let newEnv = {
    			view: "env",
    			config: { env: "new", envVar: [] }
    		};

    		dispatch("changeView", newEnv);
    	}

    	function openEnv(nm) {
    		dispatch("changeView", { view: "env", config: { env: nm } });
    	}

    	async function createDefaultEnv() {
    		//
    		// Get the default environment
    		//
    		await fetch("http://localhost:9978/api/scripts/env/Default", { method: "PUT" });

    		//
    		// Switch to the editing of the default environment.
    		//
    		dispatch("changeView", { view: "env", config: { env: "Default" } });
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EnvList> was created with unknown prop '${key}'`);
    	});

    	const click_handler = env => {
    		openEnv(env);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onMount,
    		theme,
    		envs,
    		createDefault,
    		dispatch,
    		getEnvList,
    		addEnv: addEnv$1,
    		addNew,
    		openEnv,
    		createDefaultEnv,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('envs' in $$props) $$invalidate(0, envs = $$props.envs);
    		if ('createDefault' in $$props) $$invalidate(1, createDefault = $$props.createDefault);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [envs, createDefault, $theme, addNew, openEnv, createDefaultEnv, click_handler];
    }

    class EnvList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnvList",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src/components/EnvTableRow.svelte generated by Svelte v3.49.0 */
    const file$5 = "src/components/EnvTableRow.svelte";

    // (54:2) {:else}
    function create_else_block$3(ctx) {
    	let td0;
    	let span0;
    	let t1;
    	let td1;
    	let span1;
    	let t3;
    	let td2;
    	let t4;
    	let t5;
    	let td3;
    	let t6;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			td0 = element("td");
    			span0 = element("span");
    			span0.textContent = "✏️";
    			t1 = space$3();
    			td1 = element("td");
    			span1 = element("span");
    			span1.textContent = "❌";
    			t3 = space$3();
    			td2 = element("td");
    			t4 = text(/*name*/ ctx[0]);
    			t5 = space$3();
    			td3 = element("td");
    			t6 = text(/*value*/ ctx[1]);
    			add_location(span0, file$5, 55, 6, 1312);
    			attr_dev(td0, "class", "editTD svelte-iq93qk");
    			add_location(td0, file$5, 54, 4, 1286);
    			set_style(span1, "width", "10px");
    			set_style(span1, "cursor", "pointer");
    			add_location(span1, file$5, 64, 6, 1459);
    			attr_dev(td1, "class", "deleteTD svelte-iq93qk");
    			add_location(td1, file$5, 63, 4, 1431);
    			add_location(td2, file$5, 66, 4, 1547);
    			add_location(td3, file$5, 67, 4, 1567);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td0, anchor);
    			append_dev(td0, span0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, td1, anchor);
    			append_dev(td1, span1);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, td2, anchor);
    			append_dev(td2, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, td3, anchor);
    			append_dev(td3, t6);

    			if (!mounted) {
    				dispose = [
    					listen_dev(span0, "click", /*click_handler*/ ctx[10], false, false, false),
    					listen_dev(span1, "click", /*delData*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*name*/ 1) set_data_dev(t4, /*name*/ ctx[0]);
    			if (dirty & /*value*/ 2) set_data_dev(t6, /*value*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(td1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(td2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(td3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(54:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (36:2) {#if editValues}
    function create_if_block$4(ctx) {
    	let td0;
    	let td1;
    	let t0;
    	let td2;
    	let input0;
    	let t1;
    	let td3;
    	let input1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			td0 = element("td");
    			td1 = element("td");
    			t0 = space$3();
    			td2 = element("td");
    			input0 = element("input");
    			t1 = space$3();
    			td3 = element("td");
    			input1 = element("input");
    			add_location(td0, file$5, 36, 4, 593);
    			add_location(td1, file$5, 36, 10, 599);
    			attr_dev(input0, "type", "text");
    			set_style(input0, "padding-left", "10px");
    			set_style(input0, "border-radius", "10px");
    			set_style(input0, "border-color", /*$theme*/ ctx[4].borderColor);
    			set_style(input0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(input0, "color", /*$theme*/ ctx[4].textColor);
    			set_style(input0, "font-family", "'" + /*$theme*/ ctx[4].font + "'");
    			set_style(input0, "font-size", /*$theme*/ ctx[4].fontSize);
    			add_location(input0, file$5, 38, 6, 621);
    			add_location(td2, file$5, 37, 4, 610);
    			attr_dev(input1, "type", "text");
    			set_style(input1, "padding-left", "10px");
    			set_style(input1, "border-radius", "10px");
    			set_style(input1, "border-color", /*$theme*/ ctx[4].borderColor);
    			set_style(input1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(input1, "color", /*$theme*/ ctx[4].textColor);
    			set_style(input1, "font-family", /*$theme*/ ctx[4].font);
    			set_style(input1, "font-size", /*$theme*/ ctx[4].fontSize);
    			add_location(input1, file$5, 46, 6, 958);
    			add_location(td3, file$5, 45, 4, 947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td0, anchor);
    			insert_dev(target, td1, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, td2, anchor);
    			append_dev(td2, input0);
    			/*input0_binding*/ ctx[7](input0);
    			set_input_value(input0, /*name*/ ctx[0]);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, td3, anchor);
    			append_dev(td3, input1);
    			set_input_value(input1, /*value*/ ctx[1]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(input1, "blur", /*changeData*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "font-family", "'" + /*$theme*/ ctx[4].font + "'");
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input0, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (dirty & /*name*/ 1 && input0.value !== /*name*/ ctx[0]) {
    				set_input_value(input0, /*name*/ ctx[0]);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "font-family", /*$theme*/ ctx[4].font);
    			}

    			if (dirty & /*$theme*/ 16) {
    				set_style(input1, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (dirty & /*value*/ 2 && input1.value !== /*value*/ ctx[1]) {
    				set_input_value(input1, /*value*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td0);
    			if (detaching) detach_dev(td1);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(td2);
    			/*input0_binding*/ ctx[7](null);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(td3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(36:2) {#if editValues}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let tr;

    	function select_block_type(ctx, dirty) {
    		if (/*editValues*/ ctx[2]) return create_if_block$4;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			if_block.c();
    			add_location(tr, file$5, 34, 0, 565);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			if_block.m(tr, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(tr, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(4, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EnvTableRow', slots, []);
    	const dispatch = createEventDispatcher();
    	let { name } = $$props;
    	let { value } = $$props;
    	var editValues = false;
    	var nameDOM;

    	afterUpdate(() => {
    		if (editValues) {
    			nameDOM.focus();
    		}
    	});

    	function changeData() {
    		$$invalidate(2, editValues = false);
    		dispatch("editRow", { name, value });
    	}

    	function delData() {
    		dispatch("deleteRow", { name, value });
    	}

    	const writable_props = ['name', 'value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EnvTableRow> was created with unknown prop '${key}'`);
    	});

    	function input0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			nameDOM = $$value;
    			$$invalidate(3, nameDOM);
    		});
    	}

    	function input0_input_handler() {
    		name = this.value;
    		$$invalidate(0, name);
    	}

    	function input1_input_handler() {
    		value = this.value;
    		$$invalidate(1, value);
    	}

    	const click_handler = () => {
    		$$invalidate(2, editValues = true);
    	};

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		afterUpdate,
    		theme,
    		dispatch,
    		name,
    		value,
    		editValues,
    		nameDOM,
    		changeData,
    		delData,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    		if ('editValues' in $$props) $$invalidate(2, editValues = $$props.editValues);
    		if ('nameDOM' in $$props) $$invalidate(3, nameDOM = $$props.nameDOM);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		name,
    		value,
    		editValues,
    		nameDOM,
    		$theme,
    		changeData,
    		delData,
    		input0_binding,
    		input0_input_handler,
    		input1_input_handler,
    		click_handler
    	];
    }

    class EnvTableRow extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { name: 0, value: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnvTableRow",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
    			console.warn("<EnvTableRow> was created without expected prop 'name'");
    		}

    		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
    			console.warn("<EnvTableRow> was created without expected prop 'value'");
    		}
    	}

    	get name() {
    		throw new Error("<EnvTableRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<EnvTableRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<EnvTableRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<EnvTableRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Env.svelte generated by Svelte v3.49.0 */

    const { Object: Object_1 } = globals;
    const file$4 = "src/components/Env.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	return child_ctx;
    }

    // (124:2) {#if typeof env !== "undefined"}
    function create_if_block$3(ctx) {
    	let div;
    	let label;
    	let t1;
    	let input;
    	let t2;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*env*/ ctx[0].envVar !== "undefined" && create_if_block_1$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			label = element("label");
    			label.textContent = "Name of the Environment";
    			t1 = space$3();
    			input = element("input");
    			t2 = space$3();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    			attr_dev(label, "id", "envName");
    			attr_dev(label, "for", "envName");
    			add_location(label, file$4, 125, 6, 2675);
    			attr_dev(input, "id", "envName");
    			attr_dev(input, "name", "envName");
    			set_style(input, "padding-left", "10px");
    			set_style(input, "margin-top", "-5px");
    			set_style(input, "margin-left", "20px");
    			set_style(input, "border-radius", "10px");
    			set_style(input, "border-color", /*$theme*/ ctx[4].borderColor);
    			set_style(input, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(input, "font-family", /*$theme*/ ctx[4].font);
    			set_style(input, "color", /*$theme*/ ctx[4].textColor);
    			set_style(input, "font-size", /*$theme*/ ctx[4].fontSize);
    			set_style(input, "border", "solid 3px " + /*$theme*/ ctx[4].borderColor);
    			add_location(input, file$4, 126, 6, 2749);
    			set_style(div, "display", "flex");
    			set_style(div, "flex-direction", "row");
    			add_location(div, file$4, 124, 4, 2619);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(div, t1);
    			append_dev(div, input);
    			set_input_value(input, /*env*/ ctx[0].name);
    			insert_dev(target, t2, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "blur", /*changeEnv*/ ctx[5], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[11])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(input, "border-color", /*$theme*/ ctx[4].borderColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(input, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(input, "font-family", /*$theme*/ ctx[4].font);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(input, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(input, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(input, "border", "solid 3px " + /*$theme*/ ctx[4].borderColor);
    			}

    			if (dirty & /*env*/ 1 && input.value !== /*env*/ ctx[0].name) {
    				set_input_value(input, /*env*/ ctx[0].name);
    			}

    			if (/*env*/ ctx[0].envVar !== "undefined") {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*env*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t2);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(124:2) {#if typeof env !== \\\"undefined\\\"}",
    		ctx
    	});

    	return block;
    }

    // (135:4) {#if env.envVar !== "undefined"}
    function create_if_block_1$3(ctx) {
    	let div;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t0;
    	let th1;
    	let t1;
    	let th2;
    	let t3;
    	let th3;
    	let t5;
    	let tbody;
    	let show_if = Object.entries(/*env*/ ctx[0].envVar).length > 0;
    	let t6;
    	let current;
    	let if_block0 = show_if && create_if_block_3$2(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*addNew*/ ctx[1]) return create_if_block_2$2;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			t0 = space$3();
    			th1 = element("th");
    			t1 = space$3();
    			th2 = element("th");
    			th2.textContent = "Name";
    			t3 = space$3();
    			th3 = element("th");
    			th3.textContent = "Value";
    			t5 = space$3();
    			tbody = element("tbody");
    			if (if_block0) if_block0.c();
    			t6 = space$3();
    			if_block1.c();
    			attr_dev(th0, "class", "svelte-13talvl");
    			add_location(th0, file$4, 139, 14, 3303);
    			attr_dev(th1, "class", "svelte-13talvl");
    			add_location(th1, file$4, 140, 14, 3324);
    			attr_dev(th2, "class", "svelte-13talvl");
    			add_location(th2, file$4, 141, 14, 3345);
    			attr_dev(th3, "class", "svelte-13talvl");
    			add_location(th3, file$4, 142, 14, 3375);
    			add_location(tr, file$4, 138, 12, 3284);
    			add_location(thead, file$4, 137, 10, 3264);
    			add_location(tbody, file$4, 145, 10, 3439);
    			add_location(table, file$4, 136, 8, 3246);
    			attr_dev(div, "id", "EnvTable");
    			attr_dev(div, "class", "svelte-13talvl");
    			add_location(div, file$4, 135, 6, 3218);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t0);
    			append_dev(tr, th1);
    			append_dev(tr, t1);
    			append_dev(tr, th2);
    			append_dev(tr, t3);
    			append_dev(tr, th3);
    			append_dev(table, t5);
    			append_dev(table, tbody);
    			if (if_block0) if_block0.m(tbody, null);
    			append_dev(tbody, t6);
    			if_block1.m(tbody, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*env*/ 1) show_if = Object.entries(/*env*/ ctx[0].envVar).length > 0;

    			if (show_if) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*env*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(tbody, t6);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(tbody, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(135:4) {#if env.envVar !== \\\"undefined\\\"}",
    		ctx
    	});

    	return block;
    }

    // (147:12) {#if Object.entries(env.envVar).length > 0}
    function create_if_block_3$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = Object.entries(/*env*/ ctx[0].envVar);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Object, env, deleteRow, addKV*/ 769) {
    				each_value = Object.entries(/*env*/ ctx[0].envVar);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(147:12) {#if Object.entries(env.envVar).length > 0}",
    		ctx
    	});

    	return block;
    }

    // (148:14) {#each Object.entries(env.envVar) as kv}
    function create_each_block$1(ctx) {
    	let envtablerow;
    	let current;

    	function deleteRow_handler() {
    		return /*deleteRow_handler*/ ctx[12](/*kv*/ ctx[19]);
    	}

    	envtablerow = new EnvTableRow({
    			props: {
    				name: /*kv*/ ctx[19][0],
    				value: /*kv*/ ctx[19][1]
    			},
    			$$inline: true
    		});

    	envtablerow.$on("deleteRow", deleteRow_handler);
    	envtablerow.$on("editRow", /*editRow_handler*/ ctx[13]);

    	const block = {
    		c: function create() {
    			create_component(envtablerow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(envtablerow, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const envtablerow_changes = {};
    			if (dirty & /*env*/ 1) envtablerow_changes.name = /*kv*/ ctx[19][0];
    			if (dirty & /*env*/ 1) envtablerow_changes.value = /*kv*/ ctx[19][1];
    			envtablerow.$set(envtablerow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(envtablerow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(envtablerow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(envtablerow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(148:14) {#each Object.entries(env.envVar) as kv}",
    		ctx
    	});

    	return block;
    }

    // (182:12) {:else}
    function create_else_block$2(ctx) {
    	let tr;
    	let td;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td = element("td");
    			span = element("span");
    			span.textContent = "+";
    			attr_dev(span, "class", "addNewItem svelte-13talvl");
    			add_location(span, file$4, 184, 18, 4853);
    			attr_dev(td, "span", "2");
    			attr_dev(td, "class", "svelte-13talvl");
    			add_location(td, file$4, 183, 16, 4821);
    			add_location(tr, file$4, 182, 14, 4800);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td);
    			append_dev(td, span);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler*/ ctx[16], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(182:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (162:12) {#if addNew}
    function create_if_block_2$2(ctx) {
    	let tr;
    	let td0;
    	let input0;
    	let input0_style_value;
    	let t;
    	let td1;
    	let input1;
    	let input1_style_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			input0 = element("input");
    			t = space$3();
    			td1 = element("td");
    			input1 = element("input");
    			attr_dev(input0, "class", "inputKV");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "style", input0_style_value = "background-color: " + /*$theme*/ ctx[4].textAreaColor + "; text= " + /*$theme*/ ctx[4].textColor + "; font-name: " + /*$theme*/ ctx[4].font + "; font-size: " + /*$theme*/ ctx[4].fontSize + ";");
    			add_location(input0, file$4, 164, 18, 4050);
    			attr_dev(td0, "class", "svelte-13talvl");
    			add_location(td0, file$4, 163, 16, 4027);
    			attr_dev(input1, "class", "inputKV");
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "style", input1_style_value = "background-color: " + /*$theme*/ ctx[4].textAreaColor + "; text= " + /*$theme*/ ctx[4].textColor + "; font-name: " + /*$theme*/ ctx[4].font + "; font-size: " + /*$theme*/ ctx[4].fontSize + ";");
    			add_location(input1, file$4, 172, 18, 4399);
    			attr_dev(td1, "class", "svelte-13talvl");
    			add_location(td1, file$4, 171, 16, 4376);
    			add_location(tr, file$4, 162, 14, 4006);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, input0);
    			set_input_value(input0, /*KVname*/ ctx[2]);
    			append_dev(tr, t);
    			append_dev(tr, td1);
    			append_dev(td1, input1);
    			set_input_value(input1, /*KVvalue*/ ctx[3]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[14]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[15]),
    					listen_dev(input1, "blur", /*addKV*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 16 && input0_style_value !== (input0_style_value = "background-color: " + /*$theme*/ ctx[4].textAreaColor + "; text= " + /*$theme*/ ctx[4].textColor + "; font-name: " + /*$theme*/ ctx[4].font + "; font-size: " + /*$theme*/ ctx[4].fontSize + ";")) {
    				attr_dev(input0, "style", input0_style_value);
    			}

    			if (dirty & /*KVname*/ 4 && input0.value !== /*KVname*/ ctx[2]) {
    				set_input_value(input0, /*KVname*/ ctx[2]);
    			}

    			if (dirty & /*$theme*/ 16 && input1_style_value !== (input1_style_value = "background-color: " + /*$theme*/ ctx[4].textAreaColor + "; text= " + /*$theme*/ ctx[4].textColor + "; font-name: " + /*$theme*/ ctx[4].font + "; font-size: " + /*$theme*/ ctx[4].fontSize + ";")) {
    				attr_dev(input1, "style", input1_style_value);
    			}

    			if (dirty & /*KVvalue*/ 8 && input1.value !== /*KVvalue*/ ctx[3]) {
    				set_input_value(input1, /*KVvalue*/ ctx[3]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(162:12) {#if addNew}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let button0;
    	let t1;
    	let t2;
    	let button1;
    	let t3;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = typeof /*env*/ ctx[0] !== "undefined" && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space$3();
    			div0 = element("div");
    			button0 = element("button");
    			t1 = text("Return");
    			t2 = space$3();
    			button1 = element("button");
    			t3 = text("Delete");
    			attr_dev(button0, "id", "goback");
    			attr_dev(button0, "class", "buttonStyle svelte-13talvl");
    			attr_dev(button0, "type", "button");
    			set_style(button0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[4].textColor);
    			set_style(button0, "font-name", /*$theme*/ ctx[4].font);
    			set_style(button0, "font-size", /*$theme*/ ctx[4].fontSize);
    			add_location(button0, file$4, 201, 4, 5218);
    			attr_dev(button1, "class", "buttonStyle svelte-13talvl");
    			attr_dev(button1, "type", "button");
    			set_style(button1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[4].textColor);
    			set_style(button1, "font-name", /*$theme*/ ctx[4].font);
    			set_style(button1, "font-size", /*$theme*/ ctx[4].fontSize);
    			add_location(button1, file$4, 213, 4, 5538);
    			attr_dev(div0, "id", "buttonRow");
    			attr_dev(div0, "class", "svelte-13talvl");
    			add_location(div0, file$4, 200, 2, 5193);
    			attr_dev(div1, "id", "env");
    			set_style(div1, "color", /*$theme*/ ctx[4].textColor);
    			set_style(div1, "background-color", /*$theme*/ ctx[4].textareaColor);
    			attr_dev(div1, "class", "svelte-13talvl");
    			add_location(div1, file$4, 119, 0, 2483);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, button1);
    			append_dev(button1, t3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_1*/ ctx[17], false, false, false),
    					listen_dev(button1, "click", /*deleteEnv*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (typeof /*env*/ ctx[0] !== "undefined") {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*env*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button0, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button0, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button0, "font-name", /*$theme*/ ctx[4].font);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button0, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button1, "background-color", /*$theme*/ ctx[4].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button1, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button1, "font-name", /*$theme*/ ctx[4].font);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(button1, "font-size", /*$theme*/ ctx[4].fontSize);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(div1, "color", /*$theme*/ ctx[4].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 16) {
    				set_style(div1, "background-color", /*$theme*/ ctx[4].textareaColor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    async function getEnv(name) {
    	//
    	// get the environment from the server.
    	//
    	var resp = await fetch(`http://localhost:9978/api/scripts/env/${name}`);

    	var list = await resp.json();
    	return list;
    }

    async function addEnv(ev) {
    	//
    	// Add the new environment.
    	//
    	await fetch(`http://localhost:9978/api/scripts/env/${ev.name}`, {
    		method: "PUT",
    		headers: { "Content-type": "application/json" },
    		body: JSON.stringify(ev)
    	});
    }

    async function removeEnv(envName) {
    	//
    	// Remove environment name.
    	//
    	await fetch(`http://localhost:9978/api/scripts/env/${envName}`, { method: "DELETE" });
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(4, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Env', slots, []);
    	let { config } = $$props;
    	let env;
    	let addNew = false;
    	let KVname = "";
    	let KVvalue = "";
    	const dispatch = createEventDispatcher();

    	onMount(async () => {
    		//
    		// Get the list of environments from the server.
    		//
    		// scriptEnv {
    		//    name    - Name of the environment
    		//    envVar  - key,value array of environment variables
    		//}
    		//
    		if (typeof config.env !== "undefined") {
    			if (config.env !== "new" && config.env !== null) {
    				if (config.env === "default") {
    					$$invalidate(10, config.env = "Default", config);
    				}

    				$$invalidate(0, env = await getEnv(config.env));
    			} else {
    				//
    				// Create a new one for the user to change.
    				//
    				$$invalidate(0, env = { name: "new", envVar: {} });
    			}
    		}
    	});

    	async function changeEnv() {
    		if (typeof env !== "undefined" && env !== null && env.name !== "" && env.name !== null && env.name !== "new") {
    			await addEnv(env);
    		}
    	}

    	async function deleteEnv() {
    		if (typeof env !== "undefined" && env.name !== null && env.name !== "new" && env.name !== "") {
    			await removeEnv(env.name);
    			tick();
    			goback();
    		}
    	}

    	function goback() {
    		dispatch("changeView", { view: "lists", config: {} });
    	}

    	async function addKV() {
    		$$invalidate(0, env.envVar[KVname] = KVvalue, env);
    		$$invalidate(1, addNew = false);
    		$$invalidate(2, KVname = "");
    		$$invalidate(3, KVvalue = "");
    		await changeEnv();
    	}

    	async function deleteRow(kv) {
    		delete env.envVar[kv[0]];
    		await changeEnv();
    		$$invalidate(0, env = await getEnv(config.env));
    	}

    	const writable_props = ['config'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Env> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		env.name = this.value;
    		$$invalidate(0, env);
    	}

    	const deleteRow_handler = kv => {
    		deleteRow(kv);
    	};

    	const editRow_handler = item => {
    		$$invalidate(0, env.envVar[item.detail.name] = item.detail.value, env);
    		addKV();
    	};

    	function input0_input_handler() {
    		KVname = this.value;
    		$$invalidate(2, KVname);
    	}

    	function input1_input_handler() {
    		KVvalue = this.value;
    		$$invalidate(3, KVvalue);
    	}

    	const click_handler = () => {
    		$$invalidate(1, addNew = true);
    	};

    	const click_handler_1 = () => {
    		changeEnv();
    		goback();
    	};

    	$$self.$$set = $$props => {
    		if ('config' in $$props) $$invalidate(10, config = $$props.config);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		onMount,
    		tick,
    		EnvTableRow,
    		theme,
    		config,
    		env,
    		addNew,
    		KVname,
    		KVvalue,
    		dispatch,
    		getEnv,
    		changeEnv,
    		addEnv,
    		deleteEnv,
    		removeEnv,
    		goback,
    		addKV,
    		deleteRow,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('config' in $$props) $$invalidate(10, config = $$props.config);
    		if ('env' in $$props) $$invalidate(0, env = $$props.env);
    		if ('addNew' in $$props) $$invalidate(1, addNew = $$props.addNew);
    		if ('KVname' in $$props) $$invalidate(2, KVname = $$props.KVname);
    		if ('KVvalue' in $$props) $$invalidate(3, KVvalue = $$props.KVvalue);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		env,
    		addNew,
    		KVname,
    		KVvalue,
    		$theme,
    		changeEnv,
    		deleteEnv,
    		goback,
    		addKV,
    		deleteRow,
    		config,
    		input_input_handler,
    		deleteRow_handler,
    		editRow_handler,
    		input0_input_handler,
    		input1_input_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class Env extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { config: 10 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Env",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*config*/ ctx[10] === undefined && !('config' in props)) {
    			console.warn("<Env> was created without expected prop 'config'");
    		}
    	}

    	get config() {
    		throw new Error("<Env>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error("<Env>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/EnvEditor.svelte generated by Svelte v3.49.0 */
    const file$3 = "src/components/EnvEditor.svelte";

    // (25:27) 
    function create_if_block_1$2(ctx) {
    	let env;
    	let current;

    	env = new Env({
    			props: { config: /*config*/ ctx[1] },
    			$$inline: true
    		});

    	env.$on("changeView", /*changeView*/ ctx[3]);

    	const block = {
    		c: function create() {
    			create_component(env.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(env, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const env_changes = {};
    			if (dirty & /*config*/ 2) env_changes.config = /*config*/ ctx[1];
    			env.$set(env_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(env.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(env.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(env, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(25:27) ",
    		ctx
    	});

    	return block;
    }

    // (21:2) {#if view === "lists"}
    function create_if_block$2(ctx) {
    	let div;
    	let envlist;
    	let current;
    	envlist = new EnvList({ $$inline: true });
    	envlist.$on("changeView", /*changeView*/ ctx[3]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(envlist.$$.fragment);
    			attr_dev(div, "id", "listviews");
    			attr_dev(div, "class", "svelte-gorzvb");
    			add_location(div, file$3, 21, 4, 447);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(envlist, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(envlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(envlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(envlist);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(21:2) {#if view === \\\"lists\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block$2, create_if_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*view*/ ctx[0] === "lists") return 0;
    		if (/*view*/ ctx[0] === "env") return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "id", "EnvEditor");
    			set_style(div, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			attr_dev(div, "class", "svelte-gorzvb");
    			add_location(div, file$3, 16, 0, 313);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 4) {
    				set_style(div, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $theme;
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EnvEditor', slots, []);
    	let view = "lists";
    	let config = { env: "Default" };

    	function changeView(newView) {
    		$$invalidate(0, view = newView.detail.view);
    		$$invalidate(1, config = newView.detail.config);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EnvEditor> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		EnvList,
    		Env,
    		theme,
    		view,
    		config,
    		changeView,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('view' in $$props) $$invalidate(0, view = $$props.view);
    		if ('config' in $$props) $$invalidate(1, config = $$props.config);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [view, config, $theme, changeView];
    }

    class EnvEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnvEditor",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/components/Preferences.svelte generated by Svelte v3.49.0 */
    const file$2 = "src/components/Preferences.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (59:6) {:else}
    function create_else_block$1(ctx) {
    	let li;
    	let t0_value = /*pref*/ ctx[12].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*pref*/ ctx[12]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space$3();
    			attr_dev(li, "class", "tabName svelte-1c0xrvo");
    			set_style(li, "border-color", "gray");
    			add_location(li, file$2, 59, 8, 1285);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(59:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (52:6) {#if pref.name === currentPref}
    function create_if_block_5$1(ctx) {
    	let li;
    	let t0_value = /*pref*/ ctx[12].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space$3();
    			attr_dev(li, "class", "tabName svelte-1c0xrvo");
    			set_style(li, "border-bottom", "3px " + /*$theme*/ ctx[1].backgroundColor);
    			set_style(li, "z-index", "100");
    			add_location(li, file$2, 52, 8, 1110);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$theme*/ 2) {
    				set_style(li, "border-bottom", "3px " + /*$theme*/ ctx[1].backgroundColor);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(52:6) {#if pref.name === currentPref}",
    		ctx
    	});

    	return block;
    }

    // (51:4) {#each prefs as pref}
    function create_each_block(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*pref*/ ctx[12].name === /*currentPref*/ ctx[0]) return create_if_block_5$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(51:4) {#each prefs as pref}",
    		ctx
    	});

    	return block;
    }

    // (81:45) 
    function create_if_block_4$1(ctx) {
    	let enveditor;
    	let current;
    	enveditor = new EnvEditor({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(enveditor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(enveditor, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(enveditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(enveditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(enveditor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(81:45) ",
    		ctx
    	});

    	return block;
    }

    // (79:49) 
    function create_if_block_3$1(ctx) {
    	let extscripteditor;
    	let current;
    	extscripteditor = new ExtScriptEditor({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(extscripteditor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(extscripteditor, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(extscripteditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(extscripteditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(extscripteditor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(79:49) ",
    		ctx
    	});

    	return block;
    }

    // (77:41) 
    function create_if_block_2$1(ctx) {
    	let prefnodered;
    	let current;
    	prefnodered = new PrefNodeRed({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(prefnodered.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(prefnodered, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prefnodered.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prefnodered.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(prefnodered, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(77:41) ",
    		ctx
    	});

    	return block;
    }

    // (75:38) 
    function create_if_block_1$1(ctx) {
    	let themeprefs;
    	let current;
    	themeprefs = new ThemePrefs({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(themeprefs.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(themeprefs, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(themeprefs.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(themeprefs.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(themeprefs, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(75:38) ",
    		ctx
    	});

    	return block;
    }

    // (73:4) {#if currentPref === "General"}
    function create_if_block$1(ctx) {
    	let genprefs;
    	let current;
    	genprefs = new GenPrefs({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(genprefs.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(genprefs, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(genprefs.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(genprefs.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(genprefs, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(73:4) {#if currentPref === \\\"General\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div2;
    	let ul;
    	let t0;
    	let div0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let div1;
    	let button0;
    	let t2;
    	let t3;
    	let button1;
    	let t4;
    	let t5;
    	let button2;
    	let t6;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*prefs*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const if_block_creators = [
    		create_if_block$1,
    		create_if_block_1$1,
    		create_if_block_2$1,
    		create_if_block_3$1,
    		create_if_block_4$1
    	];

    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*currentPref*/ ctx[0] === "General") return 0;
    		if (/*currentPref*/ ctx[0] === "Theme") return 1;
    		if (/*currentPref*/ ctx[0] === "Node-Red") return 2;
    		if (/*currentPref*/ ctx[0] === "External Scripts") return 3;
    		if (/*currentPref*/ ctx[0] === "Environments") return 4;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space$3();
    			div0 = element("div");
    			if (if_block) if_block.c();
    			t1 = space$3();
    			div1 = element("div");
    			button0 = element("button");
    			t2 = text("EmailIt+");
    			t3 = space$3();
    			button1 = element("button");
    			t4 = text("Notes");
    			t5 = space$3();
    			button2 = element("button");
    			t6 = text("Script Terminal");
    			attr_dev(ul, "id", "tabs");
    			attr_dev(ul, "class", "svelte-1c0xrvo");
    			add_location(ul, file$2, 49, 2, 1023);
    			attr_dev(div0, "id", "prefListWrap");
    			attr_dev(div0, "class", "svelte-1c0xrvo");
    			add_location(div0, file$2, 71, 2, 1512);
    			set_style(button0, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			set_style(button0, "font-family", /*$theme*/ ctx[1].font);
    			set_style(button0, "color", /*$theme*/ ctx[1].textColor);
    			set_style(button0, "font-size", /*$theme*/ ctx[1].fontSize);
    			attr_dev(button0, "class", "svelte-1c0xrvo");
    			add_location(button0, file$2, 85, 4, 1905);
    			set_style(button1, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			set_style(button1, "font-family", /*$theme*/ ctx[1].font);
    			set_style(button1, "color", /*$theme*/ ctx[1].textColor);
    			set_style(button1, "font-size", /*$theme*/ ctx[1].fontSize);
    			attr_dev(button1, "class", "svelte-1c0xrvo");
    			add_location(button1, file$2, 93, 4, 2149);
    			set_style(button2, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			set_style(button2, "font-family", /*$theme*/ ctx[1].font);
    			set_style(button2, "color", /*$theme*/ ctx[1].textColor);
    			set_style(button2, "font-size", /*$theme*/ ctx[1].fontSize);
    			attr_dev(button2, "class", "svelte-1c0xrvo");
    			add_location(button2, file$2, 101, 4, 2393);
    			attr_dev(div1, "id", "buttonPanel");
    			attr_dev(div1, "class", "svelte-1c0xrvo");
    			add_location(div1, file$2, 84, 2, 1878);
    			attr_dev(div2, "id", "PreferencePanel");
    			set_style(div2, "background-color", /*$theme*/ ctx[1].backgroundColor);
    			set_style(div2, "font-family", /*$theme*/ ctx[1].font);
    			set_style(div2, "color", /*$theme*/ ctx[1].textColor);
    			set_style(div2, "font-size", /*$theme*/ ctx[1].fontSize);
    			attr_dev(div2, "class", "svelte-1c0xrvo");
    			add_location(div2, file$2, 45, 0, 852);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div2, t0);
    			append_dev(div2, div0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div0, null);
    			}

    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, t2);
    			append_dev(div1, t3);
    			append_dev(div1, button1);
    			append_dev(button1, t4);
    			append_dev(div1, t5);
    			append_dev(div1, button2);
    			append_dev(button2, t6);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_1*/ ctx[8], false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[9], false, false, false),
    					listen_dev(button2, "click", /*click_handler_3*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$theme, prefs, currentPref, setNewCurrent*/ 15) {
    				each_value = /*prefs*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(div0, null);
    				} else {
    					if_block = null;
    				}
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button0, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button0, "font-family", /*$theme*/ ctx[1].font);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button0, "color", /*$theme*/ ctx[1].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button0, "font-size", /*$theme*/ ctx[1].fontSize);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button1, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button1, "font-family", /*$theme*/ ctx[1].font);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button1, "color", /*$theme*/ ctx[1].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button1, "font-size", /*$theme*/ ctx[1].fontSize);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button2, "background-color", /*$theme*/ ctx[1].textAreaColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button2, "font-family", /*$theme*/ ctx[1].font);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button2, "color", /*$theme*/ ctx[1].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(button2, "font-size", /*$theme*/ ctx[1].fontSize);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(div2, "background-color", /*$theme*/ ctx[1].backgroundColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(div2, "font-family", /*$theme*/ ctx[1].font);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(div2, "color", /*$theme*/ ctx[1].textColor);
    			}

    			if (!current || dirty & /*$theme*/ 2) {
    				set_style(div2, "font-size", /*$theme*/ ctx[1].fontSize);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $state;
    	let $theme;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(11, $state = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(1, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Preferences', slots, []);
    	let currentPref = "General";

    	let prefs = [
    		{ name: "General" },
    		{ name: "Theme" },
    		{ name: "Node-Red" },
    		{ name: "External Scripts" },
    		{ name: "Environments" }
    	];

    	function setNewCurrent(newCurrent) {
    		$$invalidate(0, currentPref = newCurrent);
    	}

    	function viewEmailit() {
    		set_store_value(state, $state = "emailit", $state);
    	}

    	function viewNotes() {
    		set_store_value(state, $state = "notes", $state);
    	}

    	function viewScriptTerminal() {
    		set_store_value(state, $state = "scriptterm", $state);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Preferences> was created with unknown prop '${key}'`);
    	});

    	const click_handler = pref => {
    		setNewCurrent(pref.name);
    	};

    	const click_handler_1 = () => {
    		viewEmailit();
    	};

    	const click_handler_2 = event => {
    		viewNotes();
    	};

    	const click_handler_3 = event => {
    		viewScriptTerminal();
    	};

    	$$self.$capture_state = () => ({
    		PrefNodeRed,
    		GenPrefs,
    		ThemePrefs,
    		ExtScriptEditor,
    		EnvEditor,
    		theme,
    		state,
    		currentPref,
    		prefs,
    		setNewCurrent,
    		viewEmailit,
    		viewNotes,
    		viewScriptTerminal,
    		$state,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentPref' in $$props) $$invalidate(0, currentPref = $$props.currentPref);
    		if ('prefs' in $$props) $$invalidate(2, prefs = $$props.prefs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		currentPref,
    		$theme,
    		prefs,
    		setNewCurrent,
    		viewEmailit,
    		viewNotes,
    		viewScriptTerminal,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class Preferences extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Preferences",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    var xterm = {exports: {}};

    (function (module, exports) {
    	!function(e,t){module.exports=t();}(self,(function(){return (()=>{var e={4567:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityManager=void 0;var o=r(9042),s=r(6114),a=r(9924),c=r(3656),l=r(844),h=r(5596),u=r(9631),f=function(e){function t(t,r){var i=e.call(this)||this;i._terminal=t,i._renderService=r,i._liveRegionLineCount=0,i._charsToConsume=[],i._charsToAnnounce="",i._accessibilityTreeRoot=document.createElement("div"),i._accessibilityTreeRoot.classList.add("xterm-accessibility"),i._accessibilityTreeRoot.tabIndex=0,i._rowContainer=document.createElement("div"),i._rowContainer.setAttribute("role","list"),i._rowContainer.classList.add("xterm-accessibility-tree"),i._rowElements=[];for(var n=0;n<i._terminal.rows;n++)i._rowElements[n]=i._createAccessibilityTreeNode(),i._rowContainer.appendChild(i._rowElements[n]);if(i._topBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,0)},i._bottomBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,1)},i._rowElements[0].addEventListener("focus",i._topBoundaryFocusListener),i._rowElements[i._rowElements.length-1].addEventListener("focus",i._bottomBoundaryFocusListener),i._refreshRowsDimensions(),i._accessibilityTreeRoot.appendChild(i._rowContainer),i._renderRowsDebouncer=new a.TimeBasedDebouncer(i._renderRows.bind(i)),i._refreshRows(),i._liveRegion=document.createElement("div"),i._liveRegion.classList.add("live-region"),i._liveRegion.setAttribute("aria-live","assertive"),i._accessibilityTreeRoot.appendChild(i._liveRegion),!i._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");return i._terminal.element.insertAdjacentElement("afterbegin",i._accessibilityTreeRoot),i.register(i._renderRowsDebouncer),i.register(i._terminal.onResize((function(e){return i._onResize(e.rows)}))),i.register(i._terminal.onRender((function(e){return i._refreshRows(e.start,e.end)}))),i.register(i._terminal.onScroll((function(){return i._refreshRows()}))),i.register(i._terminal.onA11yChar((function(e){return i._onChar(e)}))),i.register(i._terminal.onLineFeed((function(){return i._onChar("\n")}))),i.register(i._terminal.onA11yTab((function(e){return i._onTab(e)}))),i.register(i._terminal.onKey((function(e){return i._onKey(e.key)}))),i.register(i._terminal.onBlur((function(){return i._clearLiveRegion()}))),i.register(i._renderService.onDimensionsChange((function(){return i._refreshRowsDimensions()}))),i._screenDprMonitor=new h.ScreenDprMonitor,i.register(i._screenDprMonitor),i._screenDprMonitor.setListener((function(){return i._refreshRowsDimensions()})),i.register((0, c.addDisposableDomListener)(window,"resize",(function(){return i._refreshRowsDimensions()}))),i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),(0, u.removeElementFromParent)(this._accessibilityTreeRoot),this._rowElements.length=0;},t.prototype._onBoundaryFocus=function(e,t){var r=e.target,i=this._rowElements[0===t?1:this._rowElements.length-2];if(r.getAttribute("aria-posinset")!==(0===t?"1":""+this._terminal.buffer.lines.length)&&e.relatedTarget===i){var n,o;if(0===t?(n=r,o=this._rowElements.pop(),this._rowContainer.removeChild(o)):(n=this._rowElements.shift(),o=r,this._rowContainer.removeChild(n)),n.removeEventListener("focus",this._topBoundaryFocusListener),o.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){var s=this._createAccessibilityTreeNode();this._rowElements.unshift(s),this._rowContainer.insertAdjacentElement("afterbegin",s);}else s=this._createAccessibilityTreeNode(),this._rowElements.push(s),this._rowContainer.appendChild(s);this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation();}},t.prototype._onResize=function(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var t=this._rowContainer.children.length;t<this._terminal.rows;t++)this._rowElements[t]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[t]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions();},t.prototype._createAccessibilityTreeNode=function(){var e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e},t.prototype._onTab=function(e){for(var t=0;t<e;t++)this._onChar(" ");},t.prototype._onChar=function(e){var t=this;this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e):this._charsToAnnounce+=e,"\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=o.tooMuchOutput)),s.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((function(){t._accessibilityTreeRoot.appendChild(t._liveRegion);}),0));},t.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,s.isMac&&(0, u.removeElementFromParent)(this._liveRegion);},t.prototype._onKey=function(e){this._clearLiveRegion(),this._charsToConsume.push(e);},t.prototype._refreshRows=function(e,t){this._renderRowsDebouncer.refresh(e,t,this._terminal.rows);},t.prototype._renderRows=function(e,t){for(var r=this._terminal.buffer,i=r.lines.length.toString(),n=e;n<=t;n++){var o=r.translateBufferLineToString(r.ydisp+n,!0),s=(r.ydisp+n+1).toString(),a=this._rowElements[n];a&&(0===o.length?a.innerText=" ":a.textContent=o,a.setAttribute("aria-posinset",s),a.setAttribute("aria-setsize",i));}this._announceCharacters();},t.prototype._refreshRowsDimensions=function(){if(this._renderService.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(var e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e]);}},t.prototype._refreshRowDimensions=function(e){e.style.height=this._renderService.dimensions.actualCellHeight+"px";},t.prototype._announceCharacters=function(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="");},t}(l.Disposable);t.AccessibilityManager=f;},3614:(e,t)=>{function r(e){return e.replace(/\r?\n/g,"\r")}function i(e,t){return t?"[200~"+e+"[201~":e}function n(e,t,n){e=i(e=r(e),n.decPrivateModes.bracketedPasteMode),n.triggerDataEvent(e,!0),t.value="";}function o(e,t,r){var i=r.getBoundingClientRect(),n=e.clientX-i.left-10,o=e.clientY-i.top-10;t.style.width="20px",t.style.height="20px",t.style.left=n+"px",t.style.top=o+"px",t.style.zIndex="1000",t.focus();}Object.defineProperty(t,"__esModule",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=r,t.bracketTextForPaste=i,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData("text/plain",t.selectionText),e.preventDefault();},t.handlePasteEvent=function(e,t,r){e.stopPropagation(),e.clipboardData&&n(e.clipboardData.getData("text/plain"),t,r);},t.paste=n,t.moveTextAreaUnderMouseCursor=o,t.rightClickHandler=function(e,t,r,i,n){o(e,t,r),n&&i.rightClickSelect(e),t.value=i.selectionText,t.select();};},7239:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorContrastCache=void 0;var r=function(){function e(){this._color={},this._rgba={};}return e.prototype.clear=function(){this._color={},this._rgba={};},e.prototype.setCss=function(e,t,r){this._rgba[e]||(this._rgba[e]={}),this._rgba[e][t]=r;},e.prototype.getCss=function(e,t){return this._rgba[e]?this._rgba[e][t]:void 0},e.prototype.setColor=function(e,t,r){this._color[e]||(this._color[e]={}),this._color[e][t]=r;},e.prototype.getColor=function(e,t){return this._color[e]?this._color[e][t]:void 0},e}();t.ColorContrastCache=r;},5680:function(e,t,r){var i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.ColorManager=t.DEFAULT_ANSI_COLORS=void 0;var n=r(8055),o=r(7239),s=n.css.toColor("#ffffff"),a=n.css.toColor("#000000"),c=n.css.toColor("#ffffff"),l=n.css.toColor("#000000"),h={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};t.DEFAULT_ANSI_COLORS=Object.freeze(function(){for(var e=[n.css.toColor("#2e3436"),n.css.toColor("#cc0000"),n.css.toColor("#4e9a06"),n.css.toColor("#c4a000"),n.css.toColor("#3465a4"),n.css.toColor("#75507b"),n.css.toColor("#06989a"),n.css.toColor("#d3d7cf"),n.css.toColor("#555753"),n.css.toColor("#ef2929"),n.css.toColor("#8ae234"),n.css.toColor("#fce94f"),n.css.toColor("#729fcf"),n.css.toColor("#ad7fa8"),n.css.toColor("#34e2e2"),n.css.toColor("#eeeeec")],t=[0,95,135,175,215,255],r=0;r<216;r++){var i=t[r/36%6|0],o=t[r/6%6|0],s=t[r%6];e.push({css:n.channels.toCss(i,o,s),rgba:n.channels.toRgba(i,o,s)});}for(r=0;r<24;r++){var a=8+10*r;e.push({css:n.channels.toCss(a,a,a),rgba:n.channels.toRgba(a,a,a)});}return e}());var u=function(){function e(e,r){this.allowTransparency=r;var i=e.createElement("canvas");i.width=1,i.height=1;var u=i.getContext("2d");if(!u)throw new Error("Could not get rendering context");this._ctx=u,this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this._contrastCache=new o.ColorContrastCache,this.colors={foreground:s,background:a,cursor:c,cursorAccent:l,selectionTransparent:h,selectionOpaque:n.color.blend(a,h),selectionForeground:void 0,ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache},this._updateRestoreColors();}return e.prototype.onOptionsChange=function(e){"minimumContrastRatio"===e&&this._contrastCache.clear();},e.prototype.setTheme=function(e){void 0===e&&(e={}),this.colors.foreground=this._parseColor(e.foreground,s),this.colors.background=this._parseColor(e.background,a),this.colors.cursor=this._parseColor(e.cursor,c,!0),this.colors.cursorAccent=this._parseColor(e.cursorAccent,l,!0),this.colors.selectionTransparent=this._parseColor(e.selection,h,!0),this.colors.selectionOpaque=n.color.blend(this.colors.background,this.colors.selectionTransparent);var r={css:"",rgba:0};this.colors.selectionForeground=e.selectionForeground?this._parseColor(e.selectionForeground,r):void 0,this.colors.selectionForeground===r&&(this.colors.selectionForeground=void 0),n.color.isOpaque(this.colors.selectionTransparent)&&(this.colors.selectionTransparent=n.color.opacity(this.colors.selectionTransparent,.3)),this.colors.ansi[0]=this._parseColor(e.black,t.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(e.red,t.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(e.green,t.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(e.yellow,t.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(e.blue,t.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(e.magenta,t.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(e.cyan,t.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(e.white,t.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),this._contrastCache.clear(),this._updateRestoreColors();},e.prototype.restoreColor=function(e){if(void 0!==e)switch(e){case 256:this.colors.foreground=this._restoreColors.foreground;break;case 257:this.colors.background=this._restoreColors.background;break;case 258:this.colors.cursor=this._restoreColors.cursor;break;default:this.colors.ansi[e]=this._restoreColors.ansi[e];}else for(var t=0;t<this._restoreColors.ansi.length;++t)this.colors.ansi[t]=this._restoreColors.ansi[t];},e.prototype._updateRestoreColors=function(){this._restoreColors={foreground:this.colors.foreground,background:this.colors.background,cursor:this.colors.cursor,ansi:this.colors.ansi.slice()};},e.prototype._parseColor=function(e,t,r){if(void 0===r&&(r=this.allowTransparency),void 0===e)return t;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=e,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+e+" is invalid using fallback "+t.css),t;this._ctx.fillRect(0,0,1,1);var o=this._ctx.getImageData(0,0,1,1).data;if(255!==o[3]){if(!r)return console.warn("Color: "+e+" is using transparency, but allowTransparency is false. Using fallback "+t.css+"."),t;var s=i(this._ctx.fillStyle.substring(5,this._ctx.fillStyle.length-1).split(",").map((function(e){return Number(e)})),4),a=s[0],c=s[1],l=s[2],h=s[3],u=Math.round(255*h);return {rgba:n.channels.toRgba(a,c,l,u),css:e}}return {css:this._ctx.fillStyle,rgba:n.channels.toRgba(o[0],o[1],o[2],o[3])}},e}();t.ColorManager=u;},9631:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.removeElementFromParent=void 0,t.removeElementFromParent=function(){for(var e,t,i,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];try{for(var s=r(n),a=s.next();!a.done;a=s.next()){var c=a.value;null===(i=null==c?void 0:c.parentElement)||void 0===i||i.removeChild(c);}}catch(t){e={error:t};}finally{try{a&&!a.done&&(t=s.return)&&t.call(s);}finally{if(e)throw e.error}}};},3656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,r,i){e.addEventListener(t,r,i);var n=!1;return {dispose:function(){n||(n=!0,e.removeEventListener(t,r,i));}}};},3551:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZone=t.Linkifier=void 0;var o=r(8460),s=r(2585),a=function(){function e(e,t,r){this._bufferService=e,this._logService=t,this._unicodeService=r,this._linkMatchers=[],this._nextLinkMatcherId=0,this._onShowLinkUnderline=new o.EventEmitter,this._onHideLinkUnderline=new o.EventEmitter,this._onLinkTooltip=new o.EventEmitter,this._rowsToLinkify={start:void 0,end:void 0};}return Object.defineProperty(e.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLinkTooltip",{get:function(){return this._onLinkTooltip.event},enumerable:!1,configurable:!0}),e.prototype.attachToDom=function(e,t){this._element=e,this._mouseZoneManager=t;},e.prototype.linkifyRows=function(t,r){var i=this;this._mouseZoneManager&&(void 0===this._rowsToLinkify.start||void 0===this._rowsToLinkify.end?(this._rowsToLinkify.start=t,this._rowsToLinkify.end=r):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,t),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,r)),this._mouseZoneManager.clearAll(t,r),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout((function(){return i._linkifyRows()}),e._timeBeforeLatency));},e.prototype._linkifyRows=function(){this._rowsTimeoutId=void 0;var e=this._bufferService.buffer;if(void 0!==this._rowsToLinkify.start&&void 0!==this._rowsToLinkify.end){var t=e.ydisp+this._rowsToLinkify.start;if(!(t>=e.lines.length)){for(var r=e.ydisp+Math.min(this._rowsToLinkify.end,this._bufferService.rows)+1,i=Math.ceil(2e3/this._bufferService.cols),n=this._bufferService.buffer.iterator(!1,t,r,i,i);n.hasNext();)for(var o=n.next(),s=0;s<this._linkMatchers.length;s++)this._doLinkifyRow(o.range.first,o.content,this._linkMatchers[s]);this._rowsToLinkify.start=void 0,this._rowsToLinkify.end=void 0;}}else this._logService.debug("_rowToLinkify was unset before _linkifyRows was called");},e.prototype.registerLinkMatcher=function(e,t,r){if(void 0===r&&(r={}),!t)throw new Error("handler must be defined");var i={id:this._nextLinkMatcherId++,regex:e,handler:t,matchIndex:r.matchIndex,validationCallback:r.validationCallback,hoverTooltipCallback:r.tooltipCallback,hoverLeaveCallback:r.leaveCallback,willLinkActivate:r.willLinkActivate,priority:r.priority||0};return this._addLinkMatcherToList(i),i.id},e.prototype._addLinkMatcherToList=function(e){if(0!==this._linkMatchers.length){for(var t=this._linkMatchers.length-1;t>=0;t--)if(e.priority<=this._linkMatchers[t].priority)return void this._linkMatchers.splice(t+1,0,e);this._linkMatchers.splice(0,0,e);}else this._linkMatchers.push(e);},e.prototype.deregisterLinkMatcher=function(e){for(var t=0;t<this._linkMatchers.length;t++)if(this._linkMatchers[t].id===e)return this._linkMatchers.splice(t,1),!0;return !1},e.prototype._doLinkifyRow=function(e,t,r){for(var i,n=this,o=new RegExp(r.regex.source,(r.regex.flags||"")+"g"),s=-1,a=function(){var a=i["number"!=typeof r.matchIndex?0:r.matchIndex];if(!a)return c._logService.debug("match found without corresponding matchIndex",i,r),"break";if(s=t.indexOf(a,s+1),o.lastIndex=s+a.length,s<0)return "break";var l=c._bufferService.buffer.stringIndexToBufferIndex(e,s);if(l[0]<0)return "break";var h=c._bufferService.buffer.lines.get(l[0]);if(!h)return "break";var u=h.getFg(l[1]),f=u?u>>9&511:void 0;r.validationCallback?r.validationCallback(a,(function(e){n._rowsTimeoutId||e&&n._addLink(l[1],l[0]-n._bufferService.buffer.ydisp,a,r,f);})):c._addLink(l[1],l[0]-c._bufferService.buffer.ydisp,a,r,f);},c=this;null!==(i=o.exec(t))&&"break"!==a(););},e.prototype._addLink=function(e,t,r,i,n){var o=this;if(this._mouseZoneManager&&this._element){var s=this._unicodeService.getStringCellWidth(r),a=e%this._bufferService.cols,l=t+Math.floor(e/this._bufferService.cols),h=(a+s)%this._bufferService.cols,u=l+Math.floor((a+s)/this._bufferService.cols);0===h&&(h=this._bufferService.cols,u--),this._mouseZoneManager.add(new c(a+1,l+1,h+1,u+1,(function(e){if(i.handler)return i.handler(e,r);var t=window.open();t?(t.opener=null,t.location.href=r):console.warn("Opening link blocked as opener could not be cleared");}),(function(){o._onShowLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.add("xterm-cursor-pointer");}),(function(e){o._onLinkTooltip.fire(o._createLinkHoverEvent(a,l,h,u,n)),i.hoverTooltipCallback&&i.hoverTooltipCallback(e,r,{start:{x:a,y:l},end:{x:h,y:u}});}),(function(){o._onHideLinkUnderline.fire(o._createLinkHoverEvent(a,l,h,u,n)),o._element.classList.remove("xterm-cursor-pointer"),i.hoverLeaveCallback&&i.hoverLeaveCallback();}),(function(e){return !i.willLinkActivate||i.willLinkActivate(e,r)})));}},e.prototype._createLinkHoverEvent=function(e,t,r,i,n){return {x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},e._timeBeforeLatency=200,e=i([n(0,s.IBufferService),n(1,s.ILogService),n(2,s.IUnicodeService)],e)}();t.Linkifier=a;var c=function(e,t,r,i,n,o,s,a,c){this.x1=e,this.y1=t,this.x2=r,this.y2=i,this.clickCallback=n,this.hoverCallback=o,this.tooltipCallback=s,this.leaveCallback=a,this.willLinkActivate=c;};t.MouseZone=c;},6465:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},c=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkifier2=void 0;var l=r(2585),h=r(8460),u=r(844),f=r(3656),_=function(e){function t(t){var r=e.call(this)||this;return r._bufferService=t,r._linkProviders=[],r._linkCacheDisposables=[],r._isMouseOut=!0,r._activeLine=-1,r._onShowLinkUnderline=r.register(new h.EventEmitter),r._onHideLinkUnderline=r.register(new h.EventEmitter),r.register((0, u.getDisposeArrayDisposable)(r._linkCacheDisposables)),r}return n(t,e),Object.defineProperty(t.prototype,"currentLink",{get:function(){return this._currentLink},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onShowLinkUnderline",{get:function(){return this._onShowLinkUnderline.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onHideLinkUnderline",{get:function(){return this._onHideLinkUnderline.event},enumerable:!1,configurable:!0}),t.prototype.registerLinkProvider=function(e){var t=this;return this._linkProviders.push(e),{dispose:function(){var r=t._linkProviders.indexOf(e);-1!==r&&t._linkProviders.splice(r,1);}}},t.prototype.attachToDom=function(e,t,r){var i=this;this._element=e,this._mouseService=t,this._renderService=r,this.register((0, f.addDisposableDomListener)(this._element,"mouseleave",(function(){i._isMouseOut=!0,i._clearCurrentLink();}))),this.register((0, f.addDisposableDomListener)(this._element,"mousemove",this._onMouseMove.bind(this))),this.register((0, f.addDisposableDomListener)(this._element,"mousedown",this._handleMouseDown.bind(this))),this.register((0, f.addDisposableDomListener)(this._element,"mouseup",this._handleMouseUp.bind(this)));},t.prototype._onMouseMove=function(e){if(this._lastMouseEvent=e,this._element&&this._mouseService){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(t){this._isMouseOut=!1;for(var r=e.composedPath(),i=0;i<r.length;i++){var n=r[i];if(n.classList.contains("xterm"))break;if(n.classList.contains("xterm-hover"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._onHover(t),this._lastBufferCell=t);}}},t.prototype._onHover=function(e){if(this._activeLine!==e.y)return this._clearCurrentLink(),void this._askForLink(e,!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0));},t.prototype._askForLink=function(e,t){var r,i,n,o,s=this;this._activeProviderReplies&&t||(null===(n=this._activeProviderReplies)||void 0===n||n.forEach((function(e){null==e||e.forEach((function(e){e.link.dispose&&e.link.dispose();}));})),this._activeProviderReplies=new Map,this._activeLine=e.y);var l=!1,h=function(r,i){t?(null===(o=u._activeProviderReplies)||void 0===o?void 0:o.get(r))&&(l=u._checkLinkProviderResult(r,e,l)):i.provideLinks(e.y,(function(t){var i,n;if(!s._isMouseOut){var o=null==t?void 0:t.map((function(e){return {link:e}}));null===(i=s._activeProviderReplies)||void 0===i||i.set(r,o),l=s._checkLinkProviderResult(r,e,l),(null===(n=s._activeProviderReplies)||void 0===n?void 0:n.size)===s._linkProviders.length&&s._removeIntersectingLinks(e.y,s._activeProviderReplies);}}));},u=this;try{for(var f=a(this._linkProviders.entries()),_=f.next();!_.done;_=f.next()){var d=c(_.value,2);h(d[0],d[1]);}}catch(e){r={error:e};}finally{try{_&&!_.done&&(i=f.return)&&i.call(f);}finally{if(r)throw r.error}}},t.prototype._removeIntersectingLinks=function(e,t){for(var r=new Set,i=0;i<t.size;i++){var n=t.get(i);if(n)for(var o=0;o<n.length;o++)for(var s=n[o],a=s.link.range.start.y<e?0:s.link.range.start.x,c=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x,l=a;l<=c;l++){if(r.has(l)){n.splice(o--,1);break}r.add(l);}}},t.prototype._checkLinkProviderResult=function(e,t,r){var i,n=this;if(!this._activeProviderReplies)return r;for(var o=this._activeProviderReplies.get(e),s=!1,a=0;a<e;a++)this._activeProviderReplies.has(a)&&!this._activeProviderReplies.get(a)||(s=!0);if(!s&&o){var c=o.find((function(e){return n._linkAtPosition(e.link,t)}));c&&(r=!0,this._handleNewLink(c));}if(this._activeProviderReplies.size===this._linkProviders.length&&!r)for(a=0;a<this._activeProviderReplies.size;a++){var l=null===(i=this._activeProviderReplies.get(a))||void 0===i?void 0:i.find((function(e){return n._linkAtPosition(e.link,t)}));if(l){r=!0,this._handleNewLink(l);break}}return r},t.prototype._handleMouseDown=function(){this._mouseDownLink=this._currentLink;},t.prototype._handleMouseUp=function(e){if(this._element&&this._mouseService&&this._currentLink){var t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._mouseDownLink===this._currentLink&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text);}},t.prototype._clearCurrentLink=function(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0, u.disposeArray)(this._linkCacheDisposables));},t.prototype._handleNewLink=function(e){var t=this;if(this._element&&this._lastMouseEvent&&this._mouseService){var r=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);r&&this._linkAtPosition(e.link,r)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.pointerCursor},set:function(e){var r,i;(null===(r=t._currentLink)||void 0===r?void 0:r.state)&&t._currentLink.state.decorations.pointerCursor!==e&&(t._currentLink.state.decorations.pointerCursor=e,t._currentLink.state.isHovered&&(null===(i=t._element)||void 0===i||i.classList.toggle("xterm-cursor-pointer",e)));}},underline:{get:function(){var e,r;return null===(r=null===(e=t._currentLink)||void 0===e?void 0:e.state)||void 0===r?void 0:r.decorations.underline},set:function(r){var i,n,o;(null===(i=t._currentLink)||void 0===i?void 0:i.state)&&(null===(o=null===(n=t._currentLink)||void 0===n?void 0:n.state)||void 0===o?void 0:o.decorations.underline)!==r&&(t._currentLink.state.decorations.underline=r,t._currentLink.state.isHovered&&t._fireUnderlineEvent(e.link,r));}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((function(e){var r=0===e.start?0:e.start+1+t._bufferService.buffer.ydisp;t._clearCurrentLink(r,e.end+1+t._bufferService.buffer.ydisp);}))));}},t.prototype._linkHover=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add("xterm-cursor-pointer")),t.hover&&t.hover(r,t.text);},t.prototype._fireUnderlineEvent=function(e,t){var r=e.range,i=this._bufferService.buffer.ydisp,n=this._createLinkUnderlineEvent(r.start.x-1,r.start.y-i-1,r.end.x,r.end.y-i-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(n);},t.prototype._linkLeave=function(e,t,r){var i;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove("xterm-cursor-pointer")),t.leave&&t.leave(r,t.text);},t.prototype._linkAtPosition=function(e,t){var r=e.range.start.y===e.range.end.y,i=e.range.start.y<t.y,n=e.range.end.y>t.y;return (r&&e.range.start.x<=t.x&&e.range.end.x>=t.x||i&&e.range.end.x>=t.x||n&&e.range.start.x<=t.x||i&&n)&&e.range.start.y<=t.y&&e.range.end.y>=t.y},t.prototype._positionFromMouseEvent=function(e,t,r){var i=r.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(i)return {x:i[0],y:i[1]+this._bufferService.buffer.ydisp}},t.prototype._createLinkUnderlineEvent=function(e,t,r,i,n){return {x1:e,y1:t,x2:r,y2:i,cols:this._bufferService.cols,fg:n}},o([s(0,l.IBufferService)],t)}(u.Disposable);t.Linkifier2=_;},9042:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read";},6954:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseZoneManager=void 0;var a=r(844),c=r(3656),l=r(4725),h=r(2585),u=function(e){function t(t,r,i,n,o,s){var a=e.call(this)||this;return a._element=t,a._screenElement=r,a._bufferService=i,a._mouseService=n,a._selectionService=o,a._optionsService=s,a._zones=[],a._areZonesActive=!1,a._lastHoverCoords=[void 0,void 0],a._initialSelectionLength=0,a.register((0, c.addDisposableDomListener)(a._element,"mousedown",(function(e){return a._onMouseDown(e)}))),a._mouseMoveListener=function(e){return a._onMouseMove(e)},a._mouseLeaveListener=function(e){return a._onMouseLeave(e)},a._clickListener=function(e){return a._onClick(e)},a}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._deactivate();},t.prototype.add=function(e){this._zones.push(e),1===this._zones.length&&this._activate();},t.prototype.clearAll=function(e,t){if(0!==this._zones.length){e&&t||(e=0,t=this._bufferService.rows-1);for(var r=0;r<this._zones.length;r++){var i=this._zones[r];(i.y1>e&&i.y1<=t+1||i.y2>e&&i.y2<=t+1||i.y1<e&&i.y2>t+1)&&(this._currentZone&&this._currentZone===i&&(this._currentZone.leaveCallback(),this._currentZone=void 0),this._zones.splice(r--,1));}0===this._zones.length&&this._deactivate();}},t.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._element.addEventListener("mousemove",this._mouseMoveListener),this._element.addEventListener("mouseleave",this._mouseLeaveListener),this._element.addEventListener("click",this._clickListener));},t.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._element.removeEventListener("mousemove",this._mouseMoveListener),this._element.removeEventListener("mouseleave",this._mouseLeaveListener),this._element.removeEventListener("click",this._clickListener));},t.prototype._onMouseMove=function(e){this._lastHoverCoords[0]===e.pageX&&this._lastHoverCoords[1]===e.pageY||(this._onHover(e),this._lastHoverCoords=[e.pageX,e.pageY]);},t.prototype._onHover=function(e){var t=this,r=this._findZoneEventAt(e);r!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),r&&(this._currentZone=r,r.hoverCallback&&r.hoverCallback(e),this._tooltipTimeout=window.setTimeout((function(){return t._onTooltip(e)}),this._optionsService.rawOptions.linkTooltipHoverDuration)));},t.prototype._onTooltip=function(e){this._tooltipTimeout=void 0;var t=this._findZoneEventAt(e);null==t||t.tooltipCallback(e);},t.prototype._onMouseDown=function(e){if(this._initialSelectionLength=this._getSelectionLength(),this._areZonesActive){var t=this._findZoneEventAt(e);(null==t?void 0:t.willLinkActivate(e))&&(e.preventDefault(),e.stopImmediatePropagation());}},t.prototype._onMouseLeave=function(e){this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=void 0,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout));},t.prototype._onClick=function(e){var t=this._findZoneEventAt(e),r=this._getSelectionLength();t&&r===this._initialSelectionLength&&(t.clickCallback(e),e.preventDefault(),e.stopImmediatePropagation());},t.prototype._getSelectionLength=function(){var e=this._selectionService.selectionText;return e?e.length:0},t.prototype._findZoneEventAt=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows);if(t)for(var r=t[0],i=t[1],n=0;n<this._zones.length;n++){var o=this._zones[n];if(o.y1===o.y2){if(i===o.y1&&r>=o.x1&&r<o.x2)return o}else if(i===o.y1&&r>=o.x1||i===o.y2&&r<o.x2||i>o.y1&&i<o.y2)return o}},o([s(2,h.IBufferService),s(3,l.IMouseService),s(4,l.ISelectionService),s(5,h.IOptionsService)],t)}(a.Disposable);t.MouseZoneManager=u;},6193:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderDebouncer=void 0;var i=function(){function e(e){this._renderCallback=e,this._refreshCallbacks=[];}return e.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0);},e.prototype.addRefreshCallback=function(e){var t=this;return this._refreshCallbacks.push(e),this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){return t._innerRefresh()}))),this._animationFrame},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){return i._innerRefresh()})));},e.prototype._innerRefresh=function(){if(this._animationFrame=void 0,void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t),this._runRefreshCallbacks();}else this._runRefreshCallbacks();},e.prototype._runRefreshCallbacks=function(){var e,t;try{for(var i=r(this._refreshCallbacks),n=i.next();!n.done;n=i.next())(0,n.value)(0);}catch(t){e={error:t};}finally{try{n&&!n.done&&(t=i.return)&&t.call(i);}finally{if(e)throw e.error}}this._refreshCallbacks=[];},e}();t.RenderDebouncer=i;},5596:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.ScreenDprMonitor=void 0;var o=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._currentDevicePixelRatio=window.devicePixelRatio,t}return n(t,e),t.prototype.setListener=function(e){var t=this;this._listener&&this.clearListener(),this._listener=e,this._outerListener=function(){t._listener&&(t._listener(window.devicePixelRatio,t._currentDevicePixelRatio),t._updateDpr());},this._updateDpr();},t.prototype.dispose=function(){e.prototype.dispose.call(this),this.clearListener();},t.prototype._updateDpr=function(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener));},t.prototype.clearListener=function(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0);},t}(r(844).Disposable);t.ScreenDprMonitor=o;},3236:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},s=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s},a=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var c=r(2950),l=r(1680),h=r(3614),u=r(2584),f=r(5435),_=r(3525),d=r(3551),p=r(9312),v=r(6114),y=r(3656),g=r(9042),m=r(357),b=r(6954),S=r(4567),C=r(1296),w=r(7399),L=r(8460),E=r(8437),x=r(5680),R=r(3230),k=r(4725),M=r(428),A=r(8934),O=r(6465),D=r(5114),T=r(8969),B=r(8055),P=r(4269),I=r(5941),H=r(3107),j=r(5744),F=r(9074),W=r(2585),U="undefined"!=typeof window?window.document:null,q=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,t)||this;return r.browser=v,r._keyDownHandled=!1,r._keyDownSeen=!1,r._keyPressHandled=!1,r._unprocessedDeadKey=!1,r._onCursorMove=new L.EventEmitter,r._onKey=new L.EventEmitter,r._onRender=new L.EventEmitter,r._onSelectionChange=new L.EventEmitter,r._onTitleChange=new L.EventEmitter,r._onBell=new L.EventEmitter,r._onFocus=new L.EventEmitter,r._onBlur=new L.EventEmitter,r._onA11yCharEmitter=new L.EventEmitter,r._onA11yTabEmitter=new L.EventEmitter,r._setup(),r.linkifier=r._instantiationService.createInstance(d.Linkifier),r.linkifier2=r.register(r._instantiationService.createInstance(O.Linkifier2)),r._decorationService=r._instantiationService.createInstance(F.DecorationService),r._instantiationService.setService(W.IDecorationService,r._decorationService),r.register(r._inputHandler.onRequestBell((function(){return r.bell()}))),r.register(r._inputHandler.onRequestRefreshRows((function(e,t){return r.refresh(e,t)}))),r.register(r._inputHandler.onRequestSendFocus((function(){return r._reportFocus()}))),r.register(r._inputHandler.onRequestReset((function(){return r.reset()}))),r.register(r._inputHandler.onRequestWindowsOptionsReport((function(e){return r._reportWindowsOptions(e)}))),r.register(r._inputHandler.onColor((function(e){return r._handleColorEvent(e)}))),r.register((0, L.forwardEvent)(r._inputHandler.onCursorMove,r._onCursorMove)),r.register((0, L.forwardEvent)(r._inputHandler.onTitleChange,r._onTitleChange)),r.register((0, L.forwardEvent)(r._inputHandler.onA11yChar,r._onA11yCharEmitter)),r.register((0, L.forwardEvent)(r._inputHandler.onA11yTab,r._onA11yTabEmitter)),r.register(r._bufferService.onResize((function(e){return r._afterResize(e.cols,e.rows)}))),r}return n(t,e),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onKey",{get:function(){return this._onKey.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBell",{get:function(){return this._onBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onFocus",{get:function(){return this._onFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBlur",{get:function(){return this._onBlur.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yCharEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTabEmitter.event},enumerable:!1,configurable:!0}),t.prototype._handleColorEvent=function(e){var t,r,i,n;if(this._colorManager){try{for(var c=o(e),l=c.next();!l.done;l=c.next()){var h=l.value,f=void 0,_="";switch(h.index){case 256:f="foreground",_="10";break;case 257:f="background",_="11";break;case 258:f="cursor",_="12";break;default:f="ansi",_="4;"+h.index;}if(f)switch(h.type){case 0:var d=B.color.toColorRGB("ansi"===f?this._colorManager.colors.ansi[h.index]:this._colorManager.colors[f]);this.coreService.triggerDataEvent(u.C0.ESC+"]"+_+";"+(0,I.toRgbString)(d)+u.C1_ESCAPED.ST);break;case 1:"ansi"===f?this._colorManager.colors.ansi[h.index]=B.rgba.toColor.apply(B.rgba,a([],s(h.color),!1)):this._colorManager.colors[f]=B.rgba.toColor.apply(B.rgba,a([],s(h.color),!1));break;case 2:this._colorManager.restoreColor(h.index);}}}catch(e){t={error:e};}finally{try{l&&!l.done&&(r=c.return)&&r.call(c);}finally{if(t)throw t.error}}null===(i=this._renderService)||void 0===i||i.setColors(this._colorManager.colors),null===(n=this.viewport)||void 0===n||n.onThemeChange(this._colorManager.colors);}},t.prototype.dispose=function(){var t,r,i;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._renderService)||void 0===t||t.dispose(),this._customKeyEventHandler=void 0,this.write=function(){},null===(i=null===(r=this.element)||void 0===r?void 0:r.parentNode)||void 0===i||i.removeChild(this.element));},t.prototype._setup=function(){e.prototype._setup.call(this),this._customKeyEventHandler=void 0;},Object.defineProperty(t.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),t.prototype.focus=function(){this.textarea&&this.textarea.focus({preventScroll:!0});},t.prototype._updateOptions=function(t){var r,i,n,o;switch(e.prototype._updateOptions.call(this,t),t){case"fontFamily":case"fontSize":null===(r=this._renderService)||void 0===r||r.clear(),null===(i=this._charSizeService)||void 0===i||i.measure();break;case"cursorBlink":case"cursorStyle":this.refresh(this.buffer.y,this.buffer.y);break;case"customGlyphs":case"drawBoldTextInBrightColors":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":case"minimumContrastRatio":this._renderService&&(this._renderService.clear(),this._renderService.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));break;case"rendererType":this._renderService&&(this._renderService.setRenderer(this._createRenderer()),this._renderService.onResize(this.cols,this.rows));break;case"scrollback":null===(n=this.viewport)||void 0===n||n.syncScrollArea();break;case"screenReaderMode":this.optionsService.rawOptions.screenReaderMode?!this._accessibilityManager&&this._renderService&&(this._accessibilityManager=new S.AccessibilityManager(this,this._renderService)):(null===(o=this._accessibilityManager)||void 0===o||o.dispose(),this._accessibilityManager=void 0);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"theme":this._setTheme(this.optionsService.rawOptions.theme);}},t.prototype._onTextAreaFocus=function(e){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(u.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire();},t.prototype.blur=function(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()},t.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(u.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire();},t.prototype._syncTextArea=function(){if(this.textarea&&this.buffer.isCursorInViewport&&!this._compositionHelper.isComposing&&this._renderService){var e=this.buffer.ybase+this.buffer.y,t=this.buffer.lines.get(e);if(t){var r=Math.min(this.buffer.x,this.cols-1),i=this._renderService.dimensions.actualCellHeight,n=t.getWidth(r),o=this._renderService.dimensions.actualCellWidth*n,s=this.buffer.y*this._renderService.dimensions.actualCellHeight,a=r*this._renderService.dimensions.actualCellWidth;this.textarea.style.left=a+"px",this.textarea.style.top=s+"px",this.textarea.style.width=o+"px",this.textarea.style.height=i+"px",this.textarea.style.lineHeight=i+"px",this.textarea.style.zIndex="-5";}}},t.prototype._initGlobal=function(){var e=this;this._bindKeys(),this.register((0, y.addDisposableDomListener)(this.element,"copy",(function(t){e.hasSelection()&&(0, h.copyHandler)(t,e._selectionService);})));var t=function(t){return (0, h.handlePasteEvent)(t,e.textarea,e.coreService)};this.register((0, y.addDisposableDomListener)(this.textarea,"paste",t)),this.register((0, y.addDisposableDomListener)(this.element,"paste",t)),v.isFirefox?this.register((0, y.addDisposableDomListener)(this.element,"mousedown",(function(t){2===t.button&&(0, h.rightClickHandler)(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord);}))):this.register((0, y.addDisposableDomListener)(this.element,"contextmenu",(function(t){(0, h.rightClickHandler)(t,e.textarea,e.screenElement,e._selectionService,e.options.rightClickSelectsWord);}))),v.isLinux&&this.register((0, y.addDisposableDomListener)(this.element,"auxclick",(function(t){1===t.button&&(0, h.moveTextAreaUnderMouseCursor)(t,e.textarea,e.screenElement);})));},t.prototype._bindKeys=function(){var e=this;this.register((0, y.addDisposableDomListener)(this.textarea,"keyup",(function(t){return e._keyUp(t)}),!0)),this.register((0, y.addDisposableDomListener)(this.textarea,"keydown",(function(t){return e._keyDown(t)}),!0)),this.register((0, y.addDisposableDomListener)(this.textarea,"keypress",(function(t){return e._keyPress(t)}),!0)),this.register((0, y.addDisposableDomListener)(this.textarea,"compositionstart",(function(){return e._compositionHelper.compositionstart()}))),this.register((0, y.addDisposableDomListener)(this.textarea,"compositionupdate",(function(t){return e._compositionHelper.compositionupdate(t)}))),this.register((0, y.addDisposableDomListener)(this.textarea,"compositionend",(function(){return e._compositionHelper.compositionend()}))),this.register((0, y.addDisposableDomListener)(this.textarea,"input",(function(t){return e._inputEvent(t)}),!0)),this.register(this.onRender((function(){return e._compositionHelper.updateCompositionElements()}))),this.register(this.onRender((function(t){return e._queueLinkification(t.start,t.end)})));},t.prototype.open=function(e){var t=this;if(!e)throw new Error("Terminal requires a parent element.");e.isConnected||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=e.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),e.appendChild(this.element);var r=U.createDocumentFragment();this._viewportElement=U.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),r.appendChild(this._viewportElement),this._viewportScrollArea=U.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=U.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=U.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),r.appendChild(this.screenElement),this.textarea=U.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",g.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register((0, y.addDisposableDomListener)(this.textarea,"focus",(function(e){return t._onTextAreaFocus(e)}))),this.register((0, y.addDisposableDomListener)(this.textarea,"blur",(function(){return t._onTextAreaBlur()}))),this._helperContainer.appendChild(this.textarea);var i=this._instantiationService.createInstance(D.CoreBrowserService,this.textarea);this._instantiationService.setService(k.ICoreBrowserService,i),this._charSizeService=this._instantiationService.createInstance(M.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(k.ICharSizeService,this._charSizeService),this._theme=this.options.theme||this._theme,this._colorManager=new x.ColorManager(U,this.options.allowTransparency),this.register(this.optionsService.onOptionChange((function(e){return t._colorManager.onOptionsChange(e)}))),this._colorManager.setTheme(this._theme),this._characterJoinerService=this._instantiationService.createInstance(P.CharacterJoinerService),this._instantiationService.setService(k.ICharacterJoinerService,this._characterJoinerService);var n=this._createRenderer();this._renderService=this.register(this._instantiationService.createInstance(R.RenderService,n,this.rows,this.screenElement)),this._instantiationService.setService(k.IRenderService,this._renderService),this.register(this._renderService.onRenderedViewportChange((function(e){return t._onRender.fire(e)}))),this.onResize((function(e){return t._renderService.resize(e.cols,e.rows)})),this._compositionView=U.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(c.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(r),this._soundService=this._instantiationService.createInstance(m.SoundService),this._instantiationService.setService(k.ISoundService,this._soundService),this._mouseService=this._instantiationService.createInstance(A.MouseService),this._instantiationService.setService(k.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(l.Viewport,(function(e){return t.scrollLines(e,!0,1)}),this._viewportElement,this._viewportScrollArea,this.element),this.viewport.onThemeChange(this._colorManager.colors),this.register(this._inputHandler.onRequestSyncScrollBar((function(){return t.viewport.syncScrollArea()}))),this.register(this.viewport),this.register(this.onCursorMove((function(){t._renderService.onCursorMove(),t._syncTextArea();}))),this.register(this.onResize((function(){return t._renderService.onResize(t.cols,t.rows)}))),this.register(this.onBlur((function(){return t._renderService.onBlur()}))),this.register(this.onFocus((function(){return t._renderService.onFocus()}))),this.register(this._renderService.onDimensionsChange((function(){return t.viewport.syncScrollArea()}))),this._selectionService=this.register(this._instantiationService.createInstance(p.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(k.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((function(e){return t.scrollLines(e.amount,e.suppressScrollEvent)}))),this.register(this._selectionService.onSelectionChange((function(){return t._onSelectionChange.fire()}))),this.register(this._selectionService.onRequestRedraw((function(e){return t._renderService.onSelectionChanged(e.start,e.end,e.columnSelectMode)}))),this.register(this._selectionService.onLinuxMouseSelection((function(e){t.textarea.value=e,t.textarea.focus(),t.textarea.select();}))),this.register(this._onScroll.event((function(e){t.viewport.syncScrollArea(),t._selectionService.refresh();}))),this.register((0, y.addDisposableDomListener)(this._viewportElement,"scroll",(function(){return t._selectionService.refresh()}))),this._mouseZoneManager=this._instantiationService.createInstance(b.MouseZoneManager,this.element,this.screenElement),this.register(this._mouseZoneManager),this.register(this.onScroll((function(){return t._mouseZoneManager.clearAll()}))),this.linkifier.attachToDom(this.element,this._mouseZoneManager),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.register(this._instantiationService.createInstance(H.BufferDecorationRenderer,this.screenElement)),this.register((0, y.addDisposableDomListener)(this.element,"mousedown",(function(e){return t._selectionService.onMouseDown(e)}))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager=new S.AccessibilityManager(this,this._renderService)),this.options.overviewRulerWidth&&(this._overviewRulerRenderer=this._instantiationService.createInstance(j.OverviewRulerRenderer,this._viewportElement,this.screenElement)),this.optionsService.onOptionChange((function(){!t._overviewRulerRenderer&&t.options.overviewRulerWidth&&t._viewportElement&&t.screenElement&&(t._overviewRulerRenderer=t._instantiationService.createInstance(j.OverviewRulerRenderer,t._viewportElement,t.screenElement));})),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse();},t.prototype._createRenderer=function(){switch(this.options.rendererType){case"canvas":return this._instantiationService.createInstance(_.Renderer,this._colorManager.colors,this.screenElement,this.linkifier,this.linkifier2);case"dom":return this._instantiationService.createInstance(C.DomRenderer,this._colorManager.colors,this.element,this.screenElement,this._viewportElement,this.linkifier,this.linkifier2);default:throw new Error('Unrecognized rendererType "'+this.options.rendererType+'"')}},t.prototype._setTheme=function(e){var t,r,i;this._theme=e,null===(t=this._colorManager)||void 0===t||t.setTheme(e),null===(r=this._renderService)||void 0===r||r.setColors(this._colorManager.colors),null===(i=this.viewport)||void 0===i||i.onThemeChange(this._colorManager.colors);},t.prototype.bindMouse=function(){var e=this,t=this,r=this.element;function i(e){var r,i,n=t._mouseService.getRawByteCoords(e,t.screenElement,t.cols,t.rows);if(!n)return !1;switch(e.overrideType||e.type){case"mousemove":i=32,void 0===e.buttons?(r=3,void 0!==e.button&&(r=e.button<3?e.button:3)):r=1&e.buttons?0:4&e.buttons?1:2&e.buttons?2:3;break;case"mouseup":i=0,r=e.button<3?e.button:3;break;case"mousedown":i=1,r=e.button<3?e.button:3;break;case"wheel":if(0===t.viewport.getLinesScrolled(e))return !1;i=e.deltaY<0?0:1,r=4;break;default:return !1}return !(void 0===i||void 0===r||r>4)&&t.coreMouseService.triggerMouseEvent({col:n.x-33,row:n.y-33,button:r,action:i,ctrl:e.ctrlKey,alt:e.altKey,shift:e.shiftKey})}var n={mouseup:null,wheel:null,mousedrag:null,mousemove:null},o=function(t){return i(t),t.buttons||(e._document.removeEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.removeEventListener("mousemove",n.mousedrag)),e.cancel(t)},s=function(t){return i(t),e.cancel(t,!0)},a=function(e){e.buttons&&i(e);},c=function(e){e.buttons||i(e);};this.register(this.coreMouseService.onProtocolChange((function(t){t?("debug"===e.optionsService.rawOptions.logLevel&&e._logService.debug("Binding to mouse events:",e.coreMouseService.explainEvents(t)),e.element.classList.add("enable-mouse-events"),e._selectionService.disable()):(e._logService.debug("Unbinding from mouse events."),e.element.classList.remove("enable-mouse-events"),e._selectionService.enable()),8&t?n.mousemove||(r.addEventListener("mousemove",c),n.mousemove=c):(r.removeEventListener("mousemove",n.mousemove),n.mousemove=null),16&t?n.wheel||(r.addEventListener("wheel",s,{passive:!1}),n.wheel=s):(r.removeEventListener("wheel",n.wheel),n.wheel=null),2&t?n.mouseup||(n.mouseup=o):(e._document.removeEventListener("mouseup",n.mouseup),n.mouseup=null),4&t?n.mousedrag||(n.mousedrag=a):(e._document.removeEventListener("mousemove",n.mousedrag),n.mousedrag=null);}))),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0, y.addDisposableDomListener)(r,"mousedown",(function(t){if(t.preventDefault(),e.focus(),e.coreMouseService.areMouseEventsActive&&!e._selectionService.shouldForceSelection(t))return i(t),n.mouseup&&e._document.addEventListener("mouseup",n.mouseup),n.mousedrag&&e._document.addEventListener("mousemove",n.mousedrag),e.cancel(t)}))),this.register((0, y.addDisposableDomListener)(r,"wheel",(function(t){if(!n.wheel){if(!e.buffer.hasScrollback){var r=e.viewport.getLinesScrolled(t);if(0===r)return;for(var i=u.C0.ESC+(e.coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(t.deltaY<0?"A":"B"),o="",s=0;s<Math.abs(r);s++)o+=i;return e.coreService.triggerDataEvent(o,!0),e.cancel(t,!0)}return e.viewport.onWheel(t)?e.cancel(t):void 0}}),{passive:!1})),this.register((0, y.addDisposableDomListener)(r,"touchstart",(function(t){if(!e.coreMouseService.areMouseEventsActive)return e.viewport.onTouchStart(t),e.cancel(t)}),{passive:!0})),this.register((0, y.addDisposableDomListener)(r,"touchmove",(function(t){if(!e.coreMouseService.areMouseEventsActive)return e.viewport.onTouchMove(t)?void 0:e.cancel(t)}),{passive:!1}));},t.prototype.refresh=function(e,t){var r;null===(r=this._renderService)||void 0===r||r.refreshRows(e,t);},t.prototype._queueLinkification=function(e,t){var r;null===(r=this.linkifier)||void 0===r||r.linkifyRows(e,t);},t.prototype.updateCursorStyle=function(e){var t;(null===(t=this._selectionService)||void 0===t?void 0:t.shouldColumnSelect(e))?this.element.classList.add("column-select"):this.element.classList.remove("column-select");},t.prototype._showCursor=function(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y));},t.prototype.scrollLines=function(t,r,i){void 0===i&&(i=0),e.prototype.scrollLines.call(this,t,r,i),this.refresh(0,this.rows-1);},t.prototype.paste=function(e){(0, h.paste)(e,this.textarea,this.coreService);},t.prototype.attachCustomKeyEventHandler=function(e){this._customKeyEventHandler=e;},t.prototype.registerLinkMatcher=function(e,t,r){var i=this.linkifier.registerLinkMatcher(e,t,r);return this.refresh(0,this.rows-1),i},t.prototype.deregisterLinkMatcher=function(e){this.linkifier.deregisterLinkMatcher(e)&&this.refresh(0,this.rows-1);},t.prototype.registerLinkProvider=function(e){return this.linkifier2.registerLinkProvider(e)},t.prototype.registerCharacterJoiner=function(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");var t=this._characterJoinerService.register(e);return this.refresh(0,this.rows-1),t},t.prototype.deregisterCharacterJoiner=function(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");this._characterJoinerService.deregister(e)&&this.refresh(0,this.rows-1);},Object.defineProperty(t.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!1,configurable:!0}),t.prototype.addMarker=function(e){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)},t.prototype.registerDecoration=function(e){return this._decorationService.registerDecoration(e)},t.prototype.hasSelection=function(){return !!this._selectionService&&this._selectionService.hasSelection},t.prototype.select=function(e,t,r){this._selectionService.setSelection(e,t,r);},t.prototype.getSelection=function(){return this._selectionService?this._selectionService.selectionText:""},t.prototype.getSelectionPosition=function(){if(this._selectionService&&this._selectionService.hasSelection)return {startColumn:this._selectionService.selectionStart[0],startRow:this._selectionService.selectionStart[1],endColumn:this._selectionService.selectionEnd[0],endRow:this._selectionService.selectionEnd[1]}},t.prototype.clearSelection=function(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection();},t.prototype.selectAll=function(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll();},t.prototype.selectLines=function(e,t){var r;null===(r=this._selectionService)||void 0===r||r.selectLines(e,t);},t.prototype._keyDown=function(e){if(this._keyDownHandled=!1,this._keyDownSeen=!0,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return !1;var t=this.browser.isMac&&this.options.macOptionIsMeta&&e.altKey;if(!t&&!this._compositionHelper.keydown(e))return this.buffer.ybase!==this.buffer.ydisp&&this._bufferService.scrollToBottom(),!1;t||"Dead"!==e.key&&"AltGraph"!==e.key||(this._unprocessedDeadKey=!0);var r=(0, w.evaluateKeyboardEvent)(e,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===r.type||2===r.type){var i=this.rows-1;return this.scrollLines(2===r.type?-i:i),this.cancel(e,!0)}return 1===r.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(r.cancel&&this.cancel(e,!0),!r.key||!!(e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&1===e.key.length&&e.key.charCodeAt(0)>=65&&e.key.charCodeAt(0)<=90)||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(r.key!==u.C0.ETX&&r.key!==u.C0.CR||(this.textarea.value=""),this._onKey.fire({key:r.key,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(r.key,!0),this.optionsService.rawOptions.screenReaderMode?void(this._keyDownHandled=!0):this.cancel(e,!0))))},t.prototype._isThirdLevelShift=function(e,t){var r=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey||e.isWindows&&t.getModifierState("AltGraph");return "keypress"===t.type?r:r&&(!t.keyCode||t.keyCode>47)},t.prototype._keyUp=function(e){this._keyDownSeen=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e),this._keyPressHandled=!1);},t.prototype._keyPress=function(e){var t;if(this._keyPressHandled=!1,this._keyDownHandled)return !1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return !1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else {if(0===e.which||0===e.charCode)return !1;t=e.which;}return !(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e)||(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))},t.prototype._inputEvent=function(e){if(e.data&&"insertText"===e.inputType&&(!e.composed||!this._keyDownSeen)&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return !1;this._unprocessedDeadKey=!1;var t=e.data;return this.coreService.triggerDataEvent(t,!0),this.cancel(e),!0}return !1},t.prototype.bell=function(){var e;this._soundBell()&&(null===(e=this._soundService)||void 0===e||e.playBellSound()),this._onBell.fire();},t.prototype.resize=function(t,r){t!==this.cols||r!==this.rows?e.prototype.resize.call(this,t,r):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure();},t.prototype._afterResize=function(e,t){var r,i;null===(r=this._charSizeService)||void 0===r||r.measure(),null===(i=this.viewport)||void 0===i||i.syncScrollArea(!0);},t.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.clearAllMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(E.DEFAULT_ATTR_DATA));this.refresh(0,this.rows-1),this._onScroll.fire({position:this.buffer.ydisp,source:0});}},t.prototype.reset=function(){var t,r;this.options.rows=this.rows,this.options.cols=this.cols;var i=this._customKeyEventHandler;this._setup(),e.prototype.reset.call(this),null===(t=this._selectionService)||void 0===t||t.reset(),this._decorationService.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1),null===(r=this.viewport)||void 0===r||r.syncScrollArea();},t.prototype.clearTextureAtlas=function(){var e;null===(e=this._renderService)||void 0===e||e.clearTextureAtlas();},t.prototype._reportFocus=function(){var e;(null===(e=this.element)||void 0===e?void 0:e.classList.contains("focus"))?this.coreService.triggerDataEvent(u.C0.ESC+"[I"):this.coreService.triggerDataEvent(u.C0.ESC+"[O");},t.prototype._reportWindowsOptions=function(e){if(this._renderService)switch(e){case f.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:var t=this._renderService.dimensions.scaledCanvasWidth.toFixed(0),r=this._renderService.dimensions.scaledCanvasHeight.toFixed(0);this.coreService.triggerDataEvent(u.C0.ESC+"[4;"+r+";"+t+"t");break;case f.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:var i=this._renderService.dimensions.scaledCellWidth.toFixed(0),n=this._renderService.dimensions.scaledCellHeight.toFixed(0);this.coreService.triggerDataEvent(u.C0.ESC+"[6;"+n+";"+i+"t");}},t.prototype.cancel=function(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1},t.prototype._visualBell=function(){return !1},t.prototype._soundBell=function(){return "sound"===this.options.bellStyle},t}(T.CoreTerminal);t.Terminal=q;},9924:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeBasedDebouncer=void 0;var r=function(){function e(e,t){void 0===t&&(t=1e3),this._renderCallback=e,this._debounceThresholdMS=t,this._lastRefreshMs=0,this._additionalRefreshRequested=!1;}return e.prototype.dispose=function(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID);},e.prototype.refresh=function(e,t,r){var i=this;this._rowCount=r,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t;var n=Date.now();if(n-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=n,this._innerRefresh();else if(!this._additionalRefreshRequested){var o=n-this._lastRefreshMs,s=this._debounceThresholdMS-o;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout((function(){i._lastRefreshMs=Date.now(),i._innerRefresh(),i._additionalRefreshRequested=!1,i._refreshTimeoutID=void 0;}),s);}},e.prototype._innerRefresh=function(){if(void 0!==this._rowStart&&void 0!==this._rowEnd&&void 0!==this._rowCount){var e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t);}},e}();t.TimeBasedDebouncer=r;},1680:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewport=void 0;var a=r(844),c=r(3656),l=r(4725),h=r(2585),u=function(e){function t(t,r,i,n,o,s,a,l){var h=e.call(this)||this;return h._scrollLines=t,h._viewportElement=r,h._scrollArea=i,h._element=n,h._bufferService=o,h._optionsService=s,h._charSizeService=a,h._renderService=l,h.scrollBarWidth=0,h._currentRowHeight=0,h._currentScaledCellHeight=0,h._lastRecordedBufferLength=0,h._lastRecordedViewportHeight=0,h._lastRecordedBufferHeight=0,h._lastTouchY=0,h._lastScrollTop=0,h._wheelPartialScroll=0,h._refreshAnimationFrame=null,h._ignoreNextScrollEvent=!1,h.scrollBarWidth=h._viewportElement.offsetWidth-h._scrollArea.offsetWidth||15,h.register((0, c.addDisposableDomListener)(h._viewportElement,"scroll",h._onScroll.bind(h))),h._activeBuffer=h._bufferService.buffer,h.register(h._bufferService.buffers.onBufferActivate((function(e){return h._activeBuffer=e.activeBuffer}))),h._renderDimensions=h._renderService.dimensions,h.register(h._renderService.onDimensionsChange((function(e){return h._renderDimensions=e}))),setTimeout((function(){return h.syncScrollArea()}),0),h}return n(t,e),t.prototype.onThemeChange=function(e){this._viewportElement.style.backgroundColor=e.background.css;},t.prototype._refresh=function(e){var t=this;if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=requestAnimationFrame((function(){return t._innerRefresh()})));},t.prototype._innerRefresh=function(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.scaledCellHeight/window.devicePixelRatio,this._currentScaledCellHeight=this._renderService.dimensions.scaledCellHeight,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.canvasHeight);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px");}var t=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==t&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=t),this._refreshAnimationFrame=null;},t.prototype.syncScrollArea=function(e){if(void 0===e&&(e=!1),this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);this._lastRecordedViewportHeight===this._renderService.dimensions.canvasHeight&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.scaledCellHeight===this._currentScaledCellHeight||this._refresh(e);},t.prototype._onScroll=function(e){if(this._lastScrollTop=this._viewportElement.scrollTop,this._viewportElement.offsetParent){if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._scrollLines(0);var t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._scrollLines(t);}},t.prototype._bubbleScroll=function(e,t){var r=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return !(t<0&&0!==this._viewportElement.scrollTop||t>0&&r<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)},t.prototype.onWheel=function(e){var t=this._getPixelsScrolled(e);return 0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},t.prototype._getPixelsScrolled=function(e){if(0===e.deltaY||e.shiftKey)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t},t.prototype.getLinesScrolled=function(e){if(0===e.deltaY||e.shiftKey)return 0;var t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t},t.prototype._applyScrollModifier=function(e,t){var r=this._optionsService.rawOptions.fastScrollModifier;return "alt"===r&&t.altKey||"ctrl"===r&&t.ctrlKey||"shift"===r&&t.shiftKey?e*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:e*this._optionsService.rawOptions.scrollSensitivity},t.prototype.onTouchStart=function(e){this._lastTouchY=e.touches[0].pageY;},t.prototype.onTouchMove=function(e){var t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))},o([s(4,h.IBufferService),s(5,h.IOptionsService),s(6,l.ICharSizeService),s(7,l.IRenderService)],t)}(a.Disposable);t.Viewport=u;},3107:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferDecorationRenderer=void 0;var c=r(3656),l=r(4725),h=r(844),u=r(2585),f=function(e){function t(t,r,i,n){var o=e.call(this)||this;return o._screenElement=t,o._bufferService=r,o._decorationService=i,o._renderService=n,o._decorationElements=new Map,o._altBufferIsActive=!1,o._dimensionsChanged=!1,o._container=document.createElement("div"),o._container.classList.add("xterm-decoration-container"),o._screenElement.appendChild(o._container),o.register(o._renderService.onRenderedViewportChange((function(){return o._queueRefresh()}))),o.register(o._renderService.onDimensionsChange((function(){o._dimensionsChanged=!0,o._queueRefresh();}))),o.register((0, c.addDisposableDomListener)(window,"resize",(function(){return o._queueRefresh()}))),o.register(o._bufferService.buffers.onBufferActivate((function(){o._altBufferIsActive=o._bufferService.buffer===o._bufferService.buffers.alt;}))),o.register(o._decorationService.onDecorationRegistered((function(){return o._queueRefresh()}))),o.register(o._decorationService.onDecorationRemoved((function(e){return o._removeDecoration(e)}))),o}return n(t,e),t.prototype.dispose=function(){this._container.remove(),this._decorationElements.clear(),e.prototype.dispose.call(this);},t.prototype._queueRefresh=function(){var e=this;void 0===this._animationFrame&&(this._animationFrame=this._renderService.addRefreshCallback((function(){e.refreshDecorations(),e._animationFrame=void 0;})));},t.prototype.refreshDecorations=function(){var e,t;try{for(var r=a(this._decorationService.decorations),i=r.next();!i.done;i=r.next()){var n=i.value;this._renderDecoration(n);}}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}this._dimensionsChanged=!1;},t.prototype._renderDecoration=function(e){this._refreshStyle(e),this._dimensionsChanged&&this._refreshXPosition(e);},t.prototype._createElement=function(e){var t,r=document.createElement("div");r.classList.add("xterm-decoration"),r.style.width=Math.round((e.options.width||1)*this._renderService.dimensions.actualCellWidth)+"px",r.style.height=(e.options.height||1)*this._renderService.dimensions.actualCellHeight+"px",r.style.top=(e.marker.line-this._bufferService.buffers.active.ydisp)*this._renderService.dimensions.actualCellHeight+"px",r.style.lineHeight=this._renderService.dimensions.actualCellHeight+"px";var i=null!==(t=e.options.x)&&void 0!==t?t:0;return i&&i>this._bufferService.cols&&(r.style.display="none"),this._refreshXPosition(e,r),r},t.prototype._refreshStyle=function(e){var t=this,r=e.marker.line-this._bufferService.buffers.active.ydisp;if(r<0||r>=this._bufferService.rows)e.element&&(e.element.style.display="none",e.onRenderEmitter.fire(e.element));else {var i=this._decorationElements.get(e);i||(e.onDispose((function(){return t._removeDecoration(e)})),i=this._createElement(e),e.element=i,this._decorationElements.set(e,i),this._container.appendChild(i)),i.style.top=r*this._renderService.dimensions.actualCellHeight+"px",i.style.display=this._altBufferIsActive?"none":"block",e.onRenderEmitter.fire(i);}},t.prototype._refreshXPosition=function(e,t){var r;if(void 0===t&&(t=e.element),t){var i=null!==(r=e.options.x)&&void 0!==r?r:0;"right"===(e.options.anchor||"left")?t.style.right=i?i*this._renderService.dimensions.actualCellWidth+"px":"":t.style.left=i?i*this._renderService.dimensions.actualCellWidth+"px":"";}},t.prototype._removeDecoration=function(e){var t;null===(t=this._decorationElements.get(e))||void 0===t||t.remove(),this._decorationElements.delete(e);},o([s(1,u.IBufferService),s(2,u.IDecorationService),s(3,l.IRenderService)],t)}(h.Disposable);t.BufferDecorationRenderer=f;},5871:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.ColorZoneStore=void 0;var i=function(){function e(){this._zones=[],this._zonePool=[],this._zonePoolIndex=0,this._linePadding={full:0,left:0,center:0,right:0};}return Object.defineProperty(e.prototype,"zones",{get:function(){return this._zonePool.length=Math.min(this._zonePool.length,this._zones.length),this._zones},enumerable:!1,configurable:!0}),e.prototype.clear=function(){this._zones.length=0,this._zonePoolIndex=0;},e.prototype.addDecoration=function(e){var t,i;if(e.options.overviewRulerOptions){try{for(var n=r(this._zones),o=n.next();!o.done;o=n.next()){var s=o.value;if(s.color===e.options.overviewRulerOptions.color&&s.position===e.options.overviewRulerOptions.position){if(this._lineIntersectsZone(s,e.marker.line))return;if(this._lineAdjacentToZone(s,e.marker.line,e.options.overviewRulerOptions.position))return void this._addLineToZone(s,e.marker.line)}}}catch(e){t={error:e};}finally{try{o&&!o.done&&(i=n.return)&&i.call(n);}finally{if(t)throw t.error}}if(this._zonePoolIndex<this._zonePool.length)return this._zonePool[this._zonePoolIndex].color=e.options.overviewRulerOptions.color,this._zonePool[this._zonePoolIndex].position=e.options.overviewRulerOptions.position,this._zonePool[this._zonePoolIndex].startBufferLine=e.marker.line,this._zonePool[this._zonePoolIndex].endBufferLine=e.marker.line,void this._zones.push(this._zonePool[this._zonePoolIndex++]);this._zones.push({color:e.options.overviewRulerOptions.color,position:e.options.overviewRulerOptions.position,startBufferLine:e.marker.line,endBufferLine:e.marker.line}),this._zonePool.push(this._zones[this._zones.length-1]),this._zonePoolIndex++;}},e.prototype.setPadding=function(e){this._linePadding=e;},e.prototype._lineIntersectsZone=function(e,t){return t>=e.startBufferLine&&t<=e.endBufferLine},e.prototype._lineAdjacentToZone=function(e,t,r){return t>=e.startBufferLine-this._linePadding[r||"full"]&&t<=e.endBufferLine+this._linePadding[r||"full"]},e.prototype._addLineToZone=function(e,t){e.startBufferLine=Math.min(e.startBufferLine,t),e.endBufferLine=Math.max(e.endBufferLine,t);},e}();t.ColorZoneStore=i;},5744:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.OverviewRulerRenderer=void 0;var c=r(5871),l=r(3656),h=r(4725),u=r(844),f=r(2585),_={full:0,left:0,center:0,right:0},d={full:0,left:0,center:0,right:0},p={full:0,left:0,center:0,right:0},v=function(e){function t(t,r,i,n,o,s){var a,l=e.call(this)||this;l._viewportElement=t,l._screenElement=r,l._bufferService=i,l._decorationService=n,l._renderService=o,l._optionsService=s,l._colorZoneStore=new c.ColorZoneStore,l._shouldUpdateDimensions=!0,l._shouldUpdateAnchor=!0,l._lastKnownBufferLength=0,l._canvas=document.createElement("canvas"),l._canvas.classList.add("xterm-decoration-overview-ruler"),l._refreshCanvasDimensions(),null===(a=l._viewportElement.parentElement)||void 0===a||a.insertBefore(l._canvas,l._viewportElement);var h=l._canvas.getContext("2d");if(!h)throw new Error("Ctx cannot be null");return l._ctx=h,l._registerDecorationListeners(),l._registerBufferChangeListeners(),l._registerDimensionChangeListeners(),l}return n(t,e),Object.defineProperty(t.prototype,"_width",{get:function(){return this._optionsService.options.overviewRulerWidth||0},enumerable:!1,configurable:!0}),t.prototype._registerDecorationListeners=function(){var e=this;this.register(this._decorationService.onDecorationRegistered((function(){return e._queueRefresh(void 0,!0)}))),this.register(this._decorationService.onDecorationRemoved((function(){return e._queueRefresh(void 0,!0)})));},t.prototype._registerBufferChangeListeners=function(){var e=this;this.register(this._renderService.onRenderedViewportChange((function(){return e._queueRefresh()}))),this.register(this._bufferService.buffers.onBufferActivate((function(){e._canvas.style.display=e._bufferService.buffer===e._bufferService.buffers.alt?"none":"block";}))),this.register(this._bufferService.onScroll((function(){e._lastKnownBufferLength!==e._bufferService.buffers.normal.lines.length&&(e._refreshDrawHeightConstants(),e._refreshColorZonePadding());})));},t.prototype._registerDimensionChangeListeners=function(){var e=this;this.register(this._renderService.onRender((function(){e._containerHeight&&e._containerHeight===e._screenElement.clientHeight||(e._queueRefresh(!0),e._containerHeight=e._screenElement.clientHeight);}))),this.register(this._optionsService.onOptionChange((function(t){"overviewRulerWidth"===t&&e._queueRefresh(!0);}))),this.register((0, l.addDisposableDomListener)(window,"resize",(function(){e._queueRefresh(!0);}))),this._queueRefresh(!0);},t.prototype.dispose=function(){var t;null===(t=this._canvas)||void 0===t||t.remove(),e.prototype.dispose.call(this);},t.prototype._refreshDrawConstants=function(){var e=Math.floor(this._canvas.width/3),t=Math.ceil(this._canvas.width/3);d.full=this._canvas.width,d.left=e,d.center=t,d.right=e,this._refreshDrawHeightConstants(),p.full=0,p.left=0,p.center=d.left,p.right=d.left+d.center;},t.prototype._refreshDrawHeightConstants=function(){_.full=Math.round(2*window.devicePixelRatio);var e=this._canvas.height/this._bufferService.buffer.lines.length,t=Math.round(Math.max(Math.min(e,12),6)*window.devicePixelRatio);_.left=t,_.center=t,_.right=t;},t.prototype._refreshColorZonePadding=function(){this._colorZoneStore.setPadding({full:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.full),left:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.left),center:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.center),right:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*_.right)}),this._lastKnownBufferLength=this._bufferService.buffers.normal.lines.length;},t.prototype._refreshCanvasDimensions=function(){this._canvas.style.width=this._width+"px",this._canvas.width=Math.round(this._width*window.devicePixelRatio),this._canvas.style.height=this._screenElement.clientHeight+"px",this._canvas.height=Math.round(this._screenElement.clientHeight*window.devicePixelRatio),this._refreshDrawConstants(),this._refreshColorZonePadding();},t.prototype._refreshDecorations=function(){var e,t,r,i,n,o;this._shouldUpdateDimensions&&this._refreshCanvasDimensions(),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._colorZoneStore.clear();try{for(var s=a(this._decorationService.decorations),c=s.next();!c.done;c=s.next()){var l=c.value;this._colorZoneStore.addDecoration(l);}}catch(t){e={error:t};}finally{try{c&&!c.done&&(t=s.return)&&t.call(s);}finally{if(e)throw e.error}}this._ctx.lineWidth=1;var h=this._colorZoneStore.zones;try{for(var u=a(h),f=u.next();!f.done;f=u.next())"full"!==(p=f.value).position&&this._renderColorZone(p);}catch(e){r={error:e};}finally{try{f&&!f.done&&(i=u.return)&&i.call(u);}finally{if(r)throw r.error}}try{for(var _=a(h),d=_.next();!d.done;d=_.next()){var p;"full"===(p=d.value).position&&this._renderColorZone(p);}}catch(e){n={error:e};}finally{try{d&&!d.done&&(o=_.return)&&o.call(_);}finally{if(n)throw n.error}}this._shouldUpdateDimensions=!1,this._shouldUpdateAnchor=!1;},t.prototype._renderColorZone=function(e){this._ctx.fillStyle=e.color,this._ctx.fillRect(p[e.position||"full"],Math.round((this._canvas.height-1)*(e.startBufferLine/this._bufferService.buffers.active.lines.length)-_[e.position||"full"]/2),d[e.position||"full"],Math.round((this._canvas.height-1)*((e.endBufferLine-e.startBufferLine)/this._bufferService.buffers.active.lines.length)+_[e.position||"full"]));},t.prototype._queueRefresh=function(e,t){var r=this;this._shouldUpdateDimensions=e||this._shouldUpdateDimensions,this._shouldUpdateAnchor=t||this._shouldUpdateAnchor,void 0===this._animationFrame&&(this._animationFrame=window.requestAnimationFrame((function(){r._refreshDecorations(),r._animationFrame=void 0;})));},o([s(2,f.IBufferService),s(3,f.IDecorationService),s(4,h.IRenderService),s(5,f.IOptionsService)],t)}(u.Disposable);t.OverviewRulerRenderer=v;},2950:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CompositionHelper=void 0;var o=r(4725),s=r(2585),a=function(){function e(e,t,r,i,n,o){this._textarea=e,this._compositionView=t,this._bufferService=r,this._optionsService=i,this._coreService=n,this._renderService=o,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent="";}return Object.defineProperty(e.prototype,"isComposing",{get:function(){return this._isComposing},enumerable:!1,configurable:!0}),e.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._dataAlreadySent="",this._compositionView.classList.add("active");},e.prototype.compositionupdate=function(e){var t=this;this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((function(){t._compositionPosition.end=t._textarea.value.length;}),0);},e.prototype.compositionend=function(){this._finalizeComposition(!0);},e.prototype.keydown=function(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return !1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return !1;this._finalizeComposition(!1);}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)},e.prototype._finalizeComposition=function(e){var t=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,e){var r={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((function(){if(t._isSendingComposition){t._isSendingComposition=!1;var e;r.start+=t._dataAlreadySent.length,(e=t._isComposing?t._textarea.value.substring(r.start,r.end):t._textarea.value.substring(r.start)).length>0&&t._coreService.triggerDataEvent(e,!0);}}),0);}else {this._isSendingComposition=!1;var i=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(i,!0);}},e.prototype._handleAnyTextareaChanges=function(){var e=this,t=this._textarea.value;setTimeout((function(){if(!e._isComposing){var r=e._textarea.value.replace(t,"");r.length>0&&(e._dataAlreadySent=r,e._coreService.triggerDataEvent(r,!0));}}),0);},e.prototype.updateCompositionElements=function(e){var t=this;if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){var r=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),i=this._renderService.dimensions.actualCellHeight,n=this._bufferService.buffer.y*this._renderService.dimensions.actualCellHeight,o=r*this._renderService.dimensions.actualCellWidth;this._compositionView.style.left=o+"px",this._compositionView.style.top=n+"px",this._compositionView.style.height=i+"px",this._compositionView.style.lineHeight=i+"px",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+"px";var s=this._compositionView.getBoundingClientRect();this._textarea.style.left=o+"px",this._textarea.style.top=n+"px",this._textarea.style.width=Math.max(s.width,1)+"px",this._textarea.style.height=Math.max(s.height,1)+"px",this._textarea.style.lineHeight=s.height+"px";}e||setTimeout((function(){return t.updateCompositionElements(!0)}),0);}},i([n(2,s.IBufferService),n(3,s.IOptionsService),n(4,s.ICoreService),n(5,o.IRenderService)],e)}();t.CompositionHelper=a;},9806:(e,t)=>{function r(e,t,r){var i=r.getBoundingClientRect(),n=e.getComputedStyle(r),o=parseInt(n.getPropertyValue("padding-left")),s=parseInt(n.getPropertyValue("padding-top"));return [t.clientX-i.left-o,t.clientY-i.top-s]}Object.defineProperty(t,"__esModule",{value:!0}),t.getRawByteCoords=t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=r,t.getCoords=function(e,t,i,n,o,s,a,c,l){if(s){var h=r(e,t,i);if(h)return h[0]=Math.ceil((h[0]+(l?a/2:0))/a),h[1]=Math.ceil(h[1]/c),h[0]=Math.min(Math.max(h[0],1),n+(l?1:0)),h[1]=Math.min(Math.max(h[1],1),o),h}},t.getRawByteCoords=function(e){if(e)return {x:e[0]+32,y:e[1]+32}};},9504:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.moveToCellSequence=void 0;var i=r(2584);function n(e,t,r,i){var n=e-o(r,e),a=t-o(r,t),h=Math.abs(n-a)-function(e,t,r){for(var i=0,n=e-o(r,e),a=t-o(r,t),c=0;c<Math.abs(n-a);c++){var l="A"===s(e,t)?-1:1,h=r.buffer.lines.get(n+l*c);(null==h?void 0:h.isWrapped)&&i++;}return i}(e,t,r);return l(h,c(s(e,t),i))}function o(e,t){for(var r=0,i=e.buffer.lines.get(t),n=null==i?void 0:i.isWrapped;n&&t>=0&&t<e.rows;)r++,n=null==(i=e.buffer.lines.get(--t))?void 0:i.isWrapped;return r}function s(e,t){return e>t?"A":"B"}function a(e,t,r,i,n,o){for(var s=e,a=t,c="";s!==r||a!==i;)s+=n?1:-1,n&&s>o.cols-1?(c+=o.buffer.translateBufferLineToString(a,!1,e,s),s=0,e=0,a++):!n&&s<0&&(c+=o.buffer.translateBufferLineToString(a,!1,0,e+1),e=s=o.cols-1,a--);return c+o.buffer.translateBufferLineToString(a,!1,e,s)}function c(e,t){var r=t?"O":"[";return i.C0.ESC+r+e}function l(e,t){e=Math.floor(e);for(var r="",i=0;i<e;i++)r+=t;return r}t.moveToCellSequence=function(e,t,r,i){var s,h=r.buffer.x,u=r.buffer.y;if(!r.buffer.hasScrollback)return function(e,t,r,i,s,h){return 0===n(t,i,s,h).length?"":l(a(e,t,e,t-o(s,t),!1,s).length,c("D",h))}(h,u,0,t,r,i)+n(u,t,r,i)+function(e,t,r,i,s,h){var u;u=n(t,i,s,h).length>0?i-o(s,i):t;var f=i,_=function(e,t,r,i,s,a){var c;return c=n(r,i,s,a).length>0?i-o(s,i):t,e<r&&c<=i||e>=r&&c<i?"C":"D"}(e,t,r,i,s,h);return l(a(e,u,r,f,"C"===_,s).length,c(_,h))}(h,u,e,t,r,i);if(u===t)return s=h>e?"D":"C",l(Math.abs(h-e),c(s,i));s=u>t?"D":"C";var f=Math.abs(u-t);return l(function(e,t){return t.cols-e}(u>t?e:h,r)+(f-1)*r.cols+1+((u>t?h:e)-1),c(s,i))};},4389:function(e,t,r){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},i.apply(this,arguments)},n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;var o=r(3236),s=r(9042),a=r(7975),c=r(7090),l=r(5741),h=r(8285),u=["cols","rows"],f=function(){function e(e){var t=this;this._core=new o.Terminal(e),this._addonManager=new l.AddonManager,this._publicOptions=i({},this._core.options);var r=function(e){return t._core.options[e]},n=function(e,r){t._checkReadonlyOptions(e),t._core.options[e]=r;};for(var s in this._core.options){var a={get:r.bind(this,s),set:n.bind(this,s)};Object.defineProperty(this._publicOptions,s,a);}}return e.prototype._checkReadonlyOptions=function(e){if(u.includes(e))throw new Error('Option "'+e+'" can only be set in the constructor')},e.prototype._checkProposedApi=function(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")},Object.defineProperty(e.prototype,"onBell",{get:function(){return this._core.onBell},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onBinary",{get:function(){return this._core.onBinary},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCursorMove",{get:function(){return this._core.onCursorMove},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onData",{get:function(){return this._core.onData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onKey",{get:function(){return this._core.onKey},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onLineFeed",{get:function(){return this._core.onLineFeed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onRender",{get:function(){return this._core.onRender},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onResize",{get:function(){return this._core.onResize},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onScroll",{get:function(){return this._core.onScroll},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onSelectionChange",{get:function(){return this._core.onSelectionChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTitleChange",{get:function(){return this._core.onTitleChange},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onWriteParsed",{get:function(){return this._core.onWriteParsed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"element",{get:function(){return this._core.element},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parser",{get:function(){return this._checkProposedApi(),this._parser||(this._parser=new a.ParserApi(this._core)),this._parser},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"unicode",{get:function(){return this._checkProposedApi(),new c.UnicodeApi(this._core)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textarea",{get:function(){return this._core.textarea},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rows",{get:function(){return this._core.rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cols",{get:function(){return this._core.cols},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"buffer",{get:function(){return this._checkProposedApi(),this._buffer||(this._buffer=new h.BufferNamespaceApi(this._core)),this._buffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"markers",{get:function(){return this._checkProposedApi(),this._core.markers},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"modes",{get:function(){var e=this._core.coreService.decPrivateModes,t="none";switch(this._core.coreMouseService.activeProtocol){case"X10":t="x10";break;case"VT200":t="vt200";break;case"DRAG":t="drag";break;case"ANY":t="any";}return {applicationCursorKeysMode:e.applicationCursorKeys,applicationKeypadMode:e.applicationKeypad,bracketedPasteMode:e.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:t,originMode:e.origin,reverseWraparoundMode:e.reverseWraparound,sendFocusMode:e.sendFocus,wraparoundMode:e.wraparound}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this._publicOptions},set:function(e){for(var t in e)this._publicOptions[t]=e[t];},enumerable:!1,configurable:!0}),e.prototype.blur=function(){this._core.blur();},e.prototype.focus=function(){this._core.focus();},e.prototype.resize=function(e,t){this._verifyIntegers(e,t),this._core.resize(e,t);},e.prototype.open=function(e){this._core.open(e);},e.prototype.attachCustomKeyEventHandler=function(e){this._core.attachCustomKeyEventHandler(e);},e.prototype.registerLinkMatcher=function(e,t,r){return this._checkProposedApi(),this._core.registerLinkMatcher(e,t,r)},e.prototype.deregisterLinkMatcher=function(e){this._checkProposedApi(),this._core.deregisterLinkMatcher(e);},e.prototype.registerLinkProvider=function(e){return this._checkProposedApi(),this._core.registerLinkProvider(e)},e.prototype.registerCharacterJoiner=function(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)},e.prototype.deregisterCharacterJoiner=function(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e);},e.prototype.registerMarker=function(e){return void 0===e&&(e=0),this._checkProposedApi(),this._verifyIntegers(e),this._core.addMarker(e)},e.prototype.registerDecoration=function(e){var t,r,i;return this._checkProposedApi(),this._verifyPositiveIntegers(null!==(t=e.x)&&void 0!==t?t:0,null!==(r=e.width)&&void 0!==r?r:0,null!==(i=e.height)&&void 0!==i?i:0),this._core.registerDecoration(e)},e.prototype.addMarker=function(e){return this.registerMarker(e)},e.prototype.hasSelection=function(){return this._core.hasSelection()},e.prototype.select=function(e,t,r){this._verifyIntegers(e,t,r),this._core.select(e,t,r);},e.prototype.getSelection=function(){return this._core.getSelection()},e.prototype.getSelectionPosition=function(){return this._core.getSelectionPosition()},e.prototype.clearSelection=function(){this._core.clearSelection();},e.prototype.selectAll=function(){this._core.selectAll();},e.prototype.selectLines=function(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t);},e.prototype.dispose=function(){this._addonManager.dispose(),this._core.dispose();},e.prototype.scrollLines=function(e){this._verifyIntegers(e),this._core.scrollLines(e);},e.prototype.scrollPages=function(e){this._verifyIntegers(e),this._core.scrollPages(e);},e.prototype.scrollToTop=function(){this._core.scrollToTop();},e.prototype.scrollToBottom=function(){this._core.scrollToBottom();},e.prototype.scrollToLine=function(e){this._verifyIntegers(e),this._core.scrollToLine(e);},e.prototype.clear=function(){this._core.clear();},e.prototype.write=function(e,t){this._core.write(e,t);},e.prototype.writeUtf8=function(e,t){this._core.write(e,t);},e.prototype.writeln=function(e,t){this._core.write(e),this._core.write("\r\n",t);},e.prototype.paste=function(e){this._core.paste(e);},e.prototype.getOption=function(e){return this._core.optionsService.getOption(e)},e.prototype.setOption=function(e,t){this._checkReadonlyOptions(e),this._core.optionsService.setOption(e,t);},e.prototype.refresh=function(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t);},e.prototype.reset=function(){this._core.reset();},e.prototype.clearTextureAtlas=function(){this._core.clearTextureAtlas();},e.prototype.loadAddon=function(e){return this._addonManager.loadAddon(this,e)},Object.defineProperty(e,"strings",{get:function(){return s},enumerable:!1,configurable:!0}),e.prototype._verifyIntegers=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var o=n(r),s=o.next();!s.done;s=o.next()){var a=s.value;if(a===1/0||isNaN(a)||a%1!=0)throw new Error("This API only accepts integers")}}catch(t){e={error:t};}finally{try{s&&!s.done&&(t=o.return)&&t.call(o);}finally{if(e)throw e.error}}},e.prototype._verifyPositiveIntegers=function(){for(var e,t,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];try{for(var o=n(r),s=o.next();!s.done;s=o.next()){var a=s.value;if(a&&(a===1/0||isNaN(a)||a%1!=0||a<0))throw new Error("This API only accepts positive integers")}}catch(t){e={error:t};}finally{try{s&&!s.done&&(t=o.return)&&t.call(o);}finally{if(e)throw e.error}}},e}();t.Terminal=f;},1546:function(e,t,r){var i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseRenderLayer=void 0;var n=r(643),o=r(8803),s=r(1420),a=r(3734),c=r(1752),l=r(8055),h=r(9631),u=r(8978),f=function(){function e(e,t,r,i,n,o,s,a,c){this._container=e,this._alpha=i,this._colors=n,this._rendererId=o,this._bufferService=s,this._optionsService=a,this._decorationService=c,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._columnSelectMode=!1,this._currentGlyphIdentifier={chars:"",code:0,bg:0,fg:0,bold:!1,dim:!1,italic:!1},this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+t+"-layer"),this._canvas.style.zIndex=r.toString(),this._initCanvas(),this._container.appendChild(this._canvas);}return e.prototype.dispose=function(){var e;(0, h.removeElementFromParent)(this._canvas),null===(e=this._charAtlas)||void 0===e||e.dispose();},e.prototype._initCanvas=function(){this._ctx=(0, c.throwIfFalsy)(this._canvas.getContext("2d",{alpha:this._alpha})),this._alpha||this._clearAll();},e.prototype.onOptionsChanged=function(){},e.prototype.onBlur=function(){},e.prototype.onFocus=function(){},e.prototype.onCursorMove=function(){},e.prototype.onGridChanged=function(e,t){},e.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1),this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=r;},e.prototype.setColors=function(e){this._refreshCharAtlas(e);},e.prototype._setTransparency=function(e){if(e!==this._alpha){var t=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,t),this._refreshCharAtlas(this._colors),this.onGridChanged(0,this._bufferService.rows-1);}},e.prototype._refreshCharAtlas=function(e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=(0, s.acquireCharAtlas)(this._optionsService.rawOptions,this._rendererId,e,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp());},e.prototype.resize=function(e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=e.canvasWidth+"px",this._canvas.style.height=e.canvasHeight+"px",this._alpha||this._clearAll(),this._refreshCharAtlas(this._colors);},e.prototype.clearTextureAtlas=function(){var e;null===(e=this._charAtlas)||void 0===e||e.clear();},e.prototype._fillCells=function(e,t,r,i){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight);},e.prototype._fillMiddleLineAtCells=function(e,t,r){void 0===r&&(r=1);var i=Math.ceil(.5*this._scaledCellHeight);this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-i-window.devicePixelRatio,r*this._scaledCellWidth,window.devicePixelRatio);},e.prototype._fillBottomLineAtCells=function(e,t,r){void 0===r&&(r=1),this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-window.devicePixelRatio-1,r*this._scaledCellWidth,window.devicePixelRatio);},e.prototype._fillLeftLineAtCell=function(e,t,r){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,window.devicePixelRatio*r,this._scaledCellHeight);},e.prototype._strokeRectAtCell=function(e,t,r,i){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(e*this._scaledCellWidth+window.devicePixelRatio/2,t*this._scaledCellHeight+window.devicePixelRatio/2,r*this._scaledCellWidth-window.devicePixelRatio,i*this._scaledCellHeight-window.devicePixelRatio);},e.prototype._clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height));},e.prototype._clearCells=function(e,t,r,i){this._alpha?this._ctx.clearRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight));},e.prototype._fillCharTrueColor=function(e,t,r){this._ctx.font=this._getFont(!1,!1),this._ctx.textBaseline=o.TEXT_BASELINE,this._clipRow(r);var i=!1;!1!==this._optionsService.rawOptions.customGlyphs&&(i=(0, u.tryDrawCustomChar)(this._ctx,e.getChars(),t*this._scaledCellWidth,r*this._scaledCellHeight,this._scaledCellWidth,this._scaledCellHeight)),i||this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight);},e.prototype._drawChars=function(e,t,r){var s,a,c,l=this._getContrastColor(e,t,r);if(l||e.isFgRGB()||e.isBgRGB())this._drawUncachedChars(e,t,r,l);else {var h,u;e.isInverse()?(h=e.isBgDefault()?o.INVERTED_DEFAULT_COLOR:e.getBgColor(),u=e.isFgDefault()?o.INVERTED_DEFAULT_COLOR:e.getFgColor()):(u=e.isBgDefault()?n.DEFAULT_COLOR:e.getBgColor(),h=e.isFgDefault()?n.DEFAULT_COLOR:e.getFgColor()),h+=this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&h<8?8:0,this._currentGlyphIdentifier.chars=e.getChars()||n.WHITESPACE_CELL_CHAR,this._currentGlyphIdentifier.code=e.getCode()||n.WHITESPACE_CELL_CODE,this._currentGlyphIdentifier.bg=u,this._currentGlyphIdentifier.fg=h,this._currentGlyphIdentifier.bold=!!e.isBold(),this._currentGlyphIdentifier.dim=!!e.isDim(),this._currentGlyphIdentifier.italic=!!e.isItalic();var f=!1;try{for(var _=i(this._decorationService.getDecorationsAtCell(t,r)),d=_.next();!d.done;d=_.next()){var p=d.value;if(p.backgroundColorRGB||p.foregroundColorRGB){f=!0;break}}}catch(e){s={error:e};}finally{try{d&&!d.done&&(a=_.return)&&a.call(_);}finally{if(s)throw s.error}}!f&&(null===(c=this._charAtlas)||void 0===c?void 0:c.draw(this._ctx,this._currentGlyphIdentifier,t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop))||this._drawUncachedChars(e,t,r);}},e.prototype._drawUncachedChars=function(e,t,r,i){if(this._ctx.save(),this._ctx.font=this._getFont(!!e.isBold(),!!e.isItalic()),this._ctx.textBaseline=o.TEXT_BASELINE,e.isInverse())if(i)this._ctx.fillStyle=i.css;else if(e.isBgDefault())this._ctx.fillStyle=l.color.opaque(this._colors.background).css;else if(e.isBgRGB())this._ctx.fillStyle="rgb("+a.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else {var n=e.getBgColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&n<8&&(n+=8),this._ctx.fillStyle=this._colors.ansi[n].css;}else if(i)this._ctx.fillStyle=i.css;else if(e.isFgDefault())this._ctx.fillStyle=this._colors.foreground.css;else if(e.isFgRGB())this._ctx.fillStyle="rgb("+a.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else {var s=e.getFgColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&s<8&&(s+=8),this._ctx.fillStyle=this._colors.ansi[s].css;}this._clipRow(r),e.isDim()&&(this._ctx.globalAlpha=o.DIM_OPACITY);var c=!1;!1!==this._optionsService.rawOptions.customGlyphs&&(c=(0, u.tryDrawCustomChar)(this._ctx,e.getChars(),t*this._scaledCellWidth,r*this._scaledCellHeight,this._scaledCellWidth,this._scaledCellHeight)),c||this._ctx.fillText(e.getChars(),t*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop+this._scaledCharHeight),this._ctx.restore();},e.prototype._clipRow=function(e){this._ctx.beginPath(),this._ctx.rect(0,e*this._scaledCellHeight,this._bufferService.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip();},e.prototype._getFont=function(e,t){return (t?"italic":"")+" "+(e?this._optionsService.rawOptions.fontWeightBold:this._optionsService.rawOptions.fontWeight)+" "+this._optionsService.rawOptions.fontSize*window.devicePixelRatio+"px "+this._optionsService.rawOptions.fontFamily},e.prototype._getContrastColor=function(e,t,r){var n,o,s,a,h=!1;try{for(var u=i(this._decorationService.getDecorationsAtCell(t,r)),f=u.next();!f.done;f=u.next()){var _=f.value;"top"!==_.options.layer&&h||(_.backgroundColorRGB&&(s=_.backgroundColorRGB.rgba),_.foregroundColorRGB&&(a=_.foregroundColorRGB.rgba),h="top"===_.options.layer);}}catch(e){n={error:e};}finally{try{f&&!f.done&&(o=u.return)&&o.call(u);}finally{if(n)throw n.error}}if(h||this._colors.selectionForeground&&this._isCellInSelection(t,r)&&(a=this._colors.selectionForeground.rgba),s||a||1!==this._optionsService.rawOptions.minimumContrastRatio&&!(0, c.excludeFromContrastRatioDemands)(e.getCode())){if(!s&&!a){var d=this._colors.contrastCache.getColor(e.bg,e.fg);if(void 0!==d)return d||void 0}var p=e.getFgColor(),v=e.getFgColorMode(),y=e.getBgColor(),g=e.getBgColorMode(),m=!!e.isInverse(),b=!!e.isInverse();if(m){var S=p;p=y,y=S;var C=v;v=g,g=C;}var w=this._resolveBackgroundRgba(void 0!==s?50331648:g,null!=s?s:y,m),L=this._resolveForegroundRgba(v,p,m,b),E=l.rgba.ensureContrastRatio(null!=s?s:w,null!=a?a:L,this._optionsService.rawOptions.minimumContrastRatio);if(!E){if(!a)return void this._colors.contrastCache.setColor(e.bg,e.fg,null);E=a;}var x={css:l.channels.toCss(E>>24&255,E>>16&255,E>>8&255),rgba:E};return s||a||this._colors.contrastCache.setColor(e.bg,e.fg,x),x}},e.prototype._resolveBackgroundRgba=function(e,t,r){switch(e){case 16777216:case 33554432:return this._colors.ansi[t].rgba;case 50331648:return t<<8;default:return r?this._colors.foreground.rgba:this._colors.background.rgba}},e.prototype._resolveForegroundRgba=function(e,t,r,i){switch(e){case 16777216:case 33554432:return this._optionsService.rawOptions.drawBoldTextInBrightColors&&i&&t<8&&(t+=8),this._colors.ansi[t].rgba;case 50331648:return t<<8;default:return r?this._colors.background.rgba:this._colors.foreground.rgba}},e.prototype._isCellInSelection=function(e,t){var r=this._selectionStart,i=this._selectionEnd;return !(!r||!i)&&(this._columnSelectMode?e>=r[0]&&t>=r[1]&&e<i[0]&&t<i[1]:t>r[1]&&t<i[1]||r[1]===i[1]&&t===r[1]&&e>=r[0]&&e<i[0]||r[1]<i[1]&&t===i[1]&&e<i[0]||r[1]<i[1]&&t===r[1]&&e>=r[0])},e}();t.BaseRenderLayer=f;},2512:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CursorRenderLayer=void 0;var a=r(1546),c=r(511),l=r(2585),h=r(4725),u=600,f=function(e){function t(t,r,i,n,o,s,a,l,h,u){var f=e.call(this,t,"cursor",r,!0,i,n,s,a,u)||this;return f._onRequestRedraw=o,f._coreService=l,f._coreBrowserService=h,f._cell=new c.CellData,f._state={x:0,y:0,isFocused:!1,style:"",width:0},f._cursorRenderers={bar:f._renderBarCursor.bind(f),block:f._renderBlockCursor.bind(f),underline:f._renderUnderlineCursor.bind(f)},f}return n(t,e),t.prototype.dispose=function(){this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=void 0),e.prototype.dispose.call(this);},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state={x:0,y:0,isFocused:!1,style:"",width:0};},t.prototype.reset=function(){var e;this._clearCursor(),null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation(),this.onOptionsChanged();},t.prototype.onBlur=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.pause(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y});},t.prototype.onFocus=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.resume(),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y});},t.prototype.onOptionsChanged=function(){var e,t=this;this._optionsService.rawOptions.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new _(this._coreBrowserService.isFocused,(function(){t._render(!0);}))):(null===(e=this._cursorBlinkStateManager)||void 0===e||e.dispose(),this._cursorBlinkStateManager=void 0),this._onRequestRedraw.fire({start:this._bufferService.buffer.y,end:this._bufferService.buffer.y});},t.prototype.onCursorMove=function(){var e;null===(e=this._cursorBlinkStateManager)||void 0===e||e.restartBlinkAnimation();},t.prototype.onGridChanged=function(e,t){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(!1):this._cursorBlinkStateManager.restartBlinkAnimation();},t.prototype._render=function(e){if(this._coreService.isCursorInitialized&&!this._coreService.isCursorHidden){var t=this._bufferService.buffer.ybase+this._bufferService.buffer.y,r=t-this._bufferService.buffer.ydisp;if(r<0||r>=this._bufferService.rows)this._clearCursor();else {var i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1);if(this._bufferService.buffer.lines.get(t).loadCell(i,this._cell),void 0!==this._cell.content){if(!this._coreBrowserService.isFocused){this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css;var n=this._optionsService.rawOptions.cursorStyle;return n&&"block"!==n?this._cursorRenderers[n](i,r,this._cell):this._renderBlurCursor(i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=n,void(this._state.width=this._cell.getWidth())}if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===i&&this._state.y===r&&this._state.isFocused===this._coreBrowserService.isFocused&&this._state.style===this._optionsService.rawOptions.cursorStyle&&this._state.width===this._cell.getWidth())return;this._clearCursor();}this._ctx.save(),this._cursorRenderers[this._optionsService.rawOptions.cursorStyle||"block"](i,r,this._cell),this._ctx.restore(),this._state.x=i,this._state.y=r,this._state.isFocused=!1,this._state.style=this._optionsService.rawOptions.cursorStyle,this._state.width=this._cell.getWidth();}else this._clearCursor();}}}else this._clearCursor();},t.prototype._clearCursor=function(){this._state&&(window.devicePixelRatio<1?this._clearAll():this._clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:0,y:0,isFocused:!1,style:"",width:0});},t.prototype._renderBarCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillLeftLineAtCell(e,t,this._optionsService.rawOptions.cursorWidth),this._ctx.restore();},t.prototype._renderBlockCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillCells(e,t,r.getWidth(),1),this._ctx.fillStyle=this._colors.cursorAccent.css,this._fillCharTrueColor(r,e,t),this._ctx.restore();},t.prototype._renderUnderlineCursor=function(e,t,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._fillBottomLineAtCells(e,t),this._ctx.restore();},t.prototype._renderBlurCursor=function(e,t,r){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this._strokeRectAtCell(e,t,r.getWidth(),1),this._ctx.restore();},o([s(5,l.IBufferService),s(6,l.IOptionsService),s(7,l.ICoreService),s(8,h.ICoreBrowserService),s(9,l.IDecorationService)],t)}(a.BaseRenderLayer);t.CursorRenderLayer=f;var _=function(){function e(e,t){this._renderCallback=t,this.isCursorVisible=!0,e&&this._restartInterval();}return Object.defineProperty(e.prototype,"isPaused",{get:function(){return !(this._blinkStartTimeout||this._blinkInterval)},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0);},e.prototype.restartBlinkAnimation=function(){var e=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame((function(){e._renderCallback(),e._animationFrame=void 0;}))));},e.prototype._restartInterval=function(e){var t=this;void 0===e&&(e=u),this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout=window.setTimeout((function(){if(t._animationTimeRestarted){var e=u-(Date.now()-t._animationTimeRestarted);if(t._animationTimeRestarted=void 0,e>0)return void t._restartInterval(e)}t.isCursorVisible=!1,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0;})),t._blinkInterval=window.setInterval((function(){if(t._animationTimeRestarted){var e=u-(Date.now()-t._animationTimeRestarted);return t._animationTimeRestarted=void 0,void t._restartInterval(e)}t.isCursorVisible=!t.isCursorVisible,t._animationFrame=window.requestAnimationFrame((function(){t._renderCallback(),t._animationFrame=void 0;}));}),u);}),e);},e.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=void 0),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=void 0),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0);},e.prototype.resume=function(){this.pause(),this._animationTimeRestarted=void 0,this._restartInterval(),this.restartBlinkAnimation();},e}();},8978:function(e,t,r){var i,n,o,s,a,c,l,h,u,f,_,d,p,v,y,g,m,b,S,C,w,L,E,x,R,k,M,A,O,D,T,B,P,I,H,j,F,W,U,q,N,z,K,G,V,X,Z,Y,J,$,Q,ee,te,re,ie,ne,oe,se,ae,ce,le,he,ue,fe,_e,de,pe,ve,ye,ge,me,be,Se,Ce,we,Le,Ee,xe,Re,ke,Me,Ae,Oe,De,Te,Be,Pe,Ie,He,je,Fe,We,Ue,qe,Ne,ze,Ke,Ge,Ve,Xe,Ze,Ye,Je,$e,Qe,et,tt,rt,it,nt,ot,st,at,ct,lt,ht,ut,ft,_t,dt,pt,vt,yt,gt,mt,bt,St,Ct,wt=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s},Lt=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.tryDrawCustomChar=t.powerlineDefinitions=t.boxDrawingDefinitions=t.blockElementDefinitions=void 0;var Et=r(1752);t.blockElementDefinitions={"▀":[{x:0,y:0,w:8,h:4}],"▁":[{x:0,y:7,w:8,h:1}],"▂":[{x:0,y:6,w:8,h:2}],"▃":[{x:0,y:5,w:8,h:3}],"▄":[{x:0,y:4,w:8,h:4}],"▅":[{x:0,y:3,w:8,h:5}],"▆":[{x:0,y:2,w:8,h:6}],"▇":[{x:0,y:1,w:8,h:7}],"█":[{x:0,y:0,w:8,h:8}],"▉":[{x:0,y:0,w:7,h:8}],"▊":[{x:0,y:0,w:6,h:8}],"▋":[{x:0,y:0,w:5,h:8}],"▌":[{x:0,y:0,w:4,h:8}],"▍":[{x:0,y:0,w:3,h:8}],"▎":[{x:0,y:0,w:2,h:8}],"▏":[{x:0,y:0,w:1,h:8}],"▐":[{x:4,y:0,w:4,h:8}],"▔":[{x:0,y:0,w:9,h:1}],"▕":[{x:7,y:0,w:1,h:8}],"▖":[{x:0,y:4,w:4,h:4}],"▗":[{x:4,y:4,w:4,h:4}],"▘":[{x:0,y:0,w:4,h:4}],"▙":[{x:0,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],"▚":[{x:0,y:0,w:4,h:4},{x:4,y:4,w:4,h:4}],"▛":[{x:0,y:0,w:4,h:8},{x:0,y:0,w:4,h:8}],"▜":[{x:0,y:0,w:8,h:4},{x:4,y:0,w:4,h:8}],"▝":[{x:4,y:0,w:4,h:4}],"▞":[{x:4,y:0,w:4,h:4},{x:0,y:4,w:4,h:4}],"▟":[{x:4,y:0,w:4,h:8},{x:0,y:4,w:8,h:4}],"🭰":[{x:1,y:0,w:1,h:8}],"🭱":[{x:2,y:0,w:1,h:8}],"🭲":[{x:3,y:0,w:1,h:8}],"🭳":[{x:4,y:0,w:1,h:8}],"🭴":[{x:5,y:0,w:1,h:8}],"🭵":[{x:6,y:0,w:1,h:8}],"🭶":[{x:0,y:1,w:8,h:1}],"🭷":[{x:0,y:2,w:8,h:1}],"🭸":[{x:0,y:3,w:8,h:1}],"🭹":[{x:0,y:4,w:8,h:1}],"🭺":[{x:0,y:5,w:8,h:1}],"🭻":[{x:0,y:6,w:8,h:1}],"🭼":[{x:0,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],"🭽":[{x:0,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],"🭾":[{x:7,y:0,w:1,h:8},{x:0,y:0,w:8,h:1}],"🭿":[{x:7,y:0,w:1,h:8},{x:0,y:7,w:8,h:1}],"🮀":[{x:0,y:0,w:8,h:1},{x:0,y:7,w:8,h:1}],"🮁":[{x:0,y:0,w:8,h:1},{x:0,y:2,w:8,h:1},{x:0,y:4,w:8,h:1},{x:0,y:7,w:8,h:1}],"🮂":[{x:0,y:0,w:8,h:2}],"🮃":[{x:0,y:0,w:8,h:3}],"🮄":[{x:0,y:0,w:8,h:5}],"🮅":[{x:0,y:0,w:8,h:6}],"🮆":[{x:0,y:0,w:8,h:7}],"🮇":[{x:6,y:0,w:2,h:8}],"🮈":[{x:5,y:0,w:3,h:8}],"🮉":[{x:3,y:0,w:5,h:8}],"🮊":[{x:2,y:0,w:6,h:8}],"🮋":[{x:1,y:0,w:7,h:8}],"🮕":[{x:0,y:0,w:2,h:2},{x:4,y:0,w:2,h:2},{x:2,y:2,w:2,h:2},{x:6,y:2,w:2,h:2},{x:0,y:4,w:2,h:2},{x:4,y:4,w:2,h:2},{x:2,y:6,w:2,h:2},{x:6,y:6,w:2,h:2}],"🮖":[{x:2,y:0,w:2,h:2},{x:6,y:0,w:2,h:2},{x:0,y:2,w:2,h:2},{x:4,y:2,w:2,h:2},{x:2,y:4,w:2,h:2},{x:6,y:4,w:2,h:2},{x:0,y:6,w:2,h:2},{x:4,y:6,w:2,h:2}],"🮗":[{x:0,y:2,w:8,h:2},{x:0,y:6,w:8,h:2}]};var xt={"░":[[1,0,0,0],[0,0,0,0],[0,0,1,0],[0,0,0,0]],"▒":[[1,0],[0,0],[0,1],[0,0]],"▓":[[0,1],[1,1],[1,0],[1,1]]};t.boxDrawingDefinitions={"─":(i={},i[1]="M0,.5 L1,.5",i),"━":(n={},n[3]="M0,.5 L1,.5",n),"│":(o={},o[1]="M.5,0 L.5,1",o),"┃":(s={},s[3]="M.5,0 L.5,1",s),"┌":(a={},a[1]="M0.5,1 L.5,.5 L1,.5",a),"┏":(c={},c[3]="M0.5,1 L.5,.5 L1,.5",c),"┐":(l={},l[1]="M0,.5 L.5,.5 L.5,1",l),"┓":(h={},h[3]="M0,.5 L.5,.5 L.5,1",h),"└":(u={},u[1]="M.5,0 L.5,.5 L1,.5",u),"┗":(f={},f[3]="M.5,0 L.5,.5 L1,.5",f),"┘":(_={},_[1]="M.5,0 L.5,.5 L0,.5",_),"┛":(d={},d[3]="M.5,0 L.5,.5 L0,.5",d),"├":(p={},p[1]="M.5,0 L.5,1 M.5,.5 L1,.5",p),"┣":(v={},v[3]="M.5,0 L.5,1 M.5,.5 L1,.5",v),"┤":(y={},y[1]="M.5,0 L.5,1 M.5,.5 L0,.5",y),"┫":(g={},g[3]="M.5,0 L.5,1 M.5,.5 L0,.5",g),"┬":(m={},m[1]="M0,.5 L1,.5 M.5,.5 L.5,1",m),"┳":(b={},b[3]="M0,.5 L1,.5 M.5,.5 L.5,1",b),"┴":(S={},S[1]="M0,.5 L1,.5 M.5,.5 L.5,0",S),"┻":(C={},C[3]="M0,.5 L1,.5 M.5,.5 L.5,0",C),"┼":(w={},w[1]="M0,.5 L1,.5 M.5,0 L.5,1",w),"╋":(L={},L[3]="M0,.5 L1,.5 M.5,0 L.5,1",L),"╴":(E={},E[1]="M.5,.5 L0,.5",E),"╸":(x={},x[3]="M.5,.5 L0,.5",x),"╵":(R={},R[1]="M.5,.5 L.5,0",R),"╹":(k={},k[3]="M.5,.5 L.5,0",k),"╶":(M={},M[1]="M.5,.5 L1,.5",M),"╺":(A={},A[3]="M.5,.5 L1,.5",A),"╷":(O={},O[1]="M.5,.5 L.5,1",O),"╻":(D={},D[3]="M.5,.5 L.5,1",D),"═":(T={},T[1]=function(e,t){return "M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},T),"║":(B={},B[1]=function(e,t){return "M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},B),"╒":(P={},P[1]=function(e,t){return "M.5,1 L.5,"+(.5-t)+" L1,"+(.5-t)+" M.5,"+(.5+t)+" L1,"+(.5+t)},P),"╓":(I={},I[1]=function(e,t){return "M"+(.5-e)+",1 L"+(.5-e)+",.5 L1,.5 M"+(.5+e)+",.5 L"+(.5+e)+",1"},I),"╔":(H={},H[1]=function(e,t){return "M1,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1"},H),"╕":(j={},j[1]=function(e,t){return "M0,"+(.5-t)+" L.5,"+(.5-t)+" L.5,1 M0,"+(.5+t)+" L.5,"+(.5+t)},j),"╖":(F={},F[1]=function(e,t){return "M"+(.5+e)+",1 L"+(.5+e)+",.5 L0,.5 M"+(.5-e)+",.5 L"+(.5-e)+",1"},F),"╗":(W={},W[1]=function(e,t){return "M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M0,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",1"},W),"╘":(U={},U[1]=function(e,t){return "M.5,0 L.5,"+(.5+t)+" L1,"+(.5+t)+" M.5,"+(.5-t)+" L1,"+(.5-t)},U),"╙":(q={},q[1]=function(e,t){return "M1,.5 L"+(.5-e)+",.5 L"+(.5-e)+",0 M"+(.5+e)+",.5 L"+(.5+e)+",0"},q),"╚":(N={},N[1]=function(e,t){return "M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0 M1,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",0"},N),"╛":(z={},z[1]=function(e,t){return "M0,"+(.5+t)+" L.5,"+(.5+t)+" L.5,0 M0,"+(.5-t)+" L.5,"+(.5-t)},z),"╜":(K={},K[1]=function(e,t){return "M0,.5 L"+(.5+e)+",.5 L"+(.5+e)+",0 M"+(.5-e)+",.5 L"+(.5-e)+",0"},K),"╝":(G={},G[1]=function(e,t){return "M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M0,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",0"},G),"╞":(V={},V[1]=function(e,t){return "M.5,0 L.5,1 M.5,"+(.5-t)+" L1,"+(.5-t)+" M.5,"+(.5+t)+" L1,"+(.5+t)},V),"╟":(X={},X[1]=function(e,t){return "M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1 M"+(.5+e)+",.5 L1,.5"},X),"╠":(Z={},Z[1]=function(e,t){return "M"+(.5-e)+",0 L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},Z),"╡":(Y={},Y[1]=function(e,t){return "M.5,0 L.5,1 M0,"+(.5-t)+" L.5,"+(.5-t)+" M0,"+(.5+t)+" L.5,"+(.5+t)},Y),"╢":(J={},J[1]=function(e,t){return "M0,.5 L"+(.5-e)+",.5 M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},J),"╣":($={},$[1]=function(e,t){return "M"+(.5+e)+",0 L"+(.5+e)+",1 M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0"},$),"╤":(Q={},Q[1]=function(e,t){return "M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)+" M.5,"+(.5+t)+" L.5,1"},Q),"╥":(ee={},ee[1]=function(e,t){return "M0,.5 L1,.5 M"+(.5-e)+",.5 L"+(.5-e)+",1 M"+(.5+e)+",.5 L"+(.5+e)+",1"},ee),"╦":(te={},te[1]=function(e,t){return "M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1"},te),"╧":(re={},re[1]=function(e,t){return "M.5,0 L.5,"+(.5-t)+" M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},re),"╨":(ie={},ie[1]=function(e,t){return "M0,.5 L1,.5 M"+(.5-e)+",.5 L"+(.5-e)+",0 M"+(.5+e)+",.5 L"+(.5+e)+",0"},ie),"╩":(ne={},ne[1]=function(e,t){return "M0,"+(.5+t)+" L1,"+(.5+t)+" M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},ne),"╪":(oe={},oe[1]=function(e,t){return "M.5,0 L.5,1 M0,"+(.5-t)+" L1,"+(.5-t)+" M0,"+(.5+t)+" L1,"+(.5+t)},oe),"╫":(se={},se[1]=function(e,t){return "M0,.5 L1,.5 M"+(.5-e)+",0 L"+(.5-e)+",1 M"+(.5+e)+",0 L"+(.5+e)+",1"},se),"╬":(ae={},ae[1]=function(e,t){return "M0,"+(.5+t)+" L"+(.5-e)+","+(.5+t)+" L"+(.5-e)+",1 M1,"+(.5+t)+" L"+(.5+e)+","+(.5+t)+" L"+(.5+e)+",1 M0,"+(.5-t)+" L"+(.5-e)+","+(.5-t)+" L"+(.5-e)+",0 M1,"+(.5-t)+" L"+(.5+e)+","+(.5-t)+" L"+(.5+e)+",0"},ae),"╱":(ce={},ce[1]="M1,0 L0,1",ce),"╲":(le={},le[1]="M0,0 L1,1",le),"╳":(he={},he[1]="M1,0 L0,1 M0,0 L1,1",he),"╼":(ue={},ue[1]="M.5,.5 L0,.5",ue[3]="M.5,.5 L1,.5",ue),"╽":(fe={},fe[1]="M.5,.5 L.5,0",fe[3]="M.5,.5 L.5,1",fe),"╾":(_e={},_e[1]="M.5,.5 L1,.5",_e[3]="M.5,.5 L0,.5",_e),"╿":(de={},de[1]="M.5,.5 L.5,1",de[3]="M.5,.5 L.5,0",de),"┍":(pe={},pe[1]="M.5,.5 L.5,1",pe[3]="M.5,.5 L1,.5",pe),"┎":(ve={},ve[1]="M.5,.5 L1,.5",ve[3]="M.5,.5 L.5,1",ve),"┑":(ye={},ye[1]="M.5,.5 L.5,1",ye[3]="M.5,.5 L0,.5",ye),"┒":(ge={},ge[1]="M.5,.5 L0,.5",ge[3]="M.5,.5 L.5,1",ge),"┕":(me={},me[1]="M.5,.5 L.5,0",me[3]="M.5,.5 L1,.5",me),"┖":(be={},be[1]="M.5,.5 L1,.5",be[3]="M.5,.5 L.5,0",be),"┙":(Se={},Se[1]="M.5,.5 L.5,0",Se[3]="M.5,.5 L0,.5",Se),"┚":(Ce={},Ce[1]="M.5,.5 L0,.5",Ce[3]="M.5,.5 L.5,0",Ce),"┝":(we={},we[1]="M.5,0 L.5,1",we[3]="M.5,.5 L1,.5",we),"┞":(Le={},Le[1]="M0.5,1 L.5,.5 L1,.5",Le[3]="M.5,.5 L.5,0",Le),"┟":(Ee={},Ee[1]="M.5,0 L.5,.5 L1,.5",Ee[3]="M.5,.5 L.5,1",Ee),"┠":(xe={},xe[1]="M.5,.5 L1,.5",xe[3]="M.5,0 L.5,1",xe),"┡":(Re={},Re[1]="M.5,.5 L.5,1",Re[3]="M.5,0 L.5,.5 L1,.5",Re),"┢":(ke={},ke[1]="M.5,.5 L.5,0",ke[3]="M0.5,1 L.5,.5 L1,.5",ke),"┥":(Me={},Me[1]="M.5,0 L.5,1",Me[3]="M.5,.5 L0,.5",Me),"┦":(Ae={},Ae[1]="M0,.5 L.5,.5 L.5,1",Ae[3]="M.5,.5 L.5,0",Ae),"┧":(Oe={},Oe[1]="M.5,0 L.5,.5 L0,.5",Oe[3]="M.5,.5 L.5,1",Oe),"┨":(De={},De[1]="M.5,.5 L0,.5",De[3]="M.5,0 L.5,1",De),"┩":(Te={},Te[1]="M.5,.5 L.5,1",Te[3]="M.5,0 L.5,.5 L0,.5",Te),"┪":(Be={},Be[1]="M.5,.5 L.5,0",Be[3]="M0,.5 L.5,.5 L.5,1",Be),"┭":(Pe={},Pe[1]="M0.5,1 L.5,.5 L1,.5",Pe[3]="M.5,.5 L0,.5",Pe),"┮":(Ie={},Ie[1]="M0,.5 L.5,.5 L.5,1",Ie[3]="M.5,.5 L1,.5",Ie),"┯":(He={},He[1]="M.5,.5 L.5,1",He[3]="M0,.5 L1,.5",He),"┰":(je={},je[1]="M0,.5 L1,.5",je[3]="M.5,.5 L.5,1",je),"┱":(Fe={},Fe[1]="M.5,.5 L1,.5",Fe[3]="M0,.5 L.5,.5 L.5,1",Fe),"┲":(We={},We[1]="M.5,.5 L0,.5",We[3]="M0.5,1 L.5,.5 L1,.5",We),"┵":(Ue={},Ue[1]="M.5,0 L.5,.5 L1,.5",Ue[3]="M.5,.5 L0,.5",Ue),"┶":(qe={},qe[1]="M.5,0 L.5,.5 L0,.5",qe[3]="M.5,.5 L1,.5",qe),"┷":(Ne={},Ne[1]="M.5,.5 L.5,0",Ne[3]="M0,.5 L1,.5",Ne),"┸":(ze={},ze[1]="M0,.5 L1,.5",ze[3]="M.5,.5 L.5,0",ze),"┹":(Ke={},Ke[1]="M.5,.5 L1,.5",Ke[3]="M.5,0 L.5,.5 L0,.5",Ke),"┺":(Ge={},Ge[1]="M.5,.5 L0,.5",Ge[3]="M.5,0 L.5,.5 L1,.5",Ge),"┽":(Ve={},Ve[1]="M.5,0 L.5,1 M.5,.5 L1,.5",Ve[3]="M.5,.5 L0,.5",Ve),"┾":(Xe={},Xe[1]="M.5,0 L.5,1 M.5,.5 L0,.5",Xe[3]="M.5,.5 L1,.5",Xe),"┿":(Ze={},Ze[1]="M.5,0 L.5,1",Ze[3]="M0,.5 L1,.5",Ze),"╀":(Ye={},Ye[1]="M0,.5 L1,.5 M.5,.5 L.5,1",Ye[3]="M.5,.5 L.5,0",Ye),"╁":(Je={},Je[1]="M.5,.5 L.5,0 M0,.5 L1,.5",Je[3]="M.5,.5 L.5,1",Je),"╂":($e={},$e[1]="M0,.5 L1,.5",$e[3]="M.5,0 L.5,1",$e),"╃":(Qe={},Qe[1]="M0.5,1 L.5,.5 L1,.5",Qe[3]="M.5,0 L.5,.5 L0,.5",Qe),"╄":(et={},et[1]="M0,.5 L.5,.5 L.5,1",et[3]="M.5,0 L.5,.5 L1,.5",et),"╅":(tt={},tt[1]="M.5,0 L.5,.5 L1,.5",tt[3]="M0,.5 L.5,.5 L.5,1",tt),"╆":(rt={},rt[1]="M.5,0 L.5,.5 L0,.5",rt[3]="M0.5,1 L.5,.5 L1,.5",rt),"╇":(it={},it[1]="M.5,.5 L.5,1",it[3]="M.5,.5 L.5,0 M0,.5 L1,.5",it),"╈":(nt={},nt[1]="M.5,.5 L.5,0",nt[3]="M0,.5 L1,.5 M.5,.5 L.5,1",nt),"╉":(ot={},ot[1]="M.5,.5 L1,.5",ot[3]="M.5,0 L.5,1 M.5,.5 L0,.5",ot),"╊":(st={},st[1]="M.5,.5 L0,.5",st[3]="M.5,0 L.5,1 M.5,.5 L1,.5",st),"╌":(at={},at[1]="M.1,.5 L.4,.5 M.6,.5 L.9,.5",at),"╍":(ct={},ct[3]="M.1,.5 L.4,.5 M.6,.5 L.9,.5",ct),"┄":(lt={},lt[1]="M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5",lt),"┅":(ht={},ht[3]="M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5",ht),"┈":(ut={},ut[1]="M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5",ut),"┉":(ft={},ft[3]="M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5",ft),"╎":(_t={},_t[1]="M.5,.1 L.5,.4 M.5,.6 L.5,.9",_t),"╏":(dt={},dt[3]="M.5,.1 L.5,.4 M.5,.6 L.5,.9",dt),"┆":(pt={},pt[1]="M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333",pt),"┇":(vt={},vt[3]="M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333",vt),"┊":(yt={},yt[1]="M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95",yt),"┋":(gt={},gt[3]="M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95",gt),"╭":(mt={},mt[1]="C.5,1,.5,.5,1,.5",mt),"╮":(bt={},bt[1]="C.5,1,.5,.5,0,.5",bt),"╯":(St={},St[1]="C.5,0,.5,.5,0,.5",St),"╰":(Ct={},Ct[1]="C.5,0,.5,.5,1,.5",Ct)},t.powerlineDefinitions={"":{d:"M0,0 L1,.5 L0,1",type:0},"":{d:"M0,0 L1,.5 L0,1",type:1,horizontalPadding:.5},"":{d:"M1,0 L0,.5 L1,1",type:0},"":{d:"M1,0 L0,.5 L1,1",type:1,horizontalPadding:.5}},t.tryDrawCustomChar=function(e,r,i,n,o,s){var a=t.blockElementDefinitions[r];if(a)return function(e,t,r,i,n,o){for(var s=0;s<t.length;s++){var a=t[s],c=n/8,l=o/8;e.fillRect(r+a.x*c,i+a.y*l,a.w*c,a.h*l);}}(e,a,i,n,o,s),!0;var c=xt[r];if(c)return function(e,t,r,i,n,o){var s,a=Rt.get(t);a||(a=new Map,Rt.set(t,a));var c=e.fillStyle;if("string"!=typeof c)throw new Error('Unexpected fillStyle type "'+c+'"');var l=a.get(c);if(!l){var h=t[0].length,u=t.length,f=document.createElement("canvas");f.width=h,f.height=u;var _=(0, Et.throwIfFalsy)(f.getContext("2d")),d=new ImageData(h,u),p=void 0,v=void 0,y=void 0,g=void 0;if(c.startsWith("#"))p=parseInt(c.slice(1,3),16),v=parseInt(c.slice(3,5),16),y=parseInt(c.slice(5,7),16),g=c.length>7&&parseInt(c.slice(7,9),16)||1;else {if(!c.startsWith("rgba"))throw new Error('Unexpected fillStyle color format "'+c+'" when drawing pattern glyph');p=(s=wt(c.substring(5,c.length-1).split(",").map((function(e){return parseFloat(e)})),4))[0],v=s[1],y=s[2],g=s[3];}for(var m=0;m<u;m++)for(var b=0;b<h;b++)d.data[4*(m*h+b)]=p,d.data[4*(m*h+b)+1]=v,d.data[4*(m*h+b)+2]=y,d.data[4*(m*h+b)+3]=t[m][b]*(255*g);_.putImageData(d,0,0),l=(0, Et.throwIfFalsy)(e.createPattern(f,null)),a.set(c,l);}e.fillStyle=l,e.fillRect(r,i,n,o);}(e,c,i,n,o,s),!0;var l=t.boxDrawingDefinitions[r];if(l)return function(e,t,r,i,n,o){var s,a,c,l;e.strokeStyle=e.fillStyle;try{for(var h=Lt(Object.entries(t)),u=h.next();!u.done;u=h.next()){var f=wt(u.value,2),_=f[0],d=f[1];e.beginPath(),e.lineWidth=window.devicePixelRatio*Number.parseInt(_);var p=void 0;p="function"==typeof d?d(.15,.15/o*n):d;try{for(var v=(c=void 0,Lt(p.split(" "))),y=v.next();!y.done;y=v.next()){var g=y.value,m=g[0],b=Mt[m];if(b){var S=g.substring(1).split(",");S[0]&&S[1]&&b(e,At(S,n,o,r,i));}else console.error('Could not find drawing instructions for "'+m+'"');}}catch(e){c={error:e};}finally{try{y&&!y.done&&(l=v.return)&&l.call(v);}finally{if(c)throw c.error}}e.stroke(),e.closePath();}}catch(e){s={error:e};}finally{try{u&&!u.done&&(a=h.return)&&a.call(h);}finally{if(s)throw s.error}}}(e,l,i,n,o,s),!0;var h=t.powerlineDefinitions[r];return !!h&&(function(e,t,r,i,n,o){var s,a;e.beginPath(),e.lineWidth=window.devicePixelRatio;try{for(var c=Lt(t.d.split(" ")),l=c.next();!l.done;l=c.next()){var h=l.value,u=h[0],f=Mt[u];if(f){var _=h.substring(1).split(",");_[0]&&_[1]&&f(e,At(_,n,o,r,i,t.horizontalPadding));}else console.error('Could not find drawing instructions for "'+u+'"');}}catch(e){s={error:e};}finally{try{l&&!l.done&&(a=c.return)&&a.call(c);}finally{if(s)throw s.error}}1===t.type?(e.strokeStyle=e.fillStyle,e.stroke()):e.fill(),e.closePath();}(e,h,i,n,o,s),!0)};var Rt=new Map;function kt(e,t,r){return void 0===r&&(r=0),Math.max(Math.min(e,t),r)}var Mt={C:function(e,t){return e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},L:function(e,t){return e.lineTo(t[0],t[1])},M:function(e,t){return e.moveTo(t[0],t[1])}};function At(e,t,r,i,n,o){void 0===o&&(o=0);var s=e.map((function(e){return parseFloat(e)||parseInt(e)}));if(s.length<2)throw new Error("Too few arguments for instruction");for(var a=0;a<s.length;a+=2)s[a]*=t-2*o*window.devicePixelRatio,0!==s[a]&&(s[a]=kt(Math.round(s[a]+.5)-.5,t,0)),s[a]+=i+o*window.devicePixelRatio;for(var c=1;c<s.length;c+=2)s[c]*=r,0!==s[c]&&(s[c]=kt(Math.round(s[c]+.5)-.5,r,0)),s[c]+=n;return s}},3700:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GridCache=void 0;var r=function(){function e(){this.cache=[];}return e.prototype.resize=function(e,t){for(var r=0;r<e;r++){this.cache.length<=r&&this.cache.push([]);for(var i=this.cache[r].length;i<t;i++)this.cache[r].push(void 0);this.cache[r].length=t;}this.cache.length=e;},e.prototype.clear=function(){for(var e=0;e<this.cache.length;e++)for(var t=0;t<this.cache[e].length;t++)this.cache[e][t]=void 0;},e}();t.GridCache=r;},5098:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkRenderLayer=void 0;var a=r(1546),c=r(8803),l=r(2040),h=r(2585),u=function(e){function t(t,r,i,n,o,s,a,c,l){var h=e.call(this,t,"link",r,!0,i,n,a,c,l)||this;return o.onShowLinkUnderline((function(e){return h._onShowLinkUnderline(e)})),o.onHideLinkUnderline((function(e){return h._onHideLinkUnderline(e)})),s.onShowLinkUnderline((function(e){return h._onShowLinkUnderline(e)})),s.onHideLinkUnderline((function(e){return h._onHideLinkUnderline(e)})),h}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._state=void 0;},t.prototype.reset=function(){this._clearCurrentLink();},t.prototype._clearCurrentLink=function(){if(this._state){this._clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var e=this._state.y2-this._state.y1-1;e>0&&this._clearCells(0,this._state.y1+1,this._state.cols,e),this._clearCells(0,this._state.y2,this._state.x2,1),this._state=void 0;}},t.prototype._onShowLinkUnderline=function(e){if(e.fg===c.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:e.fg&&(0, l.is256Color)(e.fg)?this._ctx.fillStyle=this._colors.ansi[e.fg].css:this._ctx.fillStyle=this._colors.foreground.css,e.y1===e.y2)this._fillBottomLineAtCells(e.x1,e.y1,e.x2-e.x1);else {this._fillBottomLineAtCells(e.x1,e.y1,e.cols-e.x1);for(var t=e.y1+1;t<e.y2;t++)this._fillBottomLineAtCells(0,t,e.cols);this._fillBottomLineAtCells(0,e.y2,e.x2);}this._state=e;},t.prototype._onHideLinkUnderline=function(e){this._clearCurrentLink();},o([s(6,h.IBufferService),s(7,h.IOptionsService),s(8,h.IDecorationService)],t)}(a.BaseRenderLayer);t.LinkRenderLayer=u;},3525:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;var c=r(9596),l=r(4149),h=r(2512),u=r(5098),f=r(844),_=r(4725),d=r(2585),p=r(1420),v=r(8460),y=1,g=function(e){function t(t,r,i,n,o,s,a,f){var _=e.call(this)||this;_._colors=t,_._screenElement=r,_._bufferService=s,_._charSizeService=a,_._optionsService=f,_._id=y++,_._onRequestRedraw=new v.EventEmitter;var d=_._optionsService.rawOptions.allowTransparency;return _._renderLayers=[o.createInstance(c.TextRenderLayer,_._screenElement,0,_._colors,d,_._id),o.createInstance(l.SelectionRenderLayer,_._screenElement,1,_._colors,_._id),o.createInstance(u.LinkRenderLayer,_._screenElement,2,_._colors,_._id,i,n),o.createInstance(h.CursorRenderLayer,_._screenElement,3,_._colors,_._id,_._onRequestRedraw)],_.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},_._devicePixelRatio=window.devicePixelRatio,_._updateDimensions(),_.onOptionsChanged(),_}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRequestRedraw.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t,r;try{for(var i=a(this._renderLayers),n=i.next();!n.done;n=i.next())n.value.dispose();}catch(e){t={error:e};}finally{try{n&&!n.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}e.prototype.dispose.call(this),(0, p.removeTerminalFromCache)(this._id);},t.prototype.onDevicePixelRatioChange=function(){this._devicePixelRatio!==window.devicePixelRatio&&(this._devicePixelRatio=window.devicePixelRatio,this.onResize(this._bufferService.cols,this._bufferService.rows));},t.prototype.setColors=function(e){var t,r;this._colors=e;try{for(var i=a(this._renderLayers),n=i.next();!n.done;n=i.next()){var o=n.value;o.setColors(this._colors),o.reset();}}catch(e){t={error:e};}finally{try{n&&!n.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}},t.prototype.onResize=function(e,t){var r,i;this._updateDimensions();try{for(var n=a(this._renderLayers),o=n.next();!o.done;o=n.next())o.value.resize(this.dimensions);}catch(e){r={error:e};}finally{try{o&&!o.done&&(i=n.return)&&i.call(n);}finally{if(r)throw r.error}}this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px";},t.prototype.onCharSizeChanged=function(){this.onResize(this._bufferService.cols,this._bufferService.rows);},t.prototype.onBlur=function(){this._runOperation((function(e){return e.onBlur()}));},t.prototype.onFocus=function(){this._runOperation((function(e){return e.onFocus()}));},t.prototype.onSelectionChanged=function(e,t,r){void 0===r&&(r=!1),this._runOperation((function(i){return i.onSelectionChanged(e,t,r)})),this._colors.selectionForeground&&this._onRequestRedraw.fire({start:0,end:this._bufferService.rows-1});},t.prototype.onCursorMove=function(){this._runOperation((function(e){return e.onCursorMove()}));},t.prototype.onOptionsChanged=function(){this._runOperation((function(e){return e.onOptionsChanged()}));},t.prototype.clear=function(){this._runOperation((function(e){return e.reset()}));},t.prototype._runOperation=function(e){var t,r;try{for(var i=a(this._renderLayers),n=i.next();!n.done;n=i.next())e(n.value);}catch(e){t={error:e};}finally{try{n&&!n.done&&(r=i.return)&&r.call(i);}finally{if(t)throw t.error}}},t.prototype.renderRows=function(e,t){var r,i;try{for(var n=a(this._renderLayers),o=n.next();!o.done;o=n.next())o.value.onGridChanged(e,t);}catch(e){r={error:e};}finally{try{o&&!o.done&&(i=n.return)&&i.call(n);}finally{if(r)throw r.error}}},t.prototype.clearTextureAtlas=function(){var e,t;try{for(var r=a(this._renderLayers),i=r.next();!i.done;i=r.next())i.value.clearTextureAtlas();}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}},t.prototype._updateDimensions=function(){this._charSizeService.hasValidSize&&(this.dimensions.scaledCharWidth=Math.floor(this._charSizeService.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharTop=1===this._optionsService.rawOptions.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._optionsService.rawOptions.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._bufferService.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._bufferService.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols);},o([s(4,d.IInstantiationService),s(5,d.IBufferService),s(6,_.ICharSizeService),s(7,d.IOptionsService)],t)}(f.Disposable);t.Renderer=g;},1752:(e,t)=>{function r(e){return 57508<=e&&e<=57558}Object.defineProperty(t,"__esModule",{value:!0}),t.excludeFromContrastRatioDemands=t.isPowerlineGlyph=t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error("value must not be falsy");return e},t.isPowerlineGlyph=r,t.excludeFromContrastRatioDemands=function(e){return r(e)||function(e){return 9472<=e&&e<=9631}(e)};},4149:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionRenderLayer=void 0;var a=r(1546),c=r(2585),l=function(e){function t(t,r,i,n,o,s,a){var c=e.call(this,t,"selection",r,!0,i,n,o,s,a)||this;return c._clearState(),c}return n(t,e),t.prototype._clearState=function(){this._state={start:void 0,end:void 0,columnSelectMode:void 0,ydisp:void 0};},t.prototype.resize=function(t){e.prototype.resize.call(this,t),this._clearState();},t.prototype.reset=function(){this._state.start&&this._state.end&&(this._clearState(),this._clearAll());},t.prototype.onSelectionChanged=function(t,r,i){if(e.prototype.onSelectionChanged.call(this,t,r,i),this._didStateChange(t,r,i,this._bufferService.buffer.ydisp))if(this._clearAll(),t&&r){var n=t[1]-this._bufferService.buffer.ydisp,o=r[1]-this._bufferService.buffer.ydisp,s=Math.max(n,0),a=Math.min(o,this._bufferService.rows-1);if(s>=this._bufferService.rows||a<0)this._state.ydisp=this._bufferService.buffer.ydisp;else {if(this._ctx.fillStyle=this._colors.selectionTransparent.css,i){var c=t[0],l=r[0]-c,h=a-s+1;this._fillCells(c,s,l,h);}else {c=n===s?t[0]:0;var u=s===o?r[0]:this._bufferService.cols;this._fillCells(c,s,u-c,1);var f=Math.max(a-s-1,0);if(this._fillCells(0,s+1,this._bufferService.cols,f),s!==a){var _=o===a?r[0]:this._bufferService.cols;this._fillCells(0,a,_,1);}}this._state.start=[t[0],t[1]],this._state.end=[r[0],r[1]],this._state.columnSelectMode=i,this._state.ydisp=this._bufferService.buffer.ydisp;}}else this._clearState();},t.prototype._didStateChange=function(e,t,r,i){return !this._areCoordinatesEqual(e,this._state.start)||!this._areCoordinatesEqual(t,this._state.end)||r!==this._state.columnSelectMode||i!==this._state.ydisp},t.prototype._areCoordinatesEqual=function(e,t){return !(!e||!t)&&e[0]===t[0]&&e[1]===t[1]},o([s(4,c.IBufferService),s(5,c.IOptionsService),s(6,c.IDecorationService)],t)}(a.BaseRenderLayer);t.SelectionRenderLayer=l;},9596:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.TextRenderLayer=void 0;var c=r(3700),l=r(1546),h=r(3734),u=r(643),f=r(511),_=r(2585),d=r(4725),p=r(4269),v=function(e){function t(t,r,i,n,o,s,a,l,h){var u=e.call(this,t,"text",r,n,i,o,s,a,h)||this;return u._characterJoinerService=l,u._characterWidth=0,u._characterFont="",u._characterOverlapCache={},u._workCell=new f.CellData,u._state=new c.GridCache,u}return n(t,e),t.prototype.resize=function(t){e.prototype.resize.call(this,t);var r=this._getFont(!1,!1);this._characterWidth===t.scaledCharWidth&&this._characterFont===r||(this._characterWidth=t.scaledCharWidth,this._characterFont=r,this._characterOverlapCache={}),this._state.clear(),this._state.resize(this._bufferService.cols,this._bufferService.rows);},t.prototype.reset=function(){this._state.clear(),this._clearAll();},t.prototype._forEachCell=function(e,t,r){for(var i=e;i<=t;i++)for(var n=i+this._bufferService.buffer.ydisp,o=this._bufferService.buffer.lines.get(n),s=this._characterJoinerService.getJoinedCharacters(n),a=0;a<this._bufferService.cols;a++){o.loadCell(a,this._workCell);var c=this._workCell,l=!1,h=a;if(0!==c.getWidth()){if(s.length>0&&a===s[0][0]){l=!0;var f=s.shift();c=new p.JoinedCellData(this._workCell,o.translateToString(!0,f[0],f[1]),f[1]-f[0]),h=f[1]-1;}!l&&this._isOverlapping(c)&&h<o.length-1&&o.getCodePoint(h+1)===u.NULL_CELL_CODE&&(c.content&=-12582913,c.content|=2<<22),r(c,a,i),a=h;}}},t.prototype._drawBackground=function(e,t){var r=this,i=this._ctx,n=this._bufferService.cols,o=0,s=0,c=null;i.save(),this._forEachCell(e,t,(function(e,t,l){var u,f,_=null;e.isInverse()?_=e.isFgDefault()?r._colors.foreground.css:e.isFgRGB()?"rgb("+h.AttributeData.toColorRGB(e.getFgColor()).join(",")+")":r._colors.ansi[e.getFgColor()].css:e.isBgRGB()?_="rgb("+h.AttributeData.toColorRGB(e.getBgColor()).join(",")+")":e.isBgPalette()&&(_=r._colors.ansi[e.getBgColor()].css);var d=!1;try{for(var p=a(r._decorationService.getDecorationsAtCell(t,r._bufferService.buffer.ydisp+l)),v=p.next();!v.done;v=p.next()){var y=v.value;"top"!==y.options.layer&&d||(y.backgroundColorRGB&&(_=y.backgroundColorRGB.css),d="top"===y.options.layer);}}catch(e){u={error:e};}finally{try{v&&!v.done&&(f=p.return)&&f.call(p);}finally{if(u)throw u.error}}null===c&&(o=t,s=l),l!==s?(i.fillStyle=c||"",r._fillCells(o,s,n-o,1),o=t,s=l):c!==_&&(i.fillStyle=c||"",r._fillCells(o,s,t-o,1),o=t,s=l),c=_;})),null!==c&&(i.fillStyle=c,this._fillCells(o,s,n-o,1)),i.restore();},t.prototype._drawForeground=function(e,t){var r=this;this._forEachCell(e,t,(function(e,t,i){if(!e.isInvisible()&&(r._drawChars(e,t,i),e.isUnderline()||e.isStrikethrough())){if(r._ctx.save(),e.isInverse())if(e.isBgDefault())r._ctx.fillStyle=r._colors.background.css;else if(e.isBgRGB())r._ctx.fillStyle="rgb("+h.AttributeData.toColorRGB(e.getBgColor()).join(",")+")";else {var n=e.getBgColor();r._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&n<8&&(n+=8),r._ctx.fillStyle=r._colors.ansi[n].css;}else if(e.isFgDefault())r._ctx.fillStyle=r._colors.foreground.css;else if(e.isFgRGB())r._ctx.fillStyle="rgb("+h.AttributeData.toColorRGB(e.getFgColor()).join(",")+")";else {var o=e.getFgColor();r._optionsService.rawOptions.drawBoldTextInBrightColors&&e.isBold()&&o<8&&(o+=8),r._ctx.fillStyle=r._colors.ansi[o].css;}e.isStrikethrough()&&r._fillMiddleLineAtCells(t,i,e.getWidth()),e.isUnderline()&&r._fillBottomLineAtCells(t,i,e.getWidth()),r._ctx.restore();}}));},t.prototype.onGridChanged=function(e,t){0!==this._state.cache.length&&(this._charAtlas&&this._charAtlas.beginFrame(),this._clearCells(0,e,this._bufferService.cols,t-e+1),this._drawBackground(e,t),this._drawForeground(e,t));},t.prototype.onOptionsChanged=function(){this._setTransparency(this._optionsService.rawOptions.allowTransparency);},t.prototype._isOverlapping=function(e){if(1!==e.getWidth())return !1;if(e.getCode()<256)return !1;var t=e.getChars();if(this._characterOverlapCache.hasOwnProperty(t))return this._characterOverlapCache[t];this._ctx.save(),this._ctx.font=this._characterFont;var r=Math.floor(this._ctx.measureText(t).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[t]=r,r},o([s(5,_.IBufferService),s(6,_.IOptionsService),s(7,d.ICharacterJoinerService),s(8,_.IDecorationService)],t)}(l.BaseRenderLayer);t.TextRenderLayer=v;},9616:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCharAtlas=void 0;var r=function(){function e(){this._didWarmUp=!1;}return e.prototype.dispose=function(){},e.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0);},e.prototype._doWarmUp=function(){},e.prototype.clear=function(){},e.prototype.beginFrame=function(){},e}();t.BaseCharAtlas=r;},1420:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeTerminalFromCache=t.acquireCharAtlas=void 0;var i=r(2040),n=r(1906),o=[];t.acquireCharAtlas=function(e,t,r,s,a){for(var c=(0, i.generateConfig)(s,a,e,r),l=0;l<o.length;l++){var h=(u=o[l]).ownedBy.indexOf(t);if(h>=0){if((0, i.configEquals)(u.config,c))return u.atlas;1===u.ownedBy.length?(u.atlas.dispose(),o.splice(l,1)):u.ownedBy.splice(h,1);break}}for(l=0;l<o.length;l++){var u=o[l];if((0, i.configEquals)(u.config,c))return u.ownedBy.push(t),u.atlas}var f={atlas:new n.DynamicCharAtlas(document,c),config:c,ownedBy:[t]};return o.push(f),f.atlas},t.removeTerminalFromCache=function(e){for(var t=0;t<o.length;t++){var r=o[t].ownedBy.indexOf(e);if(-1!==r){1===o[t].ownedBy.length?(o[t].atlas.dispose(),o.splice(t,1)):o[t].ownedBy.splice(r,1);break}}};},2040:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.is256Color=t.configEquals=t.generateConfig=void 0;var i=r(643);t.generateConfig=function(e,t,r,i){var n={foreground:i.foreground,background:i.background,cursor:void 0,cursorAccent:void 0,selection:void 0,ansi:i.ansi.slice()};return {devicePixelRatio:window.devicePixelRatio,scaledCharWidth:e,scaledCharHeight:t,fontFamily:r.fontFamily,fontSize:r.fontSize,fontWeight:r.fontWeight,fontWeightBold:r.fontWeightBold,allowTransparency:r.allowTransparency,colors:n}},t.configEquals=function(e,t){for(var r=0;r<e.colors.ansi.length;r++)if(e.colors.ansi[r].rgba!==t.colors.ansi[r].rgba)return !1;return e.devicePixelRatio===t.devicePixelRatio&&e.fontFamily===t.fontFamily&&e.fontSize===t.fontSize&&e.fontWeight===t.fontWeight&&e.fontWeightBold===t.fontWeightBold&&e.allowTransparency===t.allowTransparency&&e.scaledCharWidth===t.scaledCharWidth&&e.scaledCharHeight===t.scaledCharHeight&&e.colors.foreground===t.colors.foreground&&e.colors.background===t.colors.background},t.is256Color=function(e){return e<i.DEFAULT_COLOR};},8803:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CHAR_ATLAS_CELL_SPACING=t.TEXT_BASELINE=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0;var i=r(6114);t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.TEXT_BASELINE=i.isFirefox||i.isLegacyEdge?"bottom":"ideographic",t.CHAR_ATLAS_CELL_SPACING=1;},1906:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.NoneCharAtlas=t.DynamicCharAtlas=t.getGlyphCacheKey=void 0;var o=r(8803),s=r(9616),a=r(5680),c=r(7001),l=r(6114),h=r(1752),u=r(8055),f=1024,_=1024,d={css:"rgba(0, 0, 0, 0)",rgba:0};function p(e){return e.code<<21|e.bg<<12|e.fg<<3|(e.bold?0:4)+(e.dim?0:2)+(e.italic?0:1)}t.getGlyphCacheKey=p;var v=function(e){function t(t,r){var i=e.call(this)||this;i._config=r,i._drawToCacheCount=0,i._glyphsWaitingOnBitmap=[],i._bitmapCommitTimeout=null,i._bitmap=null,i._cacheCanvas=t.createElement("canvas"),i._cacheCanvas.width=f,i._cacheCanvas.height=_,i._cacheCtx=(0, h.throwIfFalsy)(i._cacheCanvas.getContext("2d",{alpha:!0}));var n=t.createElement("canvas");n.width=i._config.scaledCharWidth,n.height=i._config.scaledCharHeight,i._tmpCtx=(0, h.throwIfFalsy)(n.getContext("2d",{alpha:i._config.allowTransparency})),i._width=Math.floor(f/i._config.scaledCharWidth),i._height=Math.floor(_/i._config.scaledCharHeight);var o=i._width*i._height;return i._cacheMap=new c.LRUMap(o),i._cacheMap.prealloc(o),i}return n(t,e),t.prototype.dispose=function(){null!==this._bitmapCommitTimeout&&(window.clearTimeout(this._bitmapCommitTimeout),this._bitmapCommitTimeout=null);},t.prototype.beginFrame=function(){this._drawToCacheCount=0;},t.prototype.clear=function(){if(this._cacheMap.size>0){var e=this._width*this._height;this._cacheMap=new c.LRUMap(e),this._cacheMap.prealloc(e);}this._cacheCtx.clearRect(0,0,f,_),this._tmpCtx.clearRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight);},t.prototype.draw=function(e,t,r,i){if(32===t.code)return !0;if(!this._canCache(t))return !1;var n=p(t),o=this._cacheMap.get(n);if(null!=o)return this._drawFromCache(e,o,r,i),!0;if(this._drawToCacheCount<100){var s;s=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(t,s);return this._cacheMap.set(n,a),this._drawFromCache(e,a,r,i),!0}return !1},t.prototype._canCache=function(e){return e.code<256},t.prototype._toCoordinateX=function(e){return e%this._width*this._config.scaledCharWidth},t.prototype._toCoordinateY=function(e){return Math.floor(e/this._width)*this._config.scaledCharHeight},t.prototype._drawFromCache=function(e,t,r,i){if(!t.isEmpty){var n=this._toCoordinateX(t.index),o=this._toCoordinateY(t.index);e.drawImage(t.inBitmap?this._bitmap:this._cacheCanvas,n,o,this._config.scaledCharWidth,this._config.scaledCharHeight,r,i,this._config.scaledCharWidth,this._config.scaledCharHeight);}},t.prototype._getColorFromAnsiIndex=function(e){return e<this._config.colors.ansi.length?this._config.colors.ansi[e]:a.DEFAULT_ANSI_COLORS[e]},t.prototype._getBackgroundColor=function(e){return this._config.allowTransparency?d:e.bg===o.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:e.bg<256?this._getColorFromAnsiIndex(e.bg):this._config.colors.background},t.prototype._getForegroundColor=function(e){return e.fg===o.INVERTED_DEFAULT_COLOR?u.color.opaque(this._config.colors.background):e.fg<256?this._getColorFromAnsiIndex(e.fg):this._config.colors.foreground},t.prototype._drawToCache=function(e,t){this._drawToCacheCount++,this._tmpCtx.save();var r=this._getBackgroundColor(e);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=r.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var i=e.bold?this._config.fontWeightBold:this._config.fontWeight,n=e.italic?"italic":"";this._tmpCtx.font=n+" "+i+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline=o.TEXT_BASELINE,this._tmpCtx.fillStyle=this._getForegroundColor(e).css,e.dim&&(this._tmpCtx.globalAlpha=o.DIM_OPACITY),this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight);var s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;if(this._config.allowTransparency||(a=g(s,r)),a&&"_"===e.chars&&!this._config.allowTransparency)for(var c=1;c<=5&&(this._tmpCtx.fillText(e.chars,0,this._config.scaledCharHeight-c),a=g(s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),r));c++);this._tmpCtx.restore();var l=this._toCoordinateX(t),h=this._toCoordinateY(t);this._cacheCtx.putImageData(s,l,h);var u={index:t,isEmpty:a,inBitmap:!1};return this._addGlyphToBitmap(u),u},t.prototype._addGlyphToBitmap=function(e){var t=this;!("createImageBitmap"in window)||l.isFirefox||l.isSafari||(this._glyphsWaitingOnBitmap.push(e),null===this._bitmapCommitTimeout&&(this._bitmapCommitTimeout=window.setTimeout((function(){return t._generateBitmap()}),100)));},t.prototype._generateBitmap=function(){var e=this,t=this._glyphsWaitingOnBitmap;this._glyphsWaitingOnBitmap=[],window.createImageBitmap(this._cacheCanvas).then((function(r){e._bitmap=r;for(var i=0;i<t.length;i++)t[i].inBitmap=!0;})),this._bitmapCommitTimeout=null;},t}(s.BaseCharAtlas);t.DynamicCharAtlas=v;var y=function(e){function t(t,r){return e.call(this)||this}return n(t,e),t.prototype.draw=function(e,t,r,i){return !1},t}(s.BaseCharAtlas);function g(e,t){for(var r=!0,i=t.rgba>>>24,n=t.rgba>>>16&255,o=t.rgba>>>8&255,s=0;s<e.data.length;s+=4)e.data[s]===i&&e.data[s+1]===n&&e.data[s+2]===o?e.data[s+3]=0:r=!1;return r}t.NoneCharAtlas=y;},7001:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LRUMap=void 0;var r=function(){function e(e){this.capacity=e,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0;}return e.prototype._unlinkNode=function(e){var t=e.prev,r=e.next;e===this._head&&(this._head=r),e===this._tail&&(this._tail=t),null!==t&&(t.next=r),null!==r&&(r.prev=t);},e.prototype._appendNode=function(e){var t=this._tail;null!==t&&(t.next=e),e.prev=t,e.next=null,this._tail=e,null===this._head&&(this._head=e);},e.prototype.prealloc=function(e){for(var t=this._nodePool,r=0;r<e;r++)t.push({prev:null,next:null,key:null,value:null});},e.prototype.get=function(e){var t=this._map[e];return void 0!==t?(this._unlinkNode(t),this._appendNode(t),t.value):null},e.prototype.peekValue=function(e){var t=this._map[e];return void 0!==t?t.value:null},e.prototype.peek=function(){var e=this._head;return null===e?null:e.value},e.prototype.set=function(e,t){var r=this._map[e];if(void 0!==r)r=this._map[e],this._unlinkNode(r),r.value=t;else if(this.size>=this.capacity)r=this._head,this._unlinkNode(r),delete this._map[r.key],r.key=e,r.value=t,this._map[e]=r;else {var i=this._nodePool;i.length>0?((r=i.pop()).key=e,r.value=t):r={prev:null,next:null,key:e,value:t},this._map[e]=r,this.size++;}this._appendNode(r);},e}();t.LRUMap=r;},1296:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},a=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRenderer=void 0;var c=r(3787),l=r(8803),h=r(844),u=r(4725),f=r(2585),_=r(8460),d=r(8055),p=r(9631),v="xterm-dom-renderer-owner-",y="xterm-fg-",g="xterm-bg-",m="xterm-focus",b=1,S=function(e){function t(t,r,i,n,o,s,a,l,h,u){var f=e.call(this)||this;return f._colors=t,f._element=r,f._screenElement=i,f._viewportElement=n,f._linkifier=o,f._linkifier2=s,f._charSizeService=l,f._optionsService=h,f._bufferService=u,f._terminalClass=b++,f._rowElements=[],f._rowContainer=document.createElement("div"),f._rowContainer.classList.add("xterm-rows"),f._rowContainer.style.lineHeight="normal",f._rowContainer.setAttribute("aria-hidden","true"),f._refreshRowElements(f._bufferService.cols,f._bufferService.rows),f._selectionContainer=document.createElement("div"),f._selectionContainer.classList.add("xterm-selection"),f._selectionContainer.setAttribute("aria-hidden","true"),f.dimensions={scaledCharWidth:0,scaledCharHeight:0,scaledCellWidth:0,scaledCellHeight:0,scaledCharLeft:0,scaledCharTop:0,scaledCanvasWidth:0,scaledCanvasHeight:0,canvasWidth:0,canvasHeight:0,actualCellWidth:0,actualCellHeight:0},f._updateDimensions(),f._injectCss(),f._rowFactory=a.createInstance(c.DomRendererRowFactory,document,f._colors),f._element.classList.add(v+f._terminalClass),f._screenElement.appendChild(f._rowContainer),f._screenElement.appendChild(f._selectionContainer),f.register(f._linkifier.onShowLinkUnderline((function(e){return f._onLinkHover(e)}))),f.register(f._linkifier.onHideLinkUnderline((function(e){return f._onLinkLeave(e)}))),f.register(f._linkifier2.onShowLinkUnderline((function(e){return f._onLinkHover(e)}))),f.register(f._linkifier2.onHideLinkUnderline((function(e){return f._onLinkLeave(e)}))),f}return n(t,e),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return (new _.EventEmitter).event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._element.classList.remove(v+this._terminalClass),(0, p.removeElementFromParent)(this._rowContainer,this._selectionContainer,this._themeStyleElement,this._dimensionsStyleElement),e.prototype.dispose.call(this);},t.prototype._updateDimensions=function(){var e,t;this.dimensions.scaledCharWidth=this._charSizeService.width*window.devicePixelRatio,this.dimensions.scaledCharHeight=Math.ceil(this._charSizeService.height*window.devicePixelRatio),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._optionsService.rawOptions.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._bufferService.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._bufferService.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._bufferService.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._bufferService.rows;try{for(var r=a(this._rowElements),i=r.next();!i.done;i=r.next()){var n=i.value;n.style.width=this.dimensions.canvasWidth+"px",n.style.height=this.dimensions.actualCellHeight+"px",n.style.lineHeight=this.dimensions.actualCellHeight+"px",n.style.overflow="hidden";}}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));var o=this._terminalSelector+" .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: "+this.dimensions.actualCellWidth+"px}";this._dimensionsStyleElement.textContent=o,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=this.dimensions.canvasWidth+"px",this._screenElement.style.height=this.dimensions.canvasHeight+"px";},t.prototype.setColors=function(e){this._colors=e,this._injectCss();},t.prototype._injectCss=function(){var e=this;this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));var t=this._terminalSelector+" .xterm-rows { color: "+this._colors.foreground.css+"; font-family: "+this._optionsService.rawOptions.fontFamily+"; font-size: "+this._optionsService.rawOptions.fontSize+"px;}";t+=this._terminalSelector+" span:not(."+c.BOLD_CLASS+") { font-weight: "+this._optionsService.rawOptions.fontWeight+";}"+this._terminalSelector+" span."+c.BOLD_CLASS+" { font-weight: "+this._optionsService.rawOptions.fontWeightBold+";}"+this._terminalSelector+" span."+c.ITALIC_CLASS+" { font-style: italic;}",t+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  box-shadow: none; }}",t+="@keyframes blink_block_"+this._terminalClass+" { 0% {  background-color: "+this._colors.cursor.css+";  color: "+this._colors.cursorAccent.css+"; } 50% {  background-color: "+this._colors.cursorAccent.css+";  color: "+this._colors.cursor.css+"; }}",t+=this._terminalSelector+" .xterm-rows:not(.xterm-focus) ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_BLOCK_CLASS+" { outline: 1px solid "+this._colors.cursor.css+"; outline-offset: -1px;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+c.CURSOR_CLASS+"."+c.CURSOR_BLINK_CLASS+":not(."+c.CURSOR_STYLE_BLOCK_CLASS+") { animation: blink_box_shadow_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+c.CURSOR_CLASS+"."+c.CURSOR_BLINK_CLASS+"."+c.CURSOR_STYLE_BLOCK_CLASS+" { animation: blink_block_"+this._terminalClass+" 1s step-end infinite;}"+this._terminalSelector+" .xterm-rows.xterm-focus ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_BLOCK_CLASS+" { background-color: "+this._colors.cursor.css+"; color: "+this._colors.cursorAccent.css+";}"+this._terminalSelector+" .xterm-rows ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_BAR_CLASS+" { box-shadow: "+this._optionsService.rawOptions.cursorWidth+"px 0 0 "+this._colors.cursor.css+" inset;}"+this._terminalSelector+" .xterm-rows ."+c.CURSOR_CLASS+"."+c.CURSOR_STYLE_UNDERLINE_CLASS+" { box-shadow: 0 -1px 0 "+this._colors.cursor.css+" inset;}",t+=this._terminalSelector+" .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}"+this._terminalSelector+" .xterm-selection div { position: absolute; background-color: "+this._colors.selectionOpaque.css+";}",this._colors.ansi.forEach((function(r,i){t+=e._terminalSelector+" ."+y+i+" { color: "+r.css+"; }"+e._terminalSelector+" ."+g+i+" { background-color: "+r.css+"; }";})),t+=this._terminalSelector+" ."+y+l.INVERTED_DEFAULT_COLOR+" { color: "+d.color.opaque(this._colors.background).css+"; }"+this._terminalSelector+" ."+g+l.INVERTED_DEFAULT_COLOR+" { background-color: "+this._colors.foreground.css+"; }",this._themeStyleElement.textContent=t;},t.prototype.onDevicePixelRatioChange=function(){this._updateDimensions();},t.prototype._refreshRowElements=function(e,t){for(var r=this._rowElements.length;r<=t;r++){var i=document.createElement("div");this._rowContainer.appendChild(i),this._rowElements.push(i);}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop());},t.prototype.onResize=function(e,t){this._refreshRowElements(e,t),this._updateDimensions();},t.prototype.onCharSizeChanged=function(){this._updateDimensions();},t.prototype.onBlur=function(){this._rowContainer.classList.remove(m);},t.prototype.onFocus=function(){this._rowContainer.classList.add(m);},t.prototype.onSelectionChanged=function(e,t,r){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(this._rowFactory.onSelectionChanged(e,t,r),this.renderRows(0,this._bufferService.rows-1),e&&t){var i=e[1]-this._bufferService.buffer.ydisp,n=t[1]-this._bufferService.buffer.ydisp,o=Math.max(i,0),s=Math.min(n,this._bufferService.rows-1);if(!(o>=this._bufferService.rows||s<0)){var a=document.createDocumentFragment();if(r){var c=e[0]>t[0];a.appendChild(this._createSelectionElement(o,c?t[0]:e[0],c?e[0]:t[0],s-o+1));}else {var l=i===o?e[0]:0,h=o===n?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,l,h));var u=s-o-1;if(a.appendChild(this._createSelectionElement(o+1,0,this._bufferService.cols,u)),o!==s){var f=n===s?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(s,0,f));}}this._selectionContainer.appendChild(a);}}},t.prototype._createSelectionElement=function(e,t,r,i){void 0===i&&(i=1);var n=document.createElement("div");return n.style.height=i*this.dimensions.actualCellHeight+"px",n.style.top=e*this.dimensions.actualCellHeight+"px",n.style.left=t*this.dimensions.actualCellWidth+"px",n.style.width=this.dimensions.actualCellWidth*(r-t)+"px",n},t.prototype.onCursorMove=function(){},t.prototype.onOptionsChanged=function(){this._updateDimensions(),this._injectCss();},t.prototype.clear=function(){var e,t;try{for(var r=a(this._rowElements),i=r.next();!i.done;i=r.next())i.value.innerText="";}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}},t.prototype.renderRows=function(e,t){for(var r=this._bufferService.buffer.ybase+this._bufferService.buffer.y,i=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),n=this._optionsService.rawOptions.cursorBlink,o=e;o<=t;o++){var s=this._rowElements[o];s.innerText="";var a=o+this._bufferService.buffer.ydisp,c=this._bufferService.buffer.lines.get(a),l=this._optionsService.rawOptions.cursorStyle;s.appendChild(this._rowFactory.createRow(c,a,a===r,l,i,n,this.dimensions.actualCellWidth,this._bufferService.cols));}},Object.defineProperty(t.prototype,"_terminalSelector",{get:function(){return "."+v+this._terminalClass},enumerable:!1,configurable:!0}),t.prototype._onLinkHover=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0);},t.prototype._onLinkLeave=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1);},t.prototype._setCellUnderline=function(e,t,r,i,n,o){for(;e!==t||r!==i;){var s=this._rowElements[r];if(!s)return;var a=s.children[e];a&&(a.style.textDecoration=o?"underline":"none"),++e>=n&&(e=0,r++);}},o([s(6,f.IInstantiationService),s(7,u.ICharSizeService),s(8,f.IOptionsService),s(9,f.IBufferService)],t)}(h.Disposable);t.DomRenderer=S;},3787:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRendererRowFactory=t.CURSOR_STYLE_UNDERLINE_CLASS=t.CURSOR_STYLE_BAR_CLASS=t.CURSOR_STYLE_BLOCK_CLASS=t.CURSOR_BLINK_CLASS=t.CURSOR_CLASS=t.STRIKETHROUGH_CLASS=t.UNDERLINE_CLASS=t.ITALIC_CLASS=t.DIM_CLASS=t.BOLD_CLASS=void 0;var s=r(8803),a=r(643),c=r(511),l=r(2585),h=r(8055),u=r(4725),f=r(4269),_=r(1752);t.BOLD_CLASS="xterm-bold",t.DIM_CLASS="xterm-dim",t.ITALIC_CLASS="xterm-italic",t.UNDERLINE_CLASS="xterm-underline",t.STRIKETHROUGH_CLASS="xterm-strikethrough",t.CURSOR_CLASS="xterm-cursor",t.CURSOR_BLINK_CLASS="xterm-cursor-blink",t.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",t.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",t.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";var d=function(){function e(e,t,r,i,n,o){this._document=e,this._colors=t,this._characterJoinerService=r,this._optionsService=i,this._coreService=n,this._decorationService=o,this._workCell=new c.CellData,this._columnSelectMode=!1;}return e.prototype.setColors=function(e){this._colors=e;},e.prototype.onSelectionChanged=function(e,t,r){this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=r;},e.prototype.createRow=function(e,r,i,n,c,l,u,_){for(var d,v,y=this._document.createDocumentFragment(),g=this._characterJoinerService.getJoinedCharacters(r),m=0,b=Math.min(e.length,_)-1;b>=0;b--)if(e.loadCell(b,this._workCell).getCode()!==a.NULL_CELL_CODE||i&&b===c){m=b+1;break}for(b=0;b<m;b++){e.loadCell(b,this._workCell);var S=this._workCell.getWidth();if(0!==S){var C=!1,w=b,L=this._workCell;if(g.length>0&&b===g[0][0]){C=!0;var E=g.shift();L=new f.JoinedCellData(this._workCell,e.translateToString(!0,E[0],E[1]),E[1]-E[0]),w=E[1]-1,S=L.getWidth();}var x=this._document.createElement("span");if(S>1&&(x.style.width=u*S+"px"),C&&(x.style.display="inline",c>=b&&c<=w&&(c=b)),!this._coreService.isCursorHidden&&i&&b===c)switch(x.classList.add(t.CURSOR_CLASS),l&&x.classList.add(t.CURSOR_BLINK_CLASS),n){case"bar":x.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case"underline":x.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:x.classList.add(t.CURSOR_STYLE_BLOCK_CLASS);}L.isBold()&&x.classList.add(t.BOLD_CLASS),L.isItalic()&&x.classList.add(t.ITALIC_CLASS),L.isDim()&&x.classList.add(t.DIM_CLASS),L.isUnderline()&&x.classList.add(t.UNDERLINE_CLASS),L.isInvisible()?x.textContent=a.WHITESPACE_CELL_CHAR:x.textContent=L.getChars()||a.WHITESPACE_CELL_CHAR,L.isStrikethrough()&&x.classList.add(t.STRIKETHROUGH_CLASS);var R=L.getFgColor(),k=L.getFgColorMode(),M=L.getBgColor(),A=L.getBgColorMode(),O=!!L.isInverse();if(O){var D=R;R=M,M=D;var T=k;k=A,A=T;}var B=void 0,P=void 0,I=!1;try{for(var H=(d=void 0,o(this._decorationService.getDecorationsAtCell(b,r))),j=H.next();!j.done;j=H.next()){var F=j.value;"top"!==F.options.layer&&I||(F.backgroundColorRGB&&(A=50331648,M=F.backgroundColorRGB.rgba>>8&16777215,B=F.backgroundColorRGB),F.foregroundColorRGB&&(k=50331648,R=F.foregroundColorRGB.rgba>>8&16777215,P=F.foregroundColorRGB),I="top"===F.options.layer);}}catch(e){d={error:e};}finally{try{j&&!j.done&&(v=H.return)&&v.call(H);}finally{if(d)throw d.error}}var W=this._isCellInSelection(b,r);I||this._colors.selectionForeground&&W&&(k=50331648,R=this._colors.selectionForeground.rgba>>8&16777215,P=this._colors.selectionForeground),W&&(B=this._colors.selectionOpaque,I=!0),I&&x.classList.add("xterm-decoration-top");var U=void 0;switch(A){case 16777216:case 33554432:U=this._colors.ansi[M],x.classList.add("xterm-bg-"+M);break;case 50331648:U=h.rgba.toColor(M>>16,M>>8&255,255&M),this._addStyle(x,"background-color:#"+p((M>>>0).toString(16),"0",6));break;default:O?(U=this._colors.foreground,x.classList.add("xterm-bg-"+s.INVERTED_DEFAULT_COLOR)):U=this._colors.background;}switch(k){case 16777216:case 33554432:L.isBold()&&R<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&(R+=8),this._applyMinimumContrast(x,U,this._colors.ansi[R],L,B,void 0)||x.classList.add("xterm-fg-"+R);break;case 50331648:var q=h.rgba.toColor(R>>16&255,R>>8&255,255&R);this._applyMinimumContrast(x,U,q,L,B,P)||this._addStyle(x,"color:#"+p(R.toString(16),"0",6));break;default:this._applyMinimumContrast(x,U,this._colors.foreground,L,B,void 0)||O&&x.classList.add("xterm-fg-"+s.INVERTED_DEFAULT_COLOR);}y.appendChild(x),b=w;}}return y},e.prototype._applyMinimumContrast=function(e,t,r,i,n,o){if(1===this._optionsService.rawOptions.minimumContrastRatio||(0, _.excludeFromContrastRatioDemands)(i.getCode()))return !1;var s=void 0;return n||o||(s=this._colors.contrastCache.getColor(t.rgba,r.rgba)),void 0===s&&(s=h.color.ensureContrastRatio(n||t,o||r,this._optionsService.rawOptions.minimumContrastRatio),this._colors.contrastCache.setColor((n||t).rgba,(o||r).rgba,null!=s?s:null)),!!s&&(this._addStyle(e,"color:"+s.css),!0)},e.prototype._addStyle=function(e,t){e.setAttribute("style",""+(e.getAttribute("style")||"")+t+";");},e.prototype._isCellInSelection=function(e,t){var r=this._selectionStart,i=this._selectionEnd;return !(!r||!i)&&(this._columnSelectMode?r[0]<=i[0]?e>=r[0]&&t>=r[1]&&e<i[0]&&t<=i[1]:e<r[0]&&t>=r[1]&&e>=i[0]&&t<=i[1]:t>r[1]&&t<i[1]||r[1]===i[1]&&t===r[1]&&e>=r[0]&&e<i[0]||r[1]<i[1]&&t===i[1]&&e<i[0]||r[1]<i[1]&&t===r[1]&&e>=r[0])},i([n(2,u.ICharacterJoinerService),n(3,l.IOptionsService),n(4,l.ICoreService),n(5,l.IDecorationService)],e)}();function p(e,t,r){for(;e.length<r;)e=t+e;return e}t.DomRendererRowFactory=d;},456:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionModel=void 0;var r=function(){function e(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0;}return e.prototype.clearSelection=function(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0;},Object.defineProperty(e.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"finalSelectionEnd",{get:function(){return this.isSelectAllActive?[this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1]:this.selectionStart?!this.selectionEnd||this.areSelectionValuesReversed()?(e=this.selectionStart[0]+this.selectionStartLength)>this._bufferService.cols?e%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)-1]:[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]:this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?(e=this.selectionStart[0]+this.selectionStartLength)>this._bufferService.cols?[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[Math.max(e,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd:void 0;var e;},enumerable:!1,configurable:!0}),e.prototype.areSelectionValuesReversed=function(){var e=this.selectionStart,t=this.selectionEnd;return !(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])},e.prototype.onTrim=function(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},e}();t.SelectionModel=r;},428:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharSizeService=void 0;var o=r(2585),s=r(8460),a=function(){function e(e,t,r){this._optionsService=r,this.width=0,this.height=0,this._onCharSizeChange=new s.EventEmitter,this._measureStrategy=new c(e,t,this._optionsService);}return Object.defineProperty(e.prototype,"hasValidSize",{get:function(){return this.width>0&&this.height>0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onCharSizeChange",{get:function(){return this._onCharSizeChange.event},enumerable:!1,configurable:!0}),e.prototype.measure=function(){var e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire());},i([n(2,o.IOptionsService)],e)}();t.CharSizeService=a;var c=function(){function e(e,t,r){this._document=e,this._parentElement=t,this._optionsService=r,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W",this._measureElement.setAttribute("aria-hidden","true"),this._parentElement.appendChild(this._measureElement);}return e.prototype.measure=function(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=this._optionsService.rawOptions.fontSize+"px";var e=this._measureElement.getBoundingClientRect();return 0!==e.width&&0!==e.height&&(this._result.width=e.width,this._result.height=Math.ceil(e.height)),this._result},e}();},4269:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterJoinerService=t.JoinedCellData=void 0;var a=r(3734),c=r(643),l=r(511),h=r(2585),u=function(e){function t(t,r,i){var n=e.call(this)||this;return n.content=0,n.combinedData="",n.fg=t.fg,n.bg=t.bg,n.combinedData=r,n._width=i,n}return n(t,e),t.prototype.isCombined=function(){return 2097152},t.prototype.getWidth=function(){return this._width},t.prototype.getChars=function(){return this.combinedData},t.prototype.getCode=function(){return 2097151},t.prototype.setFromCharData=function(e){throw new Error("not implemented")},t.prototype.getAsCharData=function(){return [this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.JoinedCellData=u;var f=function(){function e(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new l.CellData;}return e.prototype.register=function(e){var t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id},e.prototype.deregister=function(e){for(var t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return !1},e.prototype.getJoinedCharacters=function(e){if(0===this._characterJoiners.length)return [];var t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return [];for(var r=[],i=t.translateToString(!0),n=0,o=0,s=0,a=t.getFg(0),l=t.getBg(0),h=0;h<t.getTrimmedLength();h++)if(t.loadCell(h,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==a||this._workCell.bg!==l){if(h-n>1)for(var u=this._getJoinedRanges(i,s,o,t,n),f=0;f<u.length;f++)r.push(u[f]);n=h,s=o,a=this._workCell.fg,l=this._workCell.bg;}o+=this._workCell.getChars().length||c.WHITESPACE_CELL_CHAR.length;}if(this._bufferService.cols-n>1)for(u=this._getJoinedRanges(i,s,o,t,n),f=0;f<u.length;f++)r.push(u[f]);return r},e.prototype._getJoinedRanges=function(t,r,i,n,o){var s=t.substring(r,i),a=[];try{a=this._characterJoiners[0].handler(s);}catch(e){console.error(e);}for(var c=1;c<this._characterJoiners.length;c++)try{for(var l=this._characterJoiners[c].handler(s),h=0;h<l.length;h++)e._mergeRanges(a,l[h]);}catch(e){console.error(e);}return this._stringRangesToCellRanges(a,n,o),a},e.prototype._stringRangesToCellRanges=function(e,t,r){var i=0,n=!1,o=0,s=e[i];if(s){for(var a=r;a<this._bufferService.cols;a++){var l=t.getWidth(a),h=t.getString(a).length||c.WHITESPACE_CELL_CHAR.length;if(0!==l){if(!n&&s[0]<=o&&(s[0]=a,n=!0),s[1]<=o){if(s[1]=a,!(s=e[++i]))break;s[0]<=o?(s[0]=a,n=!0):n=!1;}o+=h;}}s&&(s[1]=this._bufferService.cols);}},e._mergeRanges=function(e,t){for(var r=!1,i=0;i<e.length;i++){var n=e[i];if(r){if(t[1]<=n[0])return e[i-1][1]=t[1],e;if(t[1]<=n[1])return e[i-1][1]=Math.max(t[1],n[1]),e.splice(i,1),e;e.splice(i,1),i--;}else {if(t[1]<=n[0])return e.splice(i,0,t),e;if(t[1]<=n[1])return n[0]=Math.min(t[0],n[0]),e;t[0]<n[1]&&(n[0]=Math.min(t[0],n[0]),r=!0);}}return r?e[e.length-1][1]=t[1]:e.push(t),e},e=o([s(0,h.IBufferService)],e)}();t.CharacterJoinerService=f;},5114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreBrowserService=void 0;var r=function(){function e(e){this._textarea=e;}return Object.defineProperty(e.prototype,"isFocused",{get:function(){return (this._textarea.getRootNode?this._textarea.getRootNode():document).activeElement===this._textarea&&document.hasFocus()},enumerable:!1,configurable:!0}),e}();t.CoreBrowserService=r;},8934:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseService=void 0;var o=r(4725),s=r(9806),a=function(){function e(e,t){this._renderService=e,this._charSizeService=t;}return e.prototype.getCoords=function(e,t,r,i,n){return (0, s.getCoords)(window,e,t,r,i,this._charSizeService.hasValidSize,this._renderService.dimensions.actualCellWidth,this._renderService.dimensions.actualCellHeight,n)},e.prototype.getRawByteCoords=function(e,t,r,i){var n=this.getCoords(e,t,r,i);return (0, s.getRawByteCoords)(n)},i([n(0,o.IRenderService),n(1,o.ICharSizeService)],e)}();t.MouseService=a;},3230:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderService=void 0;var a=r(6193),c=r(8460),l=r(844),h=r(5596),u=r(3656),f=r(2585),_=r(4725),d=function(e){function t(t,r,i,n,o,s,l){var f=e.call(this)||this;if(f._renderer=t,f._rowCount=r,f._charSizeService=o,f._isPaused=!1,f._needsFullRefresh=!1,f._isNextRenderRedrawOnly=!0,f._needsSelectionRefresh=!1,f._canvasWidth=0,f._canvasHeight=0,f._selectionState={start:void 0,end:void 0,columnSelectMode:!1},f._onDimensionsChange=new c.EventEmitter,f._onRenderedViewportChange=new c.EventEmitter,f._onRender=new c.EventEmitter,f._onRefreshRequest=new c.EventEmitter,f.register({dispose:function(){return f._renderer.dispose()}}),f._renderDebouncer=new a.RenderDebouncer((function(e,t){return f._renderRows(e,t)})),f.register(f._renderDebouncer),f._screenDprMonitor=new h.ScreenDprMonitor,f._screenDprMonitor.setListener((function(){return f.onDevicePixelRatioChange()})),f.register(f._screenDprMonitor),f.register(l.onResize((function(){return f._fullRefresh()}))),f.register(l.buffers.onBufferActivate((function(){var e;return null===(e=f._renderer)||void 0===e?void 0:e.clear()}))),f.register(n.onOptionChange((function(){return f._handleOptionsChanged()}))),f.register(f._charSizeService.onCharSizeChange((function(){return f.onCharSizeChanged()}))),f.register(s.onDecorationRegistered((function(){return f._fullRefresh()}))),f.register(s.onDecorationRemoved((function(){return f._fullRefresh()}))),f._renderer.onRequestRedraw((function(e){return f.refreshRows(e.start,e.end,!0)})),f.register((0, u.addDisposableDomListener)(window,"resize",(function(){return f.onDevicePixelRatioChange()}))),"IntersectionObserver"in window){var _=new IntersectionObserver((function(e){return f._onIntersectionChange(e[e.length-1])}),{threshold:0});_.observe(i),f.register({dispose:function(){return _.disconnect()}});}return f}return n(t,e),Object.defineProperty(t.prototype,"onDimensionsChange",{get:function(){return this._onDimensionsChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRenderedViewportChange",{get:function(){return this._onRenderedViewportChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRender",{get:function(){return this._onRender.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRefreshRequest",{get:function(){return this._onRefreshRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dimensions",{get:function(){return this._renderer.dimensions},enumerable:!1,configurable:!0}),t.prototype._onIntersectionChange=function(e){this._isPaused=void 0===e.isIntersecting?0===e.intersectionRatio:!e.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1);},t.prototype.refreshRows=function(e,t,r){void 0===r&&(r=!1),this._isPaused?this._needsFullRefresh=!0:(r||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount));},t.prototype._renderRows=function(e,t){this._renderer.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.onSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRenderedViewportChange.fire({start:e,end:t}),this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0;},t.prototype.resize=function(e,t){this._rowCount=t,this._fireOnCanvasResize();},t.prototype._handleOptionsChanged=function(){this._renderer.onOptionsChanged(),this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize();},t.prototype._fireOnCanvasResize=function(){this._renderer.dimensions.canvasWidth===this._canvasWidth&&this._renderer.dimensions.canvasHeight===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.dimensions);},t.prototype.dispose=function(){e.prototype.dispose.call(this);},t.prototype.setRenderer=function(e){var t=this;this._renderer.dispose(),this._renderer=e,this._renderer.onRequestRedraw((function(e){return t.refreshRows(e.start,e.end,!0)})),this._needsSelectionRefresh=!0,this._fullRefresh();},t.prototype.addRefreshCallback=function(e){return this._renderDebouncer.addRefreshCallback(e)},t.prototype._fullRefresh=function(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1);},t.prototype.clearTextureAtlas=function(){var e,t;null===(t=null===(e=this._renderer)||void 0===e?void 0:e.clearTextureAtlas)||void 0===t||t.call(e),this._fullRefresh();},t.prototype.setColors=function(e){this._renderer.setColors(e),this._fullRefresh();},t.prototype.onDevicePixelRatioChange=function(){this._charSizeService.measure(),this._renderer.onDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1);},t.prototype.onResize=function(e,t){this._renderer.onResize(e,t),this._fullRefresh();},t.prototype.onCharSizeChanged=function(){this._renderer.onCharSizeChanged();},t.prototype.onBlur=function(){this._renderer.onBlur();},t.prototype.onFocus=function(){this._renderer.onFocus();},t.prototype.onSelectionChanged=function(e,t,r){this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=r,this._renderer.onSelectionChanged(e,t,r);},t.prototype.onCursorMove=function(){this._renderer.onCursorMove();},t.prototype.clear=function(){this._renderer.clear();},o([s(3,f.IOptionsService),s(4,_.ICharSizeService),s(5,f.IDecorationService),s(6,f.IBufferService)],t)}(l.Disposable);t.RenderService=d;},9312:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionService=void 0;var a=r(6114),c=r(456),l=r(511),h=r(8460),u=r(4725),f=r(2585),_=r(9806),d=r(9504),p=r(844),v=r(4841),y=String.fromCharCode(160),g=new RegExp(y,"g"),m=function(e){function t(t,r,i,n,o,s,a,u){var f=e.call(this)||this;return f._element=t,f._screenElement=r,f._linkifier=i,f._bufferService=n,f._coreService=o,f._mouseService=s,f._optionsService=a,f._renderService=u,f._dragScrollAmount=0,f._enabled=!0,f._workCell=new l.CellData,f._mouseDownTimeStamp=0,f._oldHasSelection=!1,f._oldSelectionStart=void 0,f._oldSelectionEnd=void 0,f._onLinuxMouseSelection=f.register(new h.EventEmitter),f._onRedrawRequest=f.register(new h.EventEmitter),f._onSelectionChange=f.register(new h.EventEmitter),f._onRequestScrollLines=f.register(new h.EventEmitter),f._mouseMoveListener=function(e){return f._onMouseMove(e)},f._mouseUpListener=function(e){return f._onMouseUp(e)},f._coreService.onUserInput((function(){f.hasSelection&&f.clearSelection();})),f._trimListener=f._bufferService.buffer.lines.onTrim((function(e){return f._onTrim(e)})),f.register(f._bufferService.buffers.onBufferActivate((function(e){return f._onBufferActivate(e)}))),f.enable(),f._model=new c.SelectionModel(f._bufferService),f._activeSelectionMode=0,f}return n(t,e),Object.defineProperty(t.prototype,"onLinuxMouseSelection",{get:function(){return this._onLinuxMouseSelection.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRedraw",{get:function(){return this._onRedrawRequest.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onSelectionChange",{get:function(){return this._onSelectionChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestScrollLines",{get:function(){return this._onRequestScrollLines.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._removeMouseDownListeners();},t.prototype.reset=function(){this.clearSelection();},t.prototype.disable=function(){this.clearSelection(),this._enabled=!1;},t.prototype.enable=function(){this._enabled=!0;},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasSelection",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return !(!e||!t||e[0]===t[0]&&e[1]===t[1])},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"selectionText",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return "";var r=this._bufferService.buffer,i=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return "";for(var n=e[0]<t[0]?e[0]:t[0],o=e[0]<t[0]?t[0]:e[0],s=e[1];s<=t[1];s++){var c=r.translateBufferLineToString(s,!0,n,o);i.push(c);}}else {var l=e[1]===t[1]?t[0]:void 0;for(i.push(r.translateBufferLineToString(e[1],!0,e[0],l)),s=e[1]+1;s<=t[1]-1;s++){var h=r.lines.get(s);c=r.translateBufferLineToString(s,!0),(null==h?void 0:h.isWrapped)?i[i.length-1]+=c:i.push(c);}e[1]!==t[1]&&(h=r.lines.get(t[1]),c=r.translateBufferLineToString(t[1],!0,0,t[0]),h&&h.isWrapped?i[i.length-1]+=c:i.push(c));}return i.map((function(e){return e.replace(g," ")})).join(a.isWindows?"\r\n":"\n")},enumerable:!1,configurable:!0}),t.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire();},t.prototype.refresh=function(e){var t=this;this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame((function(){return t._refresh()}))),a.isLinux&&e&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText);},t.prototype._refresh=function(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode});},t.prototype._isClickInSelection=function(e){var t=this._getMouseBufferCoords(e),r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return !!(r&&i&&t)&&this._areCoordsInSelection(t,r,i)},t.prototype.isCellInSelection=function(e,t){var r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return !(!r||!i)&&this._areCoordsInSelection([e,t],r,i)},t.prototype._areCoordsInSelection=function(e,t,r){return e[1]>t[1]&&e[1]<r[1]||t[1]===r[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<r[0]||t[1]<r[1]&&e[1]===r[1]&&e[0]<r[0]||t[1]<r[1]&&e[1]===t[1]&&e[0]>=t[0]},t.prototype._selectWordAtCursor=function(e,t){var r,i,n=null===(i=null===(r=this._linkifier.currentLink)||void 0===r?void 0:r.link)||void 0===i?void 0:i.range;if(n)return this._model.selectionStart=[n.start.x-1,n.start.y-1],this._model.selectionStartLength=(0, v.getRangeLength)(n,this._bufferService.cols),this._model.selectionEnd=void 0,!0;var o=this._getMouseBufferCoords(e);return !!o&&(this._selectWordAt(o,t),this._model.selectionEnd=void 0,!0)},t.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire();},t.prototype.selectLines=function(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire();},t.prototype._onTrim=function(e){this._model.onTrim(e)&&this.refresh();},t.prototype._getMouseBufferCoords=function(e){var t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t},t.prototype._getMouseEventScrollAmount=function(e){var t=(0, _.getCoordsRelativeToElement)(window,e,this._screenElement)[1],r=this._renderService.dimensions.canvasHeight;return t>=0&&t<=r?0:(t>r&&(t-=r),t=Math.min(Math.max(t,-50),50),(t/=50)/Math.abs(t)+Math.round(14*t))},t.prototype.shouldForceSelection=function(e){return a.isMac?e.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:e.shiftKey},t.prototype.onMouseDown=function(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation();}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._onIncrementalClick(e):1===e.detail?this._onSingleClick(e):2===e.detail?this._onDoubleClick(e):3===e.detail&&this._onTripleClick(e),this._addMouseDownListeners(),this.refresh(!0);}},t.prototype._addMouseDownListeners=function(){var e=this;this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=window.setInterval((function(){return e._dragScroll()}),50);},t.prototype._removeMouseDownListeners=function(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0;},t.prototype._onIncrementalClick=function(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e));},t.prototype._onSingleClick=function(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),this._model.selectionStart){this._model.selectionEnd=void 0;var t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++;}},t.prototype._onDoubleClick=function(e){this._selectWordAtCursor(e,!0)&&(this._activeSelectionMode=1);},t.prototype._onTripleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]));},t.prototype.shouldColumnSelect=function(e){return e.altKey&&!(a.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)},t.prototype._onMouseMove=function(e){if(e.stopImmediatePropagation(),this._model.selectionStart){var t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),this._model.selectionEnd){2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));var r=this._bufferService.buffer;if(this._model.selectionEnd[1]<r.lines.length){var i=r.lines.get(this._model.selectionEnd[1]);i&&0===i.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++;}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0);}else this.refresh(!0);}},t.prototype._dragScroll=function(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});var e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh();}},t.prototype._onMouseUp=function(e){var t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey&&this._optionsService.getOption("altClickMovesCursor")){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){var r=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(r&&void 0!==r[0]&&void 0!==r[1]){var i=(0, d.moveToCellSequence)(r[0]-1,r[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(i,!0);}}}else this._fireEventIfSelectionChanged();},t.prototype._fireEventIfSelectionChanged=function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd,r=!(!e||!t||e[0]===t[0]&&e[1]===t[1]);r?e&&t&&(this._oldSelectionStart&&this._oldSelectionEnd&&e[0]===this._oldSelectionStart[0]&&e[1]===this._oldSelectionStart[1]&&t[0]===this._oldSelectionEnd[0]&&t[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(e,t,r)):this._oldHasSelection&&this._fireOnSelectionChange(e,t,r);},t.prototype._fireOnSelectionChange=function(e,t,r){this._oldSelectionStart=e,this._oldSelectionEnd=t,this._oldHasSelection=r,this._onSelectionChange.fire();},t.prototype._onBufferActivate=function(e){var t=this;this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((function(e){return t._onTrim(e)}));},t.prototype._convertViewportColToCharacterIndex=function(e,t){for(var r=t[0],i=0;t[0]>=i;i++){var n=e.loadCell(i,this._workCell).getChars().length;0===this._workCell.getWidth()?r--:n>1&&t[0]!==i&&(r+=n-1);}return r},t.prototype.setSelection=function(e,t,r){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=r,this.refresh(),this._fireEventIfSelectionChanged();},t.prototype.rightClickSelect=function(e){this._isClickInSelection(e)||(this._selectWordAtCursor(e,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged());},t.prototype._getWordAt=function(e,t,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=!0),!(e[0]>=this._bufferService.cols)){var n=this._bufferService.buffer,o=n.lines.get(e[1]);if(o){var s=n.translateBufferLineToString(e[1],!1),a=this._convertViewportColToCharacterIndex(o,e),c=a,l=e[0]-a,h=0,u=0,f=0,_=0;if(" "===s.charAt(a)){for(;a>0&&" "===s.charAt(a-1);)a--;for(;c<s.length&&" "===s.charAt(c+1);)c++;}else {var d=e[0],p=e[0];0===o.getWidth(d)&&(h++,d--),2===o.getWidth(p)&&(u++,p++);var v=o.getString(p).length;for(v>1&&(_+=v-1,c+=v-1);d>0&&a>0&&!this._isCharWordSeparator(o.loadCell(d-1,this._workCell));){o.loadCell(d-1,this._workCell);var y=this._workCell.getChars().length;0===this._workCell.getWidth()?(h++,d--):y>1&&(f+=y-1,a-=y-1),a--,d--;}for(;p<o.length&&c+1<s.length&&!this._isCharWordSeparator(o.loadCell(p+1,this._workCell));){o.loadCell(p+1,this._workCell);var g=this._workCell.getChars().length;2===this._workCell.getWidth()?(u++,p++):g>1&&(_+=g-1,c+=g-1),c++,p++;}}c++;var m=a+l-h+f,b=Math.min(this._bufferService.cols,c-a+h+u-f-_);if(t||""!==s.slice(a,c).trim()){if(r&&0===m&&32!==o.getCodePoint(0)){var S=n.lines.get(e[1]-1);if(S&&o.isWrapped&&32!==S.getCodePoint(this._bufferService.cols-1)){var C=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(C){var w=this._bufferService.cols-C.start;m-=w,b+=w;}}}if(i&&m+b===this._bufferService.cols&&32!==o.getCodePoint(this._bufferService.cols-1)){var L=n.lines.get(e[1]+1);if((null==L?void 0:L.isWrapped)&&32!==L.getCodePoint(0)){var E=this._getWordAt([0,e[1]+1],!1,!1,!0);E&&(b+=E.length);}}return {start:m,length:b}}}}},t.prototype._selectWordAt=function(e,t){var r=this._getWordAt(e,t);if(r){for(;r.start<0;)r.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[r.start,e[1]],this._model.selectionStartLength=r.length;}},t.prototype._selectToWordAt=function(e){var t=this._getWordAt(e,!0);if(t){for(var r=e[1];t.start<0;)t.start+=this._bufferService.cols,r--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,r++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,r];}},t.prototype._isCharWordSeparator=function(e){return 0!==e.getWidth()&&this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars())>=0},t.prototype._selectLineAt=function(e){var t=this._bufferService.buffer.getWrappedRangeForLine(e),r={start:{x:0,y:t.first},end:{x:this._bufferService.cols-1,y:t.last}};this._model.selectionStart=[0,t.first],this._model.selectionEnd=void 0,this._model.selectionStartLength=(0, v.getRangeLength)(r,this._bufferService.cols);},o([s(3,f.IBufferService),s(4,f.ICoreService),s(5,u.IMouseService),s(6,f.IOptionsService),s(7,u.IRenderService)],t)}(p.Disposable);t.SelectionService=m;},4725:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ICharacterJoinerService=t.ISoundService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;var i=r(8343);t.ICharSizeService=(0, i.createDecorator)("CharSizeService"),t.ICoreBrowserService=(0, i.createDecorator)("CoreBrowserService"),t.IMouseService=(0, i.createDecorator)("MouseService"),t.IRenderService=(0, i.createDecorator)("RenderService"),t.ISelectionService=(0, i.createDecorator)("SelectionService"),t.ISoundService=(0, i.createDecorator)("SoundService"),t.ICharacterJoinerService=(0, i.createDecorator)("CharacterJoinerService");},357:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.SoundService=void 0;var o=r(2585),s=function(){function e(e){this._optionsService=e;}return Object.defineProperty(e,"audioContext",{get:function(){if(!e._audioContext){var t=window.AudioContext||window.webkitAudioContext;if(!t)return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"),null;e._audioContext=new t;}return e._audioContext},enumerable:!1,configurable:!0}),e.prototype.playBellSound=function(){var t=e.audioContext;if(t){var r=t.createBufferSource();t.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)),(function(e){r.buffer=e,r.connect(t.destination),r.start(0);}));}},e.prototype._base64ToArrayBuffer=function(e){for(var t=window.atob(e),r=t.length,i=new Uint8Array(r),n=0;n<r;n++)i[n]=t.charCodeAt(n);return i.buffer},e.prototype._removeMimeType=function(e){return e.split(",")[1]},e=i([n(0,o.IOptionsService)],e)}();t.SoundService=s;},6349:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CircularList=void 0;var i=r(8460),n=function(){function e(e){this._maxLength=e,this.onDeleteEmitter=new i.EventEmitter,this.onInsertEmitter=new i.EventEmitter,this.onTrimEmitter=new i.EventEmitter,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0;}return Object.defineProperty(e.prototype,"onDelete",{get:function(){return this.onDeleteEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onInsert",{get:function(){return this.onInsertEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"onTrim",{get:function(){return this.onTrimEmitter.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this._maxLength},set:function(e){if(this._maxLength!==e){for(var t=new Array(e),r=0;r<Math.min(e,this.length);r++)t[r]=this._array[this._getCyclicIndex(r)];this._array=t,this._maxLength=e,this._startIndex=0;}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},set:function(e){if(e>this._length)for(var t=this._length;t<e;t++)this._array[t]=void 0;this._length=e;},enumerable:!1,configurable:!0}),e.prototype.get=function(e){return this._array[this._getCyclicIndex(e)]},e.prototype.set=function(e,t){this._array[this._getCyclicIndex(e)]=t;},e.prototype.push=function(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++;},e.prototype.recycle=function(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]},Object.defineProperty(e.prototype,"isFull",{get:function(){return this._length===this._maxLength},enumerable:!1,configurable:!0}),e.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},e.prototype.splice=function(e,t){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];if(t){for(var n=e;n<this._length-t;n++)this._array[this._getCyclicIndex(n)]=this._array[this._getCyclicIndex(n+t)];this._length-=t,this.onDeleteEmitter.fire({index:e,amount:t});}for(n=this._length-1;n>=e;n--)this._array[this._getCyclicIndex(n+r.length)]=this._array[this._getCyclicIndex(n)];for(n=0;n<r.length;n++)this._array[this._getCyclicIndex(e+n)]=r[n];if(r.length&&this.onInsertEmitter.fire({index:e,amount:r.length}),this._length+r.length>this._maxLength){var o=this._length+r.length-this._maxLength;this._startIndex+=o,this._length=this._maxLength,this.onTrimEmitter.fire(o);}else this._length+=r.length;},e.prototype.trimStart=function(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e);},e.prototype.shiftElements=function(e,t,r){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+r<0)throw new Error("Cannot shift elements in list beyond index 0");if(r>0){for(var i=t-1;i>=0;i--)this.set(e+i+r,this.get(e+i));var n=e+t+r-this._length;if(n>0)for(this._length+=n;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1);}else for(i=0;i<t;i++)this.set(e+i+r,this.get(e+i));}},e.prototype._getCyclicIndex=function(e){return (this._startIndex+e)%this._maxLength},e}();t.CircularList=n;},1439:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function e(t,r){if(void 0===r&&(r=5),"object"!=typeof t)return t;var i=Array.isArray(t)?[]:{};for(var n in t)i[n]=r<=1?t[n]:t[n]&&e(t[n],r-1);return i};},8055:function(e,t){var r,i,n,o,s=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s};function a(e){var t=e.toString(16);return t.length<2?"0"+t:t}function c(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}Object.defineProperty(t,"__esModule",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=void 0,function(e){e.toCss=function(e,t,r,i){return void 0!==i?"#"+a(e)+a(t)+a(r)+a(i):"#"+a(e)+a(t)+a(r)},e.toRgba=function(e,t,r,i){return void 0===i&&(i=255),(e<<24|t<<16|r<<8|i)>>>0};}(r=t.channels||(t.channels={})),(i=t.color||(t.color={})).blend=function(e,t){var i=(255&t.rgba)/255;if(1===i)return {css:t.css,rgba:t.rgba};var n=t.rgba>>24&255,o=t.rgba>>16&255,s=t.rgba>>8&255,a=e.rgba>>24&255,c=e.rgba>>16&255,l=e.rgba>>8&255,h=a+Math.round((n-a)*i),u=c+Math.round((o-c)*i),f=l+Math.round((s-l)*i);return {css:r.toCss(h,u,f),rgba:r.toRgba(h,u,f)}},i.isOpaque=function(e){return 255==(255&e.rgba)},i.ensureContrastRatio=function(e,t,r){var i=o.ensureContrastRatio(e.rgba,t.rgba,r);if(i)return o.toColor(i>>24&255,i>>16&255,i>>8&255)},i.opaque=function(e){var t=(255|e.rgba)>>>0,i=s(o.toChannels(t),3),n=i[0],a=i[1],c=i[2];return {css:r.toCss(n,a,c),rgba:t}},i.opacity=function(e,t){var i=Math.round(255*t),n=s(o.toChannels(e.rgba),3),a=n[0],c=n[1],l=n[2];return {css:r.toCss(a,c,l,i),rgba:r.toRgba(a,c,l,i)}},i.toColorRGB=function(e){return [e.rgba>>24&255,e.rgba>>16&255,e.rgba>>8&255]},(t.css||(t.css={})).toColor=function(e){if(e.match(/#[0-9a-f]{3,8}/i))switch(e.length){case 4:var t=parseInt(e.slice(1,2).repeat(2),16),r=parseInt(e.slice(2,3).repeat(2),16),i=parseInt(e.slice(3,4).repeat(2),16);return o.toColor(t,r,i);case 5:t=parseInt(e.slice(1,2).repeat(2),16),r=parseInt(e.slice(2,3).repeat(2),16),i=parseInt(e.slice(3,4).repeat(2),16);var n=parseInt(e.slice(4,5).repeat(2),16);return o.toColor(t,r,i,n);case 7:return {css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return {css:e,rgba:parseInt(e.slice(1),16)>>>0}}var s=e.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);if(s)return t=parseInt(s[1]),r=parseInt(s[2]),i=parseInt(s[3]),n=Math.round(255*(void 0===s[5]?1:parseFloat(s[5]))),o.toColor(t,r,i,n);throw new Error("css.toColor: Unsupported css format")},function(e){function t(e,t,r){var i=e/255,n=t/255,o=r/255;return .2126*(i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t;}(n=t.rgb||(t.rgb={})),function(e){function t(e,t,r){for(var i=e>>24&255,o=e>>16&255,s=e>>8&255,a=t>>24&255,l=t>>16&255,h=t>>8&255,u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));u<r&&(a>0||l>0||h>0);)a-=Math.max(0,Math.ceil(.1*a)),l-=Math.max(0,Math.ceil(.1*l)),h-=Math.max(0,Math.ceil(.1*h)),u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));return (a<<24|l<<16|h<<8|255)>>>0}function i(e,t,r){for(var i=e>>24&255,o=e>>16&255,s=e>>8&255,a=t>>24&255,l=t>>16&255,h=t>>8&255,u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));u<r&&(a<255||l<255||h<255);)a=Math.min(255,a+Math.ceil(.1*(255-a))),l=Math.min(255,l+Math.ceil(.1*(255-l))),h=Math.min(255,h+Math.ceil(.1*(255-h))),u=c(n.relativeLuminance2(a,l,h),n.relativeLuminance2(i,o,s));return (a<<24|l<<16|h<<8|255)>>>0}e.ensureContrastRatio=function(e,r,o){var s=n.relativeLuminance(e>>8),a=n.relativeLuminance(r>>8);if(c(s,a)<o){if(a<s){var l=t(e,r,o),h=c(s,n.relativeLuminance(l>>8));if(h<o){var u=i(e,e,o);return h>c(s,n.relativeLuminance(u>>8))?l:u}return l}var f=i(e,r,o),_=c(s,n.relativeLuminance(f>>8));return _<o?(u=t(e,e,o),_>c(s,n.relativeLuminance(u>>8))?f:u):f}},e.reduceLuminance=t,e.increaseLuminance=i,e.toChannels=function(e){return [e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,i,n){return {css:r.toCss(e,t,i,n),rgba:r.toRgba(e,t,i,n)}};}(o=t.rgba||(t.rgba={})),t.toPaddedHex=a,t.contrastRatio=c;},8969:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreTerminal=void 0;var s=r(844),a=r(2585),c=r(4348),l=r(7866),h=r(744),u=r(7302),f=r(6975),_=r(8460),d=r(1753),p=r(3730),v=r(1480),y=r(7994),g=r(9282),m=r(5435),b=r(5981),S=!1,C=function(e){function t(t){var r=e.call(this)||this;return r._onBinary=new _.EventEmitter,r._onData=new _.EventEmitter,r._onLineFeed=new _.EventEmitter,r._onResize=new _.EventEmitter,r._onScroll=new _.EventEmitter,r._onWriteParsed=new _.EventEmitter,r._instantiationService=new c.InstantiationService,r.optionsService=new u.OptionsService(t),r._instantiationService.setService(a.IOptionsService,r.optionsService),r._bufferService=r.register(r._instantiationService.createInstance(h.BufferService)),r._instantiationService.setService(a.IBufferService,r._bufferService),r._logService=r._instantiationService.createInstance(l.LogService),r._instantiationService.setService(a.ILogService,r._logService),r.coreService=r.register(r._instantiationService.createInstance(f.CoreService,(function(){return r.scrollToBottom()}))),r._instantiationService.setService(a.ICoreService,r.coreService),r.coreMouseService=r._instantiationService.createInstance(d.CoreMouseService),r._instantiationService.setService(a.ICoreMouseService,r.coreMouseService),r._dirtyRowService=r._instantiationService.createInstance(p.DirtyRowService),r._instantiationService.setService(a.IDirtyRowService,r._dirtyRowService),r.unicodeService=r._instantiationService.createInstance(v.UnicodeService),r._instantiationService.setService(a.IUnicodeService,r.unicodeService),r._charsetService=r._instantiationService.createInstance(y.CharsetService),r._instantiationService.setService(a.ICharsetService,r._charsetService),r._inputHandler=new m.InputHandler(r._bufferService,r._charsetService,r.coreService,r._dirtyRowService,r._logService,r.optionsService,r.coreMouseService,r.unicodeService),r.register((0, _.forwardEvent)(r._inputHandler.onLineFeed,r._onLineFeed)),r.register(r._inputHandler),r.register((0, _.forwardEvent)(r._bufferService.onResize,r._onResize)),r.register((0, _.forwardEvent)(r.coreService.onData,r._onData)),r.register((0, _.forwardEvent)(r.coreService.onBinary,r._onBinary)),r.register(r.optionsService.onOptionChange((function(e){return r._updateOptions(e)}))),r.register(r._bufferService.onScroll((function(e){r._onScroll.fire({position:r._bufferService.buffer.ydisp,source:0}),r._dirtyRowService.markRangeDirty(r._bufferService.buffer.scrollTop,r._bufferService.buffer.scrollBottom);}))),r.register(r._inputHandler.onScroll((function(e){r._onScroll.fire({position:r._bufferService.buffer.ydisp,source:0}),r._dirtyRowService.markRangeDirty(r._bufferService.buffer.scrollTop,r._bufferService.buffer.scrollBottom);}))),r._writeBuffer=new b.WriteBuffer((function(e,t){return r._inputHandler.parse(e,t)})),r.register((0, _.forwardEvent)(r._writeBuffer.onWriteParsed,r._onWriteParsed)),r}return n(t,e),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onWriteParsed",{get:function(){return this._onWriteParsed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){var e=this;return this._onScrollApi||(this._onScrollApi=new _.EventEmitter,this.register(this._onScroll.event((function(t){var r;null===(r=e._onScrollApi)||void 0===r||r.fire(t.position);})))),this._onScrollApi.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"cols",{get:function(){return this._bufferService.cols},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rows",{get:function(){return this._bufferService.rows},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buffers",{get:function(){return this._bufferService.buffers},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.optionsService.options},set:function(e){for(var t in e)this.optionsService.options[t]=e[t];},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t;this._isDisposed||(e.prototype.dispose.call(this),null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0);},t.prototype.write=function(e,t){this._writeBuffer.write(e,t);},t.prototype.writeSync=function(e,t){this._logService.logLevel<=a.LogLevelEnum.WARN&&!S&&(this._logService.warn("writeSync is unreliable and will be removed soon."),S=!0),this._writeBuffer.writeSync(e,t);},t.prototype.resize=function(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,h.MINIMUM_COLS),t=Math.max(t,h.MINIMUM_ROWS),this._bufferService.resize(e,t));},t.prototype.scroll=function(e,t){void 0===t&&(t=!1),this._bufferService.scroll(e,t);},t.prototype.scrollLines=function(e,t,r){this._bufferService.scrollLines(e,t,r);},t.prototype.scrollPages=function(e){this._bufferService.scrollPages(e);},t.prototype.scrollToTop=function(){this._bufferService.scrollToTop();},t.prototype.scrollToBottom=function(){this._bufferService.scrollToBottom();},t.prototype.scrollToLine=function(e){this._bufferService.scrollToLine(e);},t.prototype.registerEscHandler=function(e,t){return this._inputHandler.registerEscHandler(e,t)},t.prototype.registerDcsHandler=function(e,t){return this._inputHandler.registerDcsHandler(e,t)},t.prototype.registerCsiHandler=function(e,t){return this._inputHandler.registerCsiHandler(e,t)},t.prototype.registerOscHandler=function(e,t){return this._inputHandler.registerOscHandler(e,t)},t.prototype._setup=function(){this.optionsService.rawOptions.windowsMode&&this._enableWindowsMode();},t.prototype.reset=function(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset();},t.prototype._updateOptions=function(e){var t;switch(e){case"scrollback":this.buffers.resize(this.cols,this.rows);break;case"windowsMode":this.optionsService.rawOptions.windowsMode?this._enableWindowsMode():(null===(t=this._windowsMode)||void 0===t||t.dispose(),this._windowsMode=void 0);}},t.prototype._enableWindowsMode=function(){var e=this;if(!this._windowsMode){var t=[];t.push(this.onLineFeed(g.updateWindowsModeWrappedState.bind(null,this._bufferService))),t.push(this.registerCsiHandler({final:"H"},(function(){return (0, g.updateWindowsModeWrappedState)(e._bufferService),!1}))),this._windowsMode={dispose:function(){var e,r;try{for(var i=o(t),n=i.next();!n.done;n=i.next())n.value.dispose();}catch(t){e={error:t};}finally{try{n&&!n.done&&(r=i.return)&&r.call(i);}finally{if(e)throw e.error}}}};}},t}(s.Disposable);t.CoreTerminal=C;},8460:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forwardEvent=t.EventEmitter=void 0;var r=function(){function e(){this._listeners=[],this._disposed=!1;}return Object.defineProperty(e.prototype,"event",{get:function(){var e=this;return this._event||(this._event=function(t){return e._listeners.push(t),{dispose:function(){if(!e._disposed)for(var r=0;r<e._listeners.length;r++)if(e._listeners[r]===t)return void e._listeners.splice(r,1)}}}),this._event},enumerable:!1,configurable:!0}),e.prototype.fire=function(e,t){for(var r=[],i=0;i<this._listeners.length;i++)r.push(this._listeners[i]);for(i=0;i<r.length;i++)r[i].call(void 0,e,t);},e.prototype.dispose=function(){this._listeners&&(this._listeners.length=0),this._disposed=!0;},e}();t.EventEmitter=r,t.forwardEvent=function(e,t){return e((function(e){return t.fire(e)}))};},5435:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;var o,s=r(2584),a=r(7116),c=r(2015),l=r(844),h=r(8273),u=r(482),f=r(8437),_=r(8460),d=r(643),p=r(511),v=r(3734),y=r(2585),g=r(6242),m=r(6351),b=r(5941),S={"(":0,")":1,"*":2,"+":3,"-":1,".":2},C=131072;function w(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return !!t.restoreWin;case 2:return !!t.minimizeWin;case 3:return !!t.setWinPosition;case 4:return !!t.setWinSizePixels;case 5:return !!t.raiseWin;case 6:return !!t.lowerWin;case 7:return !!t.refreshWin;case 8:return !!t.setWinSizeChars;case 9:return !!t.maximizeWin;case 10:return !!t.fullscreenWin;case 11:return !!t.getWinState;case 13:return !!t.getWinPosition;case 14:return !!t.getWinSizePixels;case 15:return !!t.getScreenSizePixels;case 16:return !!t.getCellSizePixels;case 18:return !!t.getWinSizeChars;case 19:return !!t.getScreenSizeChars;case 20:return !!t.getIconTitle;case 21:return !!t.getWinTitle;case 22:return !!t.pushTitle;case 23:return !!t.popTitle;case 24:return !!t.setWinLines}return !1}!function(e){e[e.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",e[e.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS";}(o=t.WindowsOptionsReportType||(t.WindowsOptionsReportType={}));var L=function(){function e(e,t,r,i){this._bufferService=e,this._coreService=t,this._logService=r,this._optionsService=i,this._data=new Uint32Array(0);}return e.prototype.hook=function(e){this._data=new Uint32Array(0);},e.prototype.put=function(e,t,r){this._data=(0, h.concat)(this._data,e.subarray(t,r));},e.prototype.unhook=function(e){if(!e)return this._data=new Uint32Array(0),!0;var t=(0, u.utf32ToString)(this._data);switch(this._data=new Uint32Array(0),t){case'"q':this._coreService.triggerDataEvent(s.C0.ESC+'P1$r0"q'+s.C0.ESC+"\\");break;case'"p':this._coreService.triggerDataEvent(s.C0.ESC+'P1$r61;1"p'+s.C0.ESC+"\\");break;case"r":var r=this._bufferService.buffer.scrollTop+1+";"+(this._bufferService.buffer.scrollBottom+1)+"r";this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+r+s.C0.ESC+"\\");break;case"m":this._coreService.triggerDataEvent(s.C0.ESC+"P1$r0m"+s.C0.ESC+"\\");break;case" q":var i={block:2,underline:4,bar:6}[this._optionsService.rawOptions.cursorStyle];i-=this._optionsService.rawOptions.cursorBlink?1:0,this._coreService.triggerDataEvent(s.C0.ESC+"P1$r"+i+" q"+s.C0.ESC+"\\");break;default:this._logService.debug("Unknown DCS $q %s",t),this._coreService.triggerDataEvent(s.C0.ESC+"P0$r"+s.C0.ESC+"\\");}return !0},e}(),E=function(e){function t(t,r,i,n,o,l,h,d,v){void 0===v&&(v=new c.EscapeSequenceParser);var y=e.call(this)||this;y._bufferService=t,y._charsetService=r,y._coreService=i,y._dirtyRowService=n,y._logService=o,y._optionsService=l,y._coreMouseService=h,y._unicodeService=d,y._parser=v,y._parseBuffer=new Uint32Array(4096),y._stringDecoder=new u.StringToUtf32,y._utf8Decoder=new u.Utf8ToUtf32,y._workCell=new p.CellData,y._windowTitle="",y._iconName="",y._windowTitleStack=[],y._iconNameStack=[],y._curAttrData=f.DEFAULT_ATTR_DATA.clone(),y._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone(),y._onRequestBell=new _.EventEmitter,y._onRequestRefreshRows=new _.EventEmitter,y._onRequestReset=new _.EventEmitter,y._onRequestSendFocus=new _.EventEmitter,y._onRequestSyncScrollBar=new _.EventEmitter,y._onRequestWindowsOptionsReport=new _.EventEmitter,y._onA11yChar=new _.EventEmitter,y._onA11yTab=new _.EventEmitter,y._onCursorMove=new _.EventEmitter,y._onLineFeed=new _.EventEmitter,y._onScroll=new _.EventEmitter,y._onTitleChange=new _.EventEmitter,y._onColor=new _.EventEmitter,y._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},y._specialColors=[256,257,258],y.register(y._parser),y._activeBuffer=y._bufferService.buffer,y.register(y._bufferService.buffers.onBufferActivate((function(e){return y._activeBuffer=e.activeBuffer}))),y._parser.setCsiHandlerFallback((function(e,t){y._logService.debug("Unknown CSI code: ",{identifier:y._parser.identToString(e),params:t.toArray()});})),y._parser.setEscHandlerFallback((function(e){y._logService.debug("Unknown ESC code: ",{identifier:y._parser.identToString(e)});})),y._parser.setExecuteHandlerFallback((function(e){y._logService.debug("Unknown EXECUTE code: ",{code:e});})),y._parser.setOscHandlerFallback((function(e,t,r){y._logService.debug("Unknown OSC code: ",{identifier:e,action:t,data:r});})),y._parser.setDcsHandlerFallback((function(e,t,r){"HOOK"===t&&(r=r.toArray()),y._logService.debug("Unknown DCS code: ",{identifier:y._parser.identToString(e),action:t,payload:r});})),y._parser.setPrintHandler((function(e,t,r){return y.print(e,t,r)})),y._parser.registerCsiHandler({final:"@"},(function(e){return y.insertChars(e)})),y._parser.registerCsiHandler({intermediates:" ",final:"@"},(function(e){return y.scrollLeft(e)})),y._parser.registerCsiHandler({final:"A"},(function(e){return y.cursorUp(e)})),y._parser.registerCsiHandler({intermediates:" ",final:"A"},(function(e){return y.scrollRight(e)})),y._parser.registerCsiHandler({final:"B"},(function(e){return y.cursorDown(e)})),y._parser.registerCsiHandler({final:"C"},(function(e){return y.cursorForward(e)})),y._parser.registerCsiHandler({final:"D"},(function(e){return y.cursorBackward(e)})),y._parser.registerCsiHandler({final:"E"},(function(e){return y.cursorNextLine(e)})),y._parser.registerCsiHandler({final:"F"},(function(e){return y.cursorPrecedingLine(e)})),y._parser.registerCsiHandler({final:"G"},(function(e){return y.cursorCharAbsolute(e)})),y._parser.registerCsiHandler({final:"H"},(function(e){return y.cursorPosition(e)})),y._parser.registerCsiHandler({final:"I"},(function(e){return y.cursorForwardTab(e)})),y._parser.registerCsiHandler({final:"J"},(function(e){return y.eraseInDisplay(e)})),y._parser.registerCsiHandler({prefix:"?",final:"J"},(function(e){return y.eraseInDisplay(e)})),y._parser.registerCsiHandler({final:"K"},(function(e){return y.eraseInLine(e)})),y._parser.registerCsiHandler({prefix:"?",final:"K"},(function(e){return y.eraseInLine(e)})),y._parser.registerCsiHandler({final:"L"},(function(e){return y.insertLines(e)})),y._parser.registerCsiHandler({final:"M"},(function(e){return y.deleteLines(e)})),y._parser.registerCsiHandler({final:"P"},(function(e){return y.deleteChars(e)})),y._parser.registerCsiHandler({final:"S"},(function(e){return y.scrollUp(e)})),y._parser.registerCsiHandler({final:"T"},(function(e){return y.scrollDown(e)})),y._parser.registerCsiHandler({final:"X"},(function(e){return y.eraseChars(e)})),y._parser.registerCsiHandler({final:"Z"},(function(e){return y.cursorBackwardTab(e)})),y._parser.registerCsiHandler({final:"`"},(function(e){return y.charPosAbsolute(e)})),y._parser.registerCsiHandler({final:"a"},(function(e){return y.hPositionRelative(e)})),y._parser.registerCsiHandler({final:"b"},(function(e){return y.repeatPrecedingCharacter(e)})),y._parser.registerCsiHandler({final:"c"},(function(e){return y.sendDeviceAttributesPrimary(e)})),y._parser.registerCsiHandler({prefix:">",final:"c"},(function(e){return y.sendDeviceAttributesSecondary(e)})),y._parser.registerCsiHandler({final:"d"},(function(e){return y.linePosAbsolute(e)})),y._parser.registerCsiHandler({final:"e"},(function(e){return y.vPositionRelative(e)})),y._parser.registerCsiHandler({final:"f"},(function(e){return y.hVPosition(e)})),y._parser.registerCsiHandler({final:"g"},(function(e){return y.tabClear(e)})),y._parser.registerCsiHandler({final:"h"},(function(e){return y.setMode(e)})),y._parser.registerCsiHandler({prefix:"?",final:"h"},(function(e){return y.setModePrivate(e)})),y._parser.registerCsiHandler({final:"l"},(function(e){return y.resetMode(e)})),y._parser.registerCsiHandler({prefix:"?",final:"l"},(function(e){return y.resetModePrivate(e)})),y._parser.registerCsiHandler({final:"m"},(function(e){return y.charAttributes(e)})),y._parser.registerCsiHandler({final:"n"},(function(e){return y.deviceStatus(e)})),y._parser.registerCsiHandler({prefix:"?",final:"n"},(function(e){return y.deviceStatusPrivate(e)})),y._parser.registerCsiHandler({intermediates:"!",final:"p"},(function(e){return y.softReset(e)})),y._parser.registerCsiHandler({intermediates:" ",final:"q"},(function(e){return y.setCursorStyle(e)})),y._parser.registerCsiHandler({final:"r"},(function(e){return y.setScrollRegion(e)})),y._parser.registerCsiHandler({final:"s"},(function(e){return y.saveCursor(e)})),y._parser.registerCsiHandler({final:"t"},(function(e){return y.windowOptions(e)})),y._parser.registerCsiHandler({final:"u"},(function(e){return y.restoreCursor(e)})),y._parser.registerCsiHandler({intermediates:"'",final:"}"},(function(e){return y.insertColumns(e)})),y._parser.registerCsiHandler({intermediates:"'",final:"~"},(function(e){return y.deleteColumns(e)})),y._parser.setExecuteHandler(s.C0.BEL,(function(){return y.bell()})),y._parser.setExecuteHandler(s.C0.LF,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.VT,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.FF,(function(){return y.lineFeed()})),y._parser.setExecuteHandler(s.C0.CR,(function(){return y.carriageReturn()})),y._parser.setExecuteHandler(s.C0.BS,(function(){return y.backspace()})),y._parser.setExecuteHandler(s.C0.HT,(function(){return y.tab()})),y._parser.setExecuteHandler(s.C0.SO,(function(){return y.shiftOut()})),y._parser.setExecuteHandler(s.C0.SI,(function(){return y.shiftIn()})),y._parser.setExecuteHandler(s.C1.IND,(function(){return y.index()})),y._parser.setExecuteHandler(s.C1.NEL,(function(){return y.nextLine()})),y._parser.setExecuteHandler(s.C1.HTS,(function(){return y.tabSet()})),y._parser.registerOscHandler(0,new g.OscHandler((function(e){return y.setTitle(e),y.setIconName(e),!0}))),y._parser.registerOscHandler(1,new g.OscHandler((function(e){return y.setIconName(e)}))),y._parser.registerOscHandler(2,new g.OscHandler((function(e){return y.setTitle(e)}))),y._parser.registerOscHandler(4,new g.OscHandler((function(e){return y.setOrReportIndexedColor(e)}))),y._parser.registerOscHandler(10,new g.OscHandler((function(e){return y.setOrReportFgColor(e)}))),y._parser.registerOscHandler(11,new g.OscHandler((function(e){return y.setOrReportBgColor(e)}))),y._parser.registerOscHandler(12,new g.OscHandler((function(e){return y.setOrReportCursorColor(e)}))),y._parser.registerOscHandler(104,new g.OscHandler((function(e){return y.restoreIndexedColor(e)}))),y._parser.registerOscHandler(110,new g.OscHandler((function(e){return y.restoreFgColor(e)}))),y._parser.registerOscHandler(111,new g.OscHandler((function(e){return y.restoreBgColor(e)}))),y._parser.registerOscHandler(112,new g.OscHandler((function(e){return y.restoreCursorColor(e)}))),y._parser.registerEscHandler({final:"7"},(function(){return y.saveCursor()})),y._parser.registerEscHandler({final:"8"},(function(){return y.restoreCursor()})),y._parser.registerEscHandler({final:"D"},(function(){return y.index()})),y._parser.registerEscHandler({final:"E"},(function(){return y.nextLine()})),y._parser.registerEscHandler({final:"H"},(function(){return y.tabSet()})),y._parser.registerEscHandler({final:"M"},(function(){return y.reverseIndex()})),y._parser.registerEscHandler({final:"="},(function(){return y.keypadApplicationMode()})),y._parser.registerEscHandler({final:">"},(function(){return y.keypadNumericMode()})),y._parser.registerEscHandler({final:"c"},(function(){return y.fullReset()})),y._parser.registerEscHandler({final:"n"},(function(){return y.setgLevel(2)})),y._parser.registerEscHandler({final:"o"},(function(){return y.setgLevel(3)})),y._parser.registerEscHandler({final:"|"},(function(){return y.setgLevel(3)})),y._parser.registerEscHandler({final:"}"},(function(){return y.setgLevel(2)})),y._parser.registerEscHandler({final:"~"},(function(){return y.setgLevel(1)})),y._parser.registerEscHandler({intermediates:"%",final:"@"},(function(){return y.selectDefaultCharset()})),y._parser.registerEscHandler({intermediates:"%",final:"G"},(function(){return y.selectDefaultCharset()}));var m=function(e){b._parser.registerEscHandler({intermediates:"(",final:e},(function(){return y.selectCharset("("+e)})),b._parser.registerEscHandler({intermediates:")",final:e},(function(){return y.selectCharset(")"+e)})),b._parser.registerEscHandler({intermediates:"*",final:e},(function(){return y.selectCharset("*"+e)})),b._parser.registerEscHandler({intermediates:"+",final:e},(function(){return y.selectCharset("+"+e)})),b._parser.registerEscHandler({intermediates:"-",final:e},(function(){return y.selectCharset("-"+e)})),b._parser.registerEscHandler({intermediates:".",final:e},(function(){return y.selectCharset("."+e)})),b._parser.registerEscHandler({intermediates:"/",final:e},(function(){return y.selectCharset("/"+e)}));},b=this;for(var S in a.CHARSETS)m(S);return y._parser.registerEscHandler({intermediates:"#",final:"8"},(function(){return y.screenAlignmentPattern()})),y._parser.setErrorHandler((function(e){return y._logService.error("Parsing error: ",e),e})),y._parser.registerDcsHandler({intermediates:"$",final:"q"},new L(y._bufferService,y._coreService,y._logService,y._optionsService)),y}return n(t,e),Object.defineProperty(t.prototype,"onRequestBell",{get:function(){return this._onRequestBell.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestRefreshRows",{get:function(){return this._onRequestRefreshRows.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestReset",{get:function(){return this._onRequestReset.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSendFocus",{get:function(){return this._onRequestSendFocus.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestSyncScrollBar",{get:function(){return this._onRequestSyncScrollBar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onRequestWindowsOptionsReport",{get:function(){return this._onRequestWindowsOptionsReport.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yChar",{get:function(){return this._onA11yChar.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onA11yTab",{get:function(){return this._onA11yTab.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onCursorMove",{get:function(){return this._onCursorMove.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLineFeed",{get:function(){return this._onLineFeed.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onTitleChange",{get:function(){return this._onTitleChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onColor",{get:function(){return this._onColor.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){e.prototype.dispose.call(this);},t.prototype._preserveStack=function(e,t,r,i){this._parseStack.paused=!0,this._parseStack.cursorStartX=e,this._parseStack.cursorStartY=t,this._parseStack.decodedLength=r,this._parseStack.position=i;},t.prototype._logSlowResolvingAsync=function(e){this._logService.logLevel<=y.LogLevelEnum.WARN&&Promise.race([e,new Promise((function(e,t){return setTimeout((function(){return t("#SLOW_TIMEOUT")}),5e3)}))]).catch((function(e){if("#SLOW_TIMEOUT"!==e)throw e;console.warn("async parser handler taking longer than 5000 ms");}));},t.prototype.parse=function(e,t){var r,i=this._activeBuffer.x,n=this._activeBuffer.y,o=0,s=this._parseStack.paused;if(s){if(r=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,t))return this._logSlowResolvingAsync(r),r;i=this._parseStack.cursorStartX,n=this._parseStack.cursorStartY,this._parseStack.paused=!1,e.length>C&&(o=this._parseStack.position+C);}if(this._logService.logLevel<=y.LogLevelEnum.DEBUG&&this._logService.debug("parsing data"+("string"==typeof e?' "'+e+'"':' "'+Array.prototype.map.call(e,(function(e){return String.fromCharCode(e)})).join("")+'"'),"string"==typeof e?e.split("").map((function(e){return e.charCodeAt(0)})):e),this._parseBuffer.length<e.length&&this._parseBuffer.length<C&&(this._parseBuffer=new Uint32Array(Math.min(e.length,C))),s||this._dirtyRowService.clearRange(),e.length>C)for(var a=o;a<e.length;a+=C){var c=a+C<e.length?a+C:e.length,l="string"==typeof e?this._stringDecoder.decode(e.substring(a,c),this._parseBuffer):this._utf8Decoder.decode(e.subarray(a,c),this._parseBuffer);if(r=this._parser.parse(this._parseBuffer,l))return this._preserveStack(i,n,l,a),this._logSlowResolvingAsync(r),r}else if(!s&&(l="string"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer),r=this._parser.parse(this._parseBuffer,l)))return this._preserveStack(i,n,l,0),this._logSlowResolvingAsync(r),r;this._activeBuffer.x===i&&this._activeBuffer.y===n||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowService.start,this._dirtyRowService.end);},t.prototype.print=function(e,t,r){var i,n,o=this._charsetService.charset,s=this._optionsService.rawOptions.screenReaderMode,a=this._bufferService.cols,c=this._coreService.decPrivateModes.wraparound,l=this._coreService.modes.insertMode,h=this._curAttrData,f=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowService.markDirty(this._activeBuffer.y),this._activeBuffer.x&&r-t>0&&2===f.getWidth(this._activeBuffer.x-1)&&f.setCellFromCodePoint(this._activeBuffer.x-1,0,1,h.fg,h.bg,h.extended);for(var _=t;_<r;++_){if(i=e[_],n=this._unicodeService.wcwidth(i),i<127&&o){var p=o[String.fromCharCode(i)];p&&(i=p.charCodeAt(0));}if(s&&this._onA11yChar.fire((0, u.stringFromCodePoint)(i)),n||!this._activeBuffer.x){if(this._activeBuffer.x+n-1>=a)if(c){for(;this._activeBuffer.x<a;)f.setCellFromCodePoint(this._activeBuffer.x++,0,1,h.fg,h.bg,h.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),f=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);}else if(this._activeBuffer.x=a-1,2===n)continue;if(l&&(f.insertCells(this._activeBuffer.x,n,this._activeBuffer.getNullCell(h),h),2===f.getWidth(a-1)&&f.setCellFromCodePoint(a-1,d.NULL_CELL_CODE,d.NULL_CELL_WIDTH,h.fg,h.bg,h.extended)),f.setCellFromCodePoint(this._activeBuffer.x++,i,n,h.fg,h.bg,h.extended),n>0)for(;--n;)f.setCellFromCodePoint(this._activeBuffer.x++,0,0,h.fg,h.bg,h.extended);}else f.getWidth(this._activeBuffer.x-1)?f.addCodepointToCell(this._activeBuffer.x-1,i):f.addCodepointToCell(this._activeBuffer.x-2,i);}r-t>0&&(f.loadCell(this._activeBuffer.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<a&&r-t>0&&0===f.getWidth(this._activeBuffer.x)&&!f.hasContent(this._activeBuffer.x)&&f.setCellFromCodePoint(this._activeBuffer.x,0,1,h.fg,h.bg,h.extended),this._dirtyRowService.markDirty(this._activeBuffer.y);},t.prototype.registerCsiHandler=function(e,t){var r=this;return "t"!==e.final||e.prefix||e.intermediates?this._parser.registerCsiHandler(e,t):this._parser.registerCsiHandler(e,(function(e){return !w(e.params[0],r._optionsService.rawOptions.windowOptions)||t(e)}))},t.prototype.registerDcsHandler=function(e,t){return this._parser.registerDcsHandler(e,new m.DcsHandler(t))},t.prototype.registerEscHandler=function(e,t){return this._parser.registerEscHandler(e,t)},t.prototype.registerOscHandler=function(e,t){return this._parser.registerOscHandler(e,new g.OscHandler(t))},t.prototype.bell=function(){return this._onRequestBell.fire(),!0},t.prototype.lineFeed=function(){return this._dirtyRowService.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowService.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0},t.prototype.carriageReturn=function(){return this._activeBuffer.x=0,!0},t.prototype.backspace=function(){var e;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(0===this._activeBuffer.x&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&(null===(e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))||void 0===e?void 0:e.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);t.hasWidth(this._activeBuffer.x)&&!t.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--;}return this._restrictCursor(),!0},t.prototype.tab=function(){if(this._activeBuffer.x>=this._bufferService.cols)return !0;var e=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-e),!0},t.prototype.shiftOut=function(){return this._charsetService.setgLevel(1),!0},t.prototype.shiftIn=function(){return this._charsetService.setgLevel(0),!0},t.prototype._restrictCursor=function(e){void 0===e&&(e=this._bufferService.cols-1),this._activeBuffer.x=Math.min(e,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowService.markDirty(this._activeBuffer.y);},t.prototype._setCursor=function(e,t){this._dirtyRowService.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=e,this._activeBuffer.y=this._activeBuffer.scrollTop+t):(this._activeBuffer.x=e,this._activeBuffer.y=t),this._restrictCursor(),this._dirtyRowService.markDirty(this._activeBuffer.y);},t.prototype._moveCursor=function(e,t){this._restrictCursor(),this._setCursor(this._activeBuffer.x+e,this._activeBuffer.y+t);},t.prototype.cursorUp=function(e){var t=this._activeBuffer.y-this._activeBuffer.scrollTop;return t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1)),!0},t.prototype.cursorDown=function(e){var t=this._activeBuffer.scrollBottom-this._activeBuffer.y;return t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1),!0},t.prototype.cursorForward=function(e){return this._moveCursor(e.params[0]||1,0),!0},t.prototype.cursorBackward=function(e){return this._moveCursor(-(e.params[0]||1),0),!0},t.prototype.cursorNextLine=function(e){return this.cursorDown(e),this._activeBuffer.x=0,!0},t.prototype.cursorPrecedingLine=function(e){return this.cursorUp(e),this._activeBuffer.x=0,!0},t.prototype.cursorCharAbsolute=function(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0},t.prototype.cursorPosition=function(e){return this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1),!0},t.prototype.charPosAbsolute=function(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0},t.prototype.hPositionRelative=function(e){return this._moveCursor(e.params[0]||1,0),!0},t.prototype.linePosAbsolute=function(e){return this._setCursor(this._activeBuffer.x,(e.params[0]||1)-1),!0},t.prototype.vPositionRelative=function(e){return this._moveCursor(0,e.params[0]||1),!0},t.prototype.hVPosition=function(e){return this.cursorPosition(e),!0},t.prototype.tabClear=function(e){var t=e.params[0];return 0===t?delete this._activeBuffer.tabs[this._activeBuffer.x]:3===t&&(this._activeBuffer.tabs={}),!0},t.prototype.cursorForwardTab=function(e){if(this._activeBuffer.x>=this._bufferService.cols)return !0;for(var t=e.params[0]||1;t--;)this._activeBuffer.x=this._activeBuffer.nextStop();return !0},t.prototype.cursorBackwardTab=function(e){if(this._activeBuffer.x>=this._bufferService.cols)return !0;for(var t=e.params[0]||1;t--;)this._activeBuffer.x=this._activeBuffer.prevStop();return !0},t.prototype._eraseInBufferLine=function(e,t,r,i){void 0===i&&(i=!1);var n=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);n.replaceCells(t,r,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i&&(n.isWrapped=!1);},t.prototype._resetBufferLine=function(e){var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);t.fill(this._activeBuffer.getNullCell(this._eraseAttrData())),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+e),t.isWrapped=!1;},t.prototype.eraseInDisplay=function(e){var t;switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:for(t=this._activeBuffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t++,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x);t<this._bufferService.rows;t++)this._resetBufferLine(t);this._dirtyRowService.markDirty(t);break;case 1:for(t=this._activeBuffer.y,this._dirtyRowService.markDirty(t),this._eraseInBufferLine(t,0,this._activeBuffer.x+1,!0),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(t+1).isWrapped=!1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 2:for(t=this._bufferService.rows,this._dirtyRowService.markDirty(t-1);t--;)this._resetBufferLine(t);this._dirtyRowService.markDirty(0);break;case 3:var r=this._activeBuffer.lines.length-this._bufferService.rows;r>0&&(this._activeBuffer.lines.trimStart(r),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-r,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-r,0),this._onScroll.fire(0));}return !0},t.prototype.eraseInLine=function(e){switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0);}return this._dirtyRowService.markDirty(this._activeBuffer.y),!0},t.prototype.insertLines=function(e){this._restrictCursor();var t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;for(var r=this._activeBuffer.ybase+this._activeBuffer.y,i=this._bufferService.rows-1-this._activeBuffer.scrollBottom,n=this._bufferService.rows-1+this._activeBuffer.ybase-i+1;t--;)this._activeBuffer.lines.splice(n-1,1),this._activeBuffer.lines.splice(r,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0},t.prototype.deleteLines=function(e){this._restrictCursor();var t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;var r,i=this._activeBuffer.ybase+this._activeBuffer.y;for(r=this._bufferService.rows-1-this._activeBuffer.scrollBottom,r=this._bufferService.rows-1+this._activeBuffer.ybase-r;t--;)this._activeBuffer.lines.splice(i,1),this._activeBuffer.lines.splice(r,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0},t.prototype.insertChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.insertCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.deleteChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.deleteCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.scrollUp=function(e){for(var t=e.params[0]||1;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollDown=function(e){for(var t=e.params[0]||1;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(f.DEFAULT_ATTR_DATA));return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollLeft=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.deleteCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.scrollRight=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.insertCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.insertColumns=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.insertCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.deleteColumns=function(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;for(var t=e.params[0]||1,r=this._activeBuffer.scrollTop;r<=this._activeBuffer.scrollBottom;++r){var i=this._activeBuffer.lines.get(this._activeBuffer.ybase+r);i.deleteCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0},t.prototype.eraseChars=function(e){this._restrictCursor();var t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(e.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowService.markDirty(this._activeBuffer.y)),!0},t.prototype.repeatPrecedingCharacter=function(e){if(!this._parser.precedingCodepoint)return !0;for(var t=e.params[0]||1,r=new Uint32Array(t),i=0;i<t;++i)r[i]=this._parser.precedingCodepoint;return this.print(r,0,r.length),!0},t.prototype.sendDeviceAttributesPrimary=function(e){return e.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(s.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(s.C0.ESC+"[?6c")),!0},t.prototype.sendDeviceAttributesSecondary=function(e){return e.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(s.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(s.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(e.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(s.C0.ESC+"[>83;40003;0c")),!0},t.prototype._is=function(e){return 0===(this._optionsService.rawOptions.termName+"").indexOf(e)},t.prototype.setMode=function(e){for(var t=0;t<e.length;t++)4===e.params[t]&&(this._coreService.modes.insertMode=!0);return !0},t.prototype.setModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),this._charsetService.setgCharset(1,a.DEFAULT_CHARSET),this._charsetService.setgCharset(2,a.DEFAULT_CHARSET),this._charsetService.setgCharset(3,a.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0;}return !0},t.prototype.resetMode=function(e){for(var t=0;t<e.length;t++)4===e.params[t]&&(this._coreService.modes.insertMode=!1);return !0},t.prototype.resetModePrivate=function(e){for(var t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1;}return !0},t.prototype._updateAttrColor=function(e,t,r,i,n){return 2===t?(e|=50331648,e&=-16777216,e|=v.AttributeData.fromColorRGB([r,i,n])):5===t&&(e&=-50331904,e|=33554432|255&r),e},t.prototype._extractColor=function(e,t,r){var i=[0,0,-1,0,0,0],n=0,o=0;do{if(i[o+n]=e.params[t+o],e.hasSubParams(t+o)){var s=e.getSubParams(t+o),a=0;do{5===i[1]&&(n=1),i[o+a+1+n]=s[a];}while(++a<s.length&&a+o+1+n<i.length);break}if(5===i[1]&&o+n>=2||2===i[1]&&o+n>=5)break;i[1]&&(n=1);}while(++o+t<e.length&&o+n<i.length);for(a=2;a<i.length;++a)-1===i[a]&&(i[a]=0);switch(i[0]){case 38:r.fg=this._updateAttrColor(r.fg,i[1],i[3],i[4],i[5]);break;case 48:r.bg=this._updateAttrColor(r.bg,i[1],i[3],i[4],i[5]);break;case 58:r.extended=r.extended.clone(),r.extended.underlineColor=this._updateAttrColor(r.extended.underlineColor,i[1],i[3],i[4],i[5]);}return o},t.prototype._processUnderline=function(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended();},t.prototype.charAttributes=function(e){if(1===e.length&&0===e.params[0])return this._curAttrData.fg=f.DEFAULT_ATTR_DATA.fg,this._curAttrData.bg=f.DEFAULT_ATTR_DATA.bg,!0;for(var t,r=e.length,i=this._curAttrData,n=0;n<r;n++)(t=e.params[n])>=30&&t<=37?(i.fg&=-50331904,i.fg|=16777216|t-30):t>=40&&t<=47?(i.bg&=-50331904,i.bg|=16777216|t-40):t>=90&&t<=97?(i.fg&=-50331904,i.fg|=16777224|t-90):t>=100&&t<=107?(i.bg&=-50331904,i.bg|=16777224|t-100):0===t?(i.fg=f.DEFAULT_ATTR_DATA.fg,i.bg=f.DEFAULT_ATTR_DATA.bg):1===t?i.fg|=134217728:3===t?i.bg|=67108864:4===t?(i.fg|=268435456,this._processUnderline(e.hasSubParams(n)?e.getSubParams(n)[0]:1,i)):5===t?i.fg|=536870912:7===t?i.fg|=67108864:8===t?i.fg|=1073741824:9===t?i.fg|=2147483648:2===t?i.bg|=134217728:21===t?this._processUnderline(2,i):22===t?(i.fg&=-134217729,i.bg&=-134217729):23===t?i.bg&=-67108865:24===t?i.fg&=-268435457:25===t?i.fg&=-536870913:27===t?i.fg&=-67108865:28===t?i.fg&=-1073741825:29===t?i.fg&=2147483647:39===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg):49===t?(i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):38===t||48===t||58===t?n+=this._extractColor(e,n,i):59===t?(i.extended=i.extended.clone(),i.extended.underlineColor=-1,i.updateExtended()):100===t?(i.fg&=-67108864,i.fg|=16777215&f.DEFAULT_ATTR_DATA.fg,i.bg&=-67108864,i.bg|=16777215&f.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",t);return !0},t.prototype.deviceStatus=function(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(s.C0.ESC+"[0n");break;case 6:var t=this._activeBuffer.y+1,r=this._activeBuffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"["+t+";"+r+"R");}return !0},t.prototype.deviceStatusPrivate=function(e){if(6===e.params[0]){var t=this._activeBuffer.y+1,r=this._activeBuffer.x+1;this._coreService.triggerDataEvent(s.C0.ESC+"[?"+t+";"+r+"R");}return !0},t.prototype.softReset=function(e){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0},t.prototype.setCursorStyle=function(e){var t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar";}var r=t%2==1;return this._optionsService.options.cursorBlink=r,!0},t.prototype.setScrollRegion=function(e){var t,r=e.params[0]||1;return (e.length<2||(t=e.params[1])>this._bufferService.rows||0===t)&&(t=this._bufferService.rows),t>r&&(this._activeBuffer.scrollTop=r-1,this._activeBuffer.scrollBottom=t-1,this._setCursor(0,0)),!0},t.prototype.windowOptions=function(e){if(!w(e.params[0],this._optionsService.rawOptions.windowOptions))return !0;var t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(o.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(o.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(s.C0.ESC+"[8;"+this._bufferService.rows+";"+this._bufferService.cols+"t");break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop());}return !0},t.prototype.saveCursor=function(e){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0},t.prototype.restoreCursor=function(e){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0},t.prototype.setTitle=function(e){return this._windowTitle=e,this._onTitleChange.fire(e),!0},t.prototype.setIconName=function(e){return this._iconName=e,!0},t.prototype.setOrReportIndexedColor=function(e){for(var t=[],r=e.split(";");r.length>1;){var i=r.shift(),n=r.shift();if(/^\d+$/.exec(i)){var o=parseInt(i);if(0<=o&&o<256)if("?"===n)t.push({type:0,index:o});else {var s=(0, b.parseColor)(n);s&&t.push({type:1,index:o,color:s});}}}return t.length&&this._onColor.fire(t),!0},t.prototype._setOrReportSpecialColor=function(e,t){for(var r=e.split(";"),i=0;i<r.length&&!(t>=this._specialColors.length);++i,++t)if("?"===r[i])this._onColor.fire([{type:0,index:this._specialColors[t]}]);else {var n=(0, b.parseColor)(r[i]);n&&this._onColor.fire([{type:1,index:this._specialColors[t],color:n}]);}return !0},t.prototype.setOrReportFgColor=function(e){return this._setOrReportSpecialColor(e,0)},t.prototype.setOrReportBgColor=function(e){return this._setOrReportSpecialColor(e,1)},t.prototype.setOrReportCursorColor=function(e){return this._setOrReportSpecialColor(e,2)},t.prototype.restoreIndexedColor=function(e){if(!e)return this._onColor.fire([{type:2}]),!0;for(var t=[],r=e.split(";"),i=0;i<r.length;++i)if(/^\d+$/.exec(r[i])){var n=parseInt(r[i]);0<=n&&n<256&&t.push({type:2,index:n});}return t.length&&this._onColor.fire(t),!0},t.prototype.restoreFgColor=function(e){return this._onColor.fire([{type:2,index:256}]),!0},t.prototype.restoreBgColor=function(e){return this._onColor.fire([{type:2,index:257}]),!0},t.prototype.restoreCursorColor=function(e){return this._onColor.fire([{type:2,index:258}]),!0},t.prototype.nextLine=function(){return this._activeBuffer.x=0,this.index(),!0},t.prototype.keypadApplicationMode=function(){return this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0},t.prototype.keypadNumericMode=function(){return this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0},t.prototype.selectDefaultCharset=function(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,a.DEFAULT_CHARSET),!0},t.prototype.selectCharset=function(e){return 2!==e.length?(this.selectDefaultCharset(),!0):("/"===e[0]||this._charsetService.setgCharset(S[e[0]],a.CHARSETS[e[1]]||a.DEFAULT_CHARSET),!0)},t.prototype.index=function(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0},t.prototype.tabSet=function(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0},t.prototype.reverseIndex=function(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){var e=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,e,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom);}else this._activeBuffer.y--,this._restrictCursor();return !0},t.prototype.fullReset=function(){return this._parser.reset(),this._onRequestReset.fire(),!0},t.prototype.reset=function(){this._curAttrData=f.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=f.DEFAULT_ATTR_DATA.clone();},t.prototype._eraseAttrData=function(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal},t.prototype.setgLevel=function(e){return this._charsetService.setgLevel(e),!0},t.prototype.screenAlignmentPattern=function(){var e=new p.CellData;e.content=1<<22|"E".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg,this._setCursor(0,0);for(var t=0;t<this._bufferService.rows;++t){var r=this._activeBuffer.ybase+this._activeBuffer.y+t,i=this._activeBuffer.lines.get(r);i&&(i.fill(e),i.isWrapped=!1);}return this._dirtyRowService.markAllDirty(),this._setCursor(0,0),!0},t}(l.Disposable);t.InputHandler=E;},844:function(e,t){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.Disposable=void 0;var i=function(){function e(){this._disposables=[],this._isDisposed=!1;}return e.prototype.dispose=function(){var e,t;this._isDisposed=!0;try{for(var i=r(this._disposables),n=i.next();!n.done;n=i.next())n.value.dispose();}catch(t){e={error:t};}finally{try{n&&!n.done&&(t=i.return)&&t.call(i);}finally{if(e)throw e.error}}this._disposables.length=0;},e.prototype.register=function(e){return this._disposables.push(e),e},e.prototype.unregister=function(e){var t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1);},e}();function n(e){var t,i;try{for(var n=r(e),o=n.next();!o.done;o=n.next())o.value.dispose();}catch(e){t={error:e};}finally{try{o&&!o.done&&(i=n.return)&&i.call(n);}finally{if(t)throw t.error}}e.length=0;}t.Disposable=i,t.disposeArray=n,t.getDisposeArrayDisposable=function(e){return {dispose:function(){return n(e)}}};},6114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.isSafari=t.isLegacyEdge=t.isFirefox=void 0;var r="undefined"==typeof navigator,i=r?"node":navigator.userAgent,n=r?"node":navigator.platform;t.isFirefox=i.includes("Firefox"),t.isLegacyEdge=i.includes("Edge"),t.isSafari=/^((?!chrome|android).)*safari/i.test(i),t.isMac=["Macintosh","MacIntel","MacPPC","Mac68K"].includes(n),t.isIpad="iPad"===n,t.isIphone="iPhone"===n,t.isWindows=["Windows","Win16","Win32","WinCE"].includes(n),t.isLinux=n.indexOf("Linux")>=0;},6106:function(e,t){var r=this&&this.__generator||function(e,t){var r,i,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s);}catch(e){o=[6,e],i=0;}finally{r=n=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.SortedList=void 0;var i=function(){function e(e){this._getKey=e,this._array=[];}return e.prototype.clear=function(){this._array.length=0;},e.prototype.insert=function(e){if(0!==this._array.length){var t=this._search(this._getKey(e),0,this._array.length-1);this._array.splice(t,0,e);}else this._array.push(e);},e.prototype.delete=function(e){if(0===this._array.length)return !1;var t=this._getKey(e),r=this._search(t,0,this._array.length-1);if(this._getKey(this._array[r])!==t)return !1;do{if(this._array[r]===e)return this._array.splice(r,1),!0}while(++r<this._array.length&&this._getKey(this._array[r])===t);return !1},e.prototype.getKeyIterator=function(e){var t;return r(this,(function(r){switch(r.label){case 0:if(0===this._array.length)return [2];if((t=this._search(e,0,this._array.length-1))<0||t>=this._array.length)return [2];if(this._getKey(this._array[t])!==e)return [2];r.label=1;case 1:return [4,this._array[t]];case 2:r.sent(),r.label=3;case 3:if(++t<this._array.length&&this._getKey(this._array[t])===e)return [3,1];r.label=4;case 4:return [2]}}))},e.prototype.values=function(){return this._array.values()},e.prototype._search=function(e,t,r){if(r<t)return t;var i=Math.floor((t+r)/2);if(this._getKey(this._array[i])>e)return this._search(e,t,i-1);if(this._getKey(this._array[i])<e)return this._search(e,i+1,r);for(;i>0&&this._getKey(this._array[i-1])===e;)i--;return i},e}();t.SortedList=i;},8273:(e,t)=>{function r(e,t,r,i){if(void 0===r&&(r=0),void 0===i&&(i=e.length),r>=e.length)return e;r=(e.length+r)%e.length,i=i>=e.length?e.length:(e.length+i)%e.length;for(var n=r;n<i;++n)e[n]=t;return e}Object.defineProperty(t,"__esModule",{value:!0}),t.concat=t.fillFallback=t.fill=void 0,t.fill=function(e,t,i,n){return e.fill?e.fill(t,i,n):r(e,t,i,n)},t.fillFallback=r,t.concat=function(e,t){var r=new e.constructor(e.length+t.length);return r.set(e),r.set(t,e.length),r};},9282:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateWindowsModeWrappedState=void 0;var i=r(643);t.updateWindowsModeWrappedState=function(e){var t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),r=null==t?void 0:t.get(e.cols-1),n=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);n&&r&&(n.isWrapped=r[i.CHAR_DATA_CODE_INDEX]!==i.NULL_CELL_CODE&&r[i.CHAR_DATA_CODE_INDEX]!==i.WHITESPACE_CELL_CODE);};},3734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;var r=function(){function e(){this.fg=0,this.bg=0,this.extended=new i;}return e.toColorRGB=function(e){return [e>>>16&255,e>>>8&255,255&e]},e.fromColorRGB=function(e){return (255&e[0])<<16|(255&e[1])<<8|255&e[2]},e.prototype.clone=function(){var t=new e;return t.fg=this.fg,t.bg=this.bg,t.extended=this.extended.clone(),t},e.prototype.isInverse=function(){return 67108864&this.fg},e.prototype.isBold=function(){return 134217728&this.fg},e.prototype.isUnderline=function(){return 268435456&this.fg},e.prototype.isBlink=function(){return 536870912&this.fg},e.prototype.isInvisible=function(){return 1073741824&this.fg},e.prototype.isItalic=function(){return 67108864&this.bg},e.prototype.isDim=function(){return 134217728&this.bg},e.prototype.isStrikethrough=function(){return 2147483648&this.fg},e.prototype.getFgColorMode=function(){return 50331648&this.fg},e.prototype.getBgColorMode=function(){return 50331648&this.bg},e.prototype.isFgRGB=function(){return 50331648==(50331648&this.fg)},e.prototype.isBgRGB=function(){return 50331648==(50331648&this.bg)},e.prototype.isFgPalette=function(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)},e.prototype.isBgPalette=function(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)},e.prototype.isFgDefault=function(){return 0==(50331648&this.fg)},e.prototype.isBgDefault=function(){return 0==(50331648&this.bg)},e.prototype.isAttributeDefault=function(){return 0===this.fg&&0===this.bg},e.prototype.getFgColor=function(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return -1}},e.prototype.getBgColor=function(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return -1}},e.prototype.hasExtendedAttrs=function(){return 268435456&this.bg},e.prototype.updateExtended=function(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456;},e.prototype.getUnderlineColor=function(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()},e.prototype.getUnderlineColorMode=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()},e.prototype.isUnderlineColorRGB=function(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()},e.prototype.isUnderlineColorPalette=function(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()},e.prototype.isUnderlineColorDefault=function(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()},e.prototype.getUnderlineStyle=function(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0},e}();t.AttributeData=r;var i=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=-1),this.underlineStyle=e,this.underlineColor=t;}return e.prototype.clone=function(){return new e(this.underlineStyle,this.underlineColor)},e.prototype.isEmpty=function(){return 0===this.underlineStyle},e}();t.ExtendedAttrs=i;},9092:function(e,t,r){var i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s},n=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferStringIterator=t.Buffer=t.MAX_BUFFER_SIZE=void 0;var o=r(6349),s=r(8437),a=r(511),c=r(643),l=r(4634),h=r(4863),u=r(7116),f=r(3734);t.MAX_BUFFER_SIZE=4294967295;var _=function(){function e(e,t,r){this._hasScrollback=e,this._optionsService=t,this._bufferService=r,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.savedY=0,this.savedX=0,this.savedCurAttrData=s.DEFAULT_ATTR_DATA.clone(),this.savedCharset=u.DEFAULT_CHARSET,this.markers=[],this._nullCell=a.CellData.fromCharData([0,c.NULL_CELL_CHAR,c.NULL_CELL_WIDTH,c.NULL_CELL_CODE]),this._whitespaceCell=a.CellData.fromCharData([0,c.WHITESPACE_CELL_CHAR,c.WHITESPACE_CELL_WIDTH,c.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new o.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops();}return e.prototype.getNullCell=function(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new f.ExtendedAttrs),this._nullCell},e.prototype.getWhitespaceCell=function(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new f.ExtendedAttrs),this._whitespaceCell},e.prototype.getBlankLine=function(e,t){return new s.BufferLine(this._bufferService.cols,this.getNullCell(e),t)},Object.defineProperty(e.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._rows},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isCursorInViewport",{get:function(){var e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows},enumerable:!1,configurable:!0}),e.prototype._getCorrectBufferLength=function(e){if(!this._hasScrollback)return e;var r=e+this._optionsService.rawOptions.scrollback;return r>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:r},e.prototype.fillViewportRows=function(e){if(0===this.lines.length){void 0===e&&(e=s.DEFAULT_ATTR_DATA);for(var t=this._rows;t--;)this.lines.push(this.getBlankLine(e));}},e.prototype.clear=function(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new o.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops();},e.prototype.resize=function(e,t){var r=this.getNullCell(s.DEFAULT_ATTR_DATA),i=this._getCorrectBufferLength(t);if(i>this.lines.maxLength&&(this.lines.maxLength=i),this.lines.length>0){if(this._cols<e)for(var n=0;n<this.lines.length;n++)this.lines.get(n).resize(e,r);var o=0;if(this._rows<t)for(var a=this._rows;a<t;a++)this.lines.length<t+this.ybase&&(this._optionsService.rawOptions.windowsMode?this.lines.push(new s.BufferLine(e,r)):this.ybase>0&&this.lines.length<=this.ybase+this.y+o+1?(this.ybase--,o++,this.ydisp>0&&this.ydisp--):this.lines.push(new s.BufferLine(e,r)));else for(a=this._rows;a>t;a--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(i<this.lines.maxLength){var c=this.lines.length-i;c>0&&(this.lines.trimStart(c),this.ybase=Math.max(this.ybase-c,0),this.ydisp=Math.max(this.ydisp-c,0),this.savedY=Math.max(this.savedY-c,0)),this.lines.maxLength=i;}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),o&&(this.y+=o),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0;}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(n=0;n<this.lines.length;n++)this.lines.get(n).resize(e,r);this._cols=e,this._rows=t;},Object.defineProperty(e.prototype,"_isReflowEnabled",{get:function(){return this._hasScrollback&&!this._optionsService.rawOptions.windowsMode},enumerable:!1,configurable:!0}),e.prototype._reflow=function(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t));},e.prototype._reflowLarger=function(e,t){var r=(0, l.reflowLargerGetLinesToRemove)(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(s.DEFAULT_ATTR_DATA));if(r.length>0){var i=(0, l.reflowLargerCreateNewLayout)(this.lines,r);(0, l.reflowLargerApplyNewLayout)(this.lines,i.layout),this._reflowLargerAdjustViewport(e,t,i.countRemoved);}},e.prototype._reflowLargerAdjustViewport=function(e,t,r){for(var i=this.getNullCell(s.DEFAULT_ATTR_DATA),n=r;n-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new s.BufferLine(e,i))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-r,0);},e.prototype._reflowSmaller=function(e,t){for(var r=this.getNullCell(s.DEFAULT_ATTR_DATA),o=[],a=0,c=this.lines.length-1;c>=0;c--){var h=this.lines.get(c);if(!(!h||!h.isWrapped&&h.getTrimmedLength()<=e)){for(var u=[h];h.isWrapped&&c>0;)h=this.lines.get(--c),u.unshift(h);var f=this.ybase+this.y;if(!(f>=c&&f<c+u.length)){var _,d=u[u.length-1].getTrimmedLength(),p=(0, l.reflowSmallerGetNewLineLengths)(u,this._cols,e),v=p.length-u.length;_=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+v):Math.max(0,this.lines.length-this.lines.maxLength+v);for(var y=[],g=0;g<v;g++){var m=this.getBlankLine(s.DEFAULT_ATTR_DATA,!0);y.push(m);}y.length>0&&(o.push({start:c+u.length+a,newLines:y}),a+=y.length),u.push.apply(u,n([],i(y),!1));var b=p.length-1,S=p[b];0===S&&(S=p[--b]);for(var C=u.length-v-1,w=d;C>=0;){var L=Math.min(w,S);if(void 0===u[b])break;if(u[b].copyCellsFrom(u[C],w-L,S-L,L,!0),0==(S-=L)&&(S=p[--b]),0==(w-=L)){C--;var E=Math.max(C,0);w=(0, l.getWrappedLineTrimmedLength)(u,E,this._cols);}}for(g=0;g<u.length;g++)p[g]<e&&u[g].setCell(p[g],r);for(var x=v-_;x-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+a)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+v,this.ybase+t-1);}}}if(o.length>0){var R=[],k=[];for(g=0;g<this.lines.length;g++)k.push(this.lines.get(g));var M=this.lines.length,A=M-1,O=0,D=o[O];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+a);var T=0;for(g=Math.min(this.lines.maxLength-1,M+a-1);g>=0;g--)if(D&&D.start>A+T){for(var B=D.newLines.length-1;B>=0;B--)this.lines.set(g--,D.newLines[B]);g++,R.push({index:A+1,amount:D.newLines.length}),T+=D.newLines.length,D=o[++O];}else this.lines.set(g,k[A--]);var P=0;for(g=R.length-1;g>=0;g--)R[g].index+=P,this.lines.onInsertEmitter.fire(R[g]),P+=R[g].amount;var I=Math.max(0,M+a-this.lines.maxLength);I>0&&this.lines.onTrimEmitter.fire(I);}},e.prototype.stringIndexToBufferIndex=function(e,t,r){for(void 0===r&&(r=!1);t;){var i=this.lines.get(e);if(!i)return [-1,-1];for(var n=r?i.getTrimmedLength():i.length,o=0;o<n;++o)if(i.get(o)[c.CHAR_DATA_WIDTH_INDEX]&&(t-=i.get(o)[c.CHAR_DATA_CHAR_INDEX].length||1),t<0)return [e,o];e++;}return [e,0]},e.prototype.translateBufferLineToString=function(e,t,r,i){void 0===r&&(r=0);var n=this.lines.get(e);return n?n.translateToString(t,r,i):""},e.prototype.getWrappedRangeForLine=function(e){for(var t=e,r=e;t>0&&this.lines.get(t).isWrapped;)t--;for(;r+1<this.lines.length&&this.lines.get(r+1).isWrapped;)r++;return {first:t,last:r}},e.prototype.setupTabStops=function(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.rawOptions.tabStopWidth)this.tabs[e]=!0;},e.prototype.prevStop=function(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.nextStop=function(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e},e.prototype.clearMarkers=function(e){this._isClearing=!0;for(var t=0;t<this.markers.length;t++)this.markers[t].line===e&&(this.markers[t].dispose(),this.markers.splice(t--,1));this._isClearing=!1;},e.prototype.clearAllMarkers=function(){this._isClearing=!0;for(var e=0;e<this.markers.length;e++)this.markers[e].dispose(),this.markers.splice(e--,1);this._isClearing=!1;},e.prototype.addMarker=function(e){var t=this,r=new h.Marker(e);return this.markers.push(r),r.register(this.lines.onTrim((function(e){r.line-=e,r.line<0&&r.dispose();}))),r.register(this.lines.onInsert((function(e){r.line>=e.index&&(r.line+=e.amount);}))),r.register(this.lines.onDelete((function(e){r.line>=e.index&&r.line<e.index+e.amount&&r.dispose(),r.line>e.index&&(r.line-=e.amount);}))),r.register(r.onDispose((function(){return t._removeMarker(r)}))),r},e.prototype._removeMarker=function(e){this._isClearing||this.markers.splice(this.markers.indexOf(e),1);},e.prototype.iterator=function(e,t,r,i,n){return new d(this,e,t,r,i,n)},e}();t.Buffer=_;var d=function(){function e(e,t,r,i,n,o){void 0===r&&(r=0),void 0===i&&(i=e.lines.length),void 0===n&&(n=0),void 0===o&&(o=0),this._buffer=e,this._trimRight=t,this._startIndex=r,this._endIndex=i,this._startOverscan=n,this._endOverscan=o,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex;}return e.prototype.hasNext=function(){return this._current<this._endIndex},e.prototype.next=function(){var e=this._buffer.getWrappedRangeForLine(this._current);e.first<this._startIndex-this._startOverscan&&(e.first=this._startIndex-this._startOverscan),e.last>this._endIndex+this._endOverscan&&(e.last=this._endIndex+this._endOverscan),e.first=Math.max(e.first,0),e.last=Math.min(e.last,this._buffer.lines.length);for(var t="",r=e.first;r<=e.last;++r)t+=this._buffer.translateBufferLineToString(r,this._trimRight);return this._current=e.last+1,{range:e,content:t}},e}();t.BufferStringIterator=d;},8437:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;var i=r(482),n=r(643),o=r(511),s=r(3734);t.DEFAULT_ATTR_DATA=Object.freeze(new s.AttributeData);var a=function(){function e(e,t,r){void 0===r&&(r=!1),this.isWrapped=r,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);for(var i=t||o.CellData.fromCharData([0,n.NULL_CELL_CHAR,n.NULL_CELL_WIDTH,n.NULL_CELL_CODE]),s=0;s<e;++s)this.setCell(s,i);this.length=e;}return e.prototype.get=function(e){var t=this._data[3*e+0],r=2097151&t;return [this._data[3*e+1],2097152&t?this._combined[e]:r?(0, i.stringFromCodePoint)(r):"",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):r]},e.prototype.set=function(e,t){this._data[3*e+1]=t[n.CHAR_DATA_ATTR_INDEX],t[n.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[n.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[n.CHAR_DATA_WIDTH_INDEX]<<22;},e.prototype.getWidth=function(e){return this._data[3*e+0]>>22},e.prototype.hasWidth=function(e){return 12582912&this._data[3*e+0]},e.prototype.getFg=function(e){return this._data[3*e+1]},e.prototype.getBg=function(e){return this._data[3*e+2]},e.prototype.hasContent=function(e){return 4194303&this._data[3*e+0]},e.prototype.getCodePoint=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t},e.prototype.isCombined=function(e){return 2097152&this._data[3*e+0]},e.prototype.getString=function(e){var t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?(0, i.stringFromCodePoint)(2097151&t):""},e.prototype.loadCell=function(e,t){var r=3*e;return t.content=this._data[r+0],t.fg=this._data[r+1],t.bg=this._data[r+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t},e.prototype.setCell=function(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg;},e.prototype.setCellFromCodePoint=function(e,t,r,i,n,o){268435456&n&&(this._extendedAttrs[e]=o),this._data[3*e+0]=t|r<<22,this._data[3*e+1]=i,this._data[3*e+2]=n;},e.prototype.addCodepointToCell=function(e,t){var r=this._data[3*e+0];2097152&r?this._combined[e]+=(0, i.stringFromCodePoint)(t):(2097151&r?(this._combined[e]=(0, i.stringFromCodePoint)(2097151&r)+(0, i.stringFromCodePoint)(t),r&=-2097152,r|=2097152):r=t|1<<22,this._data[3*e+0]=r);},e.prototype.insertCells=function(e,t,r,i){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length-e){for(var n=new o.CellData,a=this.length-e-t-1;a>=0;--a)this.setCell(e+t+a,this.loadCell(e+a,n));for(a=0;a<t;++a)this.setCell(e+a,r);}else for(a=e;a<this.length;++a)this.setCell(a,r);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs);},e.prototype.deleteCells=function(e,t,r,i){if(e%=this.length,t<this.length-e){for(var n=new o.CellData,a=0;a<this.length-e-t;++a)this.setCell(e+a,this.loadCell(e+t+a,n));for(a=this.length-t;a<this.length;++a)this.setCell(a,r);}else for(a=e;a<this.length;++a)this.setCell(a,r);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs);},e.prototype.replaceCells=function(e,t,r,i){for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==i?void 0:i.fg)||0,(null==i?void 0:i.bg)||0,(null==i?void 0:i.extended)||new s.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,r);},e.prototype.resize=function(e,t){if(e!==this.length){if(e>this.length){var r=new Uint32Array(3*e);this.length&&(3*e<this._data.length?r.set(this._data.subarray(0,3*e)):r.set(this._data)),this._data=r;for(var i=this.length;i<e;++i)this.setCell(i,t);}else if(e){(r=new Uint32Array(3*e)).set(this._data.subarray(0,3*e)),this._data=r;var n=Object.keys(this._combined);for(i=0;i<n.length;i++){var o=parseInt(n[i],10);o>=e&&delete this._combined[o];}}else this._data=new Uint32Array(0),this._combined={};this.length=e;}},e.prototype.fill=function(e){this._combined={},this._extendedAttrs={};for(var t=0;t<this.length;++t)this.setCell(t,e);},e.prototype.copyFrom=function(e){for(var t in this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={},e._combined)this._combined[t]=e._combined[t];for(var t in this._extendedAttrs={},e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped;},e.prototype.clone=function(){var t=new e(0);for(var r in t._data=new Uint32Array(this._data),t.length=this.length,this._combined)t._combined[r]=this._combined[r];for(var r in this._extendedAttrs)t._extendedAttrs[r]=this._extendedAttrs[r];return t.isWrapped=this.isWrapped,t},e.prototype.getTrimmedLength=function(){for(var e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0},e.prototype.copyCellsFrom=function(e,t,r,i,n){var o=e._data;if(n)for(var s=i-1;s>=0;s--)for(var a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];else for(s=0;s<i;s++)for(a=0;a<3;a++)this._data[3*(r+s)+a]=o[3*(t+s)+a];var c=Object.keys(e._combined);for(a=0;a<c.length;a++){var l=parseInt(c[a],10);l>=t&&(this._combined[l-t+r]=e._combined[l]);}},e.prototype.translateToString=function(e,t,r){void 0===e&&(e=!1),void 0===t&&(t=0),void 0===r&&(r=this.length),e&&(r=Math.min(r,this.getTrimmedLength()));for(var o="";t<r;){var s=this._data[3*t+0],a=2097151&s;o+=2097152&s?this._combined[t]:a?(0, i.stringFromCodePoint)(a):n.WHITESPACE_CELL_CHAR,t+=s>>22||1;}return o},e}();t.BufferLine=a;},4841:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRangeLength=void 0,t.getRangeLength=function(e,t){if(e.start.y>e.end.y)throw new Error("Buffer range end ("+e.end.x+", "+e.end.y+") cannot be before start ("+e.start.x+", "+e.start.y+")");return t*(e.end.y-e.start.y)+(e.end.x-e.start.x+1)};},4634:(e,t)=>{function r(e,t,r){if(t===e.length-1)return e[t].getTrimmedLength();var i=!e[t].hasContent(r-1)&&1===e[t].getWidth(r-1),n=2===e[t+1].getWidth(0);return i&&n?r-1:r}Object.defineProperty(t,"__esModule",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,i,n,o){for(var s=[],a=0;a<e.length-1;a++){var c=a,l=e.get(++c);if(l.isWrapped){for(var h=[e.get(a)];c<e.length&&l.isWrapped;)h.push(l),l=e.get(++c);if(n>=a&&n<c)a+=h.length-1;else {for(var u=0,f=r(h,u,t),_=1,d=0;_<h.length;){var p=r(h,_,t),v=p-d,y=i-f,g=Math.min(v,y);h[u].copyCellsFrom(h[_],d,f,g,!1),(f+=g)===i&&(u++,f=0),(d+=g)===p&&(_++,d=0),0===f&&0!==u&&2===h[u-1].getWidth(i-1)&&(h[u].copyCellsFrom(h[u-1],i-1,f++,1,!1),h[u-1].setCell(i-1,o));}h[u].replaceCells(f,i,o);for(var m=0,b=h.length-1;b>0&&(b>u||0===h[b].getTrimmedLength());b--)m++;m>0&&(s.push(a+h.length-m),s.push(m)),a+=h.length-1;}}}return s},t.reflowLargerCreateNewLayout=function(e,t){for(var r=[],i=0,n=t[i],o=0,s=0;s<e.length;s++)if(n===s){var a=t[++i];e.onDeleteEmitter.fire({index:s-o,amount:a}),s+=a-1,o+=a,n=t[++i];}else r.push(s);return {layout:r,countRemoved:o}},t.reflowLargerApplyNewLayout=function(e,t){for(var r=[],i=0;i<t.length;i++)r.push(e.get(t[i]));for(i=0;i<r.length;i++)e.set(i,r[i]);e.length=t.length;},t.reflowSmallerGetNewLineLengths=function(e,t,i){for(var n=[],o=e.map((function(i,n){return r(e,n,t)})).reduce((function(e,t){return e+t})),s=0,a=0,c=0;c<o;){if(o-c<i){n.push(o-c);break}s+=i;var l=r(e,a,t);s>l&&(s-=l,a++);var h=2===e[a].getWidth(s-1);h&&s--;var u=h?i-1:i;n.push(u),c+=u;}return n},t.getWrappedLineTrimmedLength=r;},5295:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.BufferSet=void 0;var o=r(9092),s=r(8460),a=function(e){function t(t,r){var i=e.call(this)||this;return i._optionsService=t,i._bufferService=r,i._onBufferActivate=i.register(new s.EventEmitter),i.reset(),i}return n(t,e),Object.defineProperty(t.prototype,"onBufferActivate",{get:function(){return this._onBufferActivate.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this._normal=new o.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new o.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops();},Object.defineProperty(t.prototype,"alt",{get:function(){return this._alt},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"normal",{get:function(){return this._normal},enumerable:!1,configurable:!0}),t.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}));},t.prototype.activateAltBuffer=function(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}));},t.prototype.resize=function(e,t){this._normal.resize(e,t),this._alt.resize(e,t);},t.prototype.setupTabStops=function(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e);},t}(r(844).Disposable);t.BufferSet=a;},511:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.CellData=void 0;var o=r(482),s=r(643),a=r(3734),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.content=0,t.fg=0,t.bg=0,t.extended=new a.ExtendedAttrs,t.combinedData="",t}return n(t,e),t.fromCharData=function(e){var r=new t;return r.setFromCharData(e),r},t.prototype.isCombined=function(){return 2097152&this.content},t.prototype.getWidth=function(){return this.content>>22},t.prototype.getChars=function(){return 2097152&this.content?this.combinedData:2097151&this.content?(0, o.stringFromCodePoint)(2097151&this.content):""},t.prototype.getCode=function(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content},t.prototype.setFromCharData=function(e){this.fg=e[s.CHAR_DATA_ATTR_INDEX],this.bg=0;var t=!1;if(e[s.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[s.CHAR_DATA_CHAR_INDEX].length){var r=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=r&&r<=56319){var i=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=i&&i<=57343?this.content=1024*(r-55296)+i-56320+65536|e[s.CHAR_DATA_WIDTH_INDEX]<<22:t=!0;}else t=!0;}else this.content=e[s.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[s.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[s.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[s.CHAR_DATA_WIDTH_INDEX]<<22);},t.prototype.getAsCharData=function(){return [this.fg,this.getChars(),this.getWidth(),this.getCode()]},t}(a.AttributeData);t.CellData=c;},643:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=256,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR="",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=" ",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32;},4863:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;var o=r(8460),s=function(e){function t(r){var i=e.call(this)||this;return i.line=r,i._id=t._nextId++,i.isDisposed=!1,i._onDispose=new o.EventEmitter,i}return n(t,e),Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDispose",{get:function(){return this._onDispose.event},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),e.prototype.dispose.call(this));},t._nextId=1,t}(r(844).Disposable);t.Marker=s;},7116:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},t.CHARSETS.A={"#":"£"},t.CHARSETS.B=void 0,t.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},t.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},t.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},t.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},t.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},t.CHARSETS.H=t.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"};},2584:(e,t)=>{var r,i;Object.defineProperty(t,"__esModule",{value:!0}),t.C1_ESCAPED=t.C1=t.C0=void 0,function(e){e.NUL="\0",e.SOH="",e.STX="",e.ETX="",e.EOT="",e.ENQ="",e.ACK="",e.BEL="",e.BS="\b",e.HT="\t",e.LF="\n",e.VT="\v",e.FF="\f",e.CR="\r",e.SO="",e.SI="",e.DLE="",e.DC1="",e.DC2="",e.DC3="",e.DC4="",e.NAK="",e.SYN="",e.ETB="",e.CAN="",e.EM="",e.SUB="",e.ESC="",e.FS="",e.GS="",e.RS="",e.US="",e.SP=" ",e.DEL="";}(r=t.C0||(t.C0={})),(i=t.C1||(t.C1={})).PAD="",i.HOP="",i.BPH="",i.NBH="",i.IND="",i.NEL="",i.SSA="",i.ESA="",i.HTS="",i.HTJ="",i.VTS="",i.PLD="",i.PLU="",i.RI="",i.SS2="",i.SS3="",i.DCS="",i.PU1="",i.PU2="",i.STS="",i.CCH="",i.MW="",i.SPA="",i.EPA="",i.SOS="",i.SGCI="",i.SCI="",i.CSI="",i.ST="",i.OSC="",i.PM="",i.APC="",(t.C1_ESCAPED||(t.C1_ESCAPED={})).ST=r.ESC+"\\";},7399:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.evaluateKeyboardEvent=void 0;var i=r(2584),n={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};t.evaluateKeyboardEvent=function(e,t,r,o){var s={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B");break;case 8:if(e.shiftKey){s.key=i.C0.BS;break}if(e.altKey){s.key=i.C0.ESC+i.C0.DEL;break}s.key=i.C0.DEL;break;case 9:if(e.shiftKey){s.key=i.C0.ESC+"[Z";break}s.key=i.C0.HT,s.cancel=!0;break;case 13:s.key=e.altKey?i.C0.ESC+i.C0.CR:i.C0.CR,s.cancel=!0;break;case 27:s.key=i.C0.ESC,e.altKey&&(s.key=i.C0.ESC+i.C0.ESC),s.cancel=!0;break;case 37:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"D",s.key===i.C0.ESC+"[1;3D"&&(s.key=i.C0.ESC+(r?"b":"[1;5D"))):s.key=t?i.C0.ESC+"OD":i.C0.ESC+"[D";break;case 39:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"C",s.key===i.C0.ESC+"[1;3C"&&(s.key=i.C0.ESC+(r?"f":"[1;5C"))):s.key=t?i.C0.ESC+"OC":i.C0.ESC+"[C";break;case 38:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"A",r||s.key!==i.C0.ESC+"[1;3A"||(s.key=i.C0.ESC+"[1;5A")):s.key=t?i.C0.ESC+"OA":i.C0.ESC+"[A";break;case 40:if(e.metaKey)break;a?(s.key=i.C0.ESC+"[1;"+(a+1)+"B",r||s.key!==i.C0.ESC+"[1;3B"||(s.key=i.C0.ESC+"[1;5B")):s.key=t?i.C0.ESC+"OB":i.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(s.key=i.C0.ESC+"[2~");break;case 46:s.key=a?i.C0.ESC+"[3;"+(a+1)+"~":i.C0.ESC+"[3~";break;case 36:s.key=a?i.C0.ESC+"[1;"+(a+1)+"H":t?i.C0.ESC+"OH":i.C0.ESC+"[H";break;case 35:s.key=a?i.C0.ESC+"[1;"+(a+1)+"F":t?i.C0.ESC+"OF":i.C0.ESC+"[F";break;case 33:e.shiftKey?s.type=2:e.ctrlKey?s.key=i.C0.ESC+"[5;"+(a+1)+"~":s.key=i.C0.ESC+"[5~";break;case 34:e.shiftKey?s.type=3:e.ctrlKey?s.key=i.C0.ESC+"[6;"+(a+1)+"~":s.key=i.C0.ESC+"[6~";break;case 112:s.key=a?i.C0.ESC+"[1;"+(a+1)+"P":i.C0.ESC+"OP";break;case 113:s.key=a?i.C0.ESC+"[1;"+(a+1)+"Q":i.C0.ESC+"OQ";break;case 114:s.key=a?i.C0.ESC+"[1;"+(a+1)+"R":i.C0.ESC+"OR";break;case 115:s.key=a?i.C0.ESC+"[1;"+(a+1)+"S":i.C0.ESC+"OS";break;case 116:s.key=a?i.C0.ESC+"[15;"+(a+1)+"~":i.C0.ESC+"[15~";break;case 117:s.key=a?i.C0.ESC+"[17;"+(a+1)+"~":i.C0.ESC+"[17~";break;case 118:s.key=a?i.C0.ESC+"[18;"+(a+1)+"~":i.C0.ESC+"[18~";break;case 119:s.key=a?i.C0.ESC+"[19;"+(a+1)+"~":i.C0.ESC+"[19~";break;case 120:s.key=a?i.C0.ESC+"[20;"+(a+1)+"~":i.C0.ESC+"[20~";break;case 121:s.key=a?i.C0.ESC+"[21;"+(a+1)+"~":i.C0.ESC+"[21~";break;case 122:s.key=a?i.C0.ESC+"[23;"+(a+1)+"~":i.C0.ESC+"[23~";break;case 123:s.key=a?i.C0.ESC+"[24;"+(a+1)+"~":i.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(r&&!o||!e.altKey||e.metaKey)!r||e.altKey||e.ctrlKey||e.shiftKey||!e.metaKey?e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?s.key=e.key:e.key&&e.ctrlKey&&("_"===e.key&&(s.key=i.C0.US),"@"===e.key&&(s.key=i.C0.NUL)):65===e.keyCode&&(s.type=1);else {var c=n[e.keyCode],l=null==c?void 0:c[e.shiftKey?1:0];if(l)s.key=i.C0.ESC+l;else if(e.keyCode>=65&&e.keyCode<=90){var h=e.ctrlKey?e.keyCode-64:e.keyCode+32,u=String.fromCharCode(h);e.shiftKey&&(u=u.toUpperCase()),s.key=i.C0.ESC+u;}else "Dead"===e.key&&e.code.startsWith("Key")&&(u=e.code.slice(3,4),e.shiftKey||(u=u.toLowerCase()),s.key=i.C0.ESC+u,s.cancel=!0);}else e.keyCode>=65&&e.keyCode<=90?s.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?s.key=i.C0.NUL:e.keyCode>=51&&e.keyCode<=55?s.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?s.key=i.C0.DEL:219===e.keyCode?s.key=i.C0.ESC:220===e.keyCode?s.key=i.C0.FS:221===e.keyCode&&(s.key=i.C0.GS);}return s};},482:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);for(var i="",n=t;n<r;++n){var o=e[n];o>65535?(o-=65536,i+=String.fromCharCode(55296+(o>>10))+String.fromCharCode(o%1024+56320)):i+=String.fromCharCode(o);}return i};var r=function(){function e(){this._interim=0;}return e.prototype.clear=function(){this._interim=0;},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i=0,n=0;this._interim&&(56320<=(a=e.charCodeAt(n++))&&a<=57343?t[i++]=1024*(this._interim-55296)+a-56320+65536:(t[i++]=this._interim,t[i++]=a),this._interim=0);for(var o=n;o<r;++o){var s=e.charCodeAt(o);if(55296<=s&&s<=56319){if(++o>=r)return this._interim=s,i;var a;56320<=(a=e.charCodeAt(o))&&a<=57343?t[i++]=1024*(s-55296)+a-56320+65536:(t[i++]=s,t[i++]=a);}else 65279!==s&&(t[i++]=s);}return i},e}();t.StringToUtf32=r;var i=function(){function e(){this.interim=new Uint8Array(3);}return e.prototype.clear=function(){this.interim.fill(0);},e.prototype.decode=function(e,t){var r=e.length;if(!r)return 0;var i,n,o,s,a=0,c=0,l=0;if(this.interim[0]){var h=!1,u=this.interim[0];u&=192==(224&u)?31:224==(240&u)?15:7;for(var f=0,_=void 0;(_=63&this.interim[++f])&&f<4;)u<<=6,u|=_;for(var d=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,p=d-f;l<p;){if(l>=r)return 0;if(128!=(192&(_=e[l++]))){l--,h=!0;break}this.interim[f++]=_,u<<=6,u|=63&_;}h||(2===d?u<128?l--:t[a++]=u:3===d?u<2048||u>=55296&&u<=57343||65279===u||(t[a++]=u):u<65536||u>1114111||(t[a++]=u)),this.interim.fill(0);}for(var v=r-4,y=l;y<r;){for(;!(!(y<v)||128&(i=e[y])||128&(n=e[y+1])||128&(o=e[y+2])||128&(s=e[y+3]));)t[a++]=i,t[a++]=n,t[a++]=o,t[a++]=s,y+=4;if((i=e[y++])<128)t[a++]=i;else if(192==(224&i)){if(y>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[y++]))){y--;continue}if((c=(31&i)<<6|63&n)<128){y--;continue}t[a++]=c;}else if(224==(240&i)){if(y>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[y++]))){y--;continue}if(y>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[y++]))){y--;continue}if((c=(15&i)<<12|(63&n)<<6|63&o)<2048||c>=55296&&c<=57343||65279===c)continue;t[a++]=c;}else if(240==(248&i)){if(y>=r)return this.interim[0]=i,a;if(128!=(192&(n=e[y++]))){y--;continue}if(y>=r)return this.interim[0]=i,this.interim[1]=n,a;if(128!=(192&(o=e[y++]))){y--;continue}if(y>=r)return this.interim[0]=i,this.interim[1]=n,this.interim[2]=o,a;if(128!=(192&(s=e[y++]))){y--;continue}if((c=(7&i)<<18|(63&n)<<12|(63&o)<<6|63&s)<65536||c>1114111)continue;t[a++]=c;}}return a},e}();t.Utf8ToUtf32=i;},225:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeV6=void 0;var i,n=r(8273),o=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],s=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]],a=function(){function e(){if(this.version="6",!i){i=new Uint8Array(65536),(0, n.fill)(i,1),i[0]=0,(0, n.fill)(i,0,1,32),(0, n.fill)(i,0,127,160),(0, n.fill)(i,2,4352,4448),i[9001]=2,i[9002]=2,(0, n.fill)(i,2,11904,42192),i[12351]=1,(0, n.fill)(i,2,44032,55204),(0, n.fill)(i,2,63744,64256),(0, n.fill)(i,2,65040,65050),(0, n.fill)(i,2,65072,65136),(0, n.fill)(i,2,65280,65377),(0, n.fill)(i,2,65504,65511);for(var e=0;e<o.length;++e)(0, n.fill)(i,0,o[e][0],o[e][1]+1);}}return e.prototype.wcwidth=function(e){return e<32?0:e<127?1:e<65536?i[e]:function(e,t){var r,i=0,n=t.length-1;if(e<t[0][0]||e>t[n][1])return !1;for(;n>=i;)if(e>t[r=i+n>>1][1])i=r+1;else {if(!(e<t[r][0]))return !0;n=r-1;}return !1}(e,s)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1},e}();t.UnicodeV6=a;},5981:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WriteBuffer=void 0;var i=r(8460),n="undefined"==typeof queueMicrotask?function(e){Promise.resolve().then(e);}:queueMicrotask,o=function(){function e(e){this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0,this._onWriteParsed=new i.EventEmitter;}return Object.defineProperty(e.prototype,"onWriteParsed",{get:function(){return this._onWriteParsed.event},enumerable:!1,configurable:!0}),e.prototype.writeSync=function(e,t){if(void 0!==t&&this._syncCalls>t)this._syncCalls=0;else if(this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(void 0),this._syncCalls++,!this._isSyncWriting){var r;for(this._isSyncWriting=!0;r=this._writeBuffer.shift();){this._action(r);var i=this._callbacks.shift();i&&i();}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0;}},e.prototype.write=function(e,t){var r=this;if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");this._writeBuffer.length||(this._bufferOffset=0,setTimeout((function(){return r._innerWrite()}))),this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t);},e.prototype._innerWrite=function(e,t){var r=this;void 0===e&&(e=0),void 0===t&&(t=!0);for(var i=e||Date.now();this._writeBuffer.length>this._bufferOffset;){var o=this._writeBuffer[this._bufferOffset],s=this._action(o,t);if(s)return void s.catch((function(e){return n((function(){throw e})),Promise.resolve(!1)})).then((function(e){return Date.now()-i>=12?setTimeout((function(){return r._innerWrite(0,e)})):r._innerWrite(i,e)}));var a=this._callbacks[this._bufferOffset];if(a&&a(),this._bufferOffset++,this._pendingData-=o.length,Date.now()-i>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((function(){return r._innerWrite()}))):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0),this._onWriteParsed.fire();},e}();t.WriteBuffer=o;},5941:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s};Object.defineProperty(t,"__esModule",{value:!0}),t.toRgbString=t.parseColor=void 0;var i=/^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/,n=/^[\da-f]+$/;function o(e,t){var r=e.toString(16),i=r.length<2?"0"+r:r;switch(t){case 4:return r[0];case 8:return i;case 12:return (i+i).slice(0,3);default:return i+i}}t.parseColor=function(e){if(e){var t=e.toLowerCase();if(0===t.indexOf("rgb:")){t=t.slice(4);var r=i.exec(t);if(r){var o=r[1]?15:r[4]?255:r[7]?4095:65535;return [Math.round(parseInt(r[1]||r[4]||r[7]||r[10],16)/o*255),Math.round(parseInt(r[2]||r[5]||r[8]||r[11],16)/o*255),Math.round(parseInt(r[3]||r[6]||r[9]||r[12],16)/o*255)]}}else if(0===t.indexOf("#")&&(t=t.slice(1),n.exec(t)&&[3,6,9,12].includes(t.length))){for(var s=t.length/3,a=[0,0,0],c=0;c<3;++c){var l=parseInt(t.slice(s*c,s*c+s),16);a[c]=1===s?l<<4:2===s?l:3===s?l>>4:l>>8;}return a}}},t.toRgbString=function(e,t){void 0===t&&(t=16);var i=r(e,3),n=i[0],s=i[1],a=i[2];return "rgb:"+o(n,t)+"/"+o(s,t)+"/"+o(a,t)};},5770:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7;},6351:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DcsHandler=t.DcsParser=void 0;var i=r(482),n=r(8742),o=r(5770),s=[],a=function(){function e(){this._handlers=Object.create(null),this._active=s,this._ident=0,this._handlerFb=function(){},this._stack={paused:!1,loopPosition:0,fallThrough:!1};}return e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){},this._active=s;},e.prototype.registerHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1);}}},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e];},e.prototype.setHandlerFallback=function(e){this._handlerFb=e;},e.prototype.reset=function(){if(this._active.length)for(var e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].unhook(!1);this._stack.paused=!1,this._active=s,this._ident=0;},e.prototype.hook=function(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||s,this._active.length)for(var r=this._active.length-1;r>=0;r--)this._active[r].hook(t);else this._handlerFb(this._ident,"HOOK",t);},e.prototype.put=function(e,t,r){if(this._active.length)for(var n=this._active.length-1;n>=0;n--)this._active[n].put(e,t,r);else this._handlerFb(this._ident,"PUT",(0, i.utf32ToString)(e,t,r));},e.prototype.unhook=function(e,t){if(void 0===t&&(t=!0),this._active.length){var r=!1,i=this._active.length-1,n=!1;if(this._stack.paused&&(i=this._stack.loopPosition-1,r=t,n=this._stack.fallThrough,this._stack.paused=!1),!n&&!1===r){for(;i>=0&&!0!==(r=this._active[i].unhook(e));i--)if(r instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!1,r;i--;}for(;i>=0;i--)if((r=this._active[i].unhook(!1))instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!0,r}else this._handlerFb(this._ident,"UNHOOK",e);this._active=s,this._ident=0;},e}();t.DcsParser=a;var c=new n.Params;c.addParam(0);var l=function(){function e(e){this._handler=e,this._data="",this._params=c,this._hitLimit=!1;}return e.prototype.hook=function(e){this._params=e.length>1||e.params[0]?e.clone():c,this._data="",this._hitLimit=!1;},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=(0, i.utf32ToString)(e,t,r),this._data.length>o.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0));},e.prototype.unhook=function(e){var t=this,r=!1;if(this._hitLimit)r=!1;else if(e&&(r=this._handler(this._data,this._params))instanceof Promise)return r.then((function(e){return t._params=c,t._data="",t._hitLimit=!1,e}));return this._params=c,this._data="",this._hitLimit=!1,r},e}();t.DcsHandler=l;},2015:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);});Object.defineProperty(t,"__esModule",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;var o=r(844),s=r(8273),a=r(8742),c=r(6242),l=r(6351),h=function(){function e(e){this.table=new Uint8Array(e);}return e.prototype.setDefault=function(e,t){(0, s.fill)(this.table,e<<4|t);},e.prototype.add=function(e,t,r,i){this.table[t<<8|e]=r<<4|i;},e.prototype.addMany=function(e,t,r,i){for(var n=0;n<e.length;n++)this.table[t<<8|e[n]]=r<<4|i;},e}();t.TransitionTable=h;var u=160;t.VT500_TRANSITION_TABLE=function(){var e=new h(4095),t=Array.apply(null,Array(256)).map((function(e,t){return t})),r=function(e,r){return t.slice(e,r)},i=r(32,127),n=r(0,24);n.push(25),n.push.apply(n,r(28,32));var o,s=r(0,14);for(o in e.setDefault(1,0),e.addMany(i,0,2,0),s)e.addMany([24,26,153,154],o,3,0),e.addMany(r(128,144),o,3,0),e.addMany(r(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(n,0,3,0),e.addMany(n,1,3,1),e.add(127,1,0,1),e.addMany(n,8,0,8),e.addMany(n,3,3,3),e.add(127,3,0,3),e.addMany(n,4,3,4),e.add(127,4,0,4),e.addMany(n,6,3,6),e.addMany(n,5,3,5),e.add(127,5,0,5),e.addMany(n,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(i,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(r(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(i,7,0,7),e.addMany(n,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(r(64,127),3,7,0),e.addMany(r(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(r(48,60),4,8,4),e.addMany(r(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(r(32,64),6,0,6),e.add(127,6,0,6),e.addMany(r(64,127),6,0,0),e.addMany(r(32,48),3,9,5),e.addMany(r(32,48),5,9,5),e.addMany(r(48,64),5,0,6),e.addMany(r(64,127),5,7,0),e.addMany(r(32,48),4,9,5),e.addMany(r(32,48),1,9,2),e.addMany(r(32,48),2,9,2),e.addMany(r(48,127),2,10,0),e.addMany(r(48,80),1,10,0),e.addMany(r(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(r(96,127),1,10,0),e.add(80,1,11,9),e.addMany(n,9,0,9),e.add(127,9,0,9),e.addMany(r(28,32),9,0,9),e.addMany(r(32,48),9,9,12),e.addMany(r(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(n,11,0,11),e.addMany(r(32,128),11,0,11),e.addMany(r(28,32),11,0,11),e.addMany(n,10,0,10),e.add(127,10,0,10),e.addMany(r(28,32),10,0,10),e.addMany(r(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(r(32,48),10,9,12),e.addMany(n,12,0,12),e.add(127,12,0,12),e.addMany(r(28,32),12,0,12),e.addMany(r(32,48),12,9,12),e.addMany(r(48,64),12,0,11),e.addMany(r(64,127),12,12,13),e.addMany(r(64,127),10,12,13),e.addMany(r(64,127),9,12,13),e.addMany(n,13,13,13),e.addMany(i,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(u,0,2,0),e.add(u,8,5,8),e.add(u,6,0,6),e.add(u,11,0,11),e.add(u,13,13,13),e}();var f=function(e){function r(r){void 0===r&&(r=t.VT500_TRANSITION_TABLE);var i=e.call(this)||this;return i._transitions=r,i._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},i.initialState=0,i.currentState=i.initialState,i._params=new a.Params,i._params.addParam(0),i._collect=0,i.precedingCodepoint=0,i._printHandlerFb=function(e,t,r){},i._executeHandlerFb=function(e){},i._csiHandlerFb=function(e,t){},i._escHandlerFb=function(e){},i._errorHandlerFb=function(e){return e},i._printHandler=i._printHandlerFb,i._executeHandlers=Object.create(null),i._csiHandlers=Object.create(null),i._escHandlers=Object.create(null),i._oscParser=new c.OscParser,i._dcsParser=new l.DcsParser,i._errorHandler=i._errorHandlerFb,i.registerEscHandler({final:"\\"},(function(){return !0})),i}return n(r,e),r.prototype._identifier=function(e,t){void 0===t&&(t=[64,126]);var r=0;if(e.prefix){if(e.prefix.length>1)throw new Error("only one byte as prefix supported");if((r=e.prefix.charCodeAt(0))&&60>r||r>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(e.intermediates){if(e.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(var i=0;i<e.intermediates.length;++i){var n=e.intermediates.charCodeAt(i);if(32>n||n>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");r<<=8,r|=n;}}if(1!==e.final.length)throw new Error("final must be a single byte");var o=e.final.charCodeAt(0);if(t[0]>o||o>t[1])throw new Error("final must be in range "+t[0]+" .. "+t[1]);return (r<<=8)|o},r.prototype.identToString=function(e){for(var t=[];e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join("")},r.prototype.dispose=function(){this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null),this._oscParser.dispose(),this._dcsParser.dispose();},r.prototype.setPrintHandler=function(e){this._printHandler=e;},r.prototype.clearPrintHandler=function(){this._printHandler=this._printHandlerFb;},r.prototype.registerEscHandler=function(e,t){var r=this._identifier(e,[48,126]);void 0===this._escHandlers[r]&&(this._escHandlers[r]=[]);var i=this._escHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1);}}},r.prototype.clearEscHandler=function(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])];},r.prototype.setEscHandlerFallback=function(e){this._escHandlerFb=e;},r.prototype.setExecuteHandler=function(e,t){this._executeHandlers[e.charCodeAt(0)]=t;},r.prototype.clearExecuteHandler=function(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)];},r.prototype.setExecuteHandlerFallback=function(e){this._executeHandlerFb=e;},r.prototype.registerCsiHandler=function(e,t){var r=this._identifier(e);void 0===this._csiHandlers[r]&&(this._csiHandlers[r]=[]);var i=this._csiHandlers[r];return i.push(t),{dispose:function(){var e=i.indexOf(t);-1!==e&&i.splice(e,1);}}},r.prototype.clearCsiHandler=function(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)];},r.prototype.setCsiHandlerFallback=function(e){this._csiHandlerFb=e;},r.prototype.registerDcsHandler=function(e,t){return this._dcsParser.registerHandler(this._identifier(e),t)},r.prototype.clearDcsHandler=function(e){this._dcsParser.clearHandler(this._identifier(e));},r.prototype.setDcsHandlerFallback=function(e){this._dcsParser.setHandlerFallback(e);},r.prototype.registerOscHandler=function(e,t){return this._oscParser.registerHandler(e,t)},r.prototype.clearOscHandler=function(e){this._oscParser.clearHandler(e);},r.prototype.setOscHandlerFallback=function(e){this._oscParser.setHandlerFallback(e);},r.prototype.setErrorHandler=function(e){this._errorHandler=e;},r.prototype.clearErrorHandler=function(){this._errorHandler=this._errorHandlerFb;},r.prototype.reset=function(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,0!==this._parseStack.state&&(this._parseStack.state=2,this._parseStack.handlers=[]);},r.prototype._preserveStack=function(e,t,r,i,n){this._parseStack.state=e,this._parseStack.handlers=t,this._parseStack.handlerPos=r,this._parseStack.transition=i,this._parseStack.chunkPos=n;},r.prototype.parse=function(e,t,r){var i,n=0,o=0,s=0;if(this._parseStack.state)if(2===this._parseStack.state)this._parseStack.state=0,s=this._parseStack.chunkPos+1;else {if(void 0===r||1===this._parseStack.state)throw this._parseStack.state=1,new Error("improper continuation due to previous async handler, giving up parsing");var a=this._parseStack.handlers,c=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(!1===r&&c>-1)for(;c>=0&&!0!==(i=a[c](this._params));c--)if(i instanceof Promise)return this._parseStack.handlerPos=c,i;this._parseStack.handlers=[];break;case 4:if(!1===r&&c>-1)for(;c>=0&&!0!==(i=a[c]());c--)if(i instanceof Promise)return this._parseStack.handlerPos=c,i;this._parseStack.handlers=[];break;case 6:if(n=e[this._parseStack.chunkPos],i=this._dcsParser.unhook(24!==n&&26!==n,r))return i;27===n&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(n=e[this._parseStack.chunkPos],i=this._oscParser.end(24!==n&&26!==n,r))return i;27===n&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;}this._parseStack.state=0,s=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition;}for(var l=s;l<t;++l){switch(n=e[l],(o=this._transitions.table[this.currentState<<8|(n<160?n:u)])>>4){case 2:for(var h=l+1;;++h){if(h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}if(++h>=t||(n=e[h])<32||n>126&&n<u){this._printHandler(e,l,h),l=h-1;break}}break;case 3:this._executeHandlers[n]?this._executeHandlers[n]():this._executeHandlerFb(n),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:l,code:n,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:for(var f=(a=this._csiHandlers[this._collect<<8|n])?a.length-1:-1;f>=0&&!0!==(i=a[f](this._params));f--)if(i instanceof Promise)return this._preserveStack(3,a,f,o,l),i;f<0&&this._csiHandlerFb(this._collect<<8|n,this._params),this.precedingCodepoint=0;break;case 8:do{switch(n){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(n-48);}}while(++l<t&&(n=e[l])>47&&n<60);l--;break;case 9:this._collect<<=8,this._collect|=n;break;case 10:for(var _=this._escHandlers[this._collect<<8|n],d=_?_.length-1:-1;d>=0&&!0!==(i=_[d]());d--)if(i instanceof Promise)return this._preserveStack(4,_,d,o,l),i;d<0&&this._escHandlerFb(this._collect<<8|n),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|n,this._params);break;case 13:for(var p=l+1;;++p)if(p>=t||24===(n=e[p])||26===n||27===n||n>127&&n<u){this._dcsParser.put(e,l,p),l=p-1;break}break;case 14:if(i=this._dcsParser.unhook(24!==n&&26!==n))return this._preserveStack(6,[],0,o,l),i;27===n&&(o|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(var v=l+1;;v++)if(v>=t||(n=e[v])<32||n>127&&n<u){this._oscParser.put(e,l,v),l=v-1;break}break;case 6:if(i=this._oscParser.end(24!==n&&26!==n))return this._preserveStack(5,[],0,o,l),i;27===n&&(o|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;}this.currentState=15&o;}},r}(o.Disposable);t.EscapeSequenceParser=f;},6242:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OscHandler=t.OscParser=void 0;var i=r(5770),n=r(482),o=[],s=function(){function e(){this._state=0,this._active=o,this._id=-1,this._handlers=Object.create(null),this._handlerFb=function(){},this._stack={paused:!1,loopPosition:0,fallThrough:!1};}return e.prototype.registerHandler=function(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);var r=this._handlers[e];return r.push(t),{dispose:function(){var e=r.indexOf(t);-1!==e&&r.splice(e,1);}}},e.prototype.clearHandler=function(e){this._handlers[e]&&delete this._handlers[e];},e.prototype.setHandlerFallback=function(e){this._handlerFb=e;},e.prototype.dispose=function(){this._handlers=Object.create(null),this._handlerFb=function(){},this._active=o;},e.prototype.reset=function(){if(2===this._state)for(var e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].end(!1);this._stack.paused=!1,this._active=o,this._id=-1,this._state=0;},e.prototype._start=function(){if(this._active=this._handlers[this._id]||o,this._active.length)for(var e=this._active.length-1;e>=0;e--)this._active[e].start();else this._handlerFb(this._id,"START");},e.prototype._put=function(e,t,r){if(this._active.length)for(var i=this._active.length-1;i>=0;i--)this._active[i].put(e,t,r);else this._handlerFb(this._id,"PUT",(0, n.utf32ToString)(e,t,r));},e.prototype.start=function(){this.reset(),this._state=1;},e.prototype.put=function(e,t,r){if(3!==this._state){if(1===this._state)for(;t<r;){var i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48;}2===this._state&&r-t>0&&this._put(e,t,r);}},e.prototype.end=function(e,t){if(void 0===t&&(t=!0),0!==this._state){if(3!==this._state)if(1===this._state&&this._start(),this._active.length){var r=!1,i=this._active.length-1,n=!1;if(this._stack.paused&&(i=this._stack.loopPosition-1,r=t,n=this._stack.fallThrough,this._stack.paused=!1),!n&&!1===r){for(;i>=0&&!0!==(r=this._active[i].end(e));i--)if(r instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!1,r;i--;}for(;i>=0;i--)if((r=this._active[i].end(!1))instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=i,this._stack.fallThrough=!0,r}else this._handlerFb(this._id,"END",e);this._active=o,this._id=-1,this._state=0;}},e}();t.OscParser=s;var a=function(){function e(e){this._handler=e,this._data="",this._hitLimit=!1;}return e.prototype.start=function(){this._data="",this._hitLimit=!1;},e.prototype.put=function(e,t,r){this._hitLimit||(this._data+=(0, n.utf32ToString)(e,t,r),this._data.length>i.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0));},e.prototype.end=function(e){var t=this,r=!1;if(this._hitLimit)r=!1;else if(e&&(r=this._handler(this._data))instanceof Promise)return r.then((function(e){return t._data="",t._hitLimit=!1,e}));return this._data="",this._hitLimit=!1,r},e}();t.OscHandler=a;},8742:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Params=void 0;var r=2147483647,i=function(){function e(e,t){if(void 0===e&&(e=32),void 0===t&&(t=32),this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1;}return e.fromArray=function(t){var r=new e;if(!t.length)return r;for(var i=Array.isArray(t[0])?1:0;i<t.length;++i){var n=t[i];if(Array.isArray(n))for(var o=0;o<n.length;++o)r.addSubParam(n[o]);else r.addParam(n);}return r},e.prototype.clone=function(){var t=new e(this.maxLength,this.maxSubParamsLength);return t.params.set(this.params),t.length=this.length,t._subParams.set(this._subParams),t._subParamsLength=this._subParamsLength,t._subParamsIdx.set(this._subParamsIdx),t._rejectDigits=this._rejectDigits,t._rejectSubDigits=this._rejectSubDigits,t._digitIsSub=this._digitIsSub,t},e.prototype.toArray=function(){for(var e=[],t=0;t<this.length;++t){e.push(this.params[t]);var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&e.push(Array.prototype.slice.call(this._subParams,r,i));}return e},e.prototype.reset=function(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1;},e.prototype.addParam=function(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else {if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>r?r:e;}},e.prototype.addSubParam=function(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else {if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=e>r?r:e,this._subParamsIdx[this.length-1]++;}},e.prototype.hasSubParams=function(e){return (255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0},e.prototype.getSubParams=function(e){var t=this._subParamsIdx[e]>>8,r=255&this._subParamsIdx[e];return r-t>0?this._subParams.subarray(t,r):null},e.prototype.getSubParamsAll=function(){for(var e={},t=0;t<this.length;++t){var r=this._subParamsIdx[t]>>8,i=255&this._subParamsIdx[t];i-r>0&&(e[t]=this._subParams.slice(r,i));}return e},e.prototype.addDigit=function(e){var t;if(!(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)){var i=this._digitIsSub?this._subParams:this.params,n=i[t-1];i[t-1]=~n?Math.min(10*n+e,r):e;}},e}();t.Params=i;},5741:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddonManager=void 0;var r=function(){function e(){this._addons=[];}return e.prototype.dispose=function(){for(var e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose();},e.prototype.loadAddon=function(e,t){var r=this,i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=function(){return r._wrappedAddonDispose(i)},t.activate(e);},e.prototype._wrappedAddonDispose=function(e){if(!e.isDisposed){for(var t=-1,r=0;r<this._addons.length;r++)if(this._addons[r]===e){t=r;break}if(-1===t)throw new Error("Could not dispose an addon that has not been loaded");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1);}},e}();t.AddonManager=r;},8771:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferApiView=void 0;var i=r(3785),n=r(511),o=function(){function e(e,t){this._buffer=e,this.type=t;}return e.prototype.init=function(e){return this._buffer=e,this},Object.defineProperty(e.prototype,"cursorY",{get:function(){return this._buffer.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cursorX",{get:function(){return this._buffer.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"viewportY",{get:function(){return this._buffer.ydisp},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"baseY",{get:function(){return this._buffer.ybase},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._buffer.lines.length},enumerable:!1,configurable:!0}),e.prototype.getLine=function(e){var t=this._buffer.lines.get(e);if(t)return new i.BufferLineApiView(t)},e.prototype.getNullCell=function(){return new n.CellData},e}();t.BufferApiView=o;},3785:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLineApiView=void 0;var i=r(511),n=function(){function e(e){this._line=e;}return Object.defineProperty(e.prototype,"isWrapped",{get:function(){return this._line.isWrapped},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._line.length},enumerable:!1,configurable:!0}),e.prototype.getCell=function(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new i.CellData)},e.prototype.translateToString=function(e,t,r){return this._line.translateToString(e,t,r)},e}();t.BufferLineApiView=n;},8285:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferNamespaceApi=void 0;var i=r(8771),n=r(8460),o=function(){function e(e){var t=this;this._core=e,this._onBufferChange=new n.EventEmitter,this._normal=new i.BufferApiView(this._core.buffers.normal,"normal"),this._alternate=new i.BufferApiView(this._core.buffers.alt,"alternate"),this._core.buffers.onBufferActivate((function(){return t._onBufferChange.fire(t.active)}));}return Object.defineProperty(e.prototype,"onBufferChange",{get:function(){return this._onBufferChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"active",{get:function(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"normal",{get:function(){return this._normal.init(this._core.buffers.normal)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"alternate",{get:function(){return this._alternate.init(this._core.buffers.alt)},enumerable:!1,configurable:!0}),e}();t.BufferNamespaceApi=o;},7975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ParserApi=void 0;var r=function(){function e(e){this._core=e;}return e.prototype.registerCsiHandler=function(e,t){return this._core.registerCsiHandler(e,(function(e){return t(e.toArray())}))},e.prototype.addCsiHandler=function(e,t){return this.registerCsiHandler(e,t)},e.prototype.registerDcsHandler=function(e,t){return this._core.registerDcsHandler(e,(function(e,r){return t(e,r.toArray())}))},e.prototype.addDcsHandler=function(e,t){return this.registerDcsHandler(e,t)},e.prototype.registerEscHandler=function(e,t){return this._core.registerEscHandler(e,t)},e.prototype.addEscHandler=function(e,t){return this.registerEscHandler(e,t)},e.prototype.registerOscHandler=function(e,t){return this._core.registerOscHandler(e,t)},e.prototype.addOscHandler=function(e,t){return this.registerOscHandler(e,t)},e}();t.ParserApi=r;},7090:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeApi=void 0;var r=function(){function e(e){this._core=e;}return e.prototype.register=function(e){this._core.unicodeService.register(e);},Object.defineProperty(e.prototype,"versions",{get:function(){return this._core.unicodeService.versions},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._core.unicodeService.activeVersion},set:function(e){this._core.unicodeService.activeVersion=e;},enumerable:!1,configurable:!0}),e}();t.UnicodeApi=r;},744:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;var a=r(2585),c=r(5295),l=r(8460),h=r(844);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;var u=function(e){function r(r){var i=e.call(this)||this;return i._optionsService=r,i.isUserScrolling=!1,i._onResize=new l.EventEmitter,i._onScroll=new l.EventEmitter,i.cols=Math.max(r.rawOptions.cols||0,t.MINIMUM_COLS),i.rows=Math.max(r.rawOptions.rows||0,t.MINIMUM_ROWS),i.buffers=new c.BufferSet(r,i),i}return n(r,e),Object.defineProperty(r.prototype,"onResize",{get:function(){return this._onResize.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"onScroll",{get:function(){return this._onScroll.event},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!1,configurable:!0}),r.prototype.dispose=function(){e.prototype.dispose.call(this),this.buffers.dispose();},r.prototype.resize=function(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this.buffers.setupTabStops(this.cols),this._onResize.fire({cols:e,rows:t});},r.prototype.reset=function(){this.buffers.reset(),this.isUserScrolling=!1;},r.prototype.scroll=function(e,t){void 0===t&&(t=!1);var r,i=this.buffer;(r=this._cachedBlankLine)&&r.length===this.cols&&r.getFg(0)===e.fg&&r.getBg(0)===e.bg||(r=i.getBlankLine(e,t),this._cachedBlankLine=r),r.isWrapped=t;var n=i.ybase+i.scrollTop,o=i.ybase+i.scrollBottom;if(0===i.scrollTop){var s=i.lines.isFull;o===i.lines.length-1?s?i.lines.recycle().copyFrom(r):i.lines.push(r.clone()):i.lines.splice(o+1,0,r.clone()),s?this.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this.isUserScrolling||i.ydisp++);}else {var a=o-n+1;i.lines.shiftElements(n+1,a-1,-1),i.lines.set(o,r.clone());}this.isUserScrolling||(i.ydisp=i.ybase),this._onScroll.fire(i.ydisp);},r.prototype.scrollLines=function(e,t,r){var i=this.buffer;if(e<0){if(0===i.ydisp)return;this.isUserScrolling=!0;}else e+i.ydisp>=i.ybase&&(this.isUserScrolling=!1);var n=i.ydisp;i.ydisp=Math.max(Math.min(i.ydisp+e,i.ybase),0),n!==i.ydisp&&(t||this._onScroll.fire(i.ydisp));},r.prototype.scrollPages=function(e){this.scrollLines(e*(this.rows-1));},r.prototype.scrollToTop=function(){this.scrollLines(-this.buffer.ydisp);},r.prototype.scrollToBottom=function(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp);},r.prototype.scrollToLine=function(e){var t=e-this.buffer.ydisp;0!==t&&this.scrollLines(t);},o([s(0,a.IOptionsService)],r)}(h.Disposable);t.BufferService=u;},7994:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CharsetService=void 0;var r=function(){function e(){this.glevel=0,this._charsets=[];}return e.prototype.reset=function(){this.charset=void 0,this._charsets=[],this.glevel=0;},e.prototype.setgLevel=function(e){this.glevel=e,this.charset=this._charsets[e];},e.prototype.setgCharset=function(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t);},e}();t.CharsetService=r;},1753:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreMouseService=void 0;var s=r(2585),a=r(8460),c={NONE:{events:0,restrict:function(){return !1}},X10:{events:1,restrict:function(e){return 4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)}},VT200:{events:19,restrict:function(e){return 32!==e.action}},DRAG:{events:23,restrict:function(e){return 32!==e.action||3!==e.button}},ANY:{events:31,restrict:function(e){return !0}}};function l(e,t){var r=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(r|=64,r|=e.action):(r|=3&e.button,4&e.button&&(r|=64),8&e.button&&(r|=128),32===e.action?r|=32:0!==e.action||t||(r|=3)),r}var h=String.fromCharCode,u={DEFAULT:function(e){var t=[l(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?"":"[M"+h(t[0])+h(t[1])+h(t[2])},SGR:function(e){var t=0===e.action&&4!==e.button?"m":"M";return "[<"+l(e,!0)+";"+e.col+";"+e.row+t}},f=function(){function e(e,t){var r,i,n,s;this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._onProtocolChange=new a.EventEmitter,this._lastEvent=null;try{for(var l=o(Object.keys(c)),h=l.next();!h.done;h=l.next()){var f=h.value;this.addProtocol(f,c[f]);}}catch(e){r={error:e};}finally{try{h&&!h.done&&(i=l.return)&&i.call(l);}finally{if(r)throw r.error}}try{for(var _=o(Object.keys(u)),d=_.next();!d.done;d=_.next()){var p=d.value;this.addEncoding(p,u[p]);}}catch(e){n={error:e};}finally{try{d&&!d.done&&(s=_.return)&&s.call(_);}finally{if(n)throw n.error}}this.reset();}return e.prototype.addProtocol=function(e,t){this._protocols[e]=t;},e.prototype.addEncoding=function(e,t){this._encodings[e]=t;},Object.defineProperty(e.prototype,"activeProtocol",{get:function(){return this._activeProtocol},set:function(e){if(!this._protocols[e])throw new Error('unknown protocol "'+e+'"');this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events);},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"areMouseEventsActive",{get:function(){return 0!==this._protocols[this._activeProtocol].events},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeEncoding",{get:function(){return this._activeEncoding},set:function(e){if(!this._encodings[e])throw new Error('unknown encoding "'+e+'"');this._activeEncoding=e;},enumerable:!1,configurable:!0}),e.prototype.reset=function(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null;},Object.defineProperty(e.prototype,"onProtocolChange",{get:function(){return this._onProtocolChange.event},enumerable:!1,configurable:!0}),e.prototype.triggerMouseEvent=function(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return !1;if(4===e.button&&32===e.action)return !1;if(3===e.button&&32!==e.action)return !1;if(4!==e.button&&(2===e.action||3===e.action))return !1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._compareEvents(this._lastEvent,e))return !1;if(!this._protocols[this._activeProtocol].restrict(e))return !1;var t=this._encodings[this._activeEncoding](e);return t&&("DEFAULT"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0},e.prototype.explainEvents=function(e){return {down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}},e.prototype._compareEvents=function(e,t){return e.col===t.col&&e.row===t.row&&e.button===t.button&&e.action===t.action&&e.ctrl===t.ctrl&&e.alt===t.alt&&e.shift===t.shift},i([n(0,s.IBufferService),n(1,s.ICoreService)],e)}();t.CoreMouseService=f;},6975:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},s=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreService=void 0;var a=r(2585),c=r(8460),l=r(1439),h=r(844),u=Object.freeze({insertMode:!1}),f=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0}),_=function(e){function t(t,r,i,n){var o=e.call(this)||this;return o._bufferService=r,o._logService=i,o._optionsService=n,o.isCursorInitialized=!1,o.isCursorHidden=!1,o._onData=o.register(new c.EventEmitter),o._onUserInput=o.register(new c.EventEmitter),o._onBinary=o.register(new c.EventEmitter),o._scrollToBottom=t,o.register({dispose:function(){return o._scrollToBottom=void 0}}),o.modes=(0, l.clone)(u),o.decPrivateModes=(0, l.clone)(f),o}return n(t,e),Object.defineProperty(t.prototype,"onData",{get:function(){return this._onData.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onUserInput",{get:function(){return this._onUserInput.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onBinary",{get:function(){return this._onBinary.event},enumerable:!1,configurable:!0}),t.prototype.reset=function(){this.modes=(0, l.clone)(u),this.decPrivateModes=(0, l.clone)(f);},t.prototype.triggerDataEvent=function(e,t){if(void 0===t&&(t=!1),!this._optionsService.rawOptions.disableStdin){var r=this._bufferService.buffer;r.ybase!==r.ydisp&&this._scrollToBottom(),t&&this._onUserInput.fire(),this._logService.debug('sending data "'+e+'"',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onData.fire(e);}},t.prototype.triggerBinaryEvent=function(e){this._optionsService.rawOptions.disableStdin||(this._logService.debug('sending binary "'+e+'"',(function(){return e.split("").map((function(e){return e.charCodeAt(0)}))})),this._onBinary.fire(e));},o([s(1,a.IBufferService),s(2,a.ILogService),s(3,a.IOptionsService)],t)}(h.Disposable);t.CoreService=_;},9074:function(e,t,r){var i,n=this&&this.__extends||(i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);},i(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e;}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r);}),o=this&&this.__generator||function(e,t){var r,i,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s);}catch(e){o=[6,e],i=0;}finally{r=n=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},s=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.DecorationService=void 0;var a=r(8055),c=r(8460),l=r(844),h=r(6106),u=function(e){function t(){var t=e.call(this)||this;return t._decorations=new h.SortedList((function(e){return e.marker.line})),t._onDecorationRegistered=t.register(new c.EventEmitter),t._onDecorationRemoved=t.register(new c.EventEmitter),t}return n(t,e),Object.defineProperty(t.prototype,"onDecorationRegistered",{get:function(){return this._onDecorationRegistered.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onDecorationRemoved",{get:function(){return this._onDecorationRemoved.event},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"decorations",{get:function(){return this._decorations.values()},enumerable:!1,configurable:!0}),t.prototype.registerDecoration=function(e){var t=this;if(!e.marker.isDisposed){var r=new f(e);if(r){var i=r.marker.onDispose((function(){return r.dispose()}));r.onDispose((function(){r&&(t._decorations.delete(r)&&t._onDecorationRemoved.fire(r),i.dispose());})),this._decorations.insert(r),this._onDecorationRegistered.fire(r);}return r}},t.prototype.reset=function(){var e,t;try{for(var r=s(this._decorations.values()),i=r.next();!i.done;i=r.next())i.value.dispose();}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}this._decorations.clear();},t.prototype.getDecorationsAtLine=function(e){return o(this,(function(t){return [2,this._decorations.getKeyIterator(e)]}))},t.prototype.getDecorationsAtCell=function(e,t,r){var i,n,a,c,l,h,u,f,_,d,p;return o(this,(function(o){switch(o.label){case 0:i=0,n=0,o.label=1;case 1:o.trys.push([1,6,7,8]),a=s(this._decorations.getKeyIterator(t)),c=a.next(),o.label=2;case 2:return c.done?[3,5]:(l=c.value,i=null!==(_=l.options.x)&&void 0!==_?_:0,n=i+(null!==(d=l.options.width)&&void 0!==d?d:1),!(e>=i&&e<n)||r&&(null!==(p=l.options.layer)&&void 0!==p?p:"bottom")!==r?[3,4]:[4,l]);case 3:o.sent(),o.label=4;case 4:return c=a.next(),[3,2];case 5:return [3,8];case 6:return h=o.sent(),u={error:h},[3,8];case 7:try{c&&!c.done&&(f=a.return)&&f.call(a);}finally{if(u)throw u.error}return [7];case 8:return [2]}}))},t.prototype.dispose=function(){var e,t;try{for(var r=s(this._decorations.values()),i=r.next();!i.done;i=r.next()){var n=i.value;this._onDecorationRemoved.fire(n);}}catch(t){e={error:t};}finally{try{i&&!i.done&&(t=r.return)&&t.call(r);}finally{if(e)throw e.error}}this.reset();},t}(l.Disposable);t.DecorationService=u;var f=function(e){function t(t){var r=e.call(this)||this;return r.options=t,r.isDisposed=!1,r.onRenderEmitter=r.register(new c.EventEmitter),r.onRender=r.onRenderEmitter.event,r._onDispose=r.register(new c.EventEmitter),r.onDispose=r._onDispose.event,r._cachedBg=null,r._cachedFg=null,r.marker=t.marker,r.options.overviewRulerOptions&&!r.options.overviewRulerOptions.position&&(r.options.overviewRulerOptions.position="full"),r}return n(t,e),Object.defineProperty(t.prototype,"backgroundColorRGB",{get:function(){return null===this._cachedBg&&(this.options.backgroundColor?this._cachedBg=a.css.toColor(this.options.backgroundColor):this._cachedBg=void 0),this._cachedBg},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"foregroundColorRGB",{get:function(){return null===this._cachedFg&&(this.options.foregroundColor?this._cachedFg=a.css.toColor(this.options.foregroundColor):this._cachedFg=void 0),this._cachedFg},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){this._isDisposed||(this._isDisposed=!0,this._onDispose.fire(),e.prototype.dispose.call(this));},t}(l.Disposable);},3730:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.DirtyRowService=void 0;var o=r(2585),s=function(){function e(e){this._bufferService=e,this.clearRange();}return Object.defineProperty(e.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),e.prototype.clearRange=function(){this._start=this._bufferService.buffer.y,this._end=this._bufferService.buffer.y;},e.prototype.markDirty=function(e){e<this._start?this._start=e:e>this._end&&(this._end=e);},e.prototype.markRangeDirty=function(e,t){if(e>t){var r=e;e=t,t=r;}e<this._start&&(this._start=e),t>this._end&&(this._end=t);},e.prototype.markAllDirty=function(){this.markRangeDirty(0,this._bufferService.rows-1);},i([n(0,o.IBufferService)],e)}();t.DirtyRowService=s;},4348:function(e,t,r){var i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return {next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s},o=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;var s=r(2585),a=r(8343),c=function(){function e(){for(var e,t,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];this._entries=new Map;try{for(var s=i(r),a=s.next();!a.done;a=s.next()){var c=n(a.value,2),l=c[0],h=c[1];this.set(l,h);}}catch(t){e={error:t};}finally{try{a&&!a.done&&(t=s.return)&&t.call(s);}finally{if(e)throw e.error}}}return e.prototype.set=function(e,t){var r=this._entries.get(e);return this._entries.set(e,t),r},e.prototype.forEach=function(e){this._entries.forEach((function(t,r){return e(r,t)}));},e.prototype.has=function(e){return this._entries.has(e)},e.prototype.get=function(e){return this._entries.get(e)},e}();t.ServiceCollection=c;var l=function(){function e(){this._services=new c,this._services.set(s.IInstantiationService,this);}return e.prototype.setService=function(e,t){this._services.set(e,t);},e.prototype.getService=function(e){return this._services.get(e)},e.prototype.createInstance=function(e){for(var t,r,s=[],c=1;c<arguments.length;c++)s[c-1]=arguments[c];var l=(0, a.getServiceDependencies)(e).sort((function(e,t){return e.index-t.index})),h=[];try{for(var u=i(l),f=u.next();!f.done;f=u.next()){var _=f.value,d=this._services.get(_.id);if(!d)throw new Error("[createInstance] "+e.name+" depends on UNKNOWN service "+_.id+".");h.push(d);}}catch(e){t={error:e};}finally{try{f&&!f.done&&(r=u.return)&&r.call(u);}finally{if(t)throw t.error}}var p=l.length>0?l[0].index:s.length;if(s.length!==p)throw new Error("[createInstance] First service dependency of "+e.name+" at position "+(p+1)+" conflicts with "+s.length+" static arguments");return new(e.bind.apply(e,o([void 0],n(o(o([],n(s),!1),n(h),!1)),!1)))},e}();t.InstantiationService=l;},7866:function(e,t,r){var i=this&&this.__decorate||function(e,t,r,i){var n,o=arguments.length,s=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(s=(o<3?n(s):o>3?n(t,r,s):n(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s},n=this&&this.__param||function(e,t){return function(r,i){t(r,i,e);}},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(i=o.next()).done;)s.push(i.value);}catch(e){n={error:e};}finally{try{i&&!i.done&&(r=o.return)&&r.call(o);}finally{if(n)throw n.error}}return s},s=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var i,n=0,o=t.length;n<o;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.LogService=void 0;var a=r(2585),c={debug:a.LogLevelEnum.DEBUG,info:a.LogLevelEnum.INFO,warn:a.LogLevelEnum.WARN,error:a.LogLevelEnum.ERROR,off:a.LogLevelEnum.OFF},l=function(){function e(e){var t=this;this._optionsService=e,this.logLevel=a.LogLevelEnum.OFF,this._updateLogLevel(),this._optionsService.onOptionChange((function(e){"logLevel"===e&&t._updateLogLevel();}));}return e.prototype._updateLogLevel=function(){this.logLevel=c[this._optionsService.rawOptions.logLevel];},e.prototype._evalLazyOptionalParams=function(e){for(var t=0;t<e.length;t++)"function"==typeof e[t]&&(e[t]=e[t]());},e.prototype._log=function(e,t,r){this._evalLazyOptionalParams(r),e.call.apply(e,s([console,"xterm.js: "+t],o(r),!1));},e.prototype.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.DEBUG&&this._log(console.log,e,t);},e.prototype.info=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.INFO&&this._log(console.info,e,t);},e.prototype.warn=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.WARN&&this._log(console.warn,e,t);},e.prototype.error=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this.logLevel<=a.LogLevelEnum.ERROR&&this._log(console.error,e,t);},i([n(0,a.IOptionsService)],e)}();t.LogService=l;},7302:function(e,t,r){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=t.DEFAULT_BELL_SOUND=void 0;var n=r(8460),o=r(6114);t.DEFAULT_BELL_SOUND="data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",t.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,customGlyphs:!0,bellSound:t.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,linkTooltipHoverDuration:500,letterSpacing:0,logLevel:"info",scrollback:1e3,scrollSensitivity:1,screenReaderMode:!1,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!0,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:o.isMac,rendererType:"canvas",windowOptions:{},windowsMode:!1,wordSeparator:" ()[]{}',\"`",altClickMovesCursor:!0,convertEol:!1,termName:"xterm",cancelEvents:!1,overviewRulerWidth:void 0};var s=["normal","bold","100","200","300","400","500","600","700","800","900"],a=function(){function e(e){this._onOptionChange=new n.EventEmitter;var r=i({},t.DEFAULT_OPTIONS);for(var o in e)if(o in r)try{var s=e[o];r[o]=this._sanitizeAndValidateOption(o,s);}catch(e){console.error(e);}this.rawOptions=r,this.options=i({},r),this._setupOptions();}return Object.defineProperty(e.prototype,"onOptionChange",{get:function(){return this._onOptionChange.event},enumerable:!1,configurable:!0}),e.prototype._setupOptions=function(){var e=this,r=function(r){if(!(r in t.DEFAULT_OPTIONS))throw new Error('No option with key "'+r+'"');return e.rawOptions[r]},i=function(r,i){if(!(r in t.DEFAULT_OPTIONS))throw new Error('No option with key "'+r+'"');i=e._sanitizeAndValidateOption(r,i),e.rawOptions[r]!==i&&(e.rawOptions[r]=i,e._onOptionChange.fire(r));};for(var n in this.rawOptions){var o={get:r.bind(this,n),set:i.bind(this,n)};Object.defineProperty(this.options,n,o);}},e.prototype.setOption=function(e,t){this.options[e]=t;},e.prototype._sanitizeAndValidateOption=function(e,r){switch(e){case"bellStyle":case"cursorStyle":case"rendererType":case"wordSeparator":r||(r=t.DEFAULT_OPTIONS[e]);break;case"fontWeight":case"fontWeightBold":if("number"==typeof r&&1<=r&&r<=1e3)break;r=s.includes(r)?r:t.DEFAULT_OPTIONS[e];break;case"cursorWidth":r=Math.floor(r);case"lineHeight":case"tabStopWidth":if(r<1)throw new Error(e+" cannot be less than 1, value: "+r);break;case"minimumContrastRatio":r=Math.max(1,Math.min(21,Math.round(10*r)/10));break;case"scrollback":if((r=Math.min(r,4294967295))<0)throw new Error(e+" cannot be less than 0, value: "+r);break;case"fastScrollSensitivity":case"scrollSensitivity":if(r<=0)throw new Error(e+" cannot be less than or equal to 0, value: "+r);case"rows":case"cols":if(!r&&0!==r)throw new Error(e+" must be numeric, value: "+r)}return r},e.prototype.getOption=function(e){return this.options[e]},e}();t.OptionsService=a;},8343:(e,t)=>{function r(e,t,r){t.di$target===t?t.di$dependencies.push({id:e,index:r}):(t.di$dependencies=[{id:e,index:r}],t.di$target=t);}Object.defineProperty(t,"__esModule",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0,t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e.di$dependencies||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);var i=function(e,t,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");r(i,e,n);};return i.toString=function(){return e},t.serviceRegistry.set(e,i),i};},2585:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IDecorationService=t.IUnicodeService=t.IOptionsService=t.ILogService=t.LogLevelEnum=t.IInstantiationService=t.IDirtyRowService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;var i,n=r(8343);t.IBufferService=(0, n.createDecorator)("BufferService"),t.ICoreMouseService=(0, n.createDecorator)("CoreMouseService"),t.ICoreService=(0, n.createDecorator)("CoreService"),t.ICharsetService=(0, n.createDecorator)("CharsetService"),t.IDirtyRowService=(0, n.createDecorator)("DirtyRowService"),t.IInstantiationService=(0, n.createDecorator)("InstantiationService"),(i=t.LogLevelEnum||(t.LogLevelEnum={}))[i.DEBUG=0]="DEBUG",i[i.INFO=1]="INFO",i[i.WARN=2]="WARN",i[i.ERROR=3]="ERROR",i[i.OFF=4]="OFF",t.ILogService=(0, n.createDecorator)("LogService"),t.IOptionsService=(0, n.createDecorator)("OptionsService"),t.IUnicodeService=(0, n.createDecorator)("UnicodeService"),t.IDecorationService=(0, n.createDecorator)("DecorationService");},1480:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeService=void 0;var i=r(8460),n=r(225),o=function(){function e(){this._providers=Object.create(null),this._active="",this._onChange=new i.EventEmitter;var e=new n.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e;}return Object.defineProperty(e.prototype,"onChange",{get:function(){return this._onChange.event},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"versions",{get:function(){return Object.keys(this._providers)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeVersion",{get:function(){return this._active},set:function(e){if(!this._providers[e])throw new Error('unknown Unicode version "'+e+'"');this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e);},enumerable:!1,configurable:!0}),e.prototype.register=function(e){this._providers[e.version]=e;},e.prototype.wcwidth=function(e){return this._activeProvider.wcwidth(e)},e.prototype.getStringCellWidth=function(e){for(var t=0,r=e.length,i=0;i<r;++i){var n=e.charCodeAt(i);if(55296<=n&&n<=56319){if(++i>=r)return t+this.wcwidth(n);var o=e.charCodeAt(i);56320<=o&&o<=57343?n=1024*(n-55296)+o-56320+65536:t+=this.wcwidth(o);}t+=this.wcwidth(n);}return t},e}();t.UnicodeService=o;}},t={};return function r(i){var n=t[i];if(void 0!==n)return n.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,r),o.exports}(4389)})()}));
    	
    } (xterm));

    var xtermAddonWebLinks = {exports: {}};

    (function (module, exports) {
    	!function(e,t){module.exports=t();}(self,(function(){return (()=>{var e={6:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LinkComputer=t.WebLinkProvider=void 0;var i=function(){function e(e,t,i,r){void 0===r&&(r={}),this._terminal=e,this._regex=t,this._handler=i,this._options=r;}return e.prototype.provideLinks=function(e,t){var i=r.computeLink(e,this._regex,this._terminal,this._handler);t(this._addCallbacks(i));},e.prototype._addCallbacks=function(e){var t=this;return e.map((function(e){return e.leave=t._options.leave,e.hover=function(i,r){if(t._options.hover){var n=e.range;t._options.hover(i,r,n);}},e}))},e}();t.WebLinkProvider=i;var r=function(){function e(){}return e.computeLink=function(t,i,r,n){for(var o,a=new RegExp(i.source,(i.flags||"")+"g"),s=e._translateBufferLineToStringWithWrap(t-1,!1,r),d=s[0],l=s[1],c=-1,u=[];null!==(o=a.exec(d));){var h=o[1];if(!h){console.log("match found without corresponding matchIndex");break}if(c=d.indexOf(h,c+1),a.lastIndex=c+h.length,c<0)break;for(var v=c+h.length,f=l+1;v>r.cols;)v-=r.cols,f++;for(var p=c+1,_=l+1;p>r.cols;)p-=r.cols,_++;var k={start:{x:p,y:_},end:{x:v,y:f}};u.push({range:k,text:h,activate:n});}return u},e._translateBufferLineToStringWithWrap=function(e,t,i){var r,n,o="";do{if(!(s=i.buffer.active.getLine(e)))break;s.isWrapped&&e--,n=s.isWrapped;}while(n);var a=e;do{var s,d=i.buffer.active.getLine(e+1);if(r=!!d&&d.isWrapped,!(s=i.buffer.active.getLine(e)))break;o+=s.translateToString(!r&&t).substring(0,i.cols),e++;}while(r);return [o,a]},e}();t.LinkComputer=r;}},t={};function i(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,i),o.exports}var r={};return (()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.WebLinksAddon=void 0;var t=i(6),n=new RegExp("(?:^|[^\\da-z\\.-]+)((https?:\\/\\/)((([\\da-z\\.-]+)\\.([a-z\\.]{2,18}))|((\\d{1,3}\\.){3}\\d{1,3})|(localhost))(:\\d{1,5})?((\\/[\\/\\w\\.\\-%~:+@]*)*([^:\"'\\s]))?(\\?[0-9\\w\\[\\]\\(\\)\\/\\?\\!#@$%&'*+,:;~\\=\\.\\-]*)?(#[0-9\\w\\[\\]\\(\\)\\/\\?\\!#@$%&'*+,:;~\\=\\.\\-]*)?)($|[^\\/\\w\\.\\-%]+)");function o(e,t){var i=window.open();if(i){try{i.opener=null;}catch(e){}i.location.href=t;}else console.warn("Opening link blocked as opener could not be cleared");}var a=function(){function e(e,t,i){void 0===e&&(e=o),void 0===t&&(t={}),void 0===i&&(i=!1),this._handler=e,this._options=t,this._useLinkProvider=i;}return e.prototype.activate=function(e){if(this._terminal=e,this._useLinkProvider&&"registerLinkProvider"in this._terminal){var i=(r=this._options).urlRegex||n;this._linkProvider=this._terminal.registerLinkProvider(new t.WebLinkProvider(this._terminal,i,this._handler,r));}else {var r;(r=this._options).matchIndex=1,this._linkMatcherId=this._terminal.registerLinkMatcher(n,this._handler,r);}},e.prototype.dispose=function(){var e;void 0!==this._linkMatcherId&&void 0!==this._terminal&&this._terminal.deregisterLinkMatcher(this._linkMatcherId),null===(e=this._linkProvider)||void 0===e||e.dispose();},e}();e.WebLinksAddon=a;})(),r})()}));
    	
    } (xtermAddonWebLinks));

    var xtermAddonFit = {exports: {}};

    (function (module, exports) {
    	!function(e,t){module.exports=t();}(self,(function(){return (()=>{var e={775:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FitAddon=void 0;var r=function(){function e(){}return e.prototype.activate=function(e){this._terminal=e;},e.prototype.dispose=function(){},e.prototype.fit=function(){var e=this.proposeDimensions();if(e&&this._terminal){var t=this._terminal._core;this._terminal.rows===e.rows&&this._terminal.cols===e.cols||(t._renderService.clear(),this._terminal.resize(e.cols,e.rows));}},e.prototype.proposeDimensions=function(){if(this._terminal&&this._terminal.element&&this._terminal.element.parentElement){var e=this._terminal._core;if(0!==e._renderService.dimensions.actualCellWidth&&0!==e._renderService.dimensions.actualCellHeight){var t=window.getComputedStyle(this._terminal.element.parentElement),r=parseInt(t.getPropertyValue("height")),i=Math.max(0,parseInt(t.getPropertyValue("width"))),n=window.getComputedStyle(this._terminal.element),o=r-(parseInt(n.getPropertyValue("padding-top"))+parseInt(n.getPropertyValue("padding-bottom"))),a=i-(parseInt(n.getPropertyValue("padding-right"))+parseInt(n.getPropertyValue("padding-left")))-e.viewport.scrollBarWidth;return {cols:Math.max(2,Math.floor(a/e._renderService.dimensions.actualCellWidth)),rows:Math.max(1,Math.floor(o/e._renderService.dimensions.actualCellHeight))}}}},e}();t.FitAddon=r;}},t={};return function r(i){if(t[i])return t[i].exports;var n=t[i]={exports:{}};return e[i](n,n.exports,r),n.exports}(775)})()}));
    	
    } (xtermAddonFit));

    /* src/components/ScriptTerminal.svelte generated by Svelte v3.49.0 */
    const file_1 = "src/components/ScriptTerminal.svelte";

    function create_fragment$1(ctx) {
    	let div3;
    	let div0;
    	let t0;
    	let div1;
    	let span0;
    	let t1;
    	let span0_style_value;
    	let t2;
    	let span1;
    	let t3;
    	let t4;
    	let t5;
    	let div2;
    	let button0;
    	let t6;
    	let t7;
    	let button1;
    	let t8;
    	let t9;
    	let button2;
    	let t10;
    	let t11;
    	let button3;
    	let t12;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			t0 = space$3();
    			div1 = element("div");
    			span0 = element("span");
    			t1 = text(/*mode*/ ctx[0]);
    			t2 = space$3();
    			span1 = element("span");
    			t3 = text("WD: ");
    			t4 = text(/*wd*/ ctx[1]);
    			t5 = space$3();
    			div2 = element("div");
    			button0 = element("button");
    			t6 = text("EmailIt");
    			t7 = space$3();
    			button1 = element("button");
    			t8 = text("Notes");
    			t9 = space$3();
    			button2 = element("button");
    			t10 = text("Log");
    			t11 = space$3();
    			button3 = element("button");
    			t12 = text("Edit Scripts");
    			attr_dev(div0, "id", "terminal");
    			set_style(div0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(div0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div0, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(div0, "class", "svelte-1tua3so");
    			add_location(div0, file_1, 717, 2, 18857);
    			attr_dev(span0, "id", "modeIndicator");

    			attr_dev(span0, "style", span0_style_value = "background-color : " + (/*mode*/ ctx[0] === 'insert'
    			? /*$theme*/ ctx[2].Cyan
    			: /*$theme*/ ctx[2].Purple) + "; color: " + /*$theme*/ ctx[2].backgroundColor);

    			attr_dev(span0, "class", "svelte-1tua3so");
    			add_location(span0, file_1, 725, 4, 19156);
    			attr_dev(span1, "id", "workingdir");
    			attr_dev(span1, "class", "svelte-1tua3so");
    			add_location(span1, file_1, 731, 4, 19342);
    			attr_dev(div1, "id", "statusline");
    			set_style(div1, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			set_style(div1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div1, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(div1, "class", "svelte-1tua3so");
    			add_location(div1, file_1, 721, 2, 19004);
    			set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button0, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button0, "class", "svelte-1tua3so");
    			add_location(button0, file_1, 736, 4, 19428);
    			set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button1, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button1, "class", "svelte-1tua3so");
    			add_location(button1, file_1, 742, 4, 19622);
    			set_style(button2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button2, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button2, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button2, "class", "svelte-1tua3so");
    			add_location(button2, file_1, 748, 4, 19812);
    			set_style(button3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			set_style(button3, "color", /*$theme*/ ctx[2].textColor);
    			set_style(button3, "border-color", /*$theme*/ ctx[2].borderColor);
    			attr_dev(button3, "class", "svelte-1tua3so");
    			add_location(button3, file_1, 754, 4, 19998);
    			attr_dev(div2, "id", "buttonRow");
    			attr_dev(div2, "class", "svelte-1tua3so");
    			add_location(div2, file_1, 735, 2, 19403);
    			attr_dev(div3, "id", "ScriptTermDiv");
    			set_style(div3, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			set_style(div3, "font-family", /*$theme*/ ctx[2].font);
    			set_style(div3, "color", /*$theme*/ ctx[2].textColor);
    			set_style(div3, "font-size", /*$theme*/ ctx[2].fontSize);
    			attr_dev(div3, "class", "svelte-1tua3so");
    			add_location(div3, file_1, 713, 0, 18688);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, span0);
    			append_dev(span0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t6);
    			append_dev(div2, t7);
    			append_dev(div2, button1);
    			append_dev(button1, t8);
    			append_dev(div2, t9);
    			append_dev(div2, button2);
    			append_dev(button2, t10);
    			append_dev(div2, t11);
    			append_dev(div2, button3);
    			append_dev(button3, t12);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*viewEmailIt*/ ctx[3], false, false, false),
    					listen_dev(button1, "click", /*viewNotes*/ ctx[4], false, false, false),
    					listen_dev(button2, "click", /*viewLog*/ ctx[5], false, false, false),
    					listen_dev(button3, "click", /*viewScriptEditor*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$theme*/ 4) {
    				set_style(div0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div0, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*mode*/ 1) set_data_dev(t1, /*mode*/ ctx[0]);

    			if (dirty & /*mode, $theme*/ 5 && span0_style_value !== (span0_style_value = "background-color : " + (/*mode*/ ctx[0] === 'insert'
    			? /*$theme*/ ctx[2].Cyan
    			: /*$theme*/ ctx[2].Purple) + "; color: " + /*$theme*/ ctx[2].backgroundColor)) {
    				attr_dev(span0, "style", span0_style_value);
    			}

    			if (dirty & /*wd*/ 2) set_data_dev(t4, /*wd*/ ctx[1]);

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div1, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button0, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button1, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button2, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button2, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button2, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button3, "background-color", /*$theme*/ ctx[2].textAreaColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button3, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(button3, "border-color", /*$theme*/ ctx[2].borderColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div3, "background-color", /*$theme*/ ctx[2].backgroundColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div3, "font-family", /*$theme*/ ctx[2].font);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div3, "color", /*$theme*/ ctx[2].textColor);
    			}

    			if (dirty & /*$theme*/ 4) {
    				set_style(div3, "font-size", /*$theme*/ ctx[2].fontSize);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function splitAt(index, xs) {
    	return [xs.slice(0, index), xs.slice(index)];
    }

    async function runCommandLine(line, rEnv, callback, dir) {
    	//
    	// Get the environment to use. TODO: it should pull up the default environment.
    	//
    	var nEnv = {};

    	if (typeof rEnv !== "undefined") {
    		nEnv = { ...nEnv, ...rEnv };
    	}

    	//
    	// Fix the environment from a map to an array of strings.
    	//
    	var penv = [];

    	for (const key in nEnv) {
    		penv.push(`${key}=${nEnv[key]}`);
    	}

    	//
    	// Make sure dir has a value.
    	//
    	if (typeof dir === "undefined") dir = ".";

    	//
    	// Run the command line in a shell. #TODO: make the shell configurable.
    	//
    	var args = ["/bin/zsh", "-c", line];

    	var cmd = "/bin/zsh";

    	//
    	// Run the command line.
    	//
    	var result = await window.go.main.App.RunCommandLine(cmd, args, penv, dir);

    	var err = await window.go.main.App.GetError();

    	//
    	// If callback is given, call it with the results.
    	//
    	if (typeof callback !== "undefined" || callback !== null) {
    		callback(err, result);
    	}
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $state;
    	let $termscripts;
    	let $theme;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(13, $state = $$value));
    	validate_store(termscripts, 'termscripts');
    	component_subscribe($$self, termscripts, $$value => $$invalidate(14, $termscripts = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(2, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ScriptTerminal', slots, []);
    	let term = null;
    	let commands = [];
    	let curr_line = "";

    	let tCommands = {
    		cd: { command: cdCommand },
    		help: { command: helpCommand },
    		ls: { command: lsCommand },
    		open: { command: openCommand },
    		runscript: { command: runscriptCommand },
    		edit: { command: editCommand }
    	};

    	let mode = "insert";
    	let wd = "~";
    	let esc = String.fromCharCode(0x1b);
    	let lastData = { line: "", data: [], valid: false };
    	let lcommandRow = 0;
    	let lcommandCol = 0;

    	let termAtb = {
    		red: `${esc}[31m`,
    		black: `${esc}[30m`,
    		green: `${esc}[32m`,
    		orange: `${esc}[33m`,
    		blue: `${esc}[34m`,
    		magenta: `${esc}[35m`,
    		cyan: `${esc}[36m`,
    		gray: `${esc}[37m`,
    		default: `${esc}[39m`,
    		up: `${esc}[A`,
    		down: `${esc}[B`,
    		left: `${esc}[D`,
    		right: `${esc}[C`
    	};

    	let homeDir = "";

    	onMount(async () => {
    		homeDir = await window.go.main.App.GetHomeDir();
    		$$invalidate(1, wd = homeDir);

    		term = new xterm.exports.Terminal({
    				rendererType: "canvas",
    				convertEol: true,
    				cursorBlink: true,
    				cursorStyle: "bar",
    				theme: {
    					background: $theme.textAreaColor,
    					black: $theme.backgroundColor,
    					blue: $theme.Cyan,
    					brightBlack: $theme.backgroundColor,
    					brightBlue: $theme.Cyan,
    					brightCyan: $theme.Cyan,
    					brightGreen: $theme.Green,
    					brightMagenta: $theme.Pink,
    					brightRed: $theme.Red,
    					brightWhite: $theme.textColor,
    					brightYellow: $theme.Yellow,
    					cursor: $theme.textColor,
    					cursorAccent: $theme.highlightBackgroundColor,
    					cyan: $theme.Cyan,
    					foreground: $theme.textColor,
    					green: $theme.Green,
    					magenta: $theme.Pink,
    					red: $theme.Red,
    					selection: $theme.highlightBackgroundColor,
    					white: $theme.textColor,
    					yellow: $theme.Yellow
    				}
    			});

    		const webLinksAddon = new xtermAddonWebLinks.exports.WebLinksAddon();
    		const fitAddon = new xtermAddonFit.exports.FitAddon();
    		term.loadAddon(webLinksAddon);
    		term.loadAddon(fitAddon);
    		term.open(document.getElementById("terminal"));
    		fitAddon.fit();
    		term.write(" Welcome to Script Terminal!\n");

    		term.prompt = () => {
    			term.write(" $ ");
    		};

    		term.prompt();

    		term.onKey(({ key, domEvent }) => {
    			if (mode === "insert") {
    				//
    				// This is the insert mode keymappings.
    				//
    				if (domEvent.key === "Enter") {
    					//
    					// If it is an enter key, process the line
    					//
    					if (curr_line) {
    						ProcessLine(curr_line);
    					}
    				} else if (domEvent.key === "Backspace") {
    					//
    					// If it is a backspace, delete the last character form the line.
    					//
    					if (curr_line) {
    						if (curr_line.length >= 1) {
    							curr_line = curr_line.slice(0, curr_line.length - 1);
    							term.write("\b \b");
    						}
    					}
    				} else if (domEvent.key === "ArrowUp" || domEvent.key === "ArrowDown" || domEvent.key === "ArrowLeft" || domEvent.key === "ArrowRight") ; else // Only do something when in command mode.
    				//
    				if (domEvent.key === "Tab") {
    					//
    					// If it is a tab, add two spaces to the line and terminal.
    					//
    					term.write("  "); //

    					curr_line += "  ";
    				} else if (domEvent.key === "Escape") {
    					//
    					// Set toggle the mode.
    					//
    					if (mode === "insert") {
    						if (lastData.valid === true) {
    							$$invalidate(0, mode = "command");
    							lcommandRow = lastData.data.length - 1;
    							lcommandCol = 0;
    							term.write(termAtb.up);
    							term.write(termAtb.right);
    						}
    					} else {
    						$$invalidate(0, mode = "insert");
    					}
    				} else if (domEvent.key === "l" && domEvent.ctrlKey) {
    					term.clear();
    				} else {
    					//
    					// Every other key, add to the line and terminal.
    					//
    					curr_line += key;

    					term.write(key);
    				}
    			} else {
    				//
    				// This is the command mode keymappings.
    				//
    				let depth = 0;

    				switch (key) {
    					case "i":
    						depth = lastData.data.length - lcommandRow;
    						for (var i = 0; i < depth; i++) {
    							term.write(termAtb.down);
    						}
    						for (i = 0; i < lcommandCol; i++) {
    							term.write(termAtb.left);
    						}
    						term.write(termAtb.left);
    						$$invalidate(0, mode = "insert");
    						break;
    					case "k":
    						if (lcommandRow !== 0) {
    							lcommandRow -= 1;
    							term.write(termAtb.up);
    						}
    						break;
    					case "j":
    						if (lcommandRow < lastData.data.length - 1) {
    							term.write(termAtb.down);
    							lcommandRow += 1;
    						}
    						break;
    					case "l":
    						lcommandCol += 1;
    						term.write(termAtb.right);
    						break;
    					case "h":
    						if (lcommandCol !== 0) {
    							term.write(termAtb.left);
    							lcommandCol -= 1;
    						}
    						break;
    					case "r":
    						//
    						// first, go back to the command line.
    						//
    						depth = lastData.data.length - lcommandRow;
    						for (var i = 0; i < depth; i++) {
    							term.write(termAtb.down);
    						}
    						for (i = 0; i < lcommandCol; i++) {
    							term.write(termAtb.left);
    						}
    						term.write(termAtb.left);
    						$$invalidate(0, mode = "insert");
    						//
    						// Add the command to the command line.
    						//
    						term.write(`${lastData.data[lcommandRow].tcommand}\n\r`);
    						//
    						// Get the command to run and run it.
    						//
    						RunTerminalCommand(lastData.data[lcommandRow].tcommand);
    						break;
    				}
    			}
    		});

    		//
    		// Make sure the terminal is focused.
    		//
    		term.focus();
    	});

    	function ProcessLine(text) {
    		//
    		// Get the words of the line.
    		//
    		var words = text.split(" ");

    		lastData.line = text;
    		lastData.valid = false;
    		curr_line = "";

    		//
    		// See if the first word is a valid command.
    		//
    		let scrpt = $termscripts.filter(item => item.name === words[0]);

    		if (scrpt.length === 0) {
    			//
    			// Command not found. Print the error and give a new prompt.
    			//
    			term.write(`\r\n\r\n    ${termAtb.red}<Error>${termAtb.default} The command "${words[0]}" wasn't found!\r\n\r\n`);

    			term.prompt();
    		} else {
    			//
    			// Command found. Run it!
    			//
    			fetch("http://localhost:9978/api/script/run", {
    				method: "PUT",
    				headers: { "Content-type": "application/json" },
    				body: JSON.stringify({
    					script: scrpt[0].name,
    					text: words.slice(1).join(" "),
    					envVar: { SCRIPTTERMCWD: wd }
    				})
    			}).then(resp => {
    				return resp.json();
    			}).then(data => {
    				ProcessScriptReturn(data.text);
    			});
    		}
    	}

    	function ProcessScriptReturn(data) {
    		//
    		// Give the carrage return before the data.
    		//
    		term.write("\r\n");

    		//
    		// Process the JSON structure given to perform the command. The JSON structure
    		// should be:
    		//
    		//  {
    		//    tcommand: <terminal command to run>
    		//    lines: [{
    		//      text: <text to display>,
    		//      color: <color to show>,
    		//      lcommand: <command line string to run>,
    		//      tcommand: <terminal Command to run>
    		//    }, {
    		//      <next line structure>
    		//    }, ...]
    		//  }
    		//
    		data = JSON.parse(data);

    		lastData.data = data.lines;
    		lastData.valid = true;

    		//
    		// See if there is a terminal command to run.
    		//
    		if (typeof data.tcommand !== "undefined" && data.tcommand.length > 0) {
    			//
    			// We have a terminal command to run.
    			//
    			RunTerminalCommand(data.tcommand);
    		}

    		//
    		// Process each line returned.
    		//
    		data.lines.forEach(line => {
    			//
    			// Write the line text with the color change.
    			//
    			term.write(`    ${termAtb[line.color]}${line.text}${termAtb.default}\r\n`);
    		});
    	}

    	async function RunTerminalCommand(text) {
    		//
    		// Keep a list of valid commands.
    		//
    		commands.push(lastData.line);

    		//
    		// Get the command and it's arguments separated.
    		//
    		let words = text.split(" ");

    		if (words.length > 0) {
    			await tCommands[words[0]].command(words.slice(1).join(" "));
    		}

    		term.prompt();
    	}

    	async function cdCommand(text) {
    		//
    		// Remove inclosing quotes
    		//
    		if (text[0] === '"' || text[0] === "'") {
    			text = text.slice(1, text.length - 1);
    		}

    		if (text.length > 0) {
    			let path = new String(text);

    			if (text[0] !== "/") {
    				let ndir = new String(text);
    				let nwd = new String(wd);
    				path = await window.go.main.App.AppendPath(nwd, ndir);
    			}

    			let exists = await window.go.main.App.DirExists(path);

    			if (exists) {
    				$$invalidate(1, wd = path);
    			} else {
    				term.write(`    <Error> The path "${path} doesn't exist!\n\n`);
    			}
    		}

    		lastData.valid = false;
    	}

    	async function helpCommand(text) {
    		text = text.trim().split(" ")[0];

    		if (text.length === 0) {
    			//
    			// show the commands available.
    			//
    			$termscripts.forEach(item => {
    				//
    				// Make sure the description lines are not too long.
    				//
    				var description = [item.description];

    				let index = 80;
    				let subin = 0;

    				while (description[subin].length > index) {
    					while (description[subin][index] !== " ") index--;
    					let nsub = splitAt(index, description[subin]);

    					if (subin === 0) {
    						description = nsub;
    					} else {
    						description = description.slice(0, subin).concat(nsub);
    					}

    					subin++;
    					index = 80;
    				}

    				if (subin === 0) {
    					description = description[0];
    				} else {
    					description = description.join("\n\r          ");
    				}

    				term.write(`    ${item.name}   ${description}\n\r`);
    			});
    		} else {
    			//
    			// show the help string for the command.
    			//
    			let spt = $termscripts.find(item => item.name === text);

    			if (spt === "undefined") {
    				term.write(`\n\r    ${termAtb.red}<Error>${termAtb.default} ${text} is an invalid Command.\n\r`);
    			} else {
    				term.write(`    ${spt.name}  -  ${spt.help}\n\r`);
    			}
    		}

    		lastData.valid = false;
    	}

    	async function lsCommand(text) {
    		if (text[0] === '"' || text[0] === "'") {
    			text = text.slice(1, text.length - 1);
    		}

    		text = new String(text.trim());
    		var path = new String(wd);

    		if (text !== "") {
    			if (text[0] === "/") {
    				path = text;
    			} else {
    				path = await window.go.main.App.AppendPath(path, text);
    			}
    		}

    		var dirReal = await window.go.main.App.DirExists(path);

    		if (dirReal) {
    			var result = await window.go.main.App.ReadDir(path);
    			var lines = [];

    			for (let i = 0; i < result.length; i++) {
    				//
    				// Rewrite lastData.lines to have a tcommand for each entry printed.
    				//
    				let item = result[i];

    				let npath = await window.go.main.App.AppendPath(item.Dir, item.Name);
    				dirReal = await window.go.main.App.DirExists(npath);

    				if (dirReal) {
    					lines.push({
    						name: item.Name,
    						tcommand: `cd '${npath}'`
    					});
    				} else {
    					lines.push({
    						name: item.Name,
    						tcommand: `open '${npath}'`
    					});
    				}

    				//
    				// Print the item name.
    				//
    				term.write(`    ${item.Name}\n\r`);
    			}

    			lastData.data = lines;
    			lastData.valid = true;
    		} else {
    			let fileReal = await window.go.main.App.FileExists(path);

    			if (fileReal) {
    				term.write(`    ${text}\n\r`);
    				lastData.data = [{ name: text, tcommand: `ls '${path}'` }];
    			} else {
    				term.write(`\n\r    ${termAtb.red}<Error>${termAtb.default} ${path} is an invalid Directory.\n\r`);
    			}
    		}
    	}

    	async function openCommand(text) {
    		//
    		// Fix up the file path given to the open command.
    		//
    		if (text[0] === '"' || text[0] === "'") {
    			text = text.slice(1, text.length - 1);
    		}

    		if (text[0] !== "/") {
    			text = await window.go.main.App.AppendPath(wd, text);
    		}

    		text = new String(text.trim());

    		//
    		// Run the open command on the file.
    		//
    		await window.go.main.App.RunCommandLine("/usr/bin/open", ["-t", text], [], "");
    	}

    	async function runscriptCommand(text) {
    		//
    		// Run a script on a file or text. Make sure enough arguments were given. It requires two arguments separated by a comma:
    		// the script name and the file name or text to be processed.
    		//
    		lastData.valid = false;

    		var scriptName = text.split(",");

    		if (scriptName.length < 2) {
    			term.write(`\n\r    ${termAtb.red}<Error>${termAtb.default} runscript wasn't given enough arguments.\n\r`);
    		} else {
    			//
    			// Get the script name and file name or text separated.
    			//
    			text = scriptName.splice(1).join(",").trim();

    			scriptName = scriptName[0].trim();

    			//
    			// Fix up the file path given to the open command.
    			//
    			var isText = false;

    			if (text[0] === '"' || text[0] === "'") {
    				text = text.slice(1, text.length - 1);
    				isText = true;
    			}

    			if (text[0] !== "/" && !isText) {
    				text = await window.go.main.App.AppendPath(wd, text);
    				isText = false;
    			}

    			text = new String(text.trim());

    			//
    			// Process the text based on what it is.
    			//
    			if (isText) {
    				//
    				// Send the text to run the script on.
    				//
    				await fetch("http://localhost:9978/api/script/run", {
    					method: "PUT",
    					headers: { "Content-type": "application/json" },
    					body: JSON.stringify({ script: scriptName, text })
    				}).then(resp => {
    					return resp.json();
    				}).then(data => {
    					term.write(`\n\r     ${data.text}\n\r`);
    				});
    			} else {
    				//
    				// It is a file to run the script on.
    				//
    				await fetch("http://localhost:9978/api/script/run", {
    					method: "PUT",
    					headers: { "Content-type": "application/json" },
    					body: JSON.stringify({ script: scriptName, text: "", file: text })
    				}).then(resp => {
    					return resp.json();
    				}).then(data => {
    					term.write(`\n\r     ${data.text}\n\r`);
    				});
    			}
    		}
    	}

    	async function editCommand(text) {
    		//
    		// fix the file name.
    		//
    		if (text[0] === '"' || text[0] === "'") {
    			text = text.slice(1, text.length - 1);
    		}

    		if (text[0] !== "/") {
    			text = await window.go.main.App.AppendPath(wd, text);
    		}

    		text = new String(text.trim());

    		//
    		// Setup the user editor data file.
    		//
    		const hdir = await window.go.main.App.GetHomeDir();

    		let userEditor = await window.go.main.App.AppendPath(hdir, ".myeditorchoice");

    		if (!await window.go.main.App.FileExists(userEditor)) {
    			//
    			// They don't have this file setup. Open in the system's default editor.  TODO: Not usable on non-macOS systems.
    			//
    			await runCommandLine(
    				`/usr/bin/open '${text}'`,
    				[],
    				(err, stdout) => {
    					
    				},
    				wd
    			);
    		} else {
    			//
    			// Get the user editor.
    			//
    			var editor = await window.go.main.App.ReadFile(userEditor);

    			editor = editor.toString().trim();

    			if (editor.endsWith(".app")) {
    				//
    				// Open the file with a program. TODO: Not usable on non-macOS systems.
    				//
    				await runCommandLine(
    					`/usr/bin/open -a ${editor} '${text}'`,
    					[],
    					(err, stdout) => {
    						
    					},
    					wd
    				);
    			} else {
    				//
    				// It is a command line editor. Open specially.
    				//
    				if (editor === "emacs") {
    					//
    					// Open emacs.
    					//
    					await runCommandLine(
    						'emacsclient -n -q "' + file + '"',
    						[],
    						(err, result) => {
    							
    						},
    						wd
    					);
    				}
    			}
    		}
    	}

    	function viewEmailIt() {
    		set_store_value(state, $state = "emailit", $state);
    	}

    	function viewNotes() {
    		set_store_value(state, $state = "notes", $state);
    	}

    	function viewLog() {
    		set_store_value(state, $state = "viewlog", $state);
    	}

    	function viewScriptEditor() {
    		set_store_value(state, $state = "scripts", $state);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScriptTerminal> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		Terminal: xterm.exports.Terminal,
    		WebLinksAddon: xtermAddonWebLinks.exports.WebLinksAddon,
    		FitAddon: xtermAddonFit.exports.FitAddon,
    		theme,
    		state,
    		termscripts,
    		term,
    		commands,
    		curr_line,
    		tCommands,
    		mode,
    		wd,
    		esc,
    		lastData,
    		lcommandRow,
    		lcommandCol,
    		termAtb,
    		homeDir,
    		splitAt,
    		ProcessLine,
    		ProcessScriptReturn,
    		RunTerminalCommand,
    		cdCommand,
    		helpCommand,
    		lsCommand,
    		openCommand,
    		runscriptCommand,
    		editCommand,
    		runCommandLine,
    		viewEmailIt,
    		viewNotes,
    		viewLog,
    		viewScriptEditor,
    		$state,
    		$termscripts,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('term' in $$props) term = $$props.term;
    		if ('commands' in $$props) commands = $$props.commands;
    		if ('curr_line' in $$props) curr_line = $$props.curr_line;
    		if ('tCommands' in $$props) tCommands = $$props.tCommands;
    		if ('mode' in $$props) $$invalidate(0, mode = $$props.mode);
    		if ('wd' in $$props) $$invalidate(1, wd = $$props.wd);
    		if ('esc' in $$props) esc = $$props.esc;
    		if ('lastData' in $$props) lastData = $$props.lastData;
    		if ('lcommandRow' in $$props) lcommandRow = $$props.lcommandRow;
    		if ('lcommandCol' in $$props) lcommandCol = $$props.lcommandCol;
    		if ('termAtb' in $$props) termAtb = $$props.termAtb;
    		if ('homeDir' in $$props) homeDir = $$props.homeDir;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [mode, wd, $theme, viewEmailIt, viewNotes, viewLog, viewScriptEditor];
    }

    class ScriptTerminal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ScriptTerminal",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/Main.svelte generated by Svelte v3.49.0 */
    const file$1 = "src/Main.svelte";

    // (160:0) {:else}
    function create_else_block(ctx) {
    	let div;
    	let h1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			h1.textContent = "Something went wront!";
    			add_location(h1, file$1, 161, 4, 4009);
    			add_location(div, file$1, 160, 2, 3999);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(160:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (158:34) 
    function create_if_block_6(ctx) {
    	let scriptterminal;
    	let current;
    	scriptterminal = new ScriptTerminal({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(scriptterminal.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(scriptterminal, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(scriptterminal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(scriptterminal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(scriptterminal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(158:34) ",
    		ctx
    	});

    	return block;
    }

    // (156:35) 
    function create_if_block_5(ctx) {
    	let preferences;
    	let current;
    	preferences = new Preferences({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(preferences.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(preferences, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(preferences.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(preferences.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(preferences, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(156:35) ",
    		ctx
    	});

    	return block;
    }

    // (154:33) 
    function create_if_block_4(ctx) {
    	let templateseditor;
    	let current;
    	templateseditor = new TemplatesEditor({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(templateseditor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(templateseditor, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(templateseditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(templateseditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(templateseditor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(154:33) ",
    		ctx
    	});

    	return block;
    }

    // (152:31) 
    function create_if_block_3(ctx) {
    	let scriptseditor;
    	let current;
    	scriptseditor = new ScriptsEditor({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(scriptseditor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(scriptseditor, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(scriptseditor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(scriptseditor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(scriptseditor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(152:31) ",
    		ctx
    	});

    	return block;
    }

    // (150:29) 
    function create_if_block_2(ctx) {
    	let notes;
    	let current;
    	notes = new Notes({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(notes.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(notes, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(notes.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(notes.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(notes, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(150:29) ",
    		ctx
    	});

    	return block;
    }

    // (148:31) 
    function create_if_block_1(ctx) {
    	let viewlog;
    	let current;
    	viewlog = new ViewLog({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(viewlog.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(viewlog, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(viewlog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(viewlog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(viewlog, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(148:31) ",
    		ctx
    	});

    	return block;
    }

    // (146:0) {#if $state === "emailit"}
    function create_if_block(ctx) {
    	let emailit;
    	let current;
    	emailit = new EmailIt({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(emailit.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(emailit, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(emailit.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(emailit.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(emailit, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(146:0) {#if $state === \\\"emailit\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let scriptmenu;
    	let t2;
    	let templatemenu;
    	let current;
    	let mounted;
    	let dispose;

    	const if_block_creators = [
    		create_if_block,
    		create_if_block_1,
    		create_if_block_2,
    		create_if_block_3,
    		create_if_block_4,
    		create_if_block_5,
    		create_if_block_6,
    		create_else_block
    	];

    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$state*/ ctx[0] === "emailit") return 0;
    		if (/*$state*/ ctx[0] === "viewlog") return 1;
    		if (/*$state*/ ctx[0] === "notes") return 2;
    		if (/*$state*/ ctx[0] === "scripts") return 3;
    		if (/*$state*/ ctx[0] === "templates") return 4;
    		if (/*$state*/ ctx[0] === "preferences") return 5;
    		if (/*$state*/ ctx[0] === "scriptterm") return 6;
    		return 7;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	scriptmenu = new ScriptMenu({ $$inline: true });
    	templatemenu = new TemplateMenu({ $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space$3();
    			if_block.c();
    			t1 = space$3();
    			create_component(scriptmenu.$$.fragment);
    			t2 = space$3();
    			create_component(templatemenu.$$.fragment);
    			attr_dev(div, "id", "dragbar");
    			attr_dev(div, "data-wails-drag", "");
    			attr_dev(div, "class", "svelte-wpwr83");
    			add_location(div, file$1, 143, 0, 3604);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(scriptmenu, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(templatemenu, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "keydown", /*keyDownProcessor*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(t1.parentNode, t1);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(scriptmenu.$$.fragment, local);
    			transition_in(templatemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(scriptmenu.$$.fragment, local);
    			transition_out(templatemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(scriptmenu, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(templatemenu, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $state;
    	let $showTemplates;
    	let $showScripts;
    	let $templates;
    	let $termscripts;
    	let $scripts;
    	let $theme;
    	validate_store(state, 'state');
    	component_subscribe($$self, state, $$value => $$invalidate(0, $state = $$value));
    	validate_store(showTemplates, 'showTemplates');
    	component_subscribe($$self, showTemplates, $$value => $$invalidate(3, $showTemplates = $$value));
    	validate_store(showScripts, 'showScripts');
    	component_subscribe($$self, showScripts, $$value => $$invalidate(4, $showScripts = $$value));
    	validate_store(templates, 'templates');
    	component_subscribe($$self, templates, $$value => $$invalidate(5, $templates = $$value));
    	validate_store(termscripts, 'termscripts');
    	component_subscribe($$self, termscripts, $$value => $$invalidate(6, $termscripts = $$value));
    	validate_store(scripts, 'scripts');
    	component_subscribe($$self, scripts, $$value => $$invalidate(7, $scripts = $$value));
    	validate_store(theme, 'theme');
    	component_subscribe($$self, theme, $$value => $$invalidate(8, $theme = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Main', slots, []);
    	let starting = true;

    	onMount(() => {
    		getScriptsList();
    		getTermScriptsList();
    		getTemplatesList();
    		getTheme();
    	});

    	afterUpdate(() => {
    		if (starting) {
    			starting = false;
    		}
    	});

    	function getTheme() {
    		fetch("http://localhost:9978/api/theme", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(theme, $theme = data.theme, $theme);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function getScriptsList() {
    		fetch("http://localhost:9978/api/scripts/list", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(scripts, $scripts = data.data, $scripts);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function getTermScriptsList() {
    		fetch("http://localhost:9978/api/scripts/term/list", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(termscripts, $termscripts = data.data, $termscripts);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function getTemplatesList() {
    		fetch("http://localhost:9978/api/template/list", {
    			method: "GET",
    			headers: { "Content-type": "application/json" }
    		}).then(resp => {
    			return resp.json();
    		}).then(data => {
    			set_store_value(templates, $templates = data.templates, $templates);
    			if (typeof callback !== "undefined") callback();
    		});
    	}

    	function keyDownProcessor(e) {
    		if (e.metaKey && e.key === ",") {
    			e.preventDefault();
    			set_store_value(state, $state = "preferences", $state);
    		} else if (e.ctrlKey) {
    			switch (e.key) {
    				case "e":
    					set_store_value(state, $state = "emailit", $state);
    					e.preventDefault();
    					break;
    				case "v":
    					set_store_value(state, $state = "viewlog", $state);
    					e.preventDefault();
    					break;
    				case "n":
    					set_store_value(state, $state = "notes", $state);
    					e.preventDefault();
    					break;
    				case "m":
    					set_store_value(showScripts, $showScripts = !$showScripts, $showScripts);
    					e.preventDefault();
    					break;
    				case "t":
    					set_store_value(showTemplates, $showTemplates = !$showTemplates, $showTemplates);
    					e.preventDefault();
    					break;
    				case "l":
    					set_store_value(state, $state = "scriptterm", $state);
    					e.preventDefault();
    					break;
    				case "p":
    					set_store_value(state, $state = "preferences", $state);
    					e.preventDefault();
    			}
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		afterUpdate,
    		EmailIt,
    		ViewLog,
    		Notes,
    		ScriptMenu,
    		TemplateMenu,
    		ScriptsEditor,
    		TemplatesEditor,
    		Preferences,
    		ScriptTerminal,
    		state,
    		scripts,
    		termscripts,
    		showScripts,
    		templates,
    		showTemplates,
    		theme,
    		starting,
    		getTheme,
    		getScriptsList,
    		getTermScriptsList,
    		getTemplatesList,
    		keyDownProcessor,
    		$state,
    		$showTemplates,
    		$showScripts,
    		$templates,
    		$termscripts,
    		$scripts,
    		$theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('starting' in $$props) starting = $$props.starting;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$state, keyDownProcessor];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const main = new Main({
    	target: document.body,
    	props: {
    	}
    });

    return main;

})();
//# sourceMappingURL=bundle.js.map
